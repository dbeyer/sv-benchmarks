extern void __VERIFIER_error() __attribute__ ((__noreturn__));

/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

typedef signed char __s8;
typedef unsigned char __u8;
typedef short __s16;
typedef unsigned short __u16;
typedef int __s32;
typedef unsigned int __u32;
typedef long long __s64;
typedef unsigned long long __u64;
typedef signed char s8;
typedef unsigned char u8;
typedef short s16;
typedef unsigned short u16;
typedef int s32;
typedef unsigned int u32;
typedef long long s64;
typedef unsigned long long u64;
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;
typedef int __kernel_pid_t;
typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_time_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef __u32 __kernel_dev_t;
typedef __kernel_dev_t dev_t;
typedef unsigned short umode_t;
typedef __kernel_pid_t pid_t;
typedef __kernel_clockid_t clockid_t;
typedef _Bool bool;
typedef __kernel_uid32_t uid_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_loff_t loff_t;
typedef __kernel_size_t size_t;
typedef __kernel_ssize_t ssize_t;
typedef __kernel_time_t time_t;
typedef __s32 int32_t;
typedef __u32 uint32_t;
typedef unsigned long sector_t;
typedef unsigned long blkcnt_t;
typedef unsigned int gfp_t;
typedef unsigned int fmode_t;
typedef unsigned int oom_flags_t;
typedef u64 phys_addr_t;
typedef phys_addr_t resource_size_t;
struct __anonstruct_atomic_t_6 {
   int counter ;
};
typedef struct __anonstruct_atomic_t_6 atomic_t;
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
struct hlist_node;
struct hlist_head {
   struct hlist_node *first ;
};
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head * ) ;
};
struct module;
typedef void (*ctor_fn_t)(void);
struct file_operations;
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   unsigned int lineno : 18 ;
   unsigned char flags ;
};
struct device;
struct completion;
struct pt_regs;
struct pid;
typedef u16 __ticket_t;
typedef u32 __ticketpair_t;
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
union __anonunion_ldv_2024_8 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
struct arch_spinlock {
   union __anonunion_ldv_2024_8 ldv_2024 ;
};
typedef struct arch_spinlock arch_spinlock_t;
struct __anonstruct_ldv_2031_10 {
   u32 read ;
   s32 write ;
};
union __anonunion_arch_rwlock_t_9 {
   s64 lock ;
   struct __anonstruct_ldv_2031_10 ldv_2031 ;
};
typedef union __anonunion_arch_rwlock_t_9 arch_rwlock_t;
struct task_struct;
struct lockdep_map;
struct mm_struct;
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
struct __anonstruct_ldv_2096_12 {
   unsigned int a ;
   unsigned int b ;
};
struct __anonstruct_ldv_2111_13 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
union __anonunion_ldv_2112_11 {
   struct __anonstruct_ldv_2096_12 ldv_2096 ;
   struct __anonstruct_ldv_2111_13 ldv_2111 ;
};
struct desc_struct {
   union __anonunion_ldv_2112_11 ldv_2112 ;
};
struct gate_struct64 {
   u16 offset_low ;
   u16 segment ;
   unsigned char ist : 3 ;
   unsigned char zero0 : 5 ;
   unsigned char type : 5 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   u16 offset_middle ;
   u32 offset_high ;
   u32 zero1 ;
};
typedef struct gate_struct64 gate_desc;
struct desc_ptr {
   unsigned short size ;
   unsigned long address ;
};
typedef unsigned long pgdval_t;
typedef unsigned long pgprotval_t;
struct pgprot {
   pgprotval_t pgprot ;
};
typedef struct pgprot pgprot_t;
struct __anonstruct_pgd_t_15 {
   pgdval_t pgd ;
};
typedef struct __anonstruct_pgd_t_15 pgd_t;
struct page;
typedef struct page *pgtable_t;
struct file;
struct seq_file;
struct thread_struct;
struct tss_struct;
struct cpumask;
struct pv_cpu_ops {
   unsigned long (*get_debugreg)(int  ) ;
   void (*set_debugreg)(int  , unsigned long  ) ;
   void (*clts)(void) ;
   unsigned long (*read_cr0)(void) ;
   void (*write_cr0)(unsigned long  ) ;
   unsigned long (*read_cr4_safe)(void) ;
   unsigned long (*read_cr4)(void) ;
   void (*write_cr4)(unsigned long  ) ;
   unsigned long (*read_cr8)(void) ;
   void (*write_cr8)(unsigned long  ) ;
   void (*load_tr_desc)(void) ;
   void (*load_gdt)(struct desc_ptr  const  * ) ;
   void (*load_idt)(struct desc_ptr  const  * ) ;
   void (*store_gdt)(struct desc_ptr * ) ;
   void (*store_idt)(struct desc_ptr * ) ;
   void (*set_ldt)(void const   * , unsigned int  ) ;
   unsigned long (*store_tr)(void) ;
   void (*load_tls)(struct thread_struct * , unsigned int  ) ;
   void (*load_gs_index)(unsigned int  ) ;
   void (*write_ldt_entry)(struct desc_struct * , int  , void const   * ) ;
   void (*write_gdt_entry)(struct desc_struct * , int  , void const   * , int  ) ;
   void (*write_idt_entry)(gate_desc * , int  , gate_desc const   * ) ;
   void (*alloc_ldt)(struct desc_struct * , unsigned int  ) ;
   void (*free_ldt)(struct desc_struct * , unsigned int  ) ;
   void (*load_sp0)(struct tss_struct * , struct thread_struct * ) ;
   void (*set_iopl_mask)(unsigned int  ) ;
   void (*wbinvd)(void) ;
   void (*io_delay)(void) ;
   void (*cpuid)(unsigned int * , unsigned int * , unsigned int * , unsigned int * ) ;
   u64 (*read_msr)(unsigned int  , int * ) ;
   int (*write_msr)(unsigned int  , unsigned int  , unsigned int  ) ;
   u64 (*read_tsc)(void) ;
   u64 (*read_pmc)(int  ) ;
   unsigned long long (*read_tscp)(unsigned int * ) ;
   void (*irq_enable_sysexit)(void) ;
   void (*usergs_sysret64)(void) ;
   void (*usergs_sysret32)(void) ;
   void (*iret)(void) ;
   void (*swapgs)(void) ;
   void (*start_context_switch)(struct task_struct * ) ;
   void (*end_context_switch)(struct task_struct * ) ;
};
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
union __anonunion_ldv_2767_18 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_2767_18 ldv_2767 ;
};
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
struct cpumask {
   unsigned long bits[64U] ;
};
typedef struct cpumask cpumask_t;
typedef struct cpumask *cpumask_var_t;
struct static_key;
struct x86_hw_tss {
   u32 reserved1 ;
   u64 sp0 ;
   u64 sp1 ;
   u64 sp2 ;
   u64 reserved2 ;
   u64 ist[7U] ;
   u32 reserved3 ;
   u32 reserved4 ;
   u16 reserved5 ;
   u16 io_bitmap_base ;
};
struct tss_struct {
   struct x86_hw_tss x86_tss ;
   unsigned long io_bitmap[1025U] ;
   unsigned long stack[64U] ;
};
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
struct __anonstruct_ldv_5125_23 {
   u64 rip ;
   u64 rdp ;
};
struct __anonstruct_ldv_5131_24 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
union __anonunion_ldv_5132_22 {
   struct __anonstruct_ldv_5125_23 ldv_5125 ;
   struct __anonstruct_ldv_5131_24 ldv_5131 ;
};
union __anonunion_ldv_5141_25 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_5132_22 ldv_5132 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_5141_25 ldv_5141 ;
};
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
struct fpu {
   unsigned int last_cpu ;
   unsigned int has_fpu ;
   union thread_xstate *state ;
};
struct kmem_cache;
struct perf_event;
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
typedef atomic64_t atomic_long_t;
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
typedef struct raw_spinlock raw_spinlock_t;
struct __anonstruct_ldv_5960_29 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
union __anonunion_ldv_5961_28 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5960_29 ldv_5960 ;
};
struct spinlock {
   union __anonunion_ldv_5961_28 ldv_5961 ;
};
typedef struct spinlock spinlock_t;
struct __anonstruct_rwlock_t_30 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
typedef struct __anonstruct_rwlock_t_30 rwlock_t;
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
struct timespec;
struct seqcount {
   unsigned int sequence ;
};
typedef struct seqcount seqcount_t;
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
struct user_namespace;
typedef uid_t kuid_t;
typedef gid_t kgid_t;
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
typedef struct __wait_queue_head wait_queue_head_t;
struct __anonstruct_nodemask_t_36 {
   unsigned long bits[16U] ;
};
typedef struct __anonstruct_nodemask_t_36 nodemask_t;
struct rw_semaphore;
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
union ktime {
   s64 tv64 ;
};
typedef union ktime ktime_t;
struct tvec_base;
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
struct hrtimer;
enum hrtimer_restart;
struct work_struct;
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   int cpu ;
};
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const   *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
struct pm_message {
   int event ;
};
typedef struct pm_message pm_message_t;
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_late)(struct device * ) ;
   int (*resume_early)(struct device * ) ;
   int (*freeze_late)(struct device * ) ;
   int (*thaw_early)(struct device * ) ;
   int (*poweroff_late)(struct device * ) ;
   int (*restore_early)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
struct wakeup_source;
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
};
struct dev_pm_qos;
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   bool is_prepared ;
   bool is_suspended ;
   bool ignore_children ;
   bool early_init ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path ;
   bool syscore ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char irq_safe : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   struct dev_pm_qos *qos ;
};
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
struct __anonstruct_mm_context_t_101 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
typedef struct __anonstruct_mm_context_t_101 mm_context_t;
struct vm_area_struct;
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
struct rb_root {
   struct rb_node *rb_node ;
};
struct nsproxy;
struct cred;
typedef __u64 Elf64_Addr;
typedef __u16 Elf64_Half;
typedef __u32 Elf64_Word;
typedef __u64 Elf64_Xword;
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
typedef struct elf64_sym Elf64_Sym;
struct sock;
struct kobject;
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
struct attribute {
   char const   *name ;
   umode_t mode ;
   bool ignore_lockdep ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct kobject * , struct attribute  const  * ) ;
};
struct sysfs_dirent;
struct kref {
   atomic_t refcount ;
};
struct kset;
struct kobj_type;
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
struct kernel_param;
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
struct kparam_string;
struct kparam_array;
union __anonunion_ldv_13962_134 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   s16 level ;
   union __anonunion_ldv_13962_134 ldv_13962 ;
};
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
struct static_key {
   atomic_t enabled ;
};
struct tracepoint;
struct tracepoint_func {
   void *func ;
   void *data ;
};
struct tracepoint {
   char const   *name ;
   struct static_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
struct mod_arch_specific {

};
struct module_param_attrs;
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
struct exception_table_entry;
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
struct module_sect_attrs;
struct module_notes_attrs;
struct ftrace_event_call;
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const  *tracepoints_ptrs ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
struct mem_cgroup;
struct __anonstruct_ldv_14480_136 {
   struct mem_cgroup *memcg ;
   struct list_head list ;
   struct kmem_cache *root_cache ;
   bool dead ;
   atomic_t nr_pages ;
   struct work_struct destroy ;
};
union __anonunion_ldv_14481_135 {
   struct kmem_cache *memcg_caches[0U] ;
   struct __anonstruct_ldv_14480_136 ldv_14480 ;
};
struct memcg_cache_params {
   bool is_root_cache ;
   union __anonunion_ldv_14481_135 ldv_14481 ;
};
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   unsigned int stat[26U] ;
};
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
struct kmem_cache_order_objects {
   unsigned long x ;
};
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int object_size ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   struct memcg_cache_params *memcg_params ;
   int max_attr_size ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
struct klist_node;
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
struct dma_map_ops;
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
struct pdev_archdata {

};
struct device_private;
struct device_driver;
struct driver_private;
struct class;
struct subsys_private;
struct bus_type;
struct device_node;
struct iommu_ops;
struct iommu_group;
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
struct device_attribute;
struct driver_attribute;
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
};
struct device_type;
struct of_device_id;
struct acpi_device_id;
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   struct acpi_device_id  const  *acpi_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
struct class_attribute;
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct class * , struct class_attribute  const  * ) ;
};
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
struct acpi_dev_node {
   void *handle ;
};
struct dma_coherent_mem;
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct acpi_dev_node acpi_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
   struct iommu_group *iommu_group ;
};
struct wakeup_source {
   char const   *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool active ;
   bool autosleep_enabled ;
};
typedef unsigned long kernel_ulong_t;
struct acpi_device_id {
   __u8 id[16U] ;
   kernel_ulong_t driver_data ;
};
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const   *data ;
};
struct platform_device_id {
   char name[20U] ;
   kernel_ulong_t driver_data ;
};
struct mfd_cell;
struct platform_device {
   char const   *name ;
   int id ;
   bool id_auto ;
   struct device dev ;
   u32 num_resources ;
   struct resource *resource ;
   struct platform_device_id  const  *id_entry ;
   struct mfd_cell *mfd_cell ;
   struct pdev_archdata archdata ;
};
struct platform_driver {
   int (*probe)(struct platform_device * ) ;
   int (*remove)(struct platform_device * ) ;
   void (*shutdown)(struct platform_device * ) ;
   int (*suspend)(struct platform_device * , pm_message_t  ) ;
   int (*resume)(struct platform_device * ) ;
   struct device_driver driver ;
   struct platform_device_id  const  *id_table ;
};
struct sensor_device_attribute {
   struct device_attribute dev_attr ;
   int index ;
};
struct sensor_device_attribute_2 {
   struct device_attribute dev_attr ;
   u8 index ;
   u8 nr ;
};
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
typedef struct kernel_cap_struct kernel_cap_t;
struct inode;
struct dentry;
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
} ;
struct uprobe;
struct uprobe_task {
   enum uprobe_task_state state ;
   struct arch_uprobe_task autask ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   unsigned long vaddr ;
};
struct xol_area {
   wait_queue_head_t wq ;
   atomic_t slot_count ;
   unsigned long *bitmap ;
   struct page *page ;
   unsigned long vaddr ;
};
struct uprobes_state {
   struct xol_area *xol_area ;
};
struct address_space;
union __anonunion_ldv_16286_140 {
   unsigned long index ;
   void *freelist ;
   bool pfmemalloc ;
};
struct __anonstruct_ldv_16296_144 {
   unsigned short inuse ;
   unsigned short objects : 15 ;
   unsigned char frozen : 1 ;
};
union __anonunion_ldv_16298_143 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_16296_144 ldv_16296 ;
   int units ;
};
struct __anonstruct_ldv_16300_142 {
   union __anonunion_ldv_16298_143 ldv_16298 ;
   atomic_t _count ;
};
union __anonunion_ldv_16301_141 {
   unsigned long counters ;
   struct __anonstruct_ldv_16300_142 ldv_16300 ;
};
struct __anonstruct_ldv_16302_139 {
   union __anonunion_ldv_16286_140 ldv_16286 ;
   union __anonunion_ldv_16301_141 ldv_16301 ;
};
struct __anonstruct_ldv_16309_146 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
struct slab;
union __anonunion_ldv_16313_145 {
   struct list_head lru ;
   struct __anonstruct_ldv_16309_146 ldv_16309 ;
   struct list_head list ;
   struct slab *slab_page ;
};
union __anonunion_ldv_16318_147 {
   unsigned long private ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};
struct page {
   unsigned long flags ;
   struct address_space *mapping ;
   struct __anonstruct_ldv_16302_139 ldv_16302 ;
   union __anonunion_ldv_16313_145 ldv_16313 ;
   union __anonunion_ldv_16318_147 ldv_16318 ;
   unsigned long debug_flags ;
   int _last_nid ;
};
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
struct __anonstruct_linear_149 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
union __anonunion_shared_148 {
   struct __anonstruct_linear_149 linear ;
   struct list_head nonlinear ;
};
struct anon_vma;
struct vm_operations_struct;
struct mempolicy;
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   union __anonunion_shared_148 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
struct linux_binfmt;
struct mmu_notifier_mm;
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_next_reset ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   int first_nid ;
   struct uprobes_state uprobes_state ;
};
typedef unsigned long cputime_t;
struct sem_undo_list;
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
struct __anonstruct_sigset_t_150 {
   unsigned long sig[1U] ;
};
typedef struct __anonstruct_sigset_t_150 sigset_t;
struct siginfo;
typedef void __signalfn_t(int  );
typedef __signalfn_t *__sighandler_t;
typedef void __restorefn_t(void);
typedef __restorefn_t *__sigrestore_t;
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
struct k_sigaction {
   struct sigaction sa ;
};
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
typedef union sigval sigval_t;
struct __anonstruct__kill_152 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
struct __anonstruct__timer_153 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
struct __anonstruct__rt_154 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
struct __anonstruct__sigchld_155 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
struct __anonstruct__sigfault_156 {
   void *_addr ;
   short _addr_lsb ;
};
struct __anonstruct__sigpoll_157 {
   long _band ;
   int _fd ;
};
struct __anonstruct__sigsys_158 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
union __anonunion__sifields_151 {
   int _pad[28U] ;
   struct __anonstruct__kill_152 _kill ;
   struct __anonstruct__timer_153 _timer ;
   struct __anonstruct__rt_154 _rt ;
   struct __anonstruct__sigchld_155 _sigchld ;
   struct __anonstruct__sigfault_156 _sigfault ;
   struct __anonstruct__sigpoll_157 _sigpoll ;
   struct __anonstruct__sigsys_158 _sigsys ;
};
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_151 _sifields ;
};
typedef struct siginfo siginfo_t;
struct user_struct;
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
struct pid_namespace;
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
struct seccomp_filter;
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
struct plist_head {
   struct list_head node_list ;
};
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
struct rt_mutex_waiter;
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
struct hrtimer_clock_base;
struct hrtimer_cpu_base;
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int active_bases ;
   unsigned int clock_was_set ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[3U] ;
};
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
typedef int32_t key_serial_t;
typedef uint32_t key_perm_t;
struct key;
struct signal_struct;
struct key_type;
struct keyring_list;
union __anonunion_ldv_17578_161 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
struct key_user;
union __anonunion_ldv_17587_162 {
   time_t expiry ;
   time_t revoked_at ;
};
union __anonunion_type_data_163 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
union __anonunion_payload_164 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_ldv_17578_161 ldv_17578 ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_17587_162 ldv_17587 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_163 type_data ;
   union __anonunion_payload_164 payload ;
};
struct audit_context;
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};
struct thread_group_cred;
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};
struct llist_node;
struct llist_node {
   struct llist_node *next ;
};
struct futex_pi_state;
struct robust_list_head;
struct bio_list;
struct fs_struct;
struct perf_event_context;
struct blk_plug;
struct cfs_rq;
struct task_group;
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
struct kioctx;
union __anonunion_ki_obj_165 {
   void *user ;
   struct task_struct *tsk ;
};
struct eventfd_ctx;
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_165 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct list_head ki_batch ;
   struct eventfd_ctx *ki_eventfd ;
};
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct callback_head callback_head ;
};
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
struct autogroup;
struct tty_struct;
struct taskstats;
struct tty_audit_buf;
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned char is_child_subreaper : 1 ;
   unsigned char has_child_subreaper : 1 ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};
struct backing_dev_info;
struct reclaim_state;
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
struct io_context;
struct pipe_inode_info;
struct rq;
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   bool (*yield_to_task)(struct rq * , struct task_struct * , bool  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   void (*migrate_task_rq)(struct task_struct * , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * ) ;
   void (*switched_to)(struct rq * , struct task_struct * ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*task_move_group)(struct task_struct * , int  ) ;
};
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
struct sched_avg {
   u32 runnable_avg_sum ;
   u32 runnable_avg_period ;
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
};
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
struct rt_rq;
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
struct files_struct;
struct css_set;
struct compat_robust_list_head;
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned char brk_randomized : 1 ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char no_new_privs : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   unsigned char sched_contributes_to_load : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   int numa_migrate_seq ;
   unsigned int numa_scan_period ;
   u64 node_stamp ;
   struct callback_head numa_work ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   unsigned int memcg_kmem_skip_account ;
   atomic_t ptrace_bp_refcnt ;
   struct uprobe_task *utask ;
};
struct hlist_bl_node;
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
struct nameidata;
struct path;
struct vfsmount;
struct __anonstruct_ldv_21912_175 {
   u32 hash ;
   u32 len ;
};
union __anonunion_ldv_21914_174 {
   struct __anonstruct_ldv_21912_175 ldv_21912 ;
   u64 hash_len ;
};
struct qstr {
   union __anonunion_ldv_21914_174 ldv_21914 ;
   unsigned char const   *name ;
};
struct dentry_operations;
struct super_block;
union __anonunion_d_u_176 {
   struct list_head d_child ;
   struct callback_head d_rcu ;
};
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   unsigned int d_count ;
   spinlock_t d_lock ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_176 d_u ;
   struct list_head d_subdirs ;
   struct hlist_node d_alias ;
};
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_hash)(struct dentry  const  * , struct inode  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct inode  const  * , struct dentry  const  * ,
                    struct inode  const  * , unsigned int  , char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_prune)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
struct radix_tree_node;
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
};
struct shrinker {
   int (*shrink)(struct shrinker * , struct shrink_control * ) ;
   int seeks ;
   long batch ;
   struct list_head list ;
   atomic_long_t nr_in_batch ;
};
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
} ;
struct block_device;
struct export_operations;
struct poll_table_struct;
struct kstatfs;
struct swap_info_struct;
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
typedef struct fs_qfilestat fs_qfilestat_t;
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
struct dquot;
typedef __kernel_uid32_t projid_t;
typedef projid_t kprojid_t;
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
} ;
typedef long long qsize_t;
union __anonunion_ldv_22668_177 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
struct kqid {
   union __anonunion_ldv_22668_177 ldv_22668 ;
   enum quota_type type ;
};
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
struct quota_format_type;
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
struct writeback_control;
union __anonunion_arg_179 {
   char *buf ;
   void *data ;
};
struct __anonstruct_read_descriptor_t_178 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_179 arg ;
   int error ;
};
typedef struct __anonstruct_read_descriptor_t_178 read_descriptor_t;
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * , enum migrate_mode  ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
   int (*swap_activate)(struct swap_info_struct * , struct file * , sector_t * ) ;
   void (*swap_deactivate)(struct file * ) ;
};
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct rb_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   struct mutex i_mmap_mutex ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};
struct request_queue;
struct hd_struct;
struct gendisk;
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
struct posix_acl;
struct inode_operations;
union __anonunion_ldv_23102_180 {
   unsigned int const   i_nlink ;
   unsigned int __i_nlink ;
};
union __anonunion_ldv_23122_181 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
struct file_lock;
struct cdev;
union __anonunion_ldv_23138_182 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_ldv_23102_180 ldv_23102 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_ldv_23122_181 ldv_23122 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_23138_182 ldv_23138 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   atomic_t i_readcount ;
   void *i_private ;
};
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
union __anonunion_f_u_183 {
   struct list_head fu_list ;
   struct callback_head fu_rcuhead ;
};
struct file {
   union __anonunion_f_u_183 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
typedef struct files_struct *fl_owner_t;
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*lm_notify)(struct file_lock * ) ;
   int (*lm_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*lm_break)(struct file_lock * ) ;
   int (*lm_change)(struct file_lock ** , int  ) ;
};
struct nlm_lockowner;
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
struct nfs4_lock_state;
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
struct fasync_struct;
struct __anonstruct_afs_185 {
   struct list_head link ;
   int state ;
};
union __anonunion_fl_u_184 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_185 afs ;
};
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_184 fl_u ;
};
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};
struct file_system_type;
struct super_operations;
struct xattr_handler;
struct mtd_info;
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_mounts ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   spinlock_t s_inode_lru_lock ;
   struct list_head s_inode_lru ;
   int s_nr_inodes_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
};
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , loff_t  , loff_t  , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
   int (*show_fdinfo)(struct seq_file * , struct file * ) ;
};
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , unsigned int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  ) ;
   struct posix_acl *(*get_acl)(struct inode * , int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , umode_t  , bool  ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , umode_t  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , umode_t  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   void (*truncate)(struct inode * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
   int (*update_time)(struct inode * , struct timespec * , int  ) ;
   int (*atomic_open)(struct inode * , struct dentry * , struct file * , unsigned int  ,
                      umode_t  , int * ) ;
};
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * , int  ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct dentry * ) ;
   int (*show_devname)(struct seq_file * , struct dentry * ) ;
   int (*show_path)(struct seq_file * , struct dentry * ) ;
   int (*show_stats)(struct seq_file * , struct dentry * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
   int (*nr_cached_objects)(struct super_block * ) ;
   void (*free_cached_objects)(struct super_block * , int  ) ;
};
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
enum chips {
    it87 = 0,
    it8712 = 1,
    it8716 = 2,
    it8718 = 3,
    it8720 = 4,
    it8721 = 5,
    it8728 = 6,
    it8782 = 7,
    it8783 = 8
} ;
struct it87_sio_data {
   enum chips type ;
   u8 revision ;
   u8 vid_value ;
   u8 beep_pin ;
   u8 internal ;
   u16 skip_in ;
   u8 skip_vid ;
   u8 skip_fan ;
   u8 skip_pwm ;
   u8 skip_temp ;
};
struct it87_data {
   struct device *hwmon_dev ;
   enum chips type ;
   u8 revision ;
   unsigned short addr ;
   char const   *name ;
   struct mutex update_lock ;
   char valid ;
   unsigned long last_updated ;
   u16 in_scaled ;
   u8 in[9U][3U] ;
   u8 has_fan ;
   u16 fan[5U] ;
   u16 fan_min[5U] ;
   u8 has_temp ;
   s8 temp[3U][3U] ;
   u8 sensor ;
   u8 fan_div[3U] ;
   u8 vid ;
   u8 vrm ;
   u32 alarms ;
   u8 beeps ;
   u8 fan_main_ctrl ;
   u8 fan_ctl ;
   u8 pwm_ctrl[3U] ;
   u8 pwm_duty[3U] ;
   u8 pwm_temp_map[3U] ;
   u8 auto_pwm[3U][4U] ;
   s8 auto_temp[3U][5U] ;
};
typedef int ldv_func_ret_type___2;
long ldv__builtin_expect(long exp , long c ) ;
extern int printk(char const   *  , ...) ;
extern int __dynamic_pr_debug(struct _ddebug * , char const   *  , ...) ;
extern int __dynamic_dev_dbg(struct _ddebug * , struct device  const  * , char const   * 
                             , ...) ;
extern int kstrtoull(char const   * , unsigned int  , unsigned long long * ) ;
extern int kstrtoll(char const   * , unsigned int  , long long * ) ;
__inline static int kstrtoul(char const   *s , unsigned int base , unsigned long *res ) 
{ 
  int tmp ;

  {
  tmp = kstrtoull(s, base, (unsigned long long *)res);
  return (tmp);
}
}
__inline static int kstrtol(char const   *s , unsigned int base , long *res ) 
{ 
  int tmp ;

  {
  tmp = kstrtoll(s, base, (long long *)res);
  return (tmp);
}
}
extern int sprintf(char * , char const   *  , ...) ;
extern struct pv_cpu_ops pv_cpu_ops ;
extern void *memset(void * , int  , size_t  ) ;
extern int strcmp(char const   * , char const   * ) ;
__inline static void slow_down_io(void) 
{ 


  {
  (*(pv_cpu_ops.io_delay))();
  return;
}
}
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
  return ((long )ptr);
}
}
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
  tmp = ldv__builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
  return (tmp);
}
}
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
extern int mutex_trylock(struct mutex * ) ;
int ldv_mutex_trylock_4(struct mutex *ldv_func_arg1 ) ;
extern void mutex_unlock(struct mutex * ) ;
void ldv_mutex_unlock_2(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_7(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_9(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_11(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_13(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_15(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_17(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_19(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_21(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_22(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_24(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_26(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_28(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_30(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_32(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_34(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_36(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_38(struct mutex *ldv_func_arg1 ) ;
extern void mutex_lock(struct mutex * ) ;
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_3(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_6(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_8(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_10(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_12(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_14(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_16(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_18(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_20(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_23(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_25(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_27(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_29(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_31(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_33(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_35(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_37(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) ;
void ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) ;
void ldv_mutex_lock_lock(struct mutex *lock ) ;
void ldv_mutex_unlock_lock(struct mutex *lock ) ;
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) ;
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) ;
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) ;
void ldv_mutex_lock_update_lock_of_it87_data(struct mutex *lock ) ;
void ldv_mutex_unlock_update_lock_of_it87_data(struct mutex *lock ) ;
extern unsigned long volatile   jiffies ;
extern struct resource ioport_resource ;
extern struct resource *__request_region(struct resource * , resource_size_t  , resource_size_t  ,
                                         char const   * , int  ) ;
extern void __release_region(struct resource * , resource_size_t  , resource_size_t  ) ;
extern struct resource *__devm_request_region(struct device * , struct resource * ,
                                              resource_size_t  , resource_size_t  ,
                                              char const   * ) ;
__inline static void outb(unsigned char value , int port ) 
{ 


  {
  __asm__  volatile   ("outb %b0, %w1": : "a" (value), "Nd" (port));
  return;
}
}
__inline static unsigned char inb(int port ) 
{ 
  unsigned char value ;

  {
  __asm__  volatile   ("inb %w1, %b0": "=a" (value): "Nd" (port));
  return (value);
}
}
__inline static void outb_p(unsigned char value , int port ) 
{ 


  {
  outb((int )value, port);
  slow_down_io();
  return;
}
}
__inline static unsigned char inb_p(int port ) 
{ 
  unsigned char value ;
  unsigned char tmp ;

  {
  tmp = inb(port);
  value = tmp;
  slow_down_io();
  return (value);
}
}
extern int sysfs_create_file(struct kobject * , struct attribute  const  * ) ;
extern int sysfs_chmod_file(struct kobject * , struct attribute  const  * , umode_t  ) ;
extern void sysfs_remove_file(struct kobject * , struct attribute  const  * ) ;
extern int sysfs_create_group(struct kobject * , struct attribute_group  const  * ) ;
extern void sysfs_remove_group(struct kobject * , struct attribute_group  const  * ) ;
extern struct module __this_module ;
extern void *devm_kzalloc(struct device * , size_t  , gfp_t  ) ;
extern void *dev_get_drvdata(struct device  const  * ) ;
extern int dev_set_drvdata(struct device * , void * ) ;
extern int dev_err(struct device  const  * , char const   *  , ...) ;
extern int dev_warn(struct device  const  * , char const   *  , ...) ;
extern int dev_notice(struct device  const  * , char const   *  , ...) ;
extern int _dev_info(struct device  const  * , char const   *  , ...) ;
extern void platform_device_unregister(struct platform_device * ) ;
extern struct resource *platform_get_resource(struct platform_device * , unsigned int  ,
                                              unsigned int  ) ;
extern struct platform_device *platform_device_alloc(char const   * , int  ) ;
extern int platform_device_add_resources(struct platform_device * , struct resource  const  * ,
                                         unsigned int  ) ;
extern int platform_device_add_data(struct platform_device * , void const   * , size_t  ) ;
extern int platform_device_add(struct platform_device * ) ;
extern void platform_device_put(struct platform_device * ) ;
extern int platform_driver_register(struct platform_driver * ) ;
extern void platform_driver_unregister(struct platform_driver * ) ;
__inline static void *platform_get_drvdata(struct platform_device  const  *pdev___0 ) 
{ 
  void *tmp ;

  {
  tmp = dev_get_drvdata(& pdev___0->dev);
  return (tmp);
}
}
__inline static void platform_set_drvdata(struct platform_device *pdev___0 , void *data ) 
{ 


  {
  dev_set_drvdata(& pdev___0->dev, data);
  return;
}
}
extern struct device *hwmon_device_register(struct device * ) ;
extern void hwmon_device_unregister(struct device * ) ;
__inline static int SENSORS_LIMIT(long value , long low , long high ) 
{ 


  {
  if (value < low) {
    return ((int )low);
  } else
  if (value > high) {
    return ((int )high);
  } else {
    return ((int )value);
  }
}
}
extern int vid_from_reg(int  , u8  ) ;
extern u8 vid_which_vrm(void) ;
extern char const   *dmi_get_system_info(int  ) ;
extern int acpi_check_resource_conflict(struct resource  const  * ) ;
static unsigned short force_id  ;
static struct platform_device *pdev  ;
__inline static int superio_inb(int reg ) 
{ 
  unsigned char tmp ;

  {
  outb((int )((unsigned char )reg), 46);
  tmp = inb(47);
  return ((int )tmp);
}
}
__inline static void superio_outb(int reg , int val ) 
{ 


  {
  outb((int )((unsigned char )reg), 46);
  outb((int )((unsigned char )val), 47);
  return;
}
}
static int superio_inw(int reg ) 
{ 
  int val ;
  int tmp ;
  unsigned char tmp___0 ;
  unsigned char tmp___1 ;

  {
  tmp = reg;
  reg = reg + 1;
  outb((int )((unsigned char )tmp), 46);
  tmp___0 = inb(47);
  val = (int )tmp___0 << 8;
  outb((int )((unsigned char )reg), 46);
  tmp___1 = inb(47);
  val = (int )tmp___1 | val;
  return (val);
}
}
__inline static void superio_select(int ldn ) 
{ 


  {
  outb(7, 46);
  outb((int )((unsigned char )ldn), 47);
  return;
}
}
__inline static int superio_enter(void) 
{ 
  struct resource *tmp ;

  {
  tmp = __request_region(& ioport_resource, 46ULL, 2ULL, "it87", 4194304);
  if ((unsigned long )tmp == (unsigned long )((struct resource *)0)) {
    return (-16);
  } else {

  }
  outb(135, 46);
  outb(1, 46);
  outb(85, 46);
  outb(85, 46);
  return (0);
}
}
__inline static void superio_exit(void) 
{ 


  {
  outb(2, 46);
  outb(2, 47);
  __release_region(& ioport_resource, 46ULL, 2ULL);
  return;
}
}
static bool update_vbat  ;
static bool fix_pwm_polarity  ;
static u8 const   IT87_REG_FAN[5U]  = {      13U,      14U,      15U,      128U, 
        130U};
static u8 const   IT87_REG_FAN_MIN[5U]  = {      16U,      17U,      18U,      132U, 
        134U};
static u8 const   IT87_REG_FANX[5U]  = {      24U,      25U,      26U,      129U, 
        131U};
static u8 const   IT87_REG_FANX_MIN[5U]  = {      27U,      28U,      29U,      133U, 
        135U};
__inline static int has_12mv_adc(struct it87_data  const  *data ) 
{ 


  {
  return ((unsigned int )data->type == 5U || (unsigned int )data->type == 6U);
}
}
static int adc_lsb(struct it87_data  const  *data , int nr ) 
{ 
  int lsb ;
  int tmp ;

  {
  tmp = has_12mv_adc(data);
  lsb = tmp != 0 ? 12 : 16;
  if (((int )data->in_scaled >> nr) & 1) {
    lsb = lsb << 1;
  } else {

  }
  return (lsb);
}
}
static u8 in_to_reg(struct it87_data  const  *data , int nr , long val ) 
{ 
  long __x ;
  int __d ;
  int tmp ;
  int tmp___0 ;

  {
  __x = val;
  tmp = adc_lsb(data, nr);
  __d = tmp;
  val = __x > 0L ? ((long )(__d / 2) + __x) / (long )__d : (__x - (long )(__d / 2)) / (long )__d;
  tmp___0 = SENSORS_LIMIT(val, 0L, 255L);
  return ((u8 )tmp___0);
}
}
static int in_from_reg(struct it87_data  const  *data , int nr , int val ) 
{ 
  int tmp ;

  {
  tmp = adc_lsb(data, nr);
  return (tmp * val);
}
}
__inline static u8 FAN_TO_REG(long rpm , int div ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  if (rpm == 0L) {
    return (255U);
  } else {

  }
  tmp = SENSORS_LIMIT(rpm, 1L, 1000000L);
  rpm = (long )tmp;
  tmp___0 = SENSORS_LIMIT((((long )div * rpm) / 2L + 1350000L) / ((long )div * rpm),
                          1L, 254L);
  return ((u8 )tmp___0);
}
}
__inline static u16 FAN16_TO_REG(long rpm ) 
{ 
  int tmp ;

  {
  if (rpm == 0L) {
    return (65535U);
  } else {

  }
  tmp = SENSORS_LIMIT((rpm + 1350000L) / (rpm * 2L), 1L, 65534L);
  return ((u16 )tmp);
}
}
static u8 pwm_to_reg(struct it87_data  const  *data , long val ) 
{ 
  int tmp ;

  {
  tmp = has_12mv_adc(data);
  if (tmp != 0) {
    return ((u8 )val);
  } else {
    return ((u8 )(val >> 1));
  }
}
}
static int pwm_from_reg(struct it87_data  const  *data , u8 reg ) 
{ 
  int tmp ;

  {
  tmp = has_12mv_adc(data);
  if (tmp != 0) {
    return ((int )reg);
  } else {
    return (((int )reg << 1) & 255);
  }
}
}
static int DIV_TO_REG(int val ) 
{ 
  int answer ;

  {
  answer = 0;
  goto ldv_26174;
  ldv_26173: 
  answer = answer + 1;
  ldv_26174: ;
  if (answer <= 6) {
    val = val >> 1;
    if (val != 0) {
      goto ldv_26173;
    } else {
      goto ldv_26175;
    }
  } else {

  }
  ldv_26175: ;
  return (answer);
}
}
static unsigned int const   pwm_freq[8U]  = 
  {      375000U,      187500U,      93750U,      62500U, 
        46875U,      23437U,      11718U,      5859U};
__inline static int has_16bit_fans(struct it87_data  const  *data ) 
{ 


  {
  return ((((((((((unsigned int )data->type == 0U && (unsigned int )((unsigned char )data->revision) > 2U) || ((unsigned int )data->type == 1U && (unsigned int )((unsigned char )data->revision) > 7U)) || (unsigned int )data->type == 2U) || (unsigned int )data->type == 3U) || (unsigned int )data->type == 4U) || (unsigned int )data->type == 5U) || (unsigned int )data->type == 6U) || (unsigned int )data->type == 7U) || (unsigned int )data->type == 8U);
}
}
__inline static int has_old_autopwm(struct it87_data  const  *data ) 
{ 


  {
  return (((unsigned int )data->type == 0U && (unsigned int )((unsigned char )data->revision) <= 2U) || ((unsigned int )data->type == 1U && (unsigned int )((unsigned char )data->revision) <= 7U));
}
}
static int it87_probe(struct platform_device *pdev___0 ) ;
static int it87_remove(struct platform_device *pdev___0 ) ;
static int it87_read_value(struct it87_data *data , u8 reg ) ;
static void it87_write_value(struct it87_data *data , u8 reg , u8 value ) ;
static struct it87_data *it87_update_device(struct device *dev ) ;
static int it87_check_pwm(struct device *dev ) ;
static void it87_init_device(struct platform_device *pdev___0 ) ;
static struct platform_driver it87_driver  =    {& it87_probe, & it87_remove, 0, 0, 0, {"it87", 0, & __this_module, 0, (_Bool)0,
                                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0};
static ssize_t show_in(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct sensor_device_attribute_2 *sattr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  int index ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sattr = (struct sensor_device_attribute_2 *)__mptr;
  nr = (int )sattr->nr;
  index = (int )sattr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = in_from_reg((struct it87_data  const  *)data, nr, (int )data->in[nr][index]);
  tmp___1 = sprintf(buf, "%d\n", tmp___0);
  return ((ssize_t )tmp___1);
}
}
static ssize_t set_in(struct device *dev , struct device_attribute *attr , char const   *buf ,
                      size_t count ) 
{ 
  struct sensor_device_attribute_2 *sattr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  int index ;
  struct it87_data *data ;
  void *tmp ;
  unsigned long val ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sattr = (struct sensor_device_attribute_2 *)__mptr;
  nr = (int )sattr->nr;
  index = (int )sattr->index;
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = kstrtoul(buf, 10U, & val);
  if (tmp___0 < 0) {
    return (-22L);
  } else {

  }
  ldv_mutex_lock_8(& data->update_lock);
  data->in[nr][index] = in_to_reg((struct it87_data  const  *)data, nr, (long )val);
  it87_write_value(data, (int )(index == 1 ? (unsigned int )((u8 )nr) * 2U + 49U : (unsigned int )((u8 )(nr + 24)) * 2U),
                   (int )data->in[nr][index]);
  ldv_mutex_unlock_9(& data->update_lock);
  return ((ssize_t )count);
}
}
static struct sensor_device_attribute_2 sensor_dev_attr_in0_input  =    {{{"in0_input", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, 0}, 0U, 0U};
static struct sensor_device_attribute_2 sensor_dev_attr_in0_min  =    {{{"in0_min", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                      {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, & set_in}, 1U, 0U};
static struct sensor_device_attribute_2 sensor_dev_attr_in0_max  =    {{{"in0_max", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                      {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, & set_in}, 2U, 0U};
static struct sensor_device_attribute_2 sensor_dev_attr_in1_input  =    {{{"in1_input", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, 0}, 0U, 1U};
static struct sensor_device_attribute_2 sensor_dev_attr_in1_min  =    {{{"in1_min", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                      {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, & set_in}, 1U, 1U};
static struct sensor_device_attribute_2 sensor_dev_attr_in1_max  =    {{{"in1_max", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                      {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, & set_in}, 2U, 1U};
static struct sensor_device_attribute_2 sensor_dev_attr_in2_input  =    {{{"in2_input", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, 0}, 0U, 2U};
static struct sensor_device_attribute_2 sensor_dev_attr_in2_min  =    {{{"in2_min", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                      {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, & set_in}, 1U, 2U};
static struct sensor_device_attribute_2 sensor_dev_attr_in2_max  =    {{{"in2_max", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                      {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, & set_in}, 2U, 2U};
static struct sensor_device_attribute_2 sensor_dev_attr_in3_input  =    {{{"in3_input", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, 0}, 0U, 3U};
static struct sensor_device_attribute_2 sensor_dev_attr_in3_min  =    {{{"in3_min", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                      {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, & set_in}, 1U, 3U};
static struct sensor_device_attribute_2 sensor_dev_attr_in3_max  =    {{{"in3_max", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                      {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, & set_in}, 2U, 3U};
static struct sensor_device_attribute_2 sensor_dev_attr_in4_input  =    {{{"in4_input", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, 0}, 0U, 4U};
static struct sensor_device_attribute_2 sensor_dev_attr_in4_min  =    {{{"in4_min", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                      {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, & set_in}, 1U, 4U};
static struct sensor_device_attribute_2 sensor_dev_attr_in4_max  =    {{{"in4_max", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                      {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, & set_in}, 2U, 4U};
static struct sensor_device_attribute_2 sensor_dev_attr_in5_input  =    {{{"in5_input", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, 0}, 0U, 5U};
static struct sensor_device_attribute_2 sensor_dev_attr_in5_min  =    {{{"in5_min", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                      {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, & set_in}, 1U, 5U};
static struct sensor_device_attribute_2 sensor_dev_attr_in5_max  =    {{{"in5_max", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                      {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, & set_in}, 2U, 5U};
static struct sensor_device_attribute_2 sensor_dev_attr_in6_input  =    {{{"in6_input", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, 0}, 0U, 6U};
static struct sensor_device_attribute_2 sensor_dev_attr_in6_min  =    {{{"in6_min", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                      {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, & set_in}, 1U, 6U};
static struct sensor_device_attribute_2 sensor_dev_attr_in6_max  =    {{{"in6_max", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                      {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, & set_in}, 2U, 6U};
static struct sensor_device_attribute_2 sensor_dev_attr_in7_input  =    {{{"in7_input", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, 0}, 0U, 7U};
static struct sensor_device_attribute_2 sensor_dev_attr_in7_min  =    {{{"in7_min", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                      {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, & set_in}, 1U, 7U};
static struct sensor_device_attribute_2 sensor_dev_attr_in7_max  =    {{{"in7_max", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                      {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, & set_in}, 2U, 7U};
static struct sensor_device_attribute_2 sensor_dev_attr_in8_input  =    {{{"in8_input", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_in, 0}, 0U, 8U};
static ssize_t show_temp(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct sensor_device_attribute_2 *sattr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  int index ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sattr = (struct sensor_device_attribute_2 *)__mptr;
  nr = (int )sattr->nr;
  index = (int )sattr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = sprintf(buf, "%d\n", (int )data->temp[nr][index] * 1000);
  return ((ssize_t )tmp___0);
}
}
static ssize_t set_temp(struct device *dev , struct device_attribute *attr , char const   *buf ,
                        size_t count ) 
{ 
  struct sensor_device_attribute_2 *sattr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  int index ;
  struct it87_data *data ;
  void *tmp ;
  long val ;
  int tmp___0 ;
  int tmp___1 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sattr = (struct sensor_device_attribute_2 *)__mptr;
  nr = (int )sattr->nr;
  index = (int )sattr->index;
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = kstrtol(buf, 10U, & val);
  if (tmp___0 < 0) {
    return (-22L);
  } else {

  }
  ldv_mutex_lock_10(& data->update_lock);
  tmp___1 = SENSORS_LIMIT(val < 0L ? (val + -500L) / 1000L : (val + 500L) / 1000L,
                          -128L, 127L);
  data->temp[nr][index] = (s8 )tmp___1;
  it87_write_value(data, (int )(index == 1 ? (unsigned int )((u8 )nr) * 2U + 65U : (unsigned int )((u8 )(nr + 32)) * 2U),
                   (int )((u8 )data->temp[nr][index]));
  ldv_mutex_unlock_11(& data->update_lock);
  return ((ssize_t )count);
}
}
static struct sensor_device_attribute_2 sensor_dev_attr_temp1_input  =    {{{"temp1_input", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                          {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_temp, 0}, 0U, 0U};
static struct sensor_device_attribute_2 sensor_dev_attr_temp1_min  =    {{{"temp1_min", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_temp, & set_temp}, 1U, 0U};
static struct sensor_device_attribute_2 sensor_dev_attr_temp1_max  =    {{{"temp1_max", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_temp, & set_temp}, 2U, 0U};
static struct sensor_device_attribute_2 sensor_dev_attr_temp2_input  =    {{{"temp2_input", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                          {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_temp, 0}, 0U, 1U};
static struct sensor_device_attribute_2 sensor_dev_attr_temp2_min  =    {{{"temp2_min", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_temp, & set_temp}, 1U, 1U};
static struct sensor_device_attribute_2 sensor_dev_attr_temp2_max  =    {{{"temp2_max", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_temp, & set_temp}, 2U, 1U};
static struct sensor_device_attribute_2 sensor_dev_attr_temp3_input  =    {{{"temp3_input", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                          {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_temp, 0}, 0U, 2U};
static struct sensor_device_attribute_2 sensor_dev_attr_temp3_min  =    {{{"temp3_min", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_temp, & set_temp}, 1U, 2U};
static struct sensor_device_attribute_2 sensor_dev_attr_temp3_max  =    {{{"temp3_max", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_temp, & set_temp}, 2U, 2U};
static ssize_t show_temp_type(struct device *dev , struct device_attribute *attr ,
                              char *buf ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  u8 reg ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  reg = data->sensor;
  if (((int )reg >> nr) & 1) {
    tmp___0 = sprintf(buf, "3\n");
    return ((ssize_t )tmp___0);
  } else {

  }
  if (((int )reg & (8 << nr)) != 0) {
    tmp___1 = sprintf(buf, "4\n");
    return ((ssize_t )tmp___1);
  } else {

  }
  tmp___2 = sprintf(buf, "0\n");
  return ((ssize_t )tmp___2);
}
}
static ssize_t set_temp_type(struct device *dev , struct device_attribute *attr ,
                             char const   *buf , size_t count ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  void *tmp ;
  long val ;
  u8 reg ;
  int tmp___0 ;
  int tmp___1 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = kstrtol(buf, 10U, & val);
  if (tmp___0 < 0) {
    return (-22L);
  } else {

  }
  tmp___1 = it87_read_value(data, 81);
  reg = (u8 )tmp___1;
  reg = (u8 )(~ ((int )((signed char )(1 << nr))) & (int )((signed char )reg));
  reg = (u8 )(~ ((int )((signed char )(8 << nr))) & (int )((signed char )reg));
  if (val == 2L) {
    dev_warn((struct device  const  *)dev, "Sensor type 2 is deprecated, please use 4 instead\n");
    val = 4L;
  } else {

  }
  if (val == 3L) {
    reg = (u8 )((int )((signed char )(1 << nr)) | (int )((signed char )reg));
  } else
  if (val == 4L) {
    reg = (u8 )((int )((signed char )(8 << nr)) | (int )((signed char )reg));
  } else
  if (val != 0L) {
    return (-22L);
  } else {

  }
  ldv_mutex_lock_12(& data->update_lock);
  data->sensor = reg;
  it87_write_value(data, 81, (int )data->sensor);
  data->valid = 0;
  ldv_mutex_unlock_13(& data->update_lock);
  return ((ssize_t )count);
}
}
static struct sensor_device_attribute sensor_dev_attr_temp1_type  =    {{{"temp1_type", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                         {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_temp_type, & set_temp_type}, 0};
static struct sensor_device_attribute sensor_dev_attr_temp2_type  =    {{{"temp2_type", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                         {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_temp_type, & set_temp_type}, 1};
static struct sensor_device_attribute sensor_dev_attr_temp3_type  =    {{{"temp3_type", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                         {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_temp_type, & set_temp_type}, 2};
static int pwm_mode(struct it87_data  const  *data , int nr ) 
{ 
  int ctrl ;

  {
  ctrl = (int )data->fan_main_ctrl & (1 << nr);
  if (ctrl == 0) {
    return (0);
  } else {

  }
  if ((int )((signed char )data->pwm_ctrl[nr]) < 0) {
    return (2);
  } else {
    return (1);
  }
}
}
static ssize_t show_fan(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = sprintf(buf, "%d\n", (unsigned int )data->fan[nr] != 0U ? ((unsigned int )data->fan[nr] != 255U ? 1350000 / ((int )data->fan[nr] << (int )data->fan_div[nr]) : 0) : -1);
  return ((ssize_t )tmp___0);
}
}
static ssize_t show_fan_min(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = sprintf(buf, "%d\n", (unsigned int )data->fan_min[nr] != 0U ? ((unsigned int )data->fan_min[nr] != 255U ? 1350000 / ((int )data->fan_min[nr] << (int )data->fan_div[nr]) : 0) : -1);
  return ((ssize_t )tmp___0);
}
}
static ssize_t show_fan_div(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = sprintf(buf, "%d\n", 1 << (int )data->fan_div[nr]);
  return ((ssize_t )tmp___0);
}
}
static ssize_t show_pwm_enable(struct device *dev , struct device_attribute *attr ,
                               char *buf ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = pwm_mode((struct it87_data  const  *)data, nr);
  tmp___1 = sprintf(buf, "%d\n", tmp___0);
  return ((ssize_t )tmp___1);
}
}
static ssize_t show_pwm(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = pwm_from_reg((struct it87_data  const  *)data, (int )data->pwm_duty[nr]);
  tmp___1 = sprintf(buf, "%d\n", tmp___0);
  return ((ssize_t )tmp___1);
}
}
static ssize_t show_pwm_freq(struct device *dev , struct device_attribute *attr ,
                             char *buf ) 
{ 
  struct it87_data *data ;
  struct it87_data *tmp ;
  int index ;
  int tmp___0 ;

  {
  tmp = it87_update_device(dev);
  data = tmp;
  index = ((int )data->fan_ctl >> 4) & 7;
  tmp___0 = sprintf(buf, "%u\n", pwm_freq[index]);
  return ((ssize_t )tmp___0);
}
}
static ssize_t set_fan_min(struct device *dev , struct device_attribute *attr , char const   *buf ,
                           size_t count ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  void *tmp ;
  long val ;
  u8 reg ;
  int tmp___0 ;
  int tmp___1 ;
  u8 tmp___2 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = kstrtol(buf, 10U, & val);
  if (tmp___0 < 0) {
    return (-22L);
  } else {

  }
  ldv_mutex_lock_14(& data->update_lock);
  tmp___1 = it87_read_value(data, 11);
  reg = (u8 )tmp___1;
  switch (nr) {
  case 0: 
  data->fan_div[nr] = (unsigned int )reg & 7U;
  goto ldv_26386;
  case 1: 
  data->fan_div[nr] = (unsigned int )((u8 )((int )reg >> 3)) & 7U;
  goto ldv_26386;
  case 2: 
  data->fan_div[nr] = ((int )reg & 64) != 0 ? 3U : 1U;
  goto ldv_26386;
  }
  ldv_26386: 
  tmp___2 = FAN_TO_REG(val, 1 << (int )data->fan_div[nr]);
  data->fan_min[nr] = (u16 )tmp___2;
  it87_write_value(data, (int )IT87_REG_FAN_MIN[nr], (int )((u8 )data->fan_min[nr]));
  ldv_mutex_unlock_15(& data->update_lock);
  return ((ssize_t )count);
}
}
static ssize_t set_fan_div(struct device *dev , struct device_attribute *attr , char const   *buf ,
                           size_t count ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  void *tmp ;
  unsigned long val ;
  int min ;
  u8 old ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  u8 tmp___3 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = kstrtoul(buf, 10U, & val);
  if (tmp___0 < 0) {
    return (-22L);
  } else {

  }
  ldv_mutex_lock_16(& data->update_lock);
  tmp___1 = it87_read_value(data, 11);
  old = (u8 )tmp___1;
  min = (unsigned int )data->fan_min[nr] != 0U ? ((unsigned int )data->fan_min[nr] != 255U ? 1350000 / ((int )data->fan_min[nr] << (int )data->fan_div[nr]) : 0) : -1;
  switch (nr) {
  case 0: ;
  case 1: 
  tmp___2 = DIV_TO_REG((int )val);
  data->fan_div[nr] = (u8 )tmp___2;
  goto ldv_26405;
  case 2: ;
  if (val <= 7UL) {
    data->fan_div[nr] = 1U;
  } else {
    data->fan_div[nr] = 3U;
  }
  }
  ldv_26405: 
  val = (unsigned long )old & 128UL;
  val = ((unsigned long )data->fan_div[0] & 7UL) | val;
  val = (unsigned long )(((int )data->fan_div[1] & 7) << 3) | val;
  if ((unsigned int )data->fan_div[2] == 3U) {
    val = val | 64UL;
  } else {

  }
  it87_write_value(data, 11, (int )((u8 )val));
  tmp___3 = FAN_TO_REG((long )min, 1 << (int )data->fan_div[nr]);
  data->fan_min[nr] = (u16 )tmp___3;
  it87_write_value(data, (int )IT87_REG_FAN_MIN[nr], (int )((u8 )data->fan_min[nr]));
  ldv_mutex_unlock_17(& data->update_lock);
  return ((ssize_t )count);
}
}
static int check_trip_points(struct device *dev , int nr ) 
{ 
  struct it87_data  const  *data ;
  void *tmp ;
  int i ;
  int err ;
  int tmp___0 ;

  {
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data  const  *)tmp;
  err = 0;
  tmp___0 = has_old_autopwm(data);
  if (tmp___0 != 0) {
    i = 0;
    goto ldv_26415;
    ldv_26414: ;
    if ((int )data->auto_temp[nr][i] > (int )data->auto_temp[nr][i + 1]) {
      err = -22;
    } else {

    }
    i = i + 1;
    ldv_26415: ;
    if (i <= 2) {
      goto ldv_26414;
    } else {

    }
    i = 0;
    goto ldv_26418;
    ldv_26417: ;
    if ((int )data->auto_pwm[nr][i] > (int )data->auto_pwm[nr][i + 1]) {
      err = -22;
    } else {

    }
    i = i + 1;
    ldv_26418: ;
    if (i <= 1) {
      goto ldv_26417;
    } else {

    }

  } else {

  }
  if (err != 0) {
    dev_err((struct device  const  *)dev, "Inconsistent trip points, not switching to automatic mode\n");
    dev_err((struct device  const  *)dev, "Adjust the trip points and try again\n");
  } else {

  }
  return (err);
}
}
static ssize_t set_pwm_enable(struct device *dev , struct device_attribute *attr ,
                              char const   *buf , size_t count ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  void *tmp ;
  long val ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = kstrtol(buf, 10U, & val);
  if ((tmp___0 < 0 || val < 0L) || val > 2L) {
    return (-22L);
  } else {

  }
  if (val == 2L) {
    tmp___1 = check_trip_points(dev, nr);
    if (tmp___1 < 0) {
      return (-22L);
    } else {

    }
  } else {

  }
  ldv_mutex_lock_18(& data->update_lock);
  if (val == 0L) {
    tmp___2 = it87_read_value(data, 20);
    it87_write_value(data, 20, (int )((u8 )((int )((signed char )(1 << nr)) | (int )((signed char )tmp___2))));
    data->fan_main_ctrl = (u8 )((int )((signed char )data->fan_main_ctrl) & ~ ((int )((signed char )(1 << nr))));
    it87_write_value(data, 19, (int )data->fan_main_ctrl);
  } else {
    if (val == 1L) {
      tmp___3 = has_12mv_adc((struct it87_data  const  *)data);
      data->pwm_ctrl[nr] = tmp___3 != 0 ? data->pwm_temp_map[nr] : data->pwm_duty[nr];
    } else {
      data->pwm_ctrl[nr] = (u8 )((unsigned int )data->pwm_temp_map[nr] | 128U);
    }
    it87_write_value(data, (int )((unsigned int )((u8 )nr) + 21U), (int )data->pwm_ctrl[nr]);
    data->fan_main_ctrl = (u8 )((int )((signed char )data->fan_main_ctrl) | (int )((signed char )(1 << nr)));
    it87_write_value(data, 19, (int )data->fan_main_ctrl);
  }
  ldv_mutex_unlock_19(& data->update_lock);
  return ((ssize_t )count);
}
}
static ssize_t set_pwm(struct device *dev , struct device_attribute *attr , char const   *buf ,
                       size_t count ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  void *tmp ;
  long val ;
  int tmp___0 ;
  int tmp___1 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = kstrtol(buf, 10U, & val);
  if ((tmp___0 < 0 || val < 0L) || val > 255L) {
    return (-22L);
  } else {

  }
  ldv_mutex_lock_20(& data->update_lock);
  tmp___1 = has_12mv_adc((struct it87_data  const  *)data);
  if (tmp___1 != 0) {
    if ((int )((signed char )data->pwm_ctrl[nr]) < 0) {
      ldv_mutex_unlock_21(& data->update_lock);
      return (-16L);
    } else {

    }
    data->pwm_duty[nr] = pwm_to_reg((struct it87_data  const  *)data, val);
    it87_write_value(data, (int )((unsigned int )((u8 )nr) * 8U + 99U), (int )data->pwm_duty[nr]);
  } else {
    data->pwm_duty[nr] = pwm_to_reg((struct it87_data  const  *)data, val);
    if ((int )((signed char )data->pwm_ctrl[nr]) >= 0) {
      data->pwm_ctrl[nr] = data->pwm_duty[nr];
      it87_write_value(data, (int )((unsigned int )((u8 )nr) + 21U), (int )data->pwm_ctrl[nr]);
    } else {

    }
  }
  ldv_mutex_unlock_22(& data->update_lock);
  return ((ssize_t )count);
}
}
static ssize_t set_pwm_freq(struct device *dev , struct device_attribute *attr , char const   *buf ,
                            size_t count ) 
{ 
  struct it87_data *data ;
  void *tmp ;
  unsigned long val ;
  int i ;
  int tmp___0 ;
  int tmp___1 ;

  {
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = kstrtoul(buf, 10U, & val);
  if (tmp___0 < 0) {
    return (-22L);
  } else {

  }
  i = 0;
  goto ldv_26456;
  ldv_26455: ;
  if ((unsigned long )(((unsigned int )pwm_freq[i] + (unsigned int )pwm_freq[i + 1]) / 2U) < val) {
    goto ldv_26454;
  } else {

  }
  i = i + 1;
  ldv_26456: ;
  if (i <= 6) {
    goto ldv_26455;
  } else {

  }
  ldv_26454: 
  ldv_mutex_lock_23(& data->update_lock);
  tmp___1 = it87_read_value(data, 20);
  data->fan_ctl = (unsigned int )((u8 )tmp___1) & 143U;
  data->fan_ctl = (u8 )((int )((signed char )data->fan_ctl) | (int )((signed char )(i << 4)));
  it87_write_value(data, 20, (int )data->fan_ctl);
  ldv_mutex_unlock_24(& data->update_lock);
  return ((ssize_t )count);
}
}
static ssize_t show_pwm_temp_map(struct device *dev , struct device_attribute *attr ,
                                 char *buf ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int map ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  if ((unsigned int )data->pwm_temp_map[nr] <= 2U) {
    map = 1 << (int )data->pwm_temp_map[nr];
  } else {
    map = 0;
  }
  tmp___0 = sprintf(buf, "%d\n", map);
  return ((ssize_t )tmp___0);
}
}
static ssize_t set_pwm_temp_map(struct device *dev , struct device_attribute *attr ,
                                char const   *buf , size_t count ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  void *tmp ;
  long val ;
  u8 reg ;
  int tmp___0 ;
  int tmp___1 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = has_old_autopwm((struct it87_data  const  *)data);
  if (tmp___0 == 0) {
    dev_notice((struct device  const  *)dev, "Mapping change disabled for safety reasons\n");
    return (-22L);
  } else {

  }
  tmp___1 = kstrtol(buf, 10U, & val);
  if (tmp___1 < 0) {
    return (-22L);
  } else {

  }
  switch (val) {
  case 1L: 
  reg = 0U;
  goto ldv_26482;
  case 2L: 
  reg = 1U;
  goto ldv_26482;
  case 4L: 
  reg = 2U;
  goto ldv_26482;
  default: ;
  return (-22L);
  }
  ldv_26482: 
  ldv_mutex_lock_25(& data->update_lock);
  data->pwm_temp_map[nr] = reg;
  if ((int )((signed char )data->pwm_ctrl[nr]) < 0) {
    data->pwm_ctrl[nr] = (u8 )((unsigned int )data->pwm_temp_map[nr] | 128U);
    it87_write_value(data, (int )((unsigned int )((u8 )nr) + 21U), (int )data->pwm_ctrl[nr]);
  } else {

  }
  ldv_mutex_unlock_26(& data->update_lock);
  return ((ssize_t )count);
}
}
static ssize_t show_auto_pwm(struct device *dev , struct device_attribute *attr ,
                             char *buf ) 
{ 
  struct it87_data *data ;
  struct it87_data *tmp ;
  struct sensor_device_attribute_2 *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  int point ;
  int tmp___0 ;
  int tmp___1 ;

  {
  tmp = it87_update_device(dev);
  data = tmp;
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute_2 *)__mptr;
  nr = (int )sensor_attr->nr;
  point = (int )sensor_attr->index;
  tmp___0 = pwm_from_reg((struct it87_data  const  *)data, (int )data->auto_pwm[nr][point]);
  tmp___1 = sprintf(buf, "%d\n", tmp___0);
  return ((ssize_t )tmp___1);
}
}
static ssize_t set_auto_pwm(struct device *dev , struct device_attribute *attr , char const   *buf ,
                            size_t count ) 
{ 
  struct it87_data *data ;
  void *tmp ;
  struct sensor_device_attribute_2 *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  int point ;
  long val ;
  int tmp___0 ;

  {
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute_2 *)__mptr;
  nr = (int )sensor_attr->nr;
  point = (int )sensor_attr->index;
  tmp___0 = kstrtol(buf, 10U, & val);
  if ((tmp___0 < 0 || val < 0L) || val > 255L) {
    return (-22L);
  } else {

  }
  ldv_mutex_lock_27(& data->update_lock);
  data->auto_pwm[nr][point] = pwm_to_reg((struct it87_data  const  *)data, val);
  it87_write_value(data, (int )(((unsigned int )((u8 )nr) * 8U + (unsigned int )((u8 )point)) + 101U),
                   (int )data->auto_pwm[nr][point]);
  ldv_mutex_unlock_28(& data->update_lock);
  return ((ssize_t )count);
}
}
static ssize_t show_auto_temp(struct device *dev , struct device_attribute *attr ,
                              char *buf ) 
{ 
  struct it87_data *data ;
  struct it87_data *tmp ;
  struct sensor_device_attribute_2 *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  int point ;
  int tmp___0 ;

  {
  tmp = it87_update_device(dev);
  data = tmp;
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute_2 *)__mptr;
  nr = (int )sensor_attr->nr;
  point = (int )sensor_attr->index;
  tmp___0 = sprintf(buf, "%d\n", (int )data->auto_temp[nr][point] * 1000);
  return ((ssize_t )tmp___0);
}
}
static ssize_t set_auto_temp(struct device *dev , struct device_attribute *attr ,
                             char const   *buf , size_t count ) 
{ 
  struct it87_data *data ;
  void *tmp ;
  struct sensor_device_attribute_2 *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  int point ;
  long val ;
  int tmp___0 ;
  int tmp___1 ;

  {
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute_2 *)__mptr;
  nr = (int )sensor_attr->nr;
  point = (int )sensor_attr->index;
  tmp___0 = kstrtol(buf, 10U, & val);
  if ((tmp___0 < 0 || val < -128000L) || val > 127000L) {
    return (-22L);
  } else {

  }
  ldv_mutex_lock_29(& data->update_lock);
  tmp___1 = SENSORS_LIMIT(val < 0L ? (val + -500L) / 1000L : (val + 500L) / 1000L,
                          -128L, 127L);
  data->auto_temp[nr][point] = (s8 )tmp___1;
  it87_write_value(data, (int )((unsigned int )((u8 )(nr + 12)) * 8U + (unsigned int )((u8 )point)),
                   (int )((u8 )data->auto_temp[nr][point]));
  ldv_mutex_unlock_30(& data->update_lock);
  return ((ssize_t )count);
}
}
static struct sensor_device_attribute sensor_dev_attr_fan1_input  =    {{{"fan1_input", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                         {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_fan, 0}, 0};
static struct sensor_device_attribute sensor_dev_attr_fan1_min  =    {{{"fan1_min", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_fan_min, & set_fan_min}, 0};
static struct sensor_device_attribute sensor_dev_attr_fan1_div  =    {{{"fan1_div", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_fan_div, & set_fan_div}, 0};
static struct sensor_device_attribute sensor_dev_attr_fan2_input  =    {{{"fan2_input", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                         {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_fan, 0}, 1};
static struct sensor_device_attribute sensor_dev_attr_fan2_min  =    {{{"fan2_min", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_fan_min, & set_fan_min}, 1};
static struct sensor_device_attribute sensor_dev_attr_fan2_div  =    {{{"fan2_div", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_fan_div, & set_fan_div}, 1};
static struct sensor_device_attribute sensor_dev_attr_fan3_input  =    {{{"fan3_input", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                         {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_fan, 0}, 2};
static struct sensor_device_attribute sensor_dev_attr_fan3_min  =    {{{"fan3_min", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_fan_min, & set_fan_min}, 2};
static struct sensor_device_attribute sensor_dev_attr_fan3_div  =    {{{"fan3_div", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_fan_div, & set_fan_div}, 2};
static struct sensor_device_attribute sensor_dev_attr_pwm1_enable  =    {{{"pwm1_enable", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                          {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_pwm_enable, & set_pwm_enable}, 0};
static struct sensor_device_attribute sensor_dev_attr_pwm1  =    {{{"pwm1", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                   {(char)0}, {(char)0}, {(char)0}}}}, & show_pwm,
     & set_pwm}, 0};
static struct device_attribute dev_attr_pwm1_freq  =    {{"pwm1_freq", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_pwm_freq, & set_pwm_freq};
static struct sensor_device_attribute sensor_dev_attr_pwm1_auto_channels_temp  =    {{{"pwm1_auto_channels_temp",
      420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                           {(char)0}, {(char)0}, {(char)0}}}}, & show_pwm_temp_map,
     & set_pwm_temp_map}, 0};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm1_auto_point1_pwm  =    {{{"pwm1_auto_point1_pwm", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}}}}, & show_auto_pwm,
     & set_auto_pwm}, 0U, 0U};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm1_auto_point2_pwm  =    {{{"pwm1_auto_point2_pwm", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}}}}, & show_auto_pwm,
     & set_auto_pwm}, 1U, 0U};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm1_auto_point3_pwm  =    {{{"pwm1_auto_point3_pwm", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}}}}, & show_auto_pwm,
     & set_auto_pwm}, 2U, 0U};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm1_auto_point4_pwm  =    {{{"pwm1_auto_point4_pwm", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}}}}, & show_auto_pwm,
     0}, 3U, 0U};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm1_auto_point1_temp  =    {{{"pwm1_auto_point1_temp",
      420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                           {(char)0}, {(char)0}, {(char)0}}}}, & show_auto_temp, & set_auto_temp},
    1U, 0U};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm1_auto_point1_temp_hyst  =    {{{"pwm1_auto_point1_temp_hyst",
      420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                           {(char)0}, {(char)0}, {(char)0}}}}, & show_auto_temp, & set_auto_temp},
    0U, 0U};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm1_auto_point2_temp  =    {{{"pwm1_auto_point2_temp",
      420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                           {(char)0}, {(char)0}, {(char)0}}}}, & show_auto_temp, & set_auto_temp},
    2U, 0U};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm1_auto_point3_temp  =    {{{"pwm1_auto_point3_temp",
      420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                           {(char)0}, {(char)0}, {(char)0}}}}, & show_auto_temp, & set_auto_temp},
    3U, 0U};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm1_auto_point4_temp  =    {{{"pwm1_auto_point4_temp",
      420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                           {(char)0}, {(char)0}, {(char)0}}}}, & show_auto_temp, & set_auto_temp},
    4U, 0U};
static struct sensor_device_attribute sensor_dev_attr_pwm2_enable  =    {{{"pwm2_enable", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                          {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_pwm_enable, & set_pwm_enable}, 1};
static struct sensor_device_attribute sensor_dev_attr_pwm2  =    {{{"pwm2", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                   {(char)0}, {(char)0}, {(char)0}}}}, & show_pwm,
     & set_pwm}, 1};
static struct device_attribute dev_attr_pwm2_freq  =    {{"pwm2_freq", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_pwm_freq, 0};
static struct sensor_device_attribute sensor_dev_attr_pwm2_auto_channels_temp  =    {{{"pwm2_auto_channels_temp",
      420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                           {(char)0}, {(char)0}, {(char)0}}}}, & show_pwm_temp_map,
     & set_pwm_temp_map}, 1};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm2_auto_point1_pwm  =    {{{"pwm2_auto_point1_pwm", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}}}}, & show_auto_pwm,
     & set_auto_pwm}, 0U, 1U};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm2_auto_point2_pwm  =    {{{"pwm2_auto_point2_pwm", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}}}}, & show_auto_pwm,
     & set_auto_pwm}, 1U, 1U};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm2_auto_point3_pwm  =    {{{"pwm2_auto_point3_pwm", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}}}}, & show_auto_pwm,
     & set_auto_pwm}, 2U, 1U};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm2_auto_point4_pwm  =    {{{"pwm2_auto_point4_pwm", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}}}}, & show_auto_pwm,
     0}, 3U, 1U};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm2_auto_point1_temp  =    {{{"pwm2_auto_point1_temp",
      420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                           {(char)0}, {(char)0}, {(char)0}}}}, & show_auto_temp, & set_auto_temp},
    1U, 1U};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm2_auto_point1_temp_hyst  =    {{{"pwm2_auto_point1_temp_hyst",
      420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                           {(char)0}, {(char)0}, {(char)0}}}}, & show_auto_temp, & set_auto_temp},
    0U, 1U};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm2_auto_point2_temp  =    {{{"pwm2_auto_point2_temp",
      420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                           {(char)0}, {(char)0}, {(char)0}}}}, & show_auto_temp, & set_auto_temp},
    2U, 1U};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm2_auto_point3_temp  =    {{{"pwm2_auto_point3_temp",
      420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                           {(char)0}, {(char)0}, {(char)0}}}}, & show_auto_temp, & set_auto_temp},
    3U, 1U};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm2_auto_point4_temp  =    {{{"pwm2_auto_point4_temp",
      420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                           {(char)0}, {(char)0}, {(char)0}}}}, & show_auto_temp, & set_auto_temp},
    4U, 1U};
static struct sensor_device_attribute sensor_dev_attr_pwm3_enable  =    {{{"pwm3_enable", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                          {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_pwm_enable, & set_pwm_enable}, 2};
static struct sensor_device_attribute sensor_dev_attr_pwm3  =    {{{"pwm3", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                   {(char)0}, {(char)0}, {(char)0}}}}, & show_pwm,
     & set_pwm}, 2};
static struct device_attribute dev_attr_pwm3_freq  =    {{"pwm3_freq", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_pwm_freq, 0};
static struct sensor_device_attribute sensor_dev_attr_pwm3_auto_channels_temp  =    {{{"pwm3_auto_channels_temp",
      420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                           {(char)0}, {(char)0}, {(char)0}}}}, & show_pwm_temp_map,
     & set_pwm_temp_map}, 2};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm3_auto_point1_pwm  =    {{{"pwm3_auto_point1_pwm", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}}}}, & show_auto_pwm,
     & set_auto_pwm}, 0U, 2U};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm3_auto_point2_pwm  =    {{{"pwm3_auto_point2_pwm", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}}}}, & show_auto_pwm,
     & set_auto_pwm}, 1U, 2U};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm3_auto_point3_pwm  =    {{{"pwm3_auto_point3_pwm", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}}}}, & show_auto_pwm,
     & set_auto_pwm}, 2U, 2U};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm3_auto_point4_pwm  =    {{{"pwm3_auto_point4_pwm", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}, {(char)0},
                                                   {(char)0}, {(char)0}}}}, & show_auto_pwm,
     0}, 3U, 2U};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm3_auto_point1_temp  =    {{{"pwm3_auto_point1_temp",
      420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                           {(char)0}, {(char)0}, {(char)0}}}}, & show_auto_temp, & set_auto_temp},
    1U, 2U};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm3_auto_point1_temp_hyst  =    {{{"pwm3_auto_point1_temp_hyst",
      420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                           {(char)0}, {(char)0}, {(char)0}}}}, & show_auto_temp, & set_auto_temp},
    0U, 2U};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm3_auto_point2_temp  =    {{{"pwm3_auto_point2_temp",
      420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                           {(char)0}, {(char)0}, {(char)0}}}}, & show_auto_temp, & set_auto_temp},
    2U, 2U};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm3_auto_point3_temp  =    {{{"pwm3_auto_point3_temp",
      420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                           {(char)0}, {(char)0}, {(char)0}}}}, & show_auto_temp, & set_auto_temp},
    3U, 2U};
static struct sensor_device_attribute_2 sensor_dev_attr_pwm3_auto_point4_temp  =    {{{"pwm3_auto_point4_temp",
      420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                           {(char)0}, {(char)0}, {(char)0}}}}, & show_auto_temp, & set_auto_temp},
    4U, 2U};
static ssize_t show_fan16(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = sprintf(buf, "%d\n", (unsigned int )data->fan[nr] != 0U ? ((unsigned int )data->fan[nr] != 65535U ? 1350000 / ((int )data->fan[nr] * 2) : 0) : -1);
  return ((ssize_t )tmp___0);
}
}
static ssize_t show_fan16_min(struct device *dev , struct device_attribute *attr ,
                              char *buf ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = sprintf(buf, "%d\n", (unsigned int )data->fan_min[nr] != 0U ? ((unsigned int )data->fan_min[nr] != 65535U ? 1350000 / ((int )data->fan_min[nr] * 2) : 0) : -1);
  return ((ssize_t )tmp___0);
}
}
static ssize_t set_fan16_min(struct device *dev , struct device_attribute *attr ,
                             char const   *buf , size_t count ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  void *tmp ;
  long val ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = kstrtol(buf, 10U, & val);
  if (tmp___0 < 0) {
    return (-22L);
  } else {

  }
  ldv_mutex_lock_31(& data->update_lock);
  data->fan_min[nr] = FAN16_TO_REG(val);
  it87_write_value(data, (int )IT87_REG_FAN_MIN[nr], (int )((u8 )data->fan_min[nr]));
  it87_write_value(data, (int )IT87_REG_FANX_MIN[nr], (int )((u8 )((int )data->fan_min[nr] >> 8)));
  ldv_mutex_unlock_32(& data->update_lock);
  return ((ssize_t )count);
}
}
static struct sensor_device_attribute sensor_dev_attr_fan1_input16  =    {{{"fan1_input", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                         {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_fan16, 0}, 0};
static struct sensor_device_attribute sensor_dev_attr_fan1_min16  =    {{{"fan1_min", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_fan16_min, & set_fan16_min}, 0};
static struct sensor_device_attribute sensor_dev_attr_fan2_input16  =    {{{"fan2_input", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                         {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_fan16, 0}, 1};
static struct sensor_device_attribute sensor_dev_attr_fan2_min16  =    {{{"fan2_min", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_fan16_min, & set_fan16_min}, 1};
static struct sensor_device_attribute sensor_dev_attr_fan3_input16  =    {{{"fan3_input", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                         {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_fan16, 0}, 2};
static struct sensor_device_attribute sensor_dev_attr_fan3_min16  =    {{{"fan3_min", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_fan16_min, & set_fan16_min}, 2};
static struct sensor_device_attribute sensor_dev_attr_fan4_input16  =    {{{"fan4_input", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                         {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_fan16, 0}, 3};
static struct sensor_device_attribute sensor_dev_attr_fan4_min16  =    {{{"fan4_min", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_fan16_min, & set_fan16_min}, 3};
static struct sensor_device_attribute sensor_dev_attr_fan5_input16  =    {{{"fan5_input", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                         {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_fan16, 0}, 4};
static struct sensor_device_attribute sensor_dev_attr_fan5_min16  =    {{{"fan5_min", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_fan16_min, & set_fan16_min}, 4};
static ssize_t show_alarms(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;

  {
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = sprintf(buf, "%u\n", data->alarms);
  return ((ssize_t )tmp___0);
}
}
static struct device_attribute dev_attr_alarms  =    {{"alarms", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                    {(char)0}, {(char)0}, {(char)0}}}}, & show_alarms,
    0};
static ssize_t show_alarm(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  int bitnr ;
  struct device_attribute  const  *__mptr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  bitnr = ((struct sensor_device_attribute *)__mptr)->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = sprintf(buf, "%u\n", (data->alarms >> bitnr) & 1U);
  return ((ssize_t )tmp___0);
}
}
static ssize_t clear_intrusion(struct device *dev , struct device_attribute *attr ,
                               char const   *buf , size_t count ) 
{ 
  struct it87_data *data ;
  void *tmp ;
  long val ;
  int config ;
  int tmp___0 ;

  {
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = kstrtol(buf, 10U, & val);
  if (tmp___0 < 0 || val != 0L) {
    return (-22L);
  } else {

  }
  ldv_mutex_lock_33(& data->update_lock);
  config = it87_read_value(data, 0);
  if (config < 0) {
    count = (size_t )config;
  } else {
    config = config | 32;
    it87_write_value(data, 0, (int )((u8 )config));
    data->valid = 0;
  }
  ldv_mutex_unlock_34(& data->update_lock);
  return ((ssize_t )count);
}
}
static struct sensor_device_attribute sensor_dev_attr_in0_alarm  =    {{{"in0_alarm", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_alarm, 0}, 8};
static struct sensor_device_attribute sensor_dev_attr_in1_alarm  =    {{{"in1_alarm", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_alarm, 0}, 9};
static struct sensor_device_attribute sensor_dev_attr_in2_alarm  =    {{{"in2_alarm", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_alarm, 0}, 10};
static struct sensor_device_attribute sensor_dev_attr_in3_alarm  =    {{{"in3_alarm", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_alarm, 0}, 11};
static struct sensor_device_attribute sensor_dev_attr_in4_alarm  =    {{{"in4_alarm", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_alarm, 0}, 12};
static struct sensor_device_attribute sensor_dev_attr_in5_alarm  =    {{{"in5_alarm", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_alarm, 0}, 13};
static struct sensor_device_attribute sensor_dev_attr_in6_alarm  =    {{{"in6_alarm", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_alarm, 0}, 14};
static struct sensor_device_attribute sensor_dev_attr_in7_alarm  =    {{{"in7_alarm", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_alarm, 0}, 15};
static struct sensor_device_attribute sensor_dev_attr_fan1_alarm  =    {{{"fan1_alarm", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                         {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_alarm, 0}, 0};
static struct sensor_device_attribute sensor_dev_attr_fan2_alarm  =    {{{"fan2_alarm", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                         {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_alarm, 0}, 1};
static struct sensor_device_attribute sensor_dev_attr_fan3_alarm  =    {{{"fan3_alarm", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                         {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_alarm, 0}, 2};
static struct sensor_device_attribute sensor_dev_attr_fan4_alarm  =    {{{"fan4_alarm", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                         {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_alarm, 0}, 3};
static struct sensor_device_attribute sensor_dev_attr_fan5_alarm  =    {{{"fan5_alarm", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                         {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_alarm, 0}, 6};
static struct sensor_device_attribute sensor_dev_attr_temp1_alarm  =    {{{"temp1_alarm", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                          {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_alarm, 0}, 16};
static struct sensor_device_attribute sensor_dev_attr_temp2_alarm  =    {{{"temp2_alarm", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                          {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_alarm, 0}, 17};
static struct sensor_device_attribute sensor_dev_attr_temp3_alarm  =    {{{"temp3_alarm", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                          {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_alarm, 0}, 18};
static struct sensor_device_attribute sensor_dev_attr_intrusion0_alarm  =    {{{"intrusion0_alarm", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                               {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_alarm, & clear_intrusion}, 4};
static ssize_t show_beep(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  int bitnr ;
  struct device_attribute  const  *__mptr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  bitnr = ((struct sensor_device_attribute *)__mptr)->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = sprintf(buf, "%u\n", ((int )data->beeps >> bitnr) & 1);
  return ((ssize_t )tmp___0);
}
}
static ssize_t set_beep(struct device *dev , struct device_attribute *attr , char const   *buf ,
                        size_t count ) 
{ 
  int bitnr ;
  struct device_attribute  const  *__mptr ;
  struct it87_data *data ;
  void *tmp ;
  long val ;
  int tmp___0 ;
  int tmp___1 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  bitnr = ((struct sensor_device_attribute *)__mptr)->index;
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = kstrtol(buf, 10U, & val);
  if (tmp___0 < 0 || (val != 0L && val != 1L)) {
    return (-22L);
  } else {

  }
  ldv_mutex_lock_35(& data->update_lock);
  tmp___1 = it87_read_value(data, 92);
  data->beeps = (u8 )tmp___1;
  if (val != 0L) {
    data->beeps = (u8 )((int )((signed char )data->beeps) | (int )((signed char )(1 << bitnr)));
  } else {
    data->beeps = (u8 )((int )((signed char )data->beeps) & ~ ((int )((signed char )(1 << bitnr))));
  }
  it87_write_value(data, 92, (int )data->beeps);
  ldv_mutex_unlock_36(& data->update_lock);
  return ((ssize_t )count);
}
}
static struct sensor_device_attribute sensor_dev_attr_in0_beep  =    {{{"in0_beep", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_beep, & set_beep}, 1};
static struct sensor_device_attribute sensor_dev_attr_in1_beep  =    {{{"in1_beep", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_beep, 0}, 1};
static struct sensor_device_attribute sensor_dev_attr_in2_beep  =    {{{"in2_beep", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_beep, 0}, 1};
static struct sensor_device_attribute sensor_dev_attr_in3_beep  =    {{{"in3_beep", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_beep, 0}, 1};
static struct sensor_device_attribute sensor_dev_attr_in4_beep  =    {{{"in4_beep", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_beep, 0}, 1};
static struct sensor_device_attribute sensor_dev_attr_in5_beep  =    {{{"in5_beep", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_beep, 0}, 1};
static struct sensor_device_attribute sensor_dev_attr_in6_beep  =    {{{"in6_beep", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_beep, 0}, 1};
static struct sensor_device_attribute sensor_dev_attr_in7_beep  =    {{{"in7_beep", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                       {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_beep, 0}, 1};
static struct sensor_device_attribute sensor_dev_attr_fan1_beep  =    {{{"fan1_beep", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_beep, & set_beep}, 0};
static struct sensor_device_attribute sensor_dev_attr_fan2_beep  =    {{{"fan2_beep", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_beep, & set_beep}, 0};
static struct sensor_device_attribute sensor_dev_attr_fan3_beep  =    {{{"fan3_beep", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_beep, & set_beep}, 0};
static struct sensor_device_attribute sensor_dev_attr_fan4_beep  =    {{{"fan4_beep", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_beep, & set_beep}, 0};
static struct sensor_device_attribute sensor_dev_attr_fan5_beep  =    {{{"fan5_beep", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_beep, & set_beep}, 0};
static struct sensor_device_attribute sensor_dev_attr_temp1_beep  =    {{{"temp1_beep", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                         {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_beep, & set_beep}, 2};
static struct sensor_device_attribute sensor_dev_attr_temp2_beep  =    {{{"temp2_beep", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                         {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_beep, 0}, 2};
static struct sensor_device_attribute sensor_dev_attr_temp3_beep  =    {{{"temp3_beep", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                         {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_beep, 0}, 2};
static ssize_t show_vrm_reg(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct it87_data *data ;
  void *tmp ;
  int tmp___0 ;

  {
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = sprintf(buf, "%u\n", (int )data->vrm);
  return ((ssize_t )tmp___0);
}
}
static ssize_t store_vrm_reg(struct device *dev , struct device_attribute *attr ,
                             char const   *buf , size_t count ) 
{ 
  struct it87_data *data ;
  void *tmp ;
  unsigned long val ;
  int tmp___0 ;

  {
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = kstrtoul(buf, 10U, & val);
  if (tmp___0 < 0) {
    return (-22L);
  } else {

  }
  data->vrm = (u8 )val;
  return ((ssize_t )count);
}
}
static struct device_attribute dev_attr_vrm  =    {{"vrm", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                 {(char)0}, {(char)0}, {(char)0}}}}, & show_vrm_reg,
    & store_vrm_reg};
static ssize_t show_vid_reg(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = vid_from_reg((int )data->vid, (int )data->vrm);
  tmp___1 = sprintf(buf, "%ld\n", (long )tmp___0);
  return ((ssize_t )tmp___1);
}
}
static struct device_attribute dev_attr_cpu0_vid  =    {{"cpu0_vid", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                      {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & show_vid_reg, 0};
static ssize_t show_label(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  char const   *labels[3U] ;
  char const   *labels_it8721[3U] ;
  struct it87_data *data ;
  void *tmp ;
  int nr ;
  struct device_attribute  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;

  {
  labels[0] = "+5V";
  labels[1] = "5VSB";
  labels[2] = "Vbat";
  labels_it8721[0] = "+3.3V";
  labels_it8721[1] = "3VSB";
  labels_it8721[2] = "Vbat";
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  __mptr = (struct device_attribute  const  *)attr;
  nr = ((struct sensor_device_attribute *)__mptr)->index;
  tmp___0 = has_12mv_adc((struct it87_data  const  *)data);
  tmp___1 = sprintf(buf, "%s\n", tmp___0 != 0 ? labels_it8721[nr] : labels[nr]);
  return ((ssize_t )tmp___1);
}
}
static struct sensor_device_attribute sensor_dev_attr_in3_label  =    {{{"in3_label", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_label, 0}, 0};
static struct sensor_device_attribute sensor_dev_attr_in7_label  =    {{{"in7_label", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_label, 0}, 1};
static struct sensor_device_attribute sensor_dev_attr_in8_label  =    {{{"in8_label", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                        {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
     & show_label, 0}, 2};
static ssize_t show_name(struct device *dev , struct device_attribute *devattr , char *buf ) 
{ 
  struct it87_data *data ;
  void *tmp ;
  int tmp___0 ;

  {
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = sprintf(buf, "%s\n", data->name);
  return ((ssize_t )tmp___0);
}
}
static struct device_attribute dev_attr_name  =    {{"name", 292U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                  {(char)0}, {(char)0}, {(char)0}}}}, & show_name,
    0};
static struct attribute *it87_attributes_in[9U][5U]  = 
  { {        & sensor_dev_attr_in0_input.dev_attr.attr,        & sensor_dev_attr_in0_min.dev_attr.attr,        & sensor_dev_attr_in0_max.dev_attr.attr,        & sensor_dev_attr_in0_alarm.dev_attr.attr, 
            0}, 
   {        & sensor_dev_attr_in1_input.dev_attr.attr,        & sensor_dev_attr_in1_min.dev_attr.attr,        & sensor_dev_attr_in1_max.dev_attr.attr,        & sensor_dev_attr_in1_alarm.dev_attr.attr, 
            0}, 
   {        & sensor_dev_attr_in2_input.dev_attr.attr,        & sensor_dev_attr_in2_min.dev_attr.attr,        & sensor_dev_attr_in2_max.dev_attr.attr,        & sensor_dev_attr_in2_alarm.dev_attr.attr, 
            0}, 
   {        & sensor_dev_attr_in3_input.dev_attr.attr,        & sensor_dev_attr_in3_min.dev_attr.attr,        & sensor_dev_attr_in3_max.dev_attr.attr,        & sensor_dev_attr_in3_alarm.dev_attr.attr, 
            0}, 
   {        & sensor_dev_attr_in4_input.dev_attr.attr,        & sensor_dev_attr_in4_min.dev_attr.attr,        & sensor_dev_attr_in4_max.dev_attr.attr,        & sensor_dev_attr_in4_alarm.dev_attr.attr, 
            0}, 
   {        & sensor_dev_attr_in5_input.dev_attr.attr,        & sensor_dev_attr_in5_min.dev_attr.attr,        & sensor_dev_attr_in5_max.dev_attr.attr,        & sensor_dev_attr_in5_alarm.dev_attr.attr, 
            0}, 
   {        & sensor_dev_attr_in6_input.dev_attr.attr,        & sensor_dev_attr_in6_min.dev_attr.attr,        & sensor_dev_attr_in6_max.dev_attr.attr,        & sensor_dev_attr_in6_alarm.dev_attr.attr, 
            0}, 
   {        & sensor_dev_attr_in7_input.dev_attr.attr,        & sensor_dev_attr_in7_min.dev_attr.attr,        & sensor_dev_attr_in7_max.dev_attr.attr,        & sensor_dev_attr_in7_alarm.dev_attr.attr, 
            0}, 
   {        & sensor_dev_attr_in8_input.dev_attr.attr,        0}};
static struct attribute_group  const  it87_group_in[9U]  = 
  {      {0, 0, (struct attribute **)(& it87_attributes_in)}, 
        {0, 0, (struct attribute **)(& it87_attributes_in) + 1U}, 
        {0, 0, (struct attribute **)(& it87_attributes_in) + 2U}, 
        {0, 0, (struct attribute **)(& it87_attributes_in) + 3U}, 
        {0, 0, (struct attribute **)(& it87_attributes_in) + 4U}, 
        {0, 0, (struct attribute **)(& it87_attributes_in) + 5U}, 
        {0, 0, (struct attribute **)(& it87_attributes_in) + 6U}, 
        {0, 0, (struct attribute **)(& it87_attributes_in) + 7U}, 
        {0, 0, (struct attribute **)(& it87_attributes_in) + 8U}};
static struct attribute *it87_attributes_temp[3U][6U]  = { {        & sensor_dev_attr_temp1_input.dev_attr.attr,        & sensor_dev_attr_temp1_max.dev_attr.attr,        & sensor_dev_attr_temp1_min.dev_attr.attr,        & sensor_dev_attr_temp1_type.dev_attr.attr, 
            & sensor_dev_attr_temp1_alarm.dev_attr.attr,        0}, 
   {        & sensor_dev_attr_temp2_input.dev_attr.attr,        & sensor_dev_attr_temp2_max.dev_attr.attr,        & sensor_dev_attr_temp2_min.dev_attr.attr,        & sensor_dev_attr_temp2_type.dev_attr.attr, 
            & sensor_dev_attr_temp2_alarm.dev_attr.attr,        0}, 
   {        & sensor_dev_attr_temp3_input.dev_attr.attr,        & sensor_dev_attr_temp3_max.dev_attr.attr,        & sensor_dev_attr_temp3_min.dev_attr.attr,        & sensor_dev_attr_temp3_type.dev_attr.attr, 
            & sensor_dev_attr_temp3_alarm.dev_attr.attr,        0}};
static struct attribute_group  const  it87_group_temp[3U]  = {      {0, 0, (struct attribute **)(& it87_attributes_temp)}, 
        {0, 0, (struct attribute **)(& it87_attributes_temp) + 1U}, 
        {0, 0, (struct attribute **)(& it87_attributes_temp) + 2U}};
static struct attribute *it87_attributes[4U]  = {      & dev_attr_alarms.attr,      & sensor_dev_attr_intrusion0_alarm.dev_attr.attr,      & dev_attr_name.attr,      0};
static struct attribute_group  const  it87_group  =    {0, 0, (struct attribute **)(& it87_attributes)};
static struct attribute *it87_attributes_in_beep[9U]  = 
  {      & sensor_dev_attr_in0_beep.dev_attr.attr,      & sensor_dev_attr_in1_beep.dev_attr.attr,      & sensor_dev_attr_in2_beep.dev_attr.attr,      & sensor_dev_attr_in3_beep.dev_attr.attr, 
        & sensor_dev_attr_in4_beep.dev_attr.attr,      & sensor_dev_attr_in5_beep.dev_attr.attr,      & sensor_dev_attr_in6_beep.dev_attr.attr,      & sensor_dev_attr_in7_beep.dev_attr.attr, 
        0};
static struct attribute *it87_attributes_temp_beep[3U]  = {      & sensor_dev_attr_temp1_beep.dev_attr.attr,      & sensor_dev_attr_temp2_beep.dev_attr.attr,      & sensor_dev_attr_temp3_beep.dev_attr.attr};
static struct attribute *it87_attributes_fan16[5U][4U]  = { {        & sensor_dev_attr_fan1_input16.dev_attr.attr,        & sensor_dev_attr_fan1_min16.dev_attr.attr,        & sensor_dev_attr_fan1_alarm.dev_attr.attr,        0}, 
   {        & sensor_dev_attr_fan2_input16.dev_attr.attr,        & sensor_dev_attr_fan2_min16.dev_attr.attr,        & sensor_dev_attr_fan2_alarm.dev_attr.attr,        0}, 
   {        & sensor_dev_attr_fan3_input16.dev_attr.attr,        & sensor_dev_attr_fan3_min16.dev_attr.attr,        & sensor_dev_attr_fan3_alarm.dev_attr.attr,        0}, 
   {        & sensor_dev_attr_fan4_input16.dev_attr.attr,        & sensor_dev_attr_fan4_min16.dev_attr.attr,        & sensor_dev_attr_fan4_alarm.dev_attr.attr,        0}, 
   {        & sensor_dev_attr_fan5_input16.dev_attr.attr,        & sensor_dev_attr_fan5_min16.dev_attr.attr,        & sensor_dev_attr_fan5_alarm.dev_attr.attr,        0}};
static struct attribute_group  const  it87_group_fan16[5U]  = {      {0, 0, (struct attribute **)(& it87_attributes_fan16)}, 
        {0, 0, (struct attribute **)(& it87_attributes_fan16) + 1U}, 
        {0, 0, (struct attribute **)(& it87_attributes_fan16) + 2U}, 
        {0, 0, (struct attribute **)(& it87_attributes_fan16) + 3U}, 
        {0, 0, (struct attribute **)(& it87_attributes_fan16) + 4U}};
static struct attribute *it87_attributes_fan[3U][5U]  = { {        & sensor_dev_attr_fan1_input.dev_attr.attr,        & sensor_dev_attr_fan1_min.dev_attr.attr,        & sensor_dev_attr_fan1_div.dev_attr.attr,        & sensor_dev_attr_fan1_alarm.dev_attr.attr, 
            0}, 
   {        & sensor_dev_attr_fan2_input.dev_attr.attr,        & sensor_dev_attr_fan2_min.dev_attr.attr,        & sensor_dev_attr_fan2_div.dev_attr.attr,        & sensor_dev_attr_fan2_alarm.dev_attr.attr, 
            0}, 
   {        & sensor_dev_attr_fan3_input.dev_attr.attr,        & sensor_dev_attr_fan3_min.dev_attr.attr,        & sensor_dev_attr_fan3_div.dev_attr.attr,        & sensor_dev_attr_fan3_alarm.dev_attr.attr, 
            0}};
static struct attribute_group  const  it87_group_fan[3U]  = {      {0, 0, (struct attribute **)(& it87_attributes_fan)}, 
        {0, 0, (struct attribute **)(& it87_attributes_fan) + 1U}, 
        {0, 0, (struct attribute **)(& it87_attributes_fan) + 2U}};
static struct attribute_group  const  *it87_get_fan_group(struct it87_data  const  *data ) 
{ 
  int tmp ;

  {
  tmp = has_16bit_fans(data);
  return (tmp != 0 ? (struct attribute_group  const  *)(& it87_group_fan16) : (struct attribute_group  const  *)(& it87_group_fan));
}
}
static struct attribute *it87_attributes_pwm[3U][5U]  = { {        & sensor_dev_attr_pwm1_enable.dev_attr.attr,        & sensor_dev_attr_pwm1.dev_attr.attr,        & dev_attr_pwm1_freq.attr,        & sensor_dev_attr_pwm1_auto_channels_temp.dev_attr.attr, 
            0}, 
   {        & sensor_dev_attr_pwm2_enable.dev_attr.attr,        & sensor_dev_attr_pwm2.dev_attr.attr,        & dev_attr_pwm2_freq.attr,        & sensor_dev_attr_pwm2_auto_channels_temp.dev_attr.attr, 
            0}, 
   {        & sensor_dev_attr_pwm3_enable.dev_attr.attr,        & sensor_dev_attr_pwm3.dev_attr.attr,        & dev_attr_pwm3_freq.attr,        & sensor_dev_attr_pwm3_auto_channels_temp.dev_attr.attr, 
            0}};
static struct attribute_group  const  it87_group_pwm[3U]  = {      {0, 0, (struct attribute **)(& it87_attributes_pwm)}, 
        {0, 0, (struct attribute **)(& it87_attributes_pwm) + 1U}, 
        {0, 0, (struct attribute **)(& it87_attributes_pwm) + 2U}};
static struct attribute *it87_attributes_autopwm[3U][10U]  = { {        & sensor_dev_attr_pwm1_auto_point1_pwm.dev_attr.attr,        & sensor_dev_attr_pwm1_auto_point2_pwm.dev_attr.attr,        & sensor_dev_attr_pwm1_auto_point3_pwm.dev_attr.attr,        & sensor_dev_attr_pwm1_auto_point4_pwm.dev_attr.attr, 
            & sensor_dev_attr_pwm1_auto_point1_temp.dev_attr.attr,        & sensor_dev_attr_pwm1_auto_point1_temp_hyst.dev_attr.attr,        & sensor_dev_attr_pwm1_auto_point2_temp.dev_attr.attr,        & sensor_dev_attr_pwm1_auto_point3_temp.dev_attr.attr, 
            & sensor_dev_attr_pwm1_auto_point4_temp.dev_attr.attr,        0}, 
   {        & sensor_dev_attr_pwm2_auto_point1_pwm.dev_attr.attr,        & sensor_dev_attr_pwm2_auto_point2_pwm.dev_attr.attr,        & sensor_dev_attr_pwm2_auto_point3_pwm.dev_attr.attr,        & sensor_dev_attr_pwm2_auto_point4_pwm.dev_attr.attr, 
            & sensor_dev_attr_pwm2_auto_point1_temp.dev_attr.attr,        & sensor_dev_attr_pwm2_auto_point1_temp_hyst.dev_attr.attr,        & sensor_dev_attr_pwm2_auto_point2_temp.dev_attr.attr,        & sensor_dev_attr_pwm2_auto_point3_temp.dev_attr.attr, 
            & sensor_dev_attr_pwm2_auto_point4_temp.dev_attr.attr,        0}, 
   {        & sensor_dev_attr_pwm3_auto_point1_pwm.dev_attr.attr,        & sensor_dev_attr_pwm3_auto_point2_pwm.dev_attr.attr,        & sensor_dev_attr_pwm3_auto_point3_pwm.dev_attr.attr,        & sensor_dev_attr_pwm3_auto_point4_pwm.dev_attr.attr, 
            & sensor_dev_attr_pwm3_auto_point1_temp.dev_attr.attr,        & sensor_dev_attr_pwm3_auto_point1_temp_hyst.dev_attr.attr,        & sensor_dev_attr_pwm3_auto_point2_temp.dev_attr.attr,        & sensor_dev_attr_pwm3_auto_point3_temp.dev_attr.attr, 
            & sensor_dev_attr_pwm3_auto_point4_temp.dev_attr.attr,        0}};
static struct attribute_group  const  it87_group_autopwm[3U]  = {      {0, 0, (struct attribute **)(& it87_attributes_autopwm)}, 
        {0, 0, (struct attribute **)(& it87_attributes_autopwm) + 1U}, 
        {0, 0, (struct attribute **)(& it87_attributes_autopwm) + 2U}};
static struct attribute *it87_attributes_fan_beep[5U]  = {      & sensor_dev_attr_fan1_beep.dev_attr.attr,      & sensor_dev_attr_fan2_beep.dev_attr.attr,      & sensor_dev_attr_fan3_beep.dev_attr.attr,      & sensor_dev_attr_fan4_beep.dev_attr.attr, 
        & sensor_dev_attr_fan5_beep.dev_attr.attr};
static struct attribute *it87_attributes_vid[3U]  = {      & dev_attr_vrm.attr,      & dev_attr_cpu0_vid.attr,      0};
static struct attribute_group  const  it87_group_vid  =    {0, 0, (struct attribute **)(& it87_attributes_vid)};
static struct attribute *it87_attributes_label[4U]  = {      & sensor_dev_attr_in3_label.dev_attr.attr,      & sensor_dev_attr_in7_label.dev_attr.attr,      & sensor_dev_attr_in8_label.dev_attr.attr,      0};
static struct attribute_group  const  it87_group_label  =    {0, 0, (struct attribute **)(& it87_attributes_label)};
static int it87_find(unsigned short *address , struct it87_sio_data *sio_data ) 
{ 
  int err ;
  u16 chip_type ;
  char const   *board_vendor ;
  char const   *board_name ;
  int tmp ;
  struct _ddebug descriptor ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int reg25 ;
  int reg27 ;
  int reg2A ;
  int reg2C ;
  int regEF ;
  int tmp___5 ;
  int reg ;
  bool uart6 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;

  {
  err = superio_enter();
  if (err != 0) {
    return (err);
  } else {

  }
  err = -19;
  if ((unsigned int )force_id == 0U) {
    tmp = superio_inw(32);
    chip_type = (u16 )tmp;
  } else {
    chip_type = force_id;
  }
  switch ((int )chip_type) {
  case 34565: 
  sio_data->type = it87;
  goto ldv_26778;
  case 34578: 
  sio_data->type = it8712;
  goto ldv_26778;
  case 34582: ;
  case 34598: 
  sio_data->type = it8716;
  goto ldv_26778;
  case 34584: 
  sio_data->type = it8718;
  goto ldv_26778;
  case 34592: 
  sio_data->type = it8720;
  goto ldv_26778;
  case 34593: 
  sio_data->type = it8721;
  goto ldv_26778;
  case 34600: 
  sio_data->type = it8728;
  goto ldv_26778;
  case 34690: 
  sio_data->type = it8782;
  goto ldv_26778;
  case 34691: 
  sio_data->type = it8783;
  goto ldv_26778;
  case 65535: ;
  goto exit;
  default: 
  descriptor.modname = "it87";
  descriptor.function = "it87_find";
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/hwmon/it87.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/hwmon/it87.c.prepared";
  descriptor.format = "Unsupported chip (DEVID=0x%x)\n";
  descriptor.lineno = 1711U;
  descriptor.flags = 1U;
  tmp___0 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  if (tmp___0 != 0L) {
    __dynamic_pr_debug(& descriptor, "it87: Unsupported chip (DEVID=0x%x)\n", (int )chip_type);
  } else {

  }
  goto exit;
  }
  ldv_26778: 
  superio_select(4);
  tmp___1 = superio_inb(48);
  if ((tmp___1 & 1) == 0) {
    printk("\016it87: Device not activated, skipping\n");
    goto exit;
  } else {

  }
  tmp___2 = superio_inw(96);
  *address = (unsigned int )((unsigned short )tmp___2) & 65528U;
  if ((unsigned int )*address == 0U) {
    printk("\016it87: Base address not set, skipping\n");
    goto exit;
  } else {

  }
  err = 0;
  tmp___3 = superio_inb(34);
  sio_data->revision = (unsigned int )((u8 )tmp___3) & 15U;
  printk("\016it87: Found IT%04xF chip at 0x%x, revision %d\n", (int )chip_type, (int )*address,
         (int )sio_data->revision);
  sio_data->internal = 4U;
  if ((unsigned int )sio_data->type == 0U) {
    sio_data->skip_vid = 1U;
    superio_select(5);
    tmp___4 = superio_inb(246);
    sio_data->beep_pin = (unsigned int )((u8 )tmp___4) & 63U;
  } else
  if ((unsigned int )sio_data->type == 8U) {
    sio_data->skip_vid = 1U;
    superio_select(7);
    reg25 = superio_inb(37);
    reg27 = superio_inb(39);
    reg2A = superio_inb(42);
    reg2C = superio_inb(44);
    regEF = superio_inb(239);
    if (reg27 & 1 || (reg2C & 4) == 0) {
      sio_data->skip_fan = (u8 )((unsigned int )sio_data->skip_fan | 4U);
    } else {

    }
    if ((reg25 & 16) != 0 || ((reg2A & 2) == 0 && regEF & 1)) {
      sio_data->skip_pwm = (u8 )((unsigned int )sio_data->skip_pwm | 4U);
    } else {

    }
    if ((reg27 & 128) != 0) {
      sio_data->skip_fan = (u8 )((unsigned int )sio_data->skip_fan | 2U);
    } else {

    }
    if ((reg27 & 8) != 0) {
      sio_data->skip_pwm = (u8 )((unsigned int )sio_data->skip_pwm | 2U);
    } else {

    }
    if (reg27 & 1 || (reg2C & 4) != 0) {
      sio_data->skip_in = (u16 )((unsigned int )sio_data->skip_in | 32U);
    } else {

    }
    if ((reg27 & 2) != 0) {
      sio_data->skip_in = (u16 )((unsigned int )sio_data->skip_in | 64U);
    } else {

    }
    if ((reg27 & 4) != 0) {
      if ((reg2C & 2) == 0) {
        reg2C = reg2C | 2;
        superio_outb(44, reg2C);
        printk("\rit87: Routing internal VCCH5V to in7.\n");
      } else {

      }
      printk("\rit87: in7 routed to internal voltage divider, with external pin disabled.\n");
      printk("\rit87: Please report if it displays a reasonable voltage.\n");
    } else {

    }
    if (reg2C & 1) {
      sio_data->internal = (u8 )((unsigned int )sio_data->internal | 1U);
    } else {

    }
    if ((reg2C & 2) != 0) {
      sio_data->internal = (u8 )((unsigned int )sio_data->internal | 2U);
    } else {

    }
    tmp___5 = superio_inb(246);
    sio_data->beep_pin = (unsigned int )((u8 )tmp___5) & 63U;
  } else {
    superio_select(7);
    reg = superio_inb(39);
    if (((unsigned int )sio_data->type == 5U || (unsigned int )sio_data->type == 6U) || (unsigned int )sio_data->type == 7U) {
      sio_data->skip_vid = 1U;
    } else
    if ((reg & 15) != 0) {
      printk("\016it87: VID is disabled (pins used for GPIO)\n");
      sio_data->skip_vid = 1U;
    } else {

    }
    if ((reg & 64) != 0) {
      sio_data->skip_pwm = (u8 )((unsigned int )sio_data->skip_pwm | 4U);
    } else {

    }
    if ((reg & 128) != 0) {
      sio_data->skip_fan = (u8 )((unsigned int )sio_data->skip_fan | 4U);
    } else {

    }
    reg = superio_inb(41);
    if ((reg & 2) != 0) {
      sio_data->skip_pwm = (u8 )((unsigned int )sio_data->skip_pwm | 2U);
    } else {

    }
    if ((reg & 4) != 0) {
      sio_data->skip_fan = (u8 )((unsigned int )sio_data->skip_fan | 2U);
    } else {

    }
    if (((unsigned int )sio_data->type == 3U || (unsigned int )sio_data->type == 4U) && (unsigned int )sio_data->skip_vid == 0U) {
      tmp___6 = superio_inb(252);
      sio_data->vid_value = (u8 )tmp___6;
    } else {

    }
    reg = superio_inb(44);
    uart6 = (bool )((unsigned int )sio_data->type == 7U && (reg & 4) != 0);
    if (((unsigned int )sio_data->type == 4U || (int )uart6) && (reg & 2) == 0) {
      reg = reg | 2;
      superio_outb(44, reg);
      printk("\rit87: Routing internal VCCH to in7\n");
    } else {

    }
    if (reg & 1) {
      sio_data->internal = (u8 )((unsigned int )sio_data->internal | 1U);
    } else {

    }
    if (((reg & 2) != 0 || (unsigned int )sio_data->type == 5U) || (unsigned int )sio_data->type == 6U) {
      sio_data->internal = (u8 )((unsigned int )sio_data->internal | 2U);
    } else {

    }
    if ((int )uart6) {
      sio_data->skip_in = (u16 )((unsigned int )sio_data->skip_in | 96U);
      sio_data->skip_temp = (u8 )((unsigned int )sio_data->skip_temp | 4U);
    } else {

    }
    tmp___7 = superio_inb(246);
    sio_data->beep_pin = (unsigned int )((u8 )tmp___7) & 63U;
  }
  if ((unsigned int )sio_data->beep_pin != 0U) {
    printk("\016it87: Beeping is supported\n");
  } else {

  }
  board_vendor = dmi_get_system_info(9);
  board_name = dmi_get_system_info(10);
  if ((unsigned long )board_vendor != (unsigned long )((char const   *)0) && (unsigned long )board_name != (unsigned long )((char const   *)0)) {
    tmp___8 = strcmp(board_vendor, "nVIDIA");
    if (tmp___8 == 0) {
      tmp___9 = strcmp(board_name, "FN68PT");
      if (tmp___9 == 0) {
        printk("\016it87: Disabling pwm2 due to hardware constraints\n");
        sio_data->skip_pwm = 2U;
      } else {

      }
    } else {

    }
  } else {

  }
  exit: 
  superio_exit();
  return (err);
}
}
static void it87_remove_files(struct device *dev ) 
{ 
  struct it87_data *data ;
  void *tmp ;
  struct it87_sio_data *sio_data ;
  struct attribute_group  const  *fan_group ;
  struct attribute_group  const  *tmp___0 ;
  int i ;
  int tmp___1 ;

  {
  tmp = platform_get_drvdata((struct platform_device  const  *)pdev);
  data = (struct it87_data *)tmp;
  sio_data = (struct it87_sio_data *)dev->platform_data;
  tmp___0 = it87_get_fan_group((struct it87_data  const  *)data);
  fan_group = tmp___0;
  sysfs_remove_group(& dev->kobj, & it87_group);
  i = 0;
  goto ldv_26809;
  ldv_26808: ;
  if (((int )sio_data->skip_in >> i) & 1) {
    goto ldv_26807;
  } else {

  }
  sysfs_remove_group(& dev->kobj, (struct attribute_group  const  *)(& it87_group_in) + (unsigned long )i);
  if ((unsigned long )it87_attributes_in_beep[i] != (unsigned long )((struct attribute *)0)) {
    sysfs_remove_file(& dev->kobj, (struct attribute  const  *)it87_attributes_in_beep[i]);
  } else {

  }
  ldv_26807: 
  i = i + 1;
  ldv_26809: ;
  if (i <= 8) {
    goto ldv_26808;
  } else {

  }
  i = 0;
  goto ldv_26813;
  ldv_26812: ;
  if ((((int )data->has_temp >> i) & 1) == 0) {
    goto ldv_26811;
  } else {

  }
  sysfs_remove_group(& dev->kobj, (struct attribute_group  const  *)(& it87_group_temp) + (unsigned long )i);
  if ((unsigned int )sio_data->beep_pin != 0U) {
    sysfs_remove_file(& dev->kobj, (struct attribute  const  *)it87_attributes_temp_beep[i]);
  } else {

  }
  ldv_26811: 
  i = i + 1;
  ldv_26813: ;
  if (i <= 2) {
    goto ldv_26812;
  } else {

  }
  i = 0;
  goto ldv_26817;
  ldv_26816: ;
  if ((((int )data->has_fan >> i) & 1) == 0) {
    goto ldv_26815;
  } else {

  }
  sysfs_remove_group(& dev->kobj, fan_group + (unsigned long )i);
  if ((unsigned int )sio_data->beep_pin != 0U) {
    sysfs_remove_file(& dev->kobj, (struct attribute  const  *)it87_attributes_fan_beep[i]);
  } else {

  }
  ldv_26815: 
  i = i + 1;
  ldv_26817: ;
  if (i <= 4) {
    goto ldv_26816;
  } else {

  }
  i = 0;
  goto ldv_26821;
  ldv_26820: ;
  if ((int )sio_data->skip_pwm & 1) {
    goto ldv_26819;
  } else {

  }
  sysfs_remove_group(& dev->kobj, (struct attribute_group  const  *)(& it87_group_pwm) + (unsigned long )i);
  tmp___1 = has_old_autopwm((struct it87_data  const  *)data);
  if (tmp___1 != 0) {
    sysfs_remove_group(& dev->kobj, (struct attribute_group  const  *)(& it87_group_autopwm) + (unsigned long )i);
  } else {

  }
  ldv_26819: 
  i = i + 1;
  ldv_26821: ;
  if (i <= 2) {
    goto ldv_26820;
  } else {

  }

  if ((unsigned int )sio_data->skip_vid == 0U) {
    sysfs_remove_group(& dev->kobj, & it87_group_vid);
  } else {

  }
  sysfs_remove_group(& dev->kobj, & it87_group_label);
  return;
}
}
static int it87_probe(struct platform_device *pdev___0 ) 
{ 
  struct it87_data *data ;
  struct resource *res ;
  struct device *dev ;
  struct it87_sio_data *sio_data ;
  struct attribute_group  const  *fan_group ;
  int err ;
  int i ;
  int enable_pwm_interface ;
  int fan_beep_need_rw ;
  char const   *names[9U] ;
  struct resource *tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct lock_class_key __key ;
  int tmp___3 ;
  int tmp___4 ;
  struct _ddebug descriptor ;
  long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  long tmp___9 ;

  {
  dev = & pdev___0->dev;
  sio_data = (struct it87_sio_data *)dev->platform_data;
  err = 0;
  names[0] = "it87";
  names[1] = "it8712";
  names[2] = "it8716";
  names[3] = "it8718";
  names[4] = "it8720";
  names[5] = "it8721";
  names[6] = "it8728";
  names[7] = "it8782";
  names[8] = "it8783";
  res = platform_get_resource(pdev___0, 256U, 0U);
  tmp = __devm_request_region(& pdev___0->dev, & ioport_resource, res->start, 2ULL,
                              "it87");
  if ((unsigned long )tmp == (unsigned long )((struct resource *)0)) {
    dev_err((struct device  const  *)dev, "Failed to request region 0x%lx-0x%lx\n",
            (unsigned long )res->start, (unsigned long )(res->start + 1ULL));
    return (-16);
  } else {

  }
  tmp___0 = devm_kzalloc(& pdev___0->dev, 320UL, 208U);
  data = (struct it87_data *)tmp___0;
  if ((unsigned long )data == (unsigned long )((struct it87_data *)0)) {
    return (-12);
  } else {

  }
  data->addr = (unsigned short )res->start;
  data->type = sio_data->type;
  data->revision = sio_data->revision;
  data->name = names[(unsigned int )sio_data->type];
  tmp___1 = it87_read_value(data, 0);
  if ((tmp___1 & 128) != 0) {
    return (-19);
  } else {
    tmp___2 = it87_read_value(data, 88);
    if (tmp___2 != 144) {
      return (-19);
    } else {

    }
  }
  platform_set_drvdata(pdev___0, (void *)data);
  __mutex_init(& data->update_lock, "&data->update_lock", & __key);
  enable_pwm_interface = it87_check_pwm(dev);
  tmp___3 = has_12mv_adc((struct it87_data  const  *)data);
  if (tmp___3 != 0) {
    if ((int )sio_data->internal & 1) {
      data->in_scaled = (u16 )((unsigned int )data->in_scaled | 8U);
    } else {

    }
    if (((int )sio_data->internal & 2) != 0) {
      data->in_scaled = (u16 )((unsigned int )data->in_scaled | 128U);
    } else {

    }
    if (((int )sio_data->internal & 4) != 0) {
      data->in_scaled = (u16 )((unsigned int )data->in_scaled | 256U);
    } else {

    }
  } else
  if ((unsigned int )sio_data->type == 7U || (unsigned int )sio_data->type == 8U) {
    if ((int )sio_data->internal & 1) {
      data->in_scaled = (u16 )((unsigned int )data->in_scaled | 8U);
    } else {

    }
    if (((int )sio_data->internal & 2) != 0) {
      data->in_scaled = (u16 )((unsigned int )data->in_scaled | 128U);
    } else {

    }
  } else {

  }
  data->has_temp = 7U;
  if (((int )sio_data->skip_temp & 4) != 0) {
    if ((unsigned int )sio_data->type == 7U) {
      tmp___4 = it87_read_value(data, 85);
      if ((tmp___4 & 128) == 0) {
        data->has_temp = (unsigned int )data->has_temp & 251U;
      } else {

      }
    } else {

    }
  } else {

  }
  it87_init_device(pdev___0);
  err = sysfs_create_group(& dev->kobj, & it87_group);
  if (err != 0) {
    return (err);
  } else {

  }
  i = 0;
  goto ldv_26840;
  ldv_26839: ;
  if (((int )sio_data->skip_in >> i) & 1) {
    goto ldv_26837;
  } else {

  }
  err = sysfs_create_group(& dev->kobj, (struct attribute_group  const  *)(& it87_group_in) + (unsigned long )i);
  if (err != 0) {
    goto error;
  } else {

  }
  if ((unsigned int )sio_data->beep_pin != 0U && (unsigned long )it87_attributes_in_beep[i] != (unsigned long )((struct attribute *)0)) {
    err = sysfs_create_file(& dev->kobj, (struct attribute  const  *)it87_attributes_in_beep[i]);
    if (err != 0) {
      goto error;
    } else {

    }
  } else {

  }
  ldv_26837: 
  i = i + 1;
  ldv_26840: ;
  if (i <= 8) {
    goto ldv_26839;
  } else {

  }
  i = 0;
  goto ldv_26844;
  ldv_26843: ;
  if ((((int )data->has_temp >> i) & 1) == 0) {
    goto ldv_26842;
  } else {

  }
  err = sysfs_create_group(& dev->kobj, (struct attribute_group  const  *)(& it87_group_temp) + (unsigned long )i);
  if (err != 0) {
    goto error;
  } else {

  }
  if ((unsigned int )sio_data->beep_pin != 0U) {
    err = sysfs_create_file(& dev->kobj, (struct attribute  const  *)it87_attributes_temp_beep[i]);
    if (err != 0) {
      goto error;
    } else {

    }
  } else {

  }
  ldv_26842: 
  i = i + 1;
  ldv_26844: ;
  if (i <= 2) {
    goto ldv_26843;
  } else {

  }
  fan_group = it87_get_fan_group((struct it87_data  const  *)data);
  fan_beep_need_rw = 1;
  i = 0;
  goto ldv_26850;
  ldv_26849: ;
  if ((((int )data->has_fan >> i) & 1) == 0) {
    goto ldv_26846;
  } else {

  }
  err = sysfs_create_group(& dev->kobj, fan_group + (unsigned long )i);
  if (err != 0) {
    goto error;
  } else {

  }
  if ((unsigned int )sio_data->beep_pin != 0U) {
    err = sysfs_create_file(& dev->kobj, (struct attribute  const  *)it87_attributes_fan_beep[i]);
    if (err != 0) {
      goto error;
    } else {

    }
    if (fan_beep_need_rw == 0) {
      goto ldv_26846;
    } else {

    }
    tmp___6 = sysfs_chmod_file(& dev->kobj, (struct attribute  const  *)it87_attributes_fan_beep[i],
                               420);
    if (tmp___6 != 0) {
      descriptor.modname = "it87";
      descriptor.function = "it87_probe";
      descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/hwmon/it87.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/hwmon/it87.c.prepared";
      descriptor.format = "chmod +w fan%d_beep failed\n";
      descriptor.lineno = 2104U;
      descriptor.flags = 1U;
      tmp___5 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
      if (tmp___5 != 0L) {
        __dynamic_dev_dbg(& descriptor, (struct device  const  *)dev, "chmod +w fan%d_beep failed\n",
                          i + 1);
      } else {

      }
    } else {

    }
    fan_beep_need_rw = 0;
  } else {

  }
  ldv_26846: 
  i = i + 1;
  ldv_26850: ;
  if (i <= 4) {
    goto ldv_26849;
  } else {

  }

  if (enable_pwm_interface != 0) {
    i = 0;
    goto ldv_26854;
    ldv_26853: ;
    if (((int )sio_data->skip_pwm >> i) & 1) {
      goto ldv_26852;
    } else {

    }
    err = sysfs_create_group(& dev->kobj, (struct attribute_group  const  *)(& it87_group_pwm) + (unsigned long )i);
    if (err != 0) {
      goto error;
    } else {

    }
    tmp___7 = has_old_autopwm((struct it87_data  const  *)data);
    if (tmp___7 == 0) {
      goto ldv_26852;
    } else {

    }
    err = sysfs_create_group(& dev->kobj, (struct attribute_group  const  *)(& it87_group_autopwm) + (unsigned long )i);
    if (err != 0) {
      goto error;
    } else {

    }
    ldv_26852: 
    i = i + 1;
    ldv_26854: ;
    if (i <= 2) {
      goto ldv_26853;
    } else {

    }

  } else {

  }
  if ((unsigned int )sio_data->skip_vid == 0U) {
    data->vrm = vid_which_vrm();
    data->vid = sio_data->vid_value;
    err = sysfs_create_group(& dev->kobj, & it87_group_vid);
    if (err != 0) {
      goto error;
    } else {

    }
  } else {

  }
  i = 0;
  goto ldv_26858;
  ldv_26857: ;
  if ((((int )sio_data->internal >> i) & 1) == 0) {
    goto ldv_26856;
  } else {

  }
  err = sysfs_create_file(& dev->kobj, (struct attribute  const  *)it87_attributes_label[i]);
  if (err != 0) {
    goto error;
  } else {

  }
  ldv_26856: 
  i = i + 1;
  ldv_26858: ;
  if (i <= 2) {
    goto ldv_26857;
  } else {

  }
  data->hwmon_dev = hwmon_device_register(dev);
  tmp___9 = IS_ERR((void const   *)data->hwmon_dev);
  if (tmp___9 != 0L) {
    tmp___8 = PTR_ERR((void const   *)data->hwmon_dev);
    err = (int )tmp___8;
    goto error;
  } else {

  }
  return (0);
  error: 
  it87_remove_files(dev);
  return (err);
}
}
static int it87_remove(struct platform_device *pdev___0 ) 
{ 
  struct it87_data *data ;
  void *tmp ;

  {
  tmp = platform_get_drvdata((struct platform_device  const  *)pdev___0);
  data = (struct it87_data *)tmp;
  hwmon_device_unregister(data->hwmon_dev);
  it87_remove_files(& pdev___0->dev);
  return (0);
}
}
static int it87_read_value(struct it87_data *data , u8 reg ) 
{ 
  unsigned char tmp ;

  {
  outb_p((int )reg, (int )data->addr);
  tmp = inb_p((int )data->addr + 1);
  return ((int )tmp);
}
}
static void it87_write_value(struct it87_data *data , u8 reg , u8 value ) 
{ 


  {
  outb_p((int )reg, (int )data->addr);
  outb_p((int )value, (int )data->addr + 1);
  return;
}
}
static int it87_check_pwm(struct device *dev ) 
{ 
  struct it87_data *data ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int i ;
  u8 pwm[3U] ;
  int tmp___2 ;

  {
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___1 = it87_read_value(data, 20);
  tmp___0 = tmp___1;
  if ((tmp___0 & 135) == 0) {
    if ((int )fix_pwm_polarity) {
      i = 0;
      goto ldv_26881;
      ldv_26880: 
      tmp___2 = it87_read_value(data, (int )((unsigned int )((u8 )i) + 21U));
      pwm[i] = (u8 )tmp___2;
      i = i + 1;
      ldv_26881: ;
      if (i <= 2) {
        goto ldv_26880;
      } else {

      }

      if ((int )((signed char )(((int )pwm[0] | (int )pwm[1]) | (int )pwm[2])) >= 0) {
        _dev_info((struct device  const  *)dev, "Reconfiguring PWM to active high polarity\n");
        it87_write_value(data, 20, (int )((u8 )((int )((signed char )tmp___0) | -121)));
        i = 0;
        goto ldv_26884;
        ldv_26883: 
        it87_write_value(data, (int )((unsigned int )((u8 )i) + 21U), ~ ((int )pwm[i]) & 127);
        i = i + 1;
        ldv_26884: ;
        if (i <= 2) {
          goto ldv_26883;
        } else {

        }

        return (1);
      } else {

      }
      _dev_info((struct device  const  *)dev, "PWM configuration is too broken to be fixed\n");
    } else {

    }
    _dev_info((struct device  const  *)dev, "Detected broken BIOS defaults, disabling PWM interface\n");
    return (0);
  } else
  if ((int )fix_pwm_polarity) {
    _dev_info((struct device  const  *)dev, "PWM configuration looks sane, won\'t touch\n");
  } else {

  }
  return (1);
}
}
static void it87_init_device(struct platform_device *pdev___0 ) 
{ 
  struct it87_sio_data *sio_data ;
  struct it87_data *data ;
  void *tmp ;
  int tmp___0 ;
  int i ;
  u8 mask ;
  int tmp___1 ;
  struct _ddebug descriptor ;
  long tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
  sio_data = (struct it87_sio_data *)pdev___0->dev.platform_data;
  tmp = platform_get_drvdata((struct platform_device  const  *)pdev___0);
  data = (struct it87_data *)tmp;
  i = 0;
  goto ldv_26895;
  ldv_26894: 
  data->pwm_temp_map[i] = (u8 )i;
  data->pwm_duty[i] = 127U;
  data->auto_pwm[i][3] = 127U;
  i = i + 1;
  ldv_26895: ;
  if (i <= 2) {
    goto ldv_26894;
  } else {

  }
  i = 0;
  goto ldv_26898;
  ldv_26897: 
  tmp___0 = it87_read_value(data, (int )((unsigned int )((u8 )i) * 2U + 49U));
  if (tmp___0 == 255) {
    it87_write_value(data, (int )((unsigned int )((u8 )i) * 2U + 49U), 0);
  } else {

  }
  i = i + 1;
  ldv_26898: ;
  if (i <= 7) {
    goto ldv_26897;
  } else {

  }
  i = 0;
  goto ldv_26901;
  ldv_26900: 
  tmp___0 = it87_read_value(data, (int )((unsigned int )((u8 )(i + 32)) * 2U));
  if (tmp___0 == 255) {
    it87_write_value(data, (int )((unsigned int )((u8 )(i + 32)) * 2U), 127);
  } else {

  }
  i = i + 1;
  ldv_26901: ;
  if (i <= 2) {
    goto ldv_26900;
  } else {

  }
  tmp___0 = it87_read_value(data, 80);
  if ((tmp___0 & 255) == 0) {
    it87_write_value(data, 80, 255);
  } else {

  }
  mask = (unsigned int )((u8 )(~ ((int )sio_data->skip_fan << 4U))) & 112U;
  tmp___1 = it87_read_value(data, 19);
  data->fan_main_ctrl = (u8 )tmp___1;
  if ((unsigned int )((int )data->fan_main_ctrl & (int )mask) == 0U) {
    data->fan_main_ctrl = (u8 )((int )data->fan_main_ctrl | (int )mask);
    it87_write_value(data, 19, (int )data->fan_main_ctrl);
  } else {

  }
  data->has_fan = (unsigned int )((u8 )((int )data->fan_main_ctrl >> 4)) & 7U;
  tmp___3 = has_16bit_fans((struct it87_data  const  *)data);
  if (tmp___3 != 0) {
    tmp___0 = it87_read_value(data, 12);
    if (((~ tmp___0 & 7) & (int )data->has_fan) != 0) {
      descriptor.modname = "it87";
      descriptor.function = "it87_init_device";
      descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/hwmon/it87.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/hwmon/it87.c.prepared";
      descriptor.format = "Setting fan1-3 to 16-bit mode\n";
      descriptor.lineno = 2323U;
      descriptor.flags = 1U;
      tmp___2 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
      if (tmp___2 != 0L) {
        __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& pdev___0->dev),
                          "Setting fan1-3 to 16-bit mode\n");
      } else {

      }
      it87_write_value(data, 12, (int )((u8 )((int )((signed char )tmp___0) | 7)));
    } else {

    }
    if (((unsigned int )data->type != 0U && (unsigned int )data->type != 7U) && (unsigned int )data->type != 8U) {
      if ((tmp___0 & 16) != 0) {
        data->has_fan = (u8 )((unsigned int )data->has_fan | 8U);
      } else {

      }
      if ((tmp___0 & 32) != 0) {
        data->has_fan = (u8 )((unsigned int )data->has_fan | 16U);
      } else {

      }
    } else {

    }
  } else {

  }
  data->has_fan = (u8 )((int )((signed char )data->has_fan) & ~ ((int )((signed char )sio_data->skip_fan)));
  tmp___4 = it87_read_value(data, 0);
  it87_write_value(data, 0, (int )((u8 )(((int )((signed char )tmp___4) & 62) | ((int )update_vbat ? 65 : 1))));
  return;
}
}
static void it87_update_pwm_ctrl(struct it87_data *data , int nr ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int i ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
  tmp = it87_read_value(data, (int )((unsigned int )((u8 )nr) + 21U));
  data->pwm_ctrl[nr] = (u8 )tmp;
  tmp___1 = has_12mv_adc((struct it87_data  const  *)data);
  if (tmp___1 != 0) {
    data->pwm_temp_map[nr] = (unsigned int )data->pwm_ctrl[nr] & 3U;
    tmp___0 = it87_read_value(data, (int )((unsigned int )((u8 )nr) * 8U + 99U));
    data->pwm_duty[nr] = (u8 )tmp___0;
  } else
  if ((int )((signed char )data->pwm_ctrl[nr]) < 0) {
    data->pwm_temp_map[nr] = (unsigned int )data->pwm_ctrl[nr] & 3U;
  } else {
    data->pwm_duty[nr] = (unsigned int )data->pwm_ctrl[nr] & 127U;
  }
  tmp___4 = has_old_autopwm((struct it87_data  const  *)data);
  if (tmp___4 != 0) {
    i = 0;
    goto ldv_26911;
    ldv_26910: 
    tmp___2 = it87_read_value(data, (int )((unsigned int )((u8 )(nr + 12)) * 8U + (unsigned int )((u8 )i)));
    data->auto_temp[nr][i] = (s8 )tmp___2;
    i = i + 1;
    ldv_26911: ;
    if (i <= 4) {
      goto ldv_26910;
    } else {

    }
    i = 0;
    goto ldv_26914;
    ldv_26913: 
    tmp___3 = it87_read_value(data, (int )(((unsigned int )((u8 )nr) * 8U + (unsigned int )((u8 )i)) + 101U));
    data->auto_pwm[nr][i] = (u8 )tmp___3;
    i = i + 1;
    ldv_26914: ;
    if (i <= 2) {
      goto ldv_26913;
    } else {

    }

  } else {

  }
  return;
}
}
static struct it87_data *it87_update_device(struct device *dev ) 
{ 
  struct it87_data *data ;
  void *tmp ;
  int i ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;

  {
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  ldv_mutex_lock_37(& data->update_lock);
  if (((1 != 0 && 1 != 0) && (long )(data->last_updated + 375UL) - (long )jiffies < 0L) || (int )((signed char )data->valid) == 0) {
    if ((int )update_vbat) {
      tmp___0 = it87_read_value(data, 0);
      it87_write_value(data, 0, (int )((u8 )((int )((signed char )tmp___0) | 64)));
    } else {

    }
    i = 0;
    goto ldv_26928;
    ldv_26927: 
    tmp___1 = it87_read_value(data, (int )((unsigned int )((u8 )i) + 32U));
    data->in[i][0] = (u8 )tmp___1;
    tmp___2 = it87_read_value(data, (int )((unsigned int )((u8 )i) * 2U + 49U));
    data->in[i][1] = (u8 )tmp___2;
    tmp___3 = it87_read_value(data, (int )((unsigned int )((u8 )(i + 24)) * 2U));
    data->in[i][2] = (u8 )tmp___3;
    i = i + 1;
    ldv_26928: ;
    if (i <= 7) {
      goto ldv_26927;
    } else {

    }
    tmp___4 = it87_read_value(data, 40);
    data->in[8][0] = (u8 )tmp___4;
    i = 0;
    goto ldv_26932;
    ldv_26931: ;
    if ((((int )data->has_fan >> i) & 1) == 0) {
      goto ldv_26930;
    } else {

    }
    tmp___5 = it87_read_value(data, (int )IT87_REG_FAN_MIN[i]);
    data->fan_min[i] = (u16 )tmp___5;
    tmp___6 = it87_read_value(data, (int )IT87_REG_FAN[i]);
    data->fan[i] = (u16 )tmp___6;
    tmp___9 = has_16bit_fans((struct it87_data  const  *)data);
    if (tmp___9 != 0) {
      tmp___7 = it87_read_value(data, (int )IT87_REG_FANX[i]);
      data->fan[i] = (u16 )((int )((short )data->fan[i]) | (int )((short )(tmp___7 << 8)));
      tmp___8 = it87_read_value(data, (int )IT87_REG_FANX_MIN[i]);
      data->fan_min[i] = (u16 )((int )((short )data->fan_min[i]) | (int )((short )(tmp___8 << 8)));
    } else {

    }
    ldv_26930: 
    i = i + 1;
    ldv_26932: ;
    if (i <= 4) {
      goto ldv_26931;
    } else {

    }
    i = 0;
    goto ldv_26936;
    ldv_26935: ;
    if ((((int )data->has_temp >> i) & 1) == 0) {
      goto ldv_26934;
    } else {

    }
    tmp___10 = it87_read_value(data, (int )((unsigned int )((u8 )i) + 41U));
    data->temp[i][0] = (s8 )tmp___10;
    tmp___11 = it87_read_value(data, (int )((unsigned int )((u8 )i) * 2U + 65U));
    data->temp[i][1] = (s8 )tmp___11;
    tmp___12 = it87_read_value(data, (int )((unsigned int )((u8 )(i + 32)) * 2U));
    data->temp[i][2] = (s8 )tmp___12;
    ldv_26934: 
    i = i + 1;
    ldv_26936: ;
    if (i <= 2) {
      goto ldv_26935;
    } else {

    }

    if (((int )data->has_fan & 7) != 0) {
      tmp___13 = has_16bit_fans((struct it87_data  const  *)data);
      if (tmp___13 == 0) {
        i = it87_read_value(data, 11);
        data->fan_div[0] = (unsigned int )((u8 )i) & 7U;
        data->fan_div[1] = (unsigned int )((u8 )(i >> 3)) & 7U;
        data->fan_div[2] = (i & 64) != 0 ? 3U : 1U;
      } else {

      }
    } else {

    }
    tmp___14 = it87_read_value(data, 1);
    tmp___15 = it87_read_value(data, 2);
    tmp___16 = it87_read_value(data, 3);
    data->alarms = (u32 )((tmp___14 | (tmp___15 << 8)) | (tmp___16 << 16));
    tmp___17 = it87_read_value(data, 92);
    data->beeps = (u8 )tmp___17;
    tmp___18 = it87_read_value(data, 19);
    data->fan_main_ctrl = (u8 )tmp___18;
    tmp___19 = it87_read_value(data, 20);
    data->fan_ctl = (u8 )tmp___19;
    i = 0;
    goto ldv_26939;
    ldv_26938: 
    it87_update_pwm_ctrl(data, i);
    i = i + 1;
    ldv_26939: ;
    if (i <= 2) {
      goto ldv_26938;
    } else {

    }
    tmp___20 = it87_read_value(data, 81);
    data->sensor = (u8 )tmp___20;
    if ((unsigned int )data->type == 1U || (unsigned int )data->type == 2U) {
      tmp___21 = it87_read_value(data, 10);
      data->vid = (u8 )tmp___21;
      data->vid = (unsigned int )data->vid & 63U;
    } else {

    }
    data->last_updated = jiffies;
    data->valid = 1;
  } else {

  }
  ldv_mutex_unlock_38(& data->update_lock);
  return (data);
}
}
static int it87_device_add(unsigned short address , struct it87_sio_data  const  *sio_data ) 
{ 
  struct resource res ;
  int err ;

  {
  res.start = (unsigned long long )((int )address + 5);
  res.end = (unsigned long long )((int )address + 6);
  res.name = "it87";
  res.flags = 256UL;
  res.parent = 0;
  res.sibling = 0;
  res.child = 0;
  err = acpi_check_resource_conflict((struct resource  const  *)(& res));
  if (err != 0) {
    goto exit;
  } else {

  }
  pdev = platform_device_alloc("it87", (int )address);
  if ((unsigned long )pdev == (unsigned long )((struct platform_device *)0)) {
    err = -12;
    printk("\vit87: Device allocation failed\n");
    goto exit;
  } else {

  }
  err = platform_device_add_resources(pdev, (struct resource  const  *)(& res), 1U);
  if (err != 0) {
    printk("\vit87: Device resource addition failed (%d)\n", err);
    goto exit_device_put;
  } else {

  }
  err = platform_device_add_data(pdev, (void const   *)sio_data, 16UL);
  if (err != 0) {
    printk("\vit87: Platform data allocation failed\n");
    goto exit_device_put;
  } else {

  }
  err = platform_device_add(pdev);
  if (err != 0) {
    printk("\vit87: Device addition failed (%d)\n", err);
    goto exit_device_put;
  } else {

  }
  return (0);
  exit_device_put: 
  platform_device_put(pdev);
  exit: ;
  return (err);
}
}
static int sm_it87_init(void) 
{ 
  int err ;
  unsigned short isa_address ;
  struct it87_sio_data sio_data ;

  {
  isa_address = 0U;
  memset((void *)(& sio_data), 0, 16UL);
  err = it87_find(& isa_address, & sio_data);
  if (err != 0) {
    return (err);
  } else {

  }
  err = platform_driver_register(& it87_driver);
  if (err != 0) {
    return (err);
  } else {

  }
  err = it87_device_add((int )isa_address, (struct it87_sio_data  const  *)(& sio_data));
  if (err != 0) {
    platform_driver_unregister(& it87_driver);
    return (err);
  } else {

  }
  return (0);
}
}
static void sm_it87_exit(void) 
{ 


  {
  platform_device_unregister(pdev);
  platform_driver_unregister(& it87_driver);
  return;
}
}
void ldv_check_final_state(void) ;
extern void ldv_check_return_value(int  ) ;
extern void ldv_check_return_value_probe(int  ) ;
void ldv_initialize(void) ;
extern void ldv_handler_precall(void) ;
extern int nondet_int(void) ;
int LDV_IN_INTERRUPT  ;
int main(void) 
{ 
  struct platform_device *var_group1 ;
  int res_it87_probe_59 ;
  int ldv_s_it87_driver_platform_driver ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  ldv_s_it87_driver_platform_driver = 0;
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  ldv_handler_precall();
  tmp = sm_it87_init();
  if (tmp != 0) {
    goto ldv_final;
  } else {

  }
  goto ldv_27021;
  ldv_27020: 
  tmp___0 = nondet_int();
  switch (tmp___0) {
  case 0: ;
  if (ldv_s_it87_driver_platform_driver == 0) {
    res_it87_probe_59 = it87_probe(var_group1);
    ldv_check_return_value(res_it87_probe_59);
    ldv_check_return_value_probe(res_it87_probe_59);
    if (res_it87_probe_59 != 0) {
      goto ldv_module_exit;
    } else {

    }
    ldv_s_it87_driver_platform_driver = ldv_s_it87_driver_platform_driver + 1;
  } else {

  }
  goto ldv_27017;
  case 1: ;
  if (ldv_s_it87_driver_platform_driver == 1) {
    ldv_handler_precall();
    it87_remove(var_group1);
    ldv_s_it87_driver_platform_driver = 0;
  } else {

  }
  goto ldv_27017;
  default: ;
  goto ldv_27017;
  }
  ldv_27017: ;
  ldv_27021: 
  tmp___1 = nondet_int();
  if (tmp___1 != 0 || ldv_s_it87_driver_platform_driver != 0) {
    goto ldv_27020;
  } else {

  }

  ldv_module_exit: 
  ldv_handler_precall();
  sm_it87_exit();
  ldv_final: 
  ldv_check_final_state();
  return 0;
}
}
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_lock(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_2(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_lock(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_3(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
int ldv_mutex_trylock_4(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = mutex_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_6(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_7(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_8(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_9(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_10(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_11(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_12(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_13(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_14(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_15(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_16(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_17(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_18(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_19(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_20(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_21(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_22(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_23(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_24(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_25(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_26(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_27(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_28(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_29(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_30(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_31(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_32(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_33(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_34(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_35(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_36(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_37(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_38(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
__inline static void ldv_error(void)  __attribute__((__no_instrument_function__)) ;
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: __VERIFIER_error();
}
}
extern int ldv_undef_int(void) ;
long ldv__builtin_expect(long exp , long c ) 
{ 


  {
  return (exp);
}
}
static int ldv_mutex_cred_guard_mutex_of_signal_struct  ;
int ldv_mutex_lock_interruptible_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
    ldv_error();
  }
  nondetermined = ldv_undef_int();
  if (nondetermined) {
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
int ldv_mutex_lock_killable_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
    ldv_error();
  }
  nondetermined = ldv_undef_int();
  if (nondetermined) {
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
void ldv_mutex_lock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 


  {
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
    ldv_error();
  }
  ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
  return;
}
}
int ldv_mutex_trylock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
    ldv_error();
  }
  is_mutex_held_by_another_thread = ldv_undef_int();
  if (is_mutex_held_by_another_thread) {
    return (0);
  } else {
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
    return (1);
  }
}
}
int ldv_atomic_dec_and_mutex_lock_cred_guard_mutex_of_signal_struct(atomic_t *cnt ,
                                                                    struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
    ldv_error();
  }
  atomic_value_after_dec = ldv_undef_int();
  if (atomic_value_after_dec == 0) {
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
    return (1);
  } else {

  }
  return (0);
}
}
int ldv_mutex_is_locked_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {
    nondetermined = ldv_undef_int();
    if (nondetermined) {
      return (0);
    } else {
      return (1);
    }
  } else {
    return (1);
  }
}
}
void ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 


  {
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 2) {

  } else {
    ldv_error();
  }
  ldv_mutex_cred_guard_mutex_of_signal_struct = 1;
  return;
}
}
static int ldv_mutex_lock  ;
int ldv_mutex_lock_interruptible_lock(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
  if (ldv_mutex_lock == 1) {

  } else {
    ldv_error();
  }
  nondetermined = ldv_undef_int();
  if (nondetermined) {
    ldv_mutex_lock = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
int ldv_mutex_lock_killable_lock(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
  if (ldv_mutex_lock == 1) {

  } else {
    ldv_error();
  }
  nondetermined = ldv_undef_int();
  if (nondetermined) {
    ldv_mutex_lock = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
void ldv_mutex_lock_lock(struct mutex *lock ) 
{ 


  {
  if (ldv_mutex_lock == 1) {

  } else {
    ldv_error();
  }
  ldv_mutex_lock = 2;
  return;
}
}
int ldv_mutex_trylock_lock(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
  if (ldv_mutex_lock == 1) {

  } else {
    ldv_error();
  }
  is_mutex_held_by_another_thread = ldv_undef_int();
  if (is_mutex_held_by_another_thread) {
    return (0);
  } else {
    ldv_mutex_lock = 2;
    return (1);
  }
}
}
int ldv_atomic_dec_and_mutex_lock_lock(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
  if (ldv_mutex_lock == 1) {

  } else {
    ldv_error();
  }
  atomic_value_after_dec = ldv_undef_int();
  if (atomic_value_after_dec == 0) {
    ldv_mutex_lock = 2;
    return (1);
  } else {

  }
  return (0);
}
}
int ldv_mutex_is_locked_lock(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
  if (ldv_mutex_lock == 1) {
    nondetermined = ldv_undef_int();
    if (nondetermined) {
      return (0);
    } else {
      return (1);
    }
  } else {
    return (1);
  }
}
}
void ldv_mutex_unlock_lock(struct mutex *lock ) 
{ 


  {
  if (ldv_mutex_lock == 2) {

  } else {
    ldv_error();
  }
  ldv_mutex_lock = 1;
  return;
}
}
static int ldv_mutex_mutex_of_device  ;
int ldv_mutex_lock_interruptible_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
    ldv_error();
  }
  nondetermined = ldv_undef_int();
  if (nondetermined) {
    ldv_mutex_mutex_of_device = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
int ldv_mutex_lock_killable_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
    ldv_error();
  }
  nondetermined = ldv_undef_int();
  if (nondetermined) {
    ldv_mutex_mutex_of_device = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) 
{ 


  {
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
    ldv_error();
  }
  ldv_mutex_mutex_of_device = 2;
  return;
}
}
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
    ldv_error();
  }
  is_mutex_held_by_another_thread = ldv_undef_int();
  if (is_mutex_held_by_another_thread) {
    return (0);
  } else {
    ldv_mutex_mutex_of_device = 2;
    return (1);
  }
}
}
int ldv_atomic_dec_and_mutex_lock_mutex_of_device(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
    ldv_error();
  }
  atomic_value_after_dec = ldv_undef_int();
  if (atomic_value_after_dec == 0) {
    ldv_mutex_mutex_of_device = 2;
    return (1);
  } else {

  }
  return (0);
}
}
int ldv_mutex_is_locked_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
  if (ldv_mutex_mutex_of_device == 1) {
    nondetermined = ldv_undef_int();
    if (nondetermined) {
      return (0);
    } else {
      return (1);
    }
  } else {
    return (1);
  }
}
}
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) 
{ 


  {
  if (ldv_mutex_mutex_of_device == 2) {

  } else {
    ldv_error();
  }
  ldv_mutex_mutex_of_device = 1;
  return;
}
}
static int ldv_mutex_update_lock_of_it87_data  ;
int ldv_mutex_lock_interruptible_update_lock_of_it87_data(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
  if (ldv_mutex_update_lock_of_it87_data == 1) {

  } else {
    ldv_error();
  }
  nondetermined = ldv_undef_int();
  if (nondetermined) {
    ldv_mutex_update_lock_of_it87_data = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
int ldv_mutex_lock_killable_update_lock_of_it87_data(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
  if (ldv_mutex_update_lock_of_it87_data == 1) {

  } else {
    ldv_error();
  }
  nondetermined = ldv_undef_int();
  if (nondetermined) {
    ldv_mutex_update_lock_of_it87_data = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
void ldv_mutex_lock_update_lock_of_it87_data(struct mutex *lock ) 
{ 


  {
  if (ldv_mutex_update_lock_of_it87_data == 1) {

  } else {
    ldv_error();
  }
  ldv_mutex_update_lock_of_it87_data = 2;
  return;
}
}
int ldv_mutex_trylock_update_lock_of_it87_data(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
  if (ldv_mutex_update_lock_of_it87_data == 1) {

  } else {
    ldv_error();
  }
  is_mutex_held_by_another_thread = ldv_undef_int();
  if (is_mutex_held_by_another_thread) {
    return (0);
  } else {
    ldv_mutex_update_lock_of_it87_data = 2;
    return (1);
  }
}
}
int ldv_atomic_dec_and_mutex_lock_update_lock_of_it87_data(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
  if (ldv_mutex_update_lock_of_it87_data == 1) {

  } else {
    ldv_error();
  }
  atomic_value_after_dec = ldv_undef_int();
  if (atomic_value_after_dec == 0) {
    ldv_mutex_update_lock_of_it87_data = 2;
    return (1);
  } else {

  }
  return (0);
}
}
int ldv_mutex_is_locked_update_lock_of_it87_data(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
  if (ldv_mutex_update_lock_of_it87_data == 1) {
    nondetermined = ldv_undef_int();
    if (nondetermined) {
      return (0);
    } else {
      return (1);
    }
  } else {
    return (1);
  }
}
}
void ldv_mutex_unlock_update_lock_of_it87_data(struct mutex *lock ) 
{ 


  {
  if (ldv_mutex_update_lock_of_it87_data == 2) {

  } else {
    ldv_error();
  }
  ldv_mutex_update_lock_of_it87_data = 1;
  return;
}
}
void ldv_initialize(void) 
{ 


  {
  ldv_mutex_cred_guard_mutex_of_signal_struct = 1;
  ldv_mutex_lock = 1;
  ldv_mutex_mutex_of_device = 1;
  ldv_mutex_update_lock_of_it87_data = 1;
  return;
}
}
void ldv_check_final_state(void) 
{ 


  {
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
    ldv_error();
  }
  if (ldv_mutex_lock == 1) {

  } else {
    ldv_error();
  }
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
    ldv_error();
  }
  if (ldv_mutex_update_lock_of_it87_data == 1) {

  } else {
    ldv_error();
  }
  return;
}
}
