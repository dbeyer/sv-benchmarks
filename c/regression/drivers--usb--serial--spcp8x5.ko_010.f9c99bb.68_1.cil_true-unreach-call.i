extern void __VERIFIER_error() __attribute__ ((__noreturn__));

/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

typedef __builtin_va_list __gnuc_va_list;
typedef __gnuc_va_list va_list;
typedef signed char __s8;
typedef unsigned char __u8;
typedef short __s16;
typedef unsigned short __u16;
typedef int __s32;
typedef unsigned int __u32;
typedef long long __s64;
typedef unsigned long long __u64;
typedef signed char s8;
typedef unsigned char u8;
typedef unsigned short u16;
typedef unsigned int u32;
typedef long long s64;
typedef unsigned long long u64;
typedef unsigned short umode_t;
typedef u64 dma_addr_t;
typedef unsigned int __kernel_mode_t;
typedef int __kernel_pid_t;
typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;
typedef unsigned long __kernel_size_t;
typedef long __kernel_ssize_t;
typedef long __kernel_time_t;
typedef long __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef long long __kernel_loff_t;
typedef __kernel_uid_t __kernel_uid32_t;
typedef __kernel_gid_t __kernel_gid32_t;
typedef __u32 __kernel_dev_t;
typedef __kernel_dev_t dev_t;
typedef __kernel_mode_t mode_t;
typedef __kernel_pid_t pid_t;
typedef __kernel_clockid_t clockid_t;
typedef __kernel_uid32_t uid_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_loff_t loff_t;
typedef __kernel_size_t size_t;
typedef __kernel_ssize_t ssize_t;
typedef __kernel_time_t time_t;
typedef __s32 int32_t;
typedef __u32 uint32_t;
typedef unsigned long sector_t;
typedef unsigned long blkcnt_t;
typedef __u16 __le16;
typedef unsigned int gfp_t;
typedef unsigned int fmode_t;
struct __anonstruct_atomic_t_7 {
   int volatile   counter ;
};
typedef struct __anonstruct_atomic_t_7 atomic_t;
struct __anonstruct_atomic64_t_8 {
   long volatile   counter ;
};
typedef struct __anonstruct_atomic64_t_8 atomic64_t;
struct module;
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   char primary_hash ;
   char secondary_hash ;
   unsigned int lineno : 24 ;
   unsigned int flags : 8 ;
} __attribute__((__aligned__(8))) ;
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
struct completion;
struct pt_regs;
struct pid;
struct timespec;
struct compat_timespec;
struct __anonstruct____missing_field_name_11 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
struct __anonstruct_futex_12 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
struct __anonstruct_nanosleep_13 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
struct pollfd;
struct __anonstruct_poll_14 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
union __anonunion____missing_field_name_10 {
   struct __anonstruct____missing_field_name_11 __annonCompField4 ;
   struct __anonstruct_futex_12 futex ;
   struct __anonstruct_nanosleep_13 nanosleep ;
   struct __anonstruct_poll_14 poll ;
};
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion____missing_field_name_10 __annonCompField5 ;
};
struct page;
struct task_struct;
struct exec_domain;
struct mm_struct;
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
union __anonunion____missing_field_name_15 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion____missing_field_name_15 __annonCompField6 ;
};
typedef unsigned long pgdval_t;
typedef unsigned long pgprotval_t;
struct pgprot {
   pgprotval_t pgprot ;
};
typedef struct pgprot pgprot_t;
struct __anonstruct_pgd_t_18 {
   pgdval_t pgd ;
};
typedef struct __anonstruct_pgd_t_18 pgd_t;
struct file;
struct seq_file;
struct __anonstruct____missing_field_name_23 {
   unsigned int a ;
   unsigned int b ;
};
struct __anonstruct____missing_field_name_24 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int base1 : 8 ;
   unsigned int type : 4 ;
   unsigned int s : 1 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   unsigned int limit : 4 ;
   unsigned int avl : 1 ;
   unsigned int l : 1 ;
   unsigned int d : 1 ;
   unsigned int g : 1 ;
   unsigned int base2 : 8 ;
};
union __anonunion____missing_field_name_22 {
   struct __anonstruct____missing_field_name_23 __annonCompField8 ;
   struct __anonstruct____missing_field_name_24 __annonCompField9 ;
};
struct desc_struct {
   union __anonunion____missing_field_name_22 __annonCompField10 ;
} __attribute__((__packed__)) ;
struct cpumask {
   unsigned long bits[((4096UL + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
typedef struct cpumask cpumask_t;
struct thread_struct;
struct raw_spinlock;
struct map_segment;
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u32 status ;
};
struct __anonstruct____missing_field_name_32 {
   u64 rip ;
   u64 rdp ;
};
struct __anonstruct____missing_field_name_33 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
union __anonunion____missing_field_name_31 {
   struct __anonstruct____missing_field_name_32 __annonCompField13 ;
   struct __anonstruct____missing_field_name_33 __annonCompField14 ;
};
union __anonunion____missing_field_name_34 {
   u32 padding1[12] ;
   u32 sw_reserved[12] ;
};
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion____missing_field_name_31 __annonCompField15 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32] ;
   u32 xmm_space[64] ;
   u32 padding[12] ;
   union __anonunion____missing_field_name_34 __annonCompField16 ;
} __attribute__((__aligned__(16))) ;
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
struct ymmh_struct {
   u32 ymmh_space[64] ;
};
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2] ;
   u64 reserved2[5] ;
} __attribute__((__packed__)) ;
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
} __attribute__((__packed__, __aligned__(64))) ;
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
struct kmem_cache;
struct ds_context;
struct thread_struct {
   struct desc_struct tls_array[3] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   struct ds_context *ds_ctx ;
};
struct __anonstruct_mm_segment_t_36 {
   unsigned long seg ;
};
typedef struct __anonstruct_mm_segment_t_36 mm_segment_t;
typedef atomic64_t atomic_long_t;
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
struct hlist_node;
struct hlist_head {
   struct hlist_node *first ;
};
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
struct raw_spinlock {
   unsigned int slock ;
};
typedef struct raw_spinlock raw_spinlock_t;
struct __anonstruct_raw_rwlock_t_37 {
   unsigned int lock ;
};
typedef struct __anonstruct_raw_rwlock_t_37 raw_rwlock_t;
struct lockdep_map;
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8UL] ;
};
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[1 + 3 * 4] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4] ;
   unsigned long contending_point[4] ;
};
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 2 ;
   unsigned int hardirqs_off : 1 ;
};
struct __anonstruct_spinlock_t_38 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
typedef struct __anonstruct_spinlock_t_38 spinlock_t;
struct __anonstruct_rwlock_t_39 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
typedef struct __anonstruct_rwlock_t_39 rwlock_t;
struct __wait_queue;
typedef struct __wait_queue wait_queue_t;
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t *wait , unsigned int mode , int sync , void *key ) ;
   struct list_head task_list ;
};
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
typedef struct __wait_queue_head wait_queue_head_t;
struct __anonstruct_nodemask_t_41 {
   unsigned long bits[(((unsigned long )(1 << 9) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
typedef struct __anonstruct_nodemask_t_41 nodemask_t;
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
struct rw_semaphore;
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
struct device;
struct pm_message {
   int event ;
};
typedef struct pm_message pm_message_t;
struct dev_pm_ops {
   int (*prepare)(struct device *dev ) ;
   void (*complete)(struct device *dev ) ;
   int (*suspend)(struct device *dev ) ;
   int (*resume)(struct device *dev ) ;
   int (*freeze)(struct device *dev ) ;
   int (*thaw)(struct device *dev ) ;
   int (*poweroff)(struct device *dev ) ;
   int (*restore)(struct device *dev ) ;
   int (*suspend_noirq)(struct device *dev ) ;
   int (*resume_noirq)(struct device *dev ) ;
   int (*freeze_noirq)(struct device *dev ) ;
   int (*thaw_noirq)(struct device *dev ) ;
   int (*poweroff_noirq)(struct device *dev ) ;
   int (*restore_noirq)(struct device *dev ) ;
};
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
};
struct __anonstruct_mm_context_t_90 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
typedef struct __anonstruct_mm_context_t_90 mm_context_t;
struct vm_area_struct;
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
union ktime {
   s64 tv64 ;
};
typedef union ktime ktime_t;
struct tvec_base;
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
struct hrtimer;
enum hrtimer_restart;
struct work_struct;
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *work ) ;
   struct lockdep_map lockdep_map ;
};
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
struct kobject;
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
struct sysfs_dirent;
struct kref {
   atomic_t refcount ;
};
struct kset;
struct kobj_type;
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
struct kobj_type {
   void (*release)(struct kobject *kobj ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
struct kobj_uevent_env {
   char *envp[32] ;
   int envp_idx ;
   char buf[2048] ;
   int buflen ;
};
struct kset_uevent_ops {
   int (*filter)(struct kset *kset , struct kobject *kobj ) ;
   char const   *(*name)(struct kset *kset , struct kobject *kobj ) ;
   int (*uevent)(struct kset *kset , struct kobject *kobj , struct kobj_uevent_env *env ) ;
};
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head *head ) ;
};
struct tracepoint;
struct tracepoint {
   char const   *name ;
   int state ;
   void **funcs ;
} __attribute__((__aligned__(32))) ;
enum stat_item {
    ALLOC_FASTPATH = 0,
    ALLOC_SLOWPATH = 1,
    FREE_FASTPATH = 2,
    FREE_SLOWPATH = 3,
    FREE_FROZEN = 4,
    FREE_ADD_PARTIAL = 5,
    FREE_REMOVE_PARTIAL = 6,
    ALLOC_FROM_PARTIAL = 7,
    ALLOC_SLAB = 8,
    ALLOC_REFILL = 9,
    FREE_SLAB = 10,
    CPUSLAB_FLUSH = 11,
    DEACTIVATE_FULL = 12,
    DEACTIVATE_EMPTY = 13,
    DEACTIVATE_TO_HEAD = 14,
    DEACTIVATE_TO_TAIL = 15,
    DEACTIVATE_REMOTE_FREES = 16,
    ORDER_FALLBACK = 17,
    NR_SLUB_STAT_ITEMS = 18
} ;
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[NR_SLUB_STAT_ITEMS] ;
};
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
struct kmem_cache_order_objects {
   unsigned long x ;
};
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1 << 9] ;
   struct kmem_cache_cpu *cpu_slab[4096] ;
};
struct nameidata;
struct path;
struct vfsmount;
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
struct inode;
union __anonunion_d_u_96 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
struct dentry_operations;
struct super_block;
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_96 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32] ;
};
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
struct radix_tree_node;
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
struct prio_tree_node;
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
struct pid_namespace;
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[PIDTYPE_MAX] ;
   struct rcu_head rcu ;
   struct upid numbers[1] ;
};
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
struct kernel_cap_struct {
   __u32 cap[2] ;
};
typedef struct kernel_cap_struct kernel_cap_t;
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3] ;
};
struct export_operations;
struct iovec;
struct kiocb;
struct pipe_inode_info;
struct poll_table_struct;
struct kstatfs;
struct cred;
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8] ;
};
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
typedef struct fs_qfilestat fs_qfilestat_t;
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
struct dquot;
typedef __kernel_uid32_t qid_t;
typedef long long qsize_t;
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
struct quota_format_type;
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *sb , int type ) ;
   int (*read_file_info)(struct super_block *sb , int type ) ;
   int (*write_file_info)(struct super_block *sb , int type ) ;
   int (*free_file_info)(struct super_block *sb , int type ) ;
   int (*read_dqblk)(struct dquot *dquot ) ;
   int (*commit_dqblk)(struct dquot *dquot ) ;
   int (*release_dqblk)(struct dquot *dquot ) ;
};
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , qsize_t  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , qsize_t  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   int (*reserve_space)(struct inode * , qsize_t  , int  ) ;
   int (*claim_space)(struct inode * , qsize_t  ) ;
   void (*release_rsv)(struct inode * , qsize_t  ) ;
   qsize_t (*get_reserved_space)(struct inode * ) ;
};
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2] ;
   struct mem_dqinfo info[2] ;
   struct quota_format_ops *ops[2] ;
};
struct address_space;
struct writeback_control;
union __anonunion_arg_103 {
   char *buf ;
   void *data ;
};
struct __anonstruct_read_descriptor_t_102 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_103 arg ;
   int error ;
};
typedef struct __anonstruct_read_descriptor_t_102 read_descriptor_t;
struct address_space_operations {
   int (*writepage)(struct page *page , struct writeback_control *wbc ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page *page ) ;
   int (*readpages)(struct file *filp , struct address_space *mapping , struct list_head *pages ,
                    unsigned int nr_pages ) ;
   int (*write_begin)(struct file * , struct address_space *mapping , loff_t pos ,
                      unsigned int len , unsigned int flags , struct page **pagep ,
                      void **fsdata ) ;
   int (*write_end)(struct file * , struct address_space *mapping , loff_t pos , unsigned int len ,
                    unsigned int copied , struct page *page , void *fsdata ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  *iov , loff_t offset ,
                        unsigned long nr_segs ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
};
struct backing_dev_info;
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
} __attribute__((__aligned__(sizeof(long )))) ;
struct hd_struct;
struct gendisk;
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
struct inode_operations;
struct file_operations;
struct file_lock;
struct cdev;
union __anonunion____missing_field_name_104 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   blkcnt_t i_blocks ;
   unsigned int i_blkbits ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2] ;
   struct list_head i_devices ;
   union __anonunion____missing_field_name_104 __annonCompField18 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_mark_entries ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
union __anonunion_f_u_105 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
struct file {
   union __anonunion_f_u_105 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
struct files_struct;
typedef struct files_struct *fl_owner_t;
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
struct nlm_lockowner;
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
struct nfs4_lock_state;
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
struct fasync_struct;
struct __anonstruct_afs_107 {
   struct list_head link ;
   int state ;
};
union __anonunion_fl_u_106 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_107 afs ;
};
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_106 fl_u ;
};
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
struct file_system_type;
struct super_operations;
struct xattr_handler;
struct mtd_info;
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_need_sync ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
};
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t id ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int datasync ) ;
   int (*aio_fsync)(struct kiocb * , int datasync ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount *mnt , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode *inode , int mode , loff_t offset , loff_t len ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64 start , u64 len ) ;
};
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *sb ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block *sb , int wait ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
struct bio;
typedef unsigned char cc_t;
typedef unsigned int speed_t;
typedef unsigned int tcflag_t;
struct ktermios {
   tcflag_t c_iflag ;
   tcflag_t c_oflag ;
   tcflag_t c_cflag ;
   tcflag_t c_lflag ;
   cc_t c_line ;
   cc_t c_cc[19] ;
   speed_t c_ispeed ;
   speed_t c_ospeed ;
};
struct winsize {
   unsigned short ws_row ;
   unsigned short ws_col ;
   unsigned short ws_xpixel ;
   unsigned short ws_ypixel ;
};
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
struct termiox {
   __u16 x_hflag ;
   __u16 x_cflag ;
   __u16 x_rflag[5] ;
   __u16 x_sflag ;
};
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
struct tty_struct;
struct tty_driver;
struct tty_operations {
   struct tty_struct *(*lookup)(struct tty_driver *driver , struct inode *inode ,
                                int idx ) ;
   int (*install)(struct tty_driver *driver , struct tty_struct *tty ) ;
   void (*remove)(struct tty_driver *driver , struct tty_struct *tty ) ;
   int (*open)(struct tty_struct *tty , struct file *filp ) ;
   void (*close)(struct tty_struct *tty , struct file *filp ) ;
   void (*shutdown)(struct tty_struct *tty ) ;
   int (*write)(struct tty_struct *tty , unsigned char const   *buf , int count ) ;
   int (*put_char)(struct tty_struct *tty , unsigned char ch ) ;
   void (*flush_chars)(struct tty_struct *tty ) ;
   int (*write_room)(struct tty_struct *tty ) ;
   int (*chars_in_buffer)(struct tty_struct *tty ) ;
   int (*ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd , unsigned long arg ) ;
   long (*compat_ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd ,
                        unsigned long arg ) ;
   void (*set_termios)(struct tty_struct *tty , struct ktermios *old ) ;
   void (*throttle)(struct tty_struct *tty ) ;
   void (*unthrottle)(struct tty_struct *tty ) ;
   void (*stop)(struct tty_struct *tty ) ;
   void (*start)(struct tty_struct *tty ) ;
   void (*hangup)(struct tty_struct *tty ) ;
   int (*break_ctl)(struct tty_struct *tty , int state ) ;
   void (*flush_buffer)(struct tty_struct *tty ) ;
   void (*set_ldisc)(struct tty_struct *tty ) ;
   void (*wait_until_sent)(struct tty_struct *tty , int timeout ) ;
   void (*send_xchar)(struct tty_struct *tty , char ch ) ;
   int (*tiocmget)(struct tty_struct *tty , struct file *file ) ;
   int (*tiocmset)(struct tty_struct *tty , struct file *file , unsigned int set ,
                   unsigned int clear ) ;
   int (*resize)(struct tty_struct *tty , struct winsize *ws ) ;
   int (*set_termiox)(struct tty_struct *tty , struct termiox *tnew ) ;
   int (*poll_init)(struct tty_driver *driver , int line , char *options ) ;
   int (*poll_get_char)(struct tty_driver *driver , int line ) ;
   void (*poll_put_char)(struct tty_driver *driver , int line , char ch ) ;
   struct file_operations  const  *proc_fops ;
};
struct proc_dir_entry;
struct tty_driver {
   int magic ;
   struct kref kref ;
   struct cdev cdev ;
   struct module *owner ;
   char const   *driver_name ;
   char const   *name ;
   int name_base ;
   int major ;
   int minor_start ;
   int minor_num ;
   int num ;
   short type ;
   short subtype ;
   struct ktermios init_termios ;
   int flags ;
   struct proc_dir_entry *proc_entry ;
   struct tty_driver *other ;
   struct tty_struct **ttys ;
   struct ktermios **termios ;
   struct ktermios **termios_locked ;
   void *driver_state ;
   struct tty_operations  const  *ops ;
   struct list_head tty_drivers ;
};
struct tty_ldisc_ops {
   int magic ;
   char *name ;
   int num ;
   int flags ;
   int (*open)(struct tty_struct * ) ;
   void (*close)(struct tty_struct * ) ;
   void (*flush_buffer)(struct tty_struct *tty ) ;
   ssize_t (*chars_in_buffer)(struct tty_struct *tty ) ;
   ssize_t (*read)(struct tty_struct *tty , struct file *file , unsigned char *buf ,
                   size_t nr ) ;
   ssize_t (*write)(struct tty_struct *tty , struct file *file , unsigned char const   *buf ,
                    size_t nr ) ;
   int (*ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd , unsigned long arg ) ;
   long (*compat_ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd ,
                        unsigned long arg ) ;
   void (*set_termios)(struct tty_struct *tty , struct ktermios *old ) ;
   unsigned int (*poll)(struct tty_struct * , struct file * , struct poll_table_struct * ) ;
   int (*hangup)(struct tty_struct *tty ) ;
   void (*receive_buf)(struct tty_struct * , unsigned char const   *cp , char *fp ,
                       int count ) ;
   void (*write_wakeup)(struct tty_struct * ) ;
   struct module *owner ;
   int refcount ;
};
struct tty_ldisc {
   struct tty_ldisc_ops *ops ;
   int refcount ;
};
struct tty_buffer {
   struct tty_buffer *next ;
   char *char_buf_ptr ;
   unsigned char *flag_buf_ptr ;
   int used ;
   int size ;
   int commit ;
   int read ;
   unsigned long data[0] ;
};
struct tty_bufhead {
   struct delayed_work work ;
   spinlock_t lock ;
   struct tty_buffer *head ;
   struct tty_buffer *tail ;
   struct tty_buffer *free ;
   int memory_used ;
};
struct signal_struct;
struct tty_port;
struct tty_port_operations {
   int (*carrier_raised)(struct tty_port *port ) ;
   void (*dtr_rts)(struct tty_port *port , int raise ) ;
};
struct tty_port {
   struct tty_struct *tty ;
   struct tty_port_operations  const  *ops ;
   spinlock_t lock ;
   int blocked_open ;
   int count ;
   wait_queue_head_t open_wait ;
   wait_queue_head_t close_wait ;
   unsigned long flags ;
   struct mutex mutex ;
   unsigned char *xmit_buf ;
   int close_delay ;
   int closing_wait ;
   int drain_delay ;
};
struct tty_struct {
   int magic ;
   struct kref kref ;
   struct tty_driver *driver ;
   struct tty_operations  const  *ops ;
   int index ;
   struct mutex ldisc_mutex ;
   struct tty_ldisc *ldisc ;
   struct mutex termios_mutex ;
   spinlock_t ctrl_lock ;
   struct ktermios *termios ;
   struct ktermios *termios_locked ;
   struct termiox *termiox ;
   char name[64] ;
   struct pid *pgrp ;
   struct pid *session ;
   unsigned long flags ;
   int count ;
   struct winsize winsize ;
   unsigned char stopped : 1 ;
   unsigned char hw_stopped : 1 ;
   unsigned char flow_stopped : 1 ;
   unsigned char packet : 1 ;
   unsigned char low_latency : 1 ;
   unsigned char warned : 1 ;
   unsigned char ctrl_status ;
   unsigned int receive_room ;
   struct tty_struct *link ;
   struct fasync_struct *fasync ;
   struct tty_bufhead buf ;
   int alt_speed ;
   wait_queue_head_t write_wait ;
   wait_queue_head_t read_wait ;
   struct work_struct hangup_work ;
   void *disc_data ;
   void *driver_data ;
   struct list_head tty_files ;
   unsigned int column ;
   unsigned char lnext : 1 ;
   unsigned char erasing : 1 ;
   unsigned char raw : 1 ;
   unsigned char real_raw : 1 ;
   unsigned char icanon : 1 ;
   unsigned char closing : 1 ;
   unsigned char echo_overrun : 1 ;
   unsigned short minimum_to_wake ;
   unsigned long overrun_time ;
   int num_overrun ;
   unsigned long process_char_map[256UL / (8UL * sizeof(unsigned long ))] ;
   char *read_buf ;
   int read_head ;
   int read_tail ;
   int read_cnt ;
   unsigned long read_flags[4096UL / (8UL * sizeof(unsigned long ))] ;
   unsigned char *echo_buf ;
   unsigned int echo_pos ;
   unsigned int echo_cnt ;
   int canon_data ;
   unsigned long canon_head ;
   unsigned int canon_column ;
   struct mutex atomic_read_lock ;
   struct mutex atomic_write_lock ;
   struct mutex output_lock ;
   struct mutex echo_lock ;
   unsigned char *write_buf ;
   int write_cnt ;
   spinlock_t read_lock ;
   struct work_struct SAK_work ;
   struct tty_port *port ;
};
struct class;
struct key;
typedef __u64 Elf64_Addr;
typedef __u16 Elf64_Half;
typedef __u32 Elf64_Word;
typedef __u64 Elf64_Xword;
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
typedef struct elf64_sym Elf64_Sym;
struct kernel_param;
struct kparam_string;
struct kparam_array;
union __anonunion____missing_field_name_114 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
struct kernel_param {
   char const   *name ;
   u16 perm ;
   u16 flags ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   union __anonunion____missing_field_name_114 __annonCompField19 ;
};
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   unsigned int elemsize ;
   void *elem ;
};
struct marker;
typedef void marker_probe_func(void *probe_private , void *call_private , char const   *fmt ,
                               va_list *args );
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  *mdata , void *call_private  , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
   char const   *tp_name ;
   void *tp_cb ;
} __attribute__((__aligned__(8))) ;
struct mod_arch_specific {

};
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t count ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
struct module_param_attrs;
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
struct module_sect_attrs;
struct module_notes_attrs;
struct ftrace_event_call;
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[64UL - sizeof(unsigned long )] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call *trace_events ;
   unsigned int num_trace_events ;
   unsigned long *ftrace_callsites ;
   unsigned int num_ftrace_callsites ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   char *refptr ;
};
struct device_driver;
typedef unsigned long kernel_ulong_t;
struct usb_device_id {
   __u16 match_flags ;
   __u16 idVendor ;
   __u16 idProduct ;
   __u16 bcdDevice_lo ;
   __u16 bcdDevice_hi ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   kernel_ulong_t driver_info ;
};
struct usb_device_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 bcdUSB ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bMaxPacketSize0 ;
   __le16 idVendor ;
   __le16 idProduct ;
   __le16 bcdDevice ;
   __u8 iManufacturer ;
   __u8 iProduct ;
   __u8 iSerialNumber ;
   __u8 bNumConfigurations ;
} __attribute__((__packed__)) ;
struct usb_config_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumInterfaces ;
   __u8 bConfigurationValue ;
   __u8 iConfiguration ;
   __u8 bmAttributes ;
   __u8 bMaxPower ;
} __attribute__((__packed__)) ;
struct usb_interface_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bInterfaceNumber ;
   __u8 bAlternateSetting ;
   __u8 bNumEndpoints ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 iInterface ;
} __attribute__((__packed__)) ;
struct usb_endpoint_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bEndpointAddress ;
   __u8 bmAttributes ;
   __le16 wMaxPacketSize ;
   __u8 bInterval ;
   __u8 bRefresh ;
   __u8 bSynchAddress ;
} __attribute__((__packed__)) ;
struct usb_interface_assoc_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bFirstInterface ;
   __u8 bInterfaceCount ;
   __u8 bFunctionClass ;
   __u8 bFunctionSubClass ;
   __u8 bFunctionProtocol ;
   __u8 iFunction ;
} __attribute__((__packed__)) ;
enum usb_device_speed {
    USB_SPEED_UNKNOWN = 0,
    USB_SPEED_LOW = 1,
    USB_SPEED_FULL = 2,
    USB_SPEED_HIGH = 3,
    USB_SPEED_VARIABLE = 4
} ;
enum usb_device_state {
    USB_STATE_NOTATTACHED = 0,
    USB_STATE_ATTACHED = 1,
    USB_STATE_POWERED = 2,
    USB_STATE_RECONNECTING = 3,
    USB_STATE_UNAUTHENTICATED = 4,
    USB_STATE_DEFAULT = 5,
    USB_STATE_ADDRESS = 6,
    USB_STATE_CONFIGURED = 7,
    USB_STATE_SUSPENDED = 8
} ;
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
typedef enum irqreturn irqreturn_t;
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(sizeof(long )))) ;
struct rb_root {
   struct rb_node *rb_node ;
};
typedef atomic_long_t mm_counter_t;
struct __anonstruct____missing_field_name_119 {
   u16 inuse ;
   u16 objects ;
};
union __anonunion____missing_field_name_118 {
   atomic_t _mapcount ;
   struct __anonstruct____missing_field_name_119 __annonCompField20 ;
};
struct __anonstruct____missing_field_name_121 {
   unsigned long private ;
   struct address_space *mapping ;
};
union __anonunion____missing_field_name_120 {
   struct __anonstruct____missing_field_name_121 __annonCompField22 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
union __anonunion____missing_field_name_122 {
   unsigned long index ;
   void *freelist ;
};
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion____missing_field_name_118 __annonCompField21 ;
   union __anonunion____missing_field_name_120 __annonCompField23 ;
   union __anonunion____missing_field_name_122 __annonCompField24 ;
   struct list_head lru ;
};
struct __anonstruct_vm_set_124 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
union __anonunion_shared_123 {
   struct __anonstruct_vm_set_124 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
struct anon_vma;
struct vm_operations_struct;
struct mempolicy;
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_123 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
struct mmu_notifier_mm;
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file *filp , unsigned long addr , unsigned long len ,
                                      unsigned long pgoff , unsigned long flags ) ;
   void (*unmap_area)(struct mm_struct *mm , unsigned long addr ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[2 * ((2 + 19) + 1)] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
typedef unsigned long cputime_t;
struct sem_undo_list;
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
struct siginfo;
struct __anonstruct_sigset_t_125 {
   unsigned long sig[64 / 64] ;
};
typedef struct __anonstruct_sigset_t_125 sigset_t;
typedef void __signalfn_t(int  );
typedef __signalfn_t *__sighandler_t;
typedef void __restorefn_t(void);
typedef __restorefn_t *__sigrestore_t;
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
struct k_sigaction {
   struct sigaction sa ;
};
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
typedef union sigval sigval_t;
struct __anonstruct__kill_127 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
struct __anonstruct__timer_128 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[sizeof(__kernel_uid32_t ) - sizeof(int )] ;
   sigval_t _sigval ;
   int _sys_private ;
};
struct __anonstruct__rt_129 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
struct __anonstruct__sigchld_130 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
struct __anonstruct__sigfault_131 {
   void *_addr ;
};
struct __anonstruct__sigpoll_132 {
   long _band ;
   int _fd ;
};
union __anonunion__sifields_126 {
   int _pad[(128UL - 4UL * sizeof(int )) / sizeof(int )] ;
   struct __anonstruct__kill_127 _kill ;
   struct __anonstruct__timer_128 _timer ;
   struct __anonstruct__rt_129 _rt ;
   struct __anonstruct__sigchld_130 _sigchld ;
   struct __anonstruct__sigfault_131 _sigfault ;
   struct __anonstruct__sigpoll_132 _sigpoll ;
};
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_126 _sifields ;
};
typedef struct siginfo siginfo_t;
struct user_struct;
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
struct __anonstruct_seccomp_t_135 {
   int mode ;
};
typedef struct __anonstruct_seccomp_t_135 seccomp_t;
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
struct rt_mutex_waiter;
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
struct hrtimer_clock_base;
struct hrtimer_cpu_base;
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   struct list_head cb_entry ;
   int start_pid ;
   void *start_site ;
   char start_comm[16] ;
};
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2] ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
struct latency_record {
   unsigned long backtrace[12] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
struct nsproxy;
typedef int32_t key_serial_t;
typedef uint32_t key_perm_t;
struct key_type;
struct keyring_list;
struct key_user;
union __anonunion_type_data_190 {
   struct list_head link ;
   unsigned long x[2] ;
   void *p[2] ;
};
union __anonunion_payload_191 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   time_t expiry ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_190 type_data ;
   union __anonunion_payload_191 payload ;
};
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32] ;
   gid_t *blocks[0] ;
};
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
struct cred {
   atomic_t usage ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
struct futex_pi_state;
struct robust_list_head;
struct fs_struct;
struct bts_context;
struct perf_counter_context;
struct cfs_rq;
struct task_group;
struct user_namespace;
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
struct kioctx;
union __anonunion_ki_obj_193 {
   void *user ;
   struct task_struct *tsk ;
};
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_193 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8] ;
};
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
struct taskstats;
struct tty_audit_buf;
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
   atomic_long_t locked_vm ;
};
struct reclaim_state;
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
struct sched_group {
   struct sched_group *next ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
   unsigned long cpumask[0] ;
};
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_failed[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_balanced[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_imbalance[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_hot_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyg[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyq[CPU_MAX_IDLE_TYPES] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
   unsigned long span[0] ;
};
struct io_context;
struct audit_context;
struct rq;
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq *rq , struct task_struct *p , int wakeup ) ;
   void (*dequeue_task)(struct rq *rq , struct task_struct *p , int sleep ) ;
   void (*yield_task)(struct rq *rq ) ;
   void (*check_preempt_curr)(struct rq *rq , struct task_struct *p , int sync ) ;
   struct task_struct *(*pick_next_task)(struct rq *rq ) ;
   void (*put_prev_task)(struct rq *rq , struct task_struct *p ) ;
   int (*select_task_rq)(struct task_struct *p , int sync ) ;
   unsigned long (*load_balance)(struct rq *this_rq , int this_cpu , struct rq *busiest ,
                                 unsigned long max_load_move , struct sched_domain *sd ,
                                 enum cpu_idle_type idle , int *all_pinned , int *this_best_prio ) ;
   int (*move_one_task)(struct rq *this_rq , int this_cpu , struct rq *busiest , struct sched_domain *sd ,
                        enum cpu_idle_type idle ) ;
   void (*pre_schedule)(struct rq *this_rq , struct task_struct *task ) ;
   int (*needs_post_schedule)(struct rq *this_rq ) ;
   void (*post_schedule)(struct rq *this_rq ) ;
   void (*task_wake_up)(struct rq *this_rq , struct task_struct *task ) ;
   void (*set_cpus_allowed)(struct task_struct *p , struct cpumask  const  *newmask ) ;
   void (*rq_online)(struct rq *rq ) ;
   void (*rq_offline)(struct rq *rq ) ;
   void (*set_curr_task)(struct rq *rq ) ;
   void (*task_tick)(struct rq *rq , struct task_struct *p , int queued ) ;
   void (*task_new)(struct rq *rq , struct task_struct *p ) ;
   void (*switched_from)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*switched_to)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*prio_changed)(struct rq *this_rq , struct task_struct *task , int oldprio ,
                        int running ) ;
   void (*moved_group)(struct task_struct *p ) ;
};
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 nr_migrations ;
   u64 start_runtime ;
   u64 avg_wakeup ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
struct rt_rq;
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
struct linux_binfmt;
struct irqaction;
struct css_set;
struct compat_robust_list_head;
struct ftrace_ret_stack;
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned int did_exec : 1 ;
   unsigned int in_execve : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct bts_context *bts ;
   struct pid_link pids[PIDTYPE_MAX] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_guard_mutex ;
   char comm[16] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *priv ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48UL] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_counter_context *perf_counter_ctxp ;
   struct mutex perf_counter_mutex ;
   struct list_head perf_counter_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
};
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   cpumask_t mask ;
   char const   *name ;
   void *dev_id ;
   struct irqaction *next ;
   int irq ;
   struct proc_dir_entry *dir ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
};
struct klist_node;
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
struct dma_map_ops;
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
struct device_private;
struct driver_private;
struct class_private;
struct bus_type;
struct bus_type_private;
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type *bus , char *buf ) ;
   ssize_t (*store)(struct bus_type *bus , char const   *buf , size_t count ) ;
};
struct device_attribute;
struct driver_attribute;
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device *dev , struct device_driver *drv ) ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct dev_pm_ops *pm ;
   struct bus_type_private *p ;
};
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct attribute_group **groups ;
   struct dev_pm_ops *pm ;
   struct driver_private *p ;
};
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver *driver , char *buf ) ;
   ssize_t (*store)(struct device_driver *driver , char const   *buf , size_t count ) ;
};
struct class_attribute;
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   void (*class_release)(struct class *class ) ;
   void (*dev_release)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct dev_pm_ops *pm ;
   struct class_private *p ;
};
struct device_type;
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *class , char *buf ) ;
   ssize_t (*store)(struct class *class , char const   *buf , size_t count ) ;
};
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   void (*release)(struct device *dev ) ;
   struct dev_pm_ops *pm ;
};
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *dev , struct device_attribute *attr , char *buf ) ;
   ssize_t (*store)(struct device *dev , struct device_attribute *attr , char const   *buf ,
                    size_t count ) ;
};
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
struct dma_coherent_mem;
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *dev ) ;
};
struct usb_device;
struct usb_driver;
struct wusb_dev;
struct ep_device;
struct usb_host_endpoint {
   struct usb_endpoint_descriptor desc ;
   struct list_head urb_list ;
   void *hcpriv ;
   struct ep_device *ep_dev ;
   unsigned char *extra ;
   int extralen ;
   int enabled ;
};
struct usb_host_interface {
   struct usb_interface_descriptor desc ;
   struct usb_host_endpoint *endpoint ;
   char *string ;
   unsigned char *extra ;
   int extralen ;
};
enum usb_interface_condition {
    USB_INTERFACE_UNBOUND = 0,
    USB_INTERFACE_BINDING = 1,
    USB_INTERFACE_BOUND = 2,
    USB_INTERFACE_UNBINDING = 3
} ;
struct usb_interface {
   struct usb_host_interface *altsetting ;
   struct usb_host_interface *cur_altsetting ;
   unsigned int num_altsetting ;
   struct usb_interface_assoc_descriptor *intf_assoc ;
   int minor ;
   enum usb_interface_condition condition ;
   unsigned int is_active : 1 ;
   unsigned int sysfs_files_created : 1 ;
   unsigned int ep_devs_created : 1 ;
   unsigned int unregistering : 1 ;
   unsigned int needs_remote_wakeup : 1 ;
   unsigned int needs_altsetting0 : 1 ;
   unsigned int needs_binding : 1 ;
   unsigned int reset_running : 1 ;
   struct device dev ;
   struct device *usb_dev ;
   int pm_usage_cnt ;
   struct work_struct reset_ws ;
};
struct usb_interface_cache {
   unsigned int num_altsetting ;
   struct kref ref ;
   struct usb_host_interface altsetting[0] ;
};
struct usb_host_config {
   struct usb_config_descriptor desc ;
   char *string ;
   struct usb_interface_assoc_descriptor *intf_assoc[32 / 2] ;
   struct usb_interface *interface[32] ;
   struct usb_interface_cache *intf_cache[32] ;
   unsigned char *extra ;
   int extralen ;
};
struct usb_devmap {
   unsigned long devicemap[128UL / (8UL * sizeof(unsigned long ))] ;
};
struct mon_bus;
struct usb_bus {
   struct device *controller ;
   int busnum ;
   char const   *bus_name ;
   u8 uses_dma ;
   u8 otg_port ;
   unsigned int is_b_host : 1 ;
   unsigned int b_hnp_enable : 1 ;
   int devnum_next ;
   struct usb_devmap devmap ;
   struct usb_device *root_hub ;
   struct list_head bus_list ;
   int bandwidth_allocated ;
   int bandwidth_int_reqs ;
   int bandwidth_isoc_reqs ;
   struct dentry *usbfs_dentry ;
   struct mon_bus *mon_bus ;
   int monitored ;
};
struct usb_tt;
struct usb_device {
   int devnum ;
   char devpath[16] ;
   enum usb_device_state state ;
   enum usb_device_speed speed ;
   struct usb_tt *tt ;
   int ttport ;
   unsigned int toggle[2] ;
   struct usb_device *parent ;
   struct usb_bus *bus ;
   struct usb_host_endpoint ep0 ;
   struct device dev ;
   struct usb_device_descriptor descriptor ;
   struct usb_host_config *config ;
   struct usb_host_config *actconfig ;
   struct usb_host_endpoint *ep_in[16] ;
   struct usb_host_endpoint *ep_out[16] ;
   char **rawdescriptors ;
   unsigned short bus_mA ;
   u8 portnum ;
   u8 level ;
   unsigned int can_submit : 1 ;
   unsigned int discon_suspended : 1 ;
   unsigned int persist_enabled : 1 ;
   unsigned int have_langid : 1 ;
   unsigned int authorized : 1 ;
   unsigned int authenticated : 1 ;
   unsigned int wusb : 1 ;
   int string_langid ;
   char *product ;
   char *manufacturer ;
   char *serial ;
   struct list_head filelist ;
   struct device *usb_classdev ;
   struct dentry *usbfs_dentry ;
   int maxchild ;
   struct usb_device *children[31] ;
   int pm_usage_cnt ;
   u32 quirks ;
   atomic_t urbnum ;
   unsigned long active_duration ;
   struct delayed_work autosuspend ;
   struct work_struct autoresume ;
   struct mutex pm_mutex ;
   unsigned long last_busy ;
   int autosuspend_delay ;
   unsigned long connect_time ;
   unsigned int auto_pm : 1 ;
   unsigned int do_remote_wakeup : 1 ;
   unsigned int reset_resume : 1 ;
   unsigned int autosuspend_disabled : 1 ;
   unsigned int autoresume_disabled : 1 ;
   unsigned int skip_sys_resume : 1 ;
   struct wusb_dev *wusb_dev ;
};
struct usb_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
struct usbdrv_wrap {
   struct device_driver driver ;
   int for_devices ;
};
struct usb_driver {
   char const   *name ;
   int (*probe)(struct usb_interface *intf , struct usb_device_id  const  *id ) ;
   void (*disconnect)(struct usb_interface *intf ) ;
   int (*ioctl)(struct usb_interface *intf , unsigned int code , void *buf ) ;
   int (*suspend)(struct usb_interface *intf , pm_message_t message ) ;
   int (*resume)(struct usb_interface *intf ) ;
   int (*reset_resume)(struct usb_interface *intf ) ;
   int (*pre_reset)(struct usb_interface *intf ) ;
   int (*post_reset)(struct usb_interface *intf ) ;
   struct usb_device_id  const  *id_table ;
   struct usb_dynids dynids ;
   struct usbdrv_wrap drvwrap ;
   unsigned int no_dynamic_id : 1 ;
   unsigned int supports_autosuspend : 1 ;
   unsigned int soft_unbind : 1 ;
};
struct usb_iso_packet_descriptor {
   unsigned int offset ;
   unsigned int length ;
   unsigned int actual_length ;
   int status ;
};
struct urb;
struct usb_anchor {
   struct list_head urb_list ;
   wait_queue_head_t wait ;
   spinlock_t lock ;
   unsigned int poisoned : 1 ;
};
struct urb {
   struct kref kref ;
   void *hcpriv ;
   atomic_t use_count ;
   atomic_t reject ;
   int unlinked ;
   struct list_head urb_list ;
   struct list_head anchor_list ;
   struct usb_anchor *anchor ;
   struct usb_device *dev ;
   struct usb_host_endpoint *ep ;
   unsigned int pipe ;
   int status ;
   unsigned int transfer_flags ;
   void *transfer_buffer ;
   dma_addr_t transfer_dma ;
   u32 transfer_buffer_length ;
   u32 actual_length ;
   unsigned char *setup_packet ;
   dma_addr_t setup_dma ;
   int start_frame ;
   int number_of_packets ;
   int interval ;
   int error_count ;
   void *context ;
   void (*complete)(struct urb * ) ;
   struct usb_iso_packet_descriptor iso_frame_desc[0] ;
};
enum port_dev_state {
    PORT_UNREGISTERED = 0,
    PORT_REGISTERING = 1,
    PORT_REGISTERED = 2,
    PORT_UNREGISTERING = 3
} ;
struct usb_serial;
struct usb_serial_port {
   struct usb_serial *serial ;
   struct tty_port port ;
   spinlock_t lock ;
   struct mutex mutex ;
   unsigned char number ;
   unsigned char *interrupt_in_buffer ;
   struct urb *interrupt_in_urb ;
   __u8 interrupt_in_endpointAddress ;
   unsigned char *interrupt_out_buffer ;
   int interrupt_out_size ;
   struct urb *interrupt_out_urb ;
   __u8 interrupt_out_endpointAddress ;
   unsigned char *bulk_in_buffer ;
   int bulk_in_size ;
   struct urb *read_urb ;
   __u8 bulk_in_endpointAddress ;
   unsigned char *bulk_out_buffer ;
   int bulk_out_size ;
   struct urb *write_urb ;
   int write_urb_busy ;
   __u8 bulk_out_endpointAddress ;
   int tx_bytes_flight ;
   int urbs_in_flight ;
   wait_queue_head_t write_wait ;
   struct work_struct work ;
   char throttled ;
   char throttle_req ;
   char console ;
   unsigned long sysrq ;
   struct device dev ;
   enum port_dev_state dev_state ;
};
struct usb_serial_driver;
struct usb_serial {
   struct usb_device *dev ;
   struct usb_serial_driver *type ;
   struct usb_interface *interface ;
   unsigned char disconnected : 1 ;
   unsigned char suspending : 1 ;
   unsigned char minor ;
   unsigned char num_ports ;
   unsigned char num_port_pointers ;
   char num_interrupt_in ;
   char num_interrupt_out ;
   char num_bulk_in ;
   char num_bulk_out ;
   struct usb_serial_port *port[8] ;
   struct kref kref ;
   struct mutex disc_mutex ;
   void *private ;
};
struct usb_serial_driver {
   char const   *description ;
   struct usb_device_id  const  *id_table ;
   char num_ports ;
   struct list_head driver_list ;
   struct device_driver driver ;
   struct usb_driver *usb_driver ;
   struct usb_dynids dynids ;
   int max_in_flight_urbs ;
   int (*probe)(struct usb_serial *serial , struct usb_device_id  const  *id ) ;
   int (*attach)(struct usb_serial *serial ) ;
   int (*calc_num_ports)(struct usb_serial *serial ) ;
   void (*disconnect)(struct usb_serial *serial ) ;
   void (*release)(struct usb_serial *serial ) ;
   int (*port_probe)(struct usb_serial_port *port ) ;
   int (*port_remove)(struct usb_serial_port *port ) ;
   int (*suspend)(struct usb_serial *serial , pm_message_t message ) ;
   int (*resume)(struct usb_serial *serial ) ;
   int (*open)(struct tty_struct *tty , struct usb_serial_port *port , struct file *filp ) ;
   void (*close)(struct usb_serial_port *port ) ;
   int (*write)(struct tty_struct *tty , struct usb_serial_port *port , unsigned char const   *buf ,
                int count ) ;
   int (*write_room)(struct tty_struct *tty ) ;
   int (*ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd , unsigned long arg ) ;
   void (*set_termios)(struct tty_struct *tty , struct usb_serial_port *port , struct ktermios *old ) ;
   void (*break_ctl)(struct tty_struct *tty , int break_state ) ;
   int (*chars_in_buffer)(struct tty_struct *tty ) ;
   void (*throttle)(struct tty_struct *tty ) ;
   void (*unthrottle)(struct tty_struct *tty ) ;
   int (*tiocmget)(struct tty_struct *tty , struct file *file ) ;
   int (*tiocmset)(struct tty_struct *tty , struct file *file , unsigned int set ,
                   unsigned int clear ) ;
   void (*dtr_rts)(struct usb_serial_port *port , int on ) ;
   int (*carrier_raised)(struct usb_serial_port *port ) ;
   void (*read_int_callback)(struct urb *urb ) ;
   void (*write_int_callback)(struct urb *urb ) ;
   void (*read_bulk_callback)(struct urb *urb ) ;
   void (*write_bulk_callback)(struct urb *urb ) ;
};
enum spcp8x5_type {
    SPCP825_007_TYPE = 0,
    SPCP825_008_TYPE = 1,
    SPCP825_PHILIP_TYPE = 2,
    SPCP825_INTERMATIC_TYPE = 3,
    SPCP835_TYPE = 4
} ;
struct ringbuf {
   unsigned int buf_size ;
   char *buf_buf ;
   char *buf_get ;
   char *buf_put ;
};
struct spcp8x5_private {
   spinlock_t lock ;
   struct ringbuf *buf ;
   int write_urb_in_use ;
   enum spcp8x5_type type ;
   wait_queue_head_t delta_msr_wait ;
   u8 line_control ;
   u8 line_status ;
   u8 termios_initialized ;
};
enum hrtimer_restart;
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
long ldv__builtin_expect(long exp , long c ) ;
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
  __asm__  volatile   ("bt %2,%1\n\t"
                       "sbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
  return (oldbit);
}
}
extern  __attribute__((__noreturn__)) int ____ilog2_NaN(void)  __attribute__((__const__)) ;
extern long long dynamic_debug_enabled ;
extern long long dynamic_debug_enabled2 ;
extern int ( /* format attribute */  printk)(char const   *fmt  , ...) ;
__inline static int get_order(unsigned long size )  __attribute__((__const__)) ;
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
  size = (size - 1UL) >> (12 - 1);
  order = -1;
  while (1) {
    size = size >> 1;
    order = order + 1;
    if (size) {

    } else {
      break;
    }
  }
  return (order);
}
}
extern void __bad_percpu_size(void) ;
extern struct task_struct *per_cpu__current_task  __attribute__((__section__(".data.percpu"))) ;
__inline static struct task_struct *( __attribute__((__always_inline__)) get_current)(void) 
{ 
  struct task_struct *ret__ ;

  {
  switch (sizeof(per_cpu__current_task)) {
  case 1UL: 
  __asm__  ("mov"
            "b "
            "%%"
            "gs"
            ":%P"
            "1"
            ",%0": "=q" (ret__): "m" (per_cpu__current_task));
  break;
  case 2UL: 
  __asm__  ("mov"
            "w "
            "%%"
            "gs"
            ":%P"
            "1"
            ",%0": "=r" (ret__): "m" (per_cpu__current_task));
  break;
  case 4UL: 
  __asm__  ("mov"
            "l "
            "%%"
            "gs"
            ":%P"
            "1"
            ",%0": "=r" (ret__): "m" (per_cpu__current_task));
  break;
  case 8UL: 
  __asm__  ("mov"
            "q "
            "%%"
            "gs"
            ":%P"
            "1"
            ",%0": "=r" (ret__): "m" (per_cpu__current_task));
  break;
  default: 
  __bad_percpu_size();
  }
  return (ret__);
}
}
extern void *memset(void *s , int c , size_t n ) ;
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp___0 ;

  {
  tmp___0 = variable_test_bit(flag, (unsigned long *)(& ti->flags));
  return (tmp___0);
}
}
extern void __spin_lock_init(spinlock_t *lock , char const   *name , struct lock_class_key *key ) ;
extern unsigned long _spin_lock_irqsave(spinlock_t *lock )  __attribute__((__section__(".spinlock.text"))) ;
extern void _spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags )  __attribute__((__section__(".spinlock.text"))) ;
extern void init_waitqueue_head(wait_queue_head_t *q ) ;
extern void __wake_up(wait_queue_head_t *q , unsigned int mode , int nr , void *key ) ;
extern void interruptible_sleep_on(wait_queue_head_t *q ) ;
extern unsigned long __get_free_pages(gfp_t gfp_mask , unsigned int order ) ;
extern void kfree(void const   * ) ;
extern int schedule_work(struct work_struct *work ) ;
__inline static char const   *kobject_name(struct kobject  const  *kobj ) 
{ 


  {
  return (kobj->name);
}
}
extern struct tracepoint __tracepoint_kmalloc ;
__inline static void trace_kmalloc(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                                   size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  void **_________p1 ;
  long tmp ;

  {
  tmp = ldv__builtin_expect(! (! __tracepoint_kmalloc.state), 0);
  if (tmp) {
    while (1) {
      while (1) {
        break;
      }
      _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
      while (1) {
        break;
      }
      it_func = _________p1;
      if (it_func) {
        while (1) {
          (*((void (*)(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                       size_t bytes_alloc , gfp_t gfp_flags ))*it_func))(call_site,
                                                                         ptr, bytes_req,
                                                                         bytes_alloc,
                                                                         gfp_flags);
          it_func = it_func + 1;
          if (*it_func) {

          } else {
            break;
          }
        }
      } else {

      }
      while (1) {
        break;
      }
      break;
    }
  } else {

  }
  return;
}
}
extern struct kmem_cache kmalloc_caches[12 + 2] ;
__inline static int ( __attribute__((__always_inline__)) kmalloc_index)(size_t size ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  int tmp___36 ;
  int tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  int tmp___41 ;
  int tmp___42 ;
  int tmp___43 ;
  int tmp___44 ;
  int tmp___45 ;
  int tmp___46 ;
  int tmp___47 ;
  int tmp___48 ;
  int tmp___49 ;
  int tmp___50 ;
  int tmp___51 ;
  int tmp___52 ;
  int tmp___53 ;
  int tmp___54 ;
  int tmp___55 ;
  int tmp___56 ;
  int tmp___57 ;
  int tmp___58 ;
  int tmp___59 ;
  int tmp___60 ;
  int tmp___61 ;
  int tmp___62 ;
  int tmp___63 ;
  int tmp___64 ;
  int tmp___65 ;

  {
  if (! size) {
    return (0);
  } else {

  }
  if (size <= (size_t )8) {
    if (8 < 1) {
      tmp = ____ilog2_NaN();
      tmp___65 = tmp;
    } else {
      if (8ULL & (1ULL << 63)) {
        tmp___64 = 63;
      } else {
        if (8ULL & (1ULL << 62)) {
          tmp___63 = 62;
        } else {
          if (8ULL & (1ULL << 61)) {
            tmp___62 = 61;
          } else {
            if (8ULL & (1ULL << 60)) {
              tmp___61 = 60;
            } else {
              if (8ULL & (1ULL << 59)) {
                tmp___60 = 59;
              } else {
                if (8ULL & (1ULL << 58)) {
                  tmp___59 = 58;
                } else {
                  if (8ULL & (1ULL << 57)) {
                    tmp___58 = 57;
                  } else {
                    if (8ULL & (1ULL << 56)) {
                      tmp___57 = 56;
                    } else {
                      if (8ULL & (1ULL << 55)) {
                        tmp___56 = 55;
                      } else {
                        if (8ULL & (1ULL << 54)) {
                          tmp___55 = 54;
                        } else {
                          if (8ULL & (1ULL << 53)) {
                            tmp___54 = 53;
                          } else {
                            if (8ULL & (1ULL << 52)) {
                              tmp___53 = 52;
                            } else {
                              if (8ULL & (1ULL << 51)) {
                                tmp___52 = 51;
                              } else {
                                if (8ULL & (1ULL << 50)) {
                                  tmp___51 = 50;
                                } else {
                                  if (8ULL & (1ULL << 49)) {
                                    tmp___50 = 49;
                                  } else {
                                    if (8ULL & (1ULL << 48)) {
                                      tmp___49 = 48;
                                    } else {
                                      if (8ULL & (1ULL << 47)) {
                                        tmp___48 = 47;
                                      } else {
                                        if (8ULL & (1ULL << 46)) {
                                          tmp___47 = 46;
                                        } else {
                                          if (8ULL & (1ULL << 45)) {
                                            tmp___46 = 45;
                                          } else {
                                            if (8ULL & (1ULL << 44)) {
                                              tmp___45 = 44;
                                            } else {
                                              if (8ULL & (1ULL << 43)) {
                                                tmp___44 = 43;
                                              } else {
                                                if (8ULL & (1ULL << 42)) {
                                                  tmp___43 = 42;
                                                } else {
                                                  if (8ULL & (1ULL << 41)) {
                                                    tmp___42 = 41;
                                                  } else {
                                                    if (8ULL & (1ULL << 40)) {
                                                      tmp___41 = 40;
                                                    } else {
                                                      if (8ULL & (1ULL << 39)) {
                                                        tmp___40 = 39;
                                                      } else {
                                                        if (8ULL & (1ULL << 38)) {
                                                          tmp___39 = 38;
                                                        } else {
                                                          if (8ULL & (1ULL << 37)) {
                                                            tmp___38 = 37;
                                                          } else {
                                                            if (8ULL & (1ULL << 36)) {
                                                              tmp___37 = 36;
                                                            } else {
                                                              if (8ULL & (1ULL << 35)) {
                                                                tmp___36 = 35;
                                                              } else {
                                                                if (8ULL & (1ULL << 34)) {
                                                                  tmp___35 = 34;
                                                                } else {
                                                                  if (8ULL & (1ULL << 33)) {
                                                                    tmp___34 = 33;
                                                                  } else {
                                                                    if (8ULL & (1ULL << 32)) {
                                                                      tmp___33 = 32;
                                                                    } else {
                                                                      if (8ULL & (1ULL << 31)) {
                                                                        tmp___32 = 31;
                                                                      } else {
                                                                        if (8ULL & (1ULL << 30)) {
                                                                          tmp___31 = 30;
                                                                        } else {
                                                                          if (8ULL & (1ULL << 29)) {
                                                                            tmp___30 = 29;
                                                                          } else {
                                                                            if (8ULL & (1ULL << 28)) {
                                                                              tmp___29 = 28;
                                                                            } else {
                                                                              if (8ULL & (1ULL << 27)) {
                                                                                tmp___28 = 27;
                                                                              } else {
                                                                                if (8ULL & (1ULL << 26)) {
                                                                                  tmp___27 = 26;
                                                                                } else {
                                                                                  if (8ULL & (1ULL << 25)) {
                                                                                    tmp___26 = 25;
                                                                                  } else {
                                                                                    if (8ULL & (1ULL << 24)) {
                                                                                      tmp___25 = 24;
                                                                                    } else {
                                                                                      if (8ULL & (1ULL << 23)) {
                                                                                        tmp___24 = 23;
                                                                                      } else {
                                                                                        if (8ULL & (1ULL << 22)) {
                                                                                          tmp___23 = 22;
                                                                                        } else {
                                                                                          if (8ULL & (1ULL << 21)) {
                                                                                            tmp___22 = 21;
                                                                                          } else {
                                                                                            if (8ULL & (1ULL << 20)) {
                                                                                              tmp___21 = 20;
                                                                                            } else {
                                                                                              if (8ULL & (1ULL << 19)) {
                                                                                                tmp___20 = 19;
                                                                                              } else {
                                                                                                if (8ULL & (1ULL << 18)) {
                                                                                                  tmp___19 = 18;
                                                                                                } else {
                                                                                                  if (8ULL & (1ULL << 17)) {
                                                                                                    tmp___18 = 17;
                                                                                                  } else {
                                                                                                    if (8ULL & (1ULL << 16)) {
                                                                                                      tmp___17 = 16;
                                                                                                    } else {
                                                                                                      if (8ULL & (1ULL << 15)) {
                                                                                                        tmp___16 = 15;
                                                                                                      } else {
                                                                                                        if (8ULL & (1ULL << 14)) {
                                                                                                          tmp___15 = 14;
                                                                                                        } else {
                                                                                                          if (8ULL & (1ULL << 13)) {
                                                                                                            tmp___14 = 13;
                                                                                                          } else {
                                                                                                            if (8ULL & (1ULL << 12)) {
                                                                                                              tmp___13 = 12;
                                                                                                            } else {
                                                                                                              if (8ULL & (1ULL << 11)) {
                                                                                                                tmp___12 = 11;
                                                                                                              } else {
                                                                                                                if (8ULL & (1ULL << 10)) {
                                                                                                                  tmp___11 = 10;
                                                                                                                } else {
                                                                                                                  if (8ULL & (1ULL << 9)) {
                                                                                                                    tmp___10 = 9;
                                                                                                                  } else {
                                                                                                                    if (8ULL & (1ULL << 8)) {
                                                                                                                      tmp___9 = 8;
                                                                                                                    } else {
                                                                                                                      if (8ULL & (1ULL << 7)) {
                                                                                                                        tmp___8 = 7;
                                                                                                                      } else {
                                                                                                                        if (8ULL & (1ULL << 6)) {
                                                                                                                          tmp___7 = 6;
                                                                                                                        } else {
                                                                                                                          if (8ULL & (1ULL << 5)) {
                                                                                                                            tmp___6 = 5;
                                                                                                                          } else {
                                                                                                                            if (8ULL & (1ULL << 4)) {
                                                                                                                              tmp___5 = 4;
                                                                                                                            } else {
                                                                                                                              if (8ULL & (1ULL << 3)) {
                                                                                                                                tmp___4 = 3;
                                                                                                                              } else {
                                                                                                                                if (8ULL & (1ULL << 2)) {
                                                                                                                                  tmp___3 = 2;
                                                                                                                                } else {
                                                                                                                                  if (8ULL & (1ULL << 1)) {
                                                                                                                                    tmp___2 = 1;
                                                                                                                                  } else {
                                                                                                                                    if (8ULL & (1ULL << 0)) {
                                                                                                                                      tmp___1 = 0;
                                                                                                                                    } else {
                                                                                                                                      tmp___0 = ____ilog2_NaN();
                                                                                                                                      tmp___1 = tmp___0;
                                                                                                                                    }
                                                                                                                                    tmp___2 = tmp___1;
                                                                                                                                  }
                                                                                                                                  tmp___3 = tmp___2;
                                                                                                                                }
                                                                                                                                tmp___4 = tmp___3;
                                                                                                                              }
                                                                                                                              tmp___5 = tmp___4;
                                                                                                                            }
                                                                                                                            tmp___6 = tmp___5;
                                                                                                                          }
                                                                                                                          tmp___7 = tmp___6;
                                                                                                                        }
                                                                                                                        tmp___8 = tmp___7;
                                                                                                                      }
                                                                                                                      tmp___9 = tmp___8;
                                                                                                                    }
                                                                                                                    tmp___10 = tmp___9;
                                                                                                                  }
                                                                                                                  tmp___11 = tmp___10;
                                                                                                                }
                                                                                                                tmp___12 = tmp___11;
                                                                                                              }
                                                                                                              tmp___13 = tmp___12;
                                                                                                            }
                                                                                                            tmp___14 = tmp___13;
                                                                                                          }
                                                                                                          tmp___15 = tmp___14;
                                                                                                        }
                                                                                                        tmp___16 = tmp___15;
                                                                                                      }
                                                                                                      tmp___17 = tmp___16;
                                                                                                    }
                                                                                                    tmp___18 = tmp___17;
                                                                                                  }
                                                                                                  tmp___19 = tmp___18;
                                                                                                }
                                                                                                tmp___20 = tmp___19;
                                                                                              }
                                                                                              tmp___21 = tmp___20;
                                                                                            }
                                                                                            tmp___22 = tmp___21;
                                                                                          }
                                                                                          tmp___23 = tmp___22;
                                                                                        }
                                                                                        tmp___24 = tmp___23;
                                                                                      }
                                                                                      tmp___25 = tmp___24;
                                                                                    }
                                                                                    tmp___26 = tmp___25;
                                                                                  }
                                                                                  tmp___27 = tmp___26;
                                                                                }
                                                                                tmp___28 = tmp___27;
                                                                              }
                                                                              tmp___29 = tmp___28;
                                                                            }
                                                                            tmp___30 = tmp___29;
                                                                          }
                                                                          tmp___31 = tmp___30;
                                                                        }
                                                                        tmp___32 = tmp___31;
                                                                      }
                                                                      tmp___33 = tmp___32;
                                                                    }
                                                                    tmp___34 = tmp___33;
                                                                  }
                                                                  tmp___35 = tmp___34;
                                                                }
                                                                tmp___36 = tmp___35;
                                                              }
                                                              tmp___37 = tmp___36;
                                                            }
                                                            tmp___38 = tmp___37;
                                                          }
                                                          tmp___39 = tmp___38;
                                                        }
                                                        tmp___40 = tmp___39;
                                                      }
                                                      tmp___41 = tmp___40;
                                                    }
                                                    tmp___42 = tmp___41;
                                                  }
                                                  tmp___43 = tmp___42;
                                                }
                                                tmp___44 = tmp___43;
                                              }
                                              tmp___45 = tmp___44;
                                            }
                                            tmp___46 = tmp___45;
                                          }
                                          tmp___47 = tmp___46;
                                        }
                                        tmp___48 = tmp___47;
                                      }
                                      tmp___49 = tmp___48;
                                    }
                                    tmp___50 = tmp___49;
                                  }
                                  tmp___51 = tmp___50;
                                }
                                tmp___52 = tmp___51;
                              }
                              tmp___53 = tmp___52;
                            }
                            tmp___54 = tmp___53;
                          }
                          tmp___55 = tmp___54;
                        }
                        tmp___56 = tmp___55;
                      }
                      tmp___57 = tmp___56;
                    }
                    tmp___58 = tmp___57;
                  }
                  tmp___59 = tmp___58;
                }
                tmp___60 = tmp___59;
              }
              tmp___61 = tmp___60;
            }
            tmp___62 = tmp___61;
          }
          tmp___63 = tmp___62;
        }
        tmp___64 = tmp___63;
      }
      tmp___65 = tmp___64;
    }
    return (tmp___65);
  } else {

  }
  if (size > (size_t )64 && size <= (size_t )96) {
    return (1);
  } else {

  }
  if (size > (size_t )128 && size <= (size_t )192) {
    return (2);
  } else {

  }
  if (size <= (size_t )8) {
    return (3);
  } else {

  }
  if (size <= (size_t )16) {
    return (4);
  } else {

  }
  if (size <= (size_t )32) {
    return (5);
  } else {

  }
  if (size <= (size_t )64) {
    return (6);
  } else {

  }
  if (size <= (size_t )128) {
    return (7);
  } else {

  }
  if (size <= (size_t )256) {
    return (8);
  } else {

  }
  if (size <= (size_t )512) {
    return (9);
  } else {

  }
  if (size <= (size_t )1024) {
    return (10);
  } else {

  }
  if (size <= (size_t )(2 * 1024)) {
    return (11);
  } else {

  }
  if (size <= (size_t )(4 * 1024)) {
    return (12);
  } else {

  }
  if (size <= (size_t )(8 * 1024)) {
    return (13);
  } else {

  }
  if (size <= (size_t )(16 * 1024)) {
    return (14);
  } else {

  }
  if (size <= (size_t )(32 * 1024)) {
    return (15);
  } else {

  }
  if (size <= (size_t )(64 * 1024)) {
    return (16);
  } else {

  }
  if (size <= (size_t )(128 * 1024)) {
    return (17);
  } else {

  }
  if (size <= (size_t )(256 * 1024)) {
    return (18);
  } else {

  }
  if (size <= (size_t )(512 * 1024)) {
    return (19);
  } else {

  }
  if (size <= (size_t )(1024 * 1024)) {
    return (20);
  } else {

  }
  if (size <= (size_t )((2 * 1024) * 1024)) {
    return (21);
  } else {

  }
  return (-1);
}
}
__inline static struct kmem_cache *( __attribute__((__always_inline__)) kmalloc_slab)(size_t size ) 
{ 
  int index ;
  int tmp ;

  {
  tmp = kmalloc_index(size);
  index = tmp;
  if (index == 0) {
    return ((void *)0);
  } else {

  }
  return (& kmalloc_caches[index]);
}
}
extern void *__kmalloc(size_t size , gfp_t flags ) ;
extern void *kmem_cache_alloc_notrace(struct kmem_cache *s , gfp_t gfpflags ) ;
__inline static void *( __attribute__((__always_inline__)) kmalloc_large)(size_t size ,
                                                                          gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
  tmp = get_order(size);
  order = tmp;
  tmp___0 = __get_free_pages(flags | 16384U, order);
  ret = (void *)tmp___0;
  trace_kmalloc((unsigned long )((void *)0), ret, size, (1UL << 12) << order, flags);
  return (ret);
}
}
__inline static void *( __attribute__((__always_inline__)) kmalloc)(size_t size ,
                                                                    gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
  if (0) {
    if (size > 2UL * (1UL << 12)) {
      tmp = kmalloc_large(size, flags);
      return (tmp);
    } else {

    }
    if (! (flags & 1U)) {
      tmp___0 = kmalloc_slab(size);
      s = tmp___0;
      if (! s) {
        return ((void *)16);
      } else {

      }
      ret = kmem_cache_alloc_notrace(s, flags);
      trace_kmalloc((unsigned long )((void *)0), ret, size, s->size, flags);
      return (ret);
    } else {

    }
  } else {

  }
  tmp___1 = __kmalloc(size, flags);
  return (tmp___1);
}
}
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
  tmp = kmalloc(size, flags | 32768U);
  return (tmp);
}
}
extern struct ktermios tty_std_termios ;
extern void tty_kref_put(struct tty_struct *tty ) ;
extern void tty_flip_buffer_push(struct tty_struct *tty ) ;
extern speed_t tty_get_baud_rate(struct tty_struct *tty ) ;
extern int tty_termios_hw_change(struct ktermios *a , struct ktermios *b ) ;
extern struct tty_struct *tty_port_tty_get(struct tty_port *port ) ;
extern int tty_buffer_request_room(struct tty_struct *tty , size_t size ) ;
extern int tty_insert_flip_string_flags(struct tty_struct *tty , unsigned char const   *chars ,
                                        char const   *flags , size_t size ) ;
__inline static int tty_insert_flip_char(struct tty_struct *tty , unsigned char ch ,
                                         char flag ) 
{ 
  struct tty_buffer *tb ;
  int tmp ;
  int tmp___0 ;

  {
  tb = tty->buf.tail;
  if (tb && tb->used < tb->size) {
    *(tb->flag_buf_ptr + tb->used) = flag;
    tmp = tb->used;
    tb->used = tb->used + 1;
    *(tb->char_buf_ptr + tmp) = ch;
    return (1);
  } else {

  }
  tmp___0 = tty_insert_flip_string_flags(tty, & ch, & flag, 1);
  return (tmp___0);
}
}
extern int param_set_bool(char const   *val , struct kernel_param *kp ) ;
extern int param_get_bool(char *buffer , struct kernel_param *kp ) ;
int init_module(void) ;
void cleanup_module(void) ;
extern struct module __this_module ;
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
  return (tmp);
}
}
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
  tmp = test_tsk_thread_flag(p, 2);
  if (tmp) {
    tmp___0 = 1;
  } else {
    tmp___0 = 0;
  }
  tmp___1 = ldv__builtin_expect(tmp___0, 0);
  return (tmp___1);
}
}
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 
  char const   *tmp ;

  {
  tmp = kobject_name(& dev->kobj);
  return (tmp);
}
}
__inline static void *dev_get_drvdata(struct device  const  *dev ) 
{ 


  {
  return (dev->driver_data);
}
}
__inline static void dev_set_drvdata(struct device *dev , void *data ) 
{ 


  {
  dev->driver_data = data;
  return;
}
}
extern char const   *dev_driver_string(struct device  const  *dev ) ;
extern int usb_register_driver(struct usb_driver * , struct module * , char const   * ) ;
__inline static int usb_register(struct usb_driver *driver ) 
{ 
  int tmp ;

  {
  tmp = usb_register_driver(driver, & __this_module, "spcp8x5");
  return (tmp);
}
}
extern void usb_deregister(struct usb_driver * ) ;
extern int usb_submit_urb(struct urb *urb , gfp_t mem_flags ) ;
extern int usb_unlink_urb(struct urb *urb ) ;
extern int usb_control_msg(struct usb_device *dev , unsigned int pipe , __u8 request ,
                           __u8 requesttype , __u16 value , __u16 index , void *data ,
                           __u16 size , int timeout ) ;
extern int usb_clear_halt(struct usb_device *dev , int pipe ) ;
__inline static unsigned int __create_pipe(struct usb_device *dev , unsigned int endpoint ) 
{ 


  {
  return ((unsigned int )(dev->devnum << 8) | (endpoint << 15));
}
}
__inline static void *usb_get_serial_port_data(struct usb_serial_port *port ) 
{ 
  void *tmp ;

  {
  tmp = dev_get_drvdata(& port->dev);
  return (tmp);
}
}
__inline static void usb_set_serial_port_data(struct usb_serial_port *port , void *data ) 
{ 


  {
  dev_set_drvdata(& port->dev, data);
  return;
}
}
extern int usb_serial_register(struct usb_serial_driver *driver ) ;
extern void usb_serial_deregister(struct usb_serial_driver *driver ) ;
extern int usb_serial_probe(struct usb_interface *iface , struct usb_device_id  const  *id ) ;
extern void usb_serial_disconnect(struct usb_interface *iface ) ;
static int debug  ;
static struct usb_device_id id_table[5]  = {      {1 | 2, 1137, 2078, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {1 | 2,
      1276, 516, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {1 | 2,
      1276, 561, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {1 | 2,
      1276, 565, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {1 | 2,
      1276, 513, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}};
extern struct usb_device_id  const  __mod_usb_device_table  __attribute__((__unused__,
__alias__("id_table"))) ;
__inline static struct ringbuf *alloc_ringbuf(unsigned int size ) 
{ 
  struct ringbuf *pb ;
  void *tmp ;
  void *tmp___0 ;
  char *tmp___1 ;

  {
  if (size == 0U) {
    return ((void *)0);
  } else {

  }
  tmp = kmalloc(sizeof(*pb), (16U | 64U) | 128U);
  pb = tmp;
  if ((unsigned long )pb == (unsigned long )((void *)0)) {
    return ((void *)0);
  } else {

  }
  tmp___0 = kmalloc(size, (16U | 64U) | 128U);
  pb->buf_buf = tmp___0;
  if ((unsigned long )pb->buf_buf == (unsigned long )((void *)0)) {
    kfree(pb);
    return ((void *)0);
  } else {

  }
  pb->buf_size = size;
  tmp___1 = pb->buf_buf;
  pb->buf_put = tmp___1;
  pb->buf_get = tmp___1;
  return (pb);
}
}
__inline static void free_ringbuf(struct ringbuf *pb ) 
{ 


  {
  if ((unsigned long )pb != (unsigned long )((void *)0)) {
    kfree(pb->buf_buf);
    kfree(pb);
  } else {

  }
  return;
}
}
__inline static void clear_ringbuf(struct ringbuf *pb ) 
{ 


  {
  if ((unsigned long )pb != (unsigned long )((void *)0)) {
    pb->buf_get = pb->buf_put;
  } else {

  }
  return;
}
}
__inline static unsigned int ringbuf_avail_data(struct ringbuf *pb ) 
{ 


  {
  if ((unsigned long )pb == (unsigned long )((void *)0)) {
    return (0);
  } else {

  }
  return (((pb->buf_put + pb->buf_size) - pb->buf_get) % (long )pb->buf_size);
}
}
__inline static unsigned int ringbuf_avail_space(struct ringbuf *pb ) 
{ 


  {
  if ((unsigned long )pb == (unsigned long )((void *)0)) {
    return (0);
  } else {

  }
  return ((((pb->buf_get + pb->buf_size) - pb->buf_put) - 1L) % (long )pb->buf_size);
}
}
static unsigned int put_ringbuf(struct ringbuf *pb , char const   *buf , unsigned int count ) 
{ 
  unsigned int len ;
  size_t __len ;
  void *__ret ;
  size_t __len___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  void *__ret___1 ;

  {
  if ((unsigned long )pb == (unsigned long )((void *)0)) {
    return (0);
  } else {

  }
  len = ringbuf_avail_space(pb);
  if (count > len) {
    count = len;
  } else {

  }
  if (count == 0U) {
    return (0);
  } else {

  }
  len = (pb->buf_buf + pb->buf_size) - pb->buf_put;
  if (count > len) {
    __len = len;
    __ret = __builtin_memcpy(pb->buf_put, buf, __len);
    __len___0 = count - len;
    __ret___0 = __builtin_memcpy(pb->buf_buf, buf + len, __len___0);
    pb->buf_put = (pb->buf_buf + count) - len;
  } else {
    __len___1 = count;
    __ret___1 = __builtin_memcpy(pb->buf_put, buf, __len___1);
    if (count < len) {
      pb->buf_put = pb->buf_put + count;
    } else {
      pb->buf_put = pb->buf_buf;
    }
  }
  return (count);
}
}
static unsigned int get_ringbuf(struct ringbuf *pb , char *buf , unsigned int count ) 
{ 
  unsigned int len ;
  size_t __len ;
  void *__ret ;
  size_t __len___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  void *__ret___1 ;

  {
  if ((unsigned long )pb == (unsigned long )((void *)0) || (unsigned long )buf == (unsigned long )((void *)0)) {
    return (0);
  } else {

  }
  len = ringbuf_avail_data(pb);
  if (count > len) {
    count = len;
  } else {

  }
  if (count == 0U) {
    return (0);
  } else {

  }
  len = (pb->buf_buf + pb->buf_size) - pb->buf_get;
  if (count > len) {
    __len = len;
    __ret = __builtin_memcpy(buf, pb->buf_get, __len);
    __len___0 = count - len;
    __ret___0 = __builtin_memcpy(buf + len, pb->buf_buf, __len___0);
    pb->buf_get = (pb->buf_buf + count) - len;
  } else {
    __len___1 = count;
    __ret___1 = __builtin_memcpy(buf, pb->buf_get, __len___1);
    if (count < len) {
      pb->buf_get = pb->buf_get + count;
    } else {
      pb->buf_get = pb->buf_buf;
    }
  }
  return (count);
}
}
static struct usb_driver spcp8x5_driver  = 
     {"spcp8x5", & usb_serial_probe, & usb_serial_disconnect, 0, 0, 0, 0, 0, 0, id_table,
    {{{0U}, 0U, 0U, 0, {0, 0, 0, 0, 0UL}}, {0, 0}}, {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                      0, 0}, 0}, 1, 0U, 0U};
static int spcp8x5_startup(struct usb_serial *serial ) ;
static struct _ddebug descriptor  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
     {"spcp8x5", "spcp8x5_startup", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
    "device type = %d\n", 7, 62, 327, 0};
static struct lock_class_key __key___2  ;
static int spcp8x5_startup(struct usb_serial *serial ) 
{ 
  struct spcp8x5_private *priv ;
  int i ;
  enum spcp8x5_type type ;
  u16 product ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int __ret ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;

  {
  type = SPCP825_007_TYPE;
  product = (serial->dev)->descriptor.idProduct;
  if ((int )product == 513) {
    type = SPCP825_007_TYPE;
  } else
  if ((int )product == 561) {
    type = SPCP835_TYPE;
  } else
  if ((int )product == 565) {
    type = SPCP825_008_TYPE;
  } else
  if ((int )product == 516) {
    type = SPCP825_INTERMATIC_TYPE;
  } else
  if ((int )product == 1137 && (int )(serial->dev)->descriptor.idVendor == (int )((__u16 )2078)) {
    type = SPCP825_PHILIP_TYPE;
  } else {

  }
  while (1) {
    while (1) {
      __ret = 0;
      tmp___2 = ldv__builtin_expect(! (! (dynamic_debug_enabled & (1LL << 7) && dynamic_debug_enabled2 & (1LL << 62))),
                                 0);
      if (tmp___2) {
        tmp___1 = ldv__builtin_expect(! (! descriptor.flags), 0);
        if (tmp___1) {
          __ret = 1;
        } else {

        }
      } else {

      }
      if (__ret) {
        tmp = dev_name(& (serial->dev)->dev);
        tmp___0 = dev_driver_string(& (serial->dev)->dev);
        printk("<7>%s %s: spcp8x5: device type = %d\n", tmp___0, tmp, (int )type);
      } else {

      }
      break;
    }
    break;
  }
  i = 0;
  while (1) {
    if (i < (int )serial->num_ports) {

    } else {
      break;
    }
    tmp___3 = kzalloc(sizeof(struct spcp8x5_private ), (16U | 64U) | 128U);
    priv = tmp___3;
    if (! priv) {
      goto cleanup;
    } else {

    }
    while (1) {
      __spin_lock_init(& priv->lock, "&priv->lock", & __key___2);
      break;
    }
    priv->buf = alloc_ringbuf(1024);
    if ((unsigned long )priv->buf == (unsigned long )((void *)0)) {
      goto cleanup2;
    } else {

    }
    init_waitqueue_head(& priv->delta_msr_wait);
    priv->type = type;
    usb_set_serial_port_data(serial->port[i], priv);
    i = i + 1;
  }
  return (0);
  cleanup2: 
  kfree(priv);
  cleanup: 
  i = i - 1;
  while (1) {
    if (i >= 0) {

    } else {
      break;
    }
    tmp___4 = usb_get_serial_port_data(serial->port[i]);
    priv = tmp___4;
    free_ringbuf(priv->buf);
    kfree(priv);
    usb_set_serial_port_data(serial->port[i], (void *)0);
    i = i - 1;
  }
  return (-12);
}
}
static void spcp8x5_release(struct usb_serial *serial ) 
{ 
  int i ;
  struct spcp8x5_private *priv ;
  void *tmp ;

  {
  i = 0;
  while (1) {
    if (i < (int )serial->num_ports) {

    } else {
      break;
    }
    tmp = usb_get_serial_port_data(serial->port[i]);
    priv = tmp;
    if (priv) {
      free_ringbuf(priv->buf);
      kfree(priv);
    } else {

    }
    i = i + 1;
  }
  return;
}
}
static int spcp8x5_set_ctrlLine(struct usb_device *dev , u8 value , enum spcp8x5_type type ) ;
static struct _ddebug descriptor___0  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
     {"spcp8x5", "spcp8x5_set_ctrlLine", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
    "usb_control_msg return %#x\n", 7, 62, 390, 0};
static int spcp8x5_set_ctrlLine(struct usb_device *dev , u8 value , enum spcp8x5_type type ) 
{ 
  int retval ;
  u8 mcr ;
  unsigned int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int __ret ;
  long tmp___2 ;
  long tmp___3 ;

  {
  mcr = 0;
  if ((unsigned int )type == (unsigned int )SPCP825_007_TYPE) {
    return (-1);
  } else {

  }
  mcr = (unsigned short )value;
  tmp = __create_pipe(dev, 0);
  retval = usb_control_msg(dev, (unsigned int )(2 << 30) | tmp, 35, 64, mcr, 4, (void *)0,
                           0, 100);
  if (retval != 0) {
    while (1) {
      while (1) {
        __ret = 0;
        tmp___3 = ldv__builtin_expect(! (! (dynamic_debug_enabled & (1LL << 7) && dynamic_debug_enabled2 & (1LL << 62))),
                                   0);
        if (tmp___3) {
          tmp___2 = ldv__builtin_expect(! (! descriptor___0.flags), 0);
          if (tmp___2) {
            __ret = 1;
          } else {

          }
        } else {

        }
        if (__ret) {
          tmp___0 = dev_name(& dev->dev);
          tmp___1 = dev_driver_string(& dev->dev);
          printk("<7>%s %s: spcp8x5: usb_control_msg return %#x\n", tmp___1, tmp___0,
                 retval);
        } else {

        }
        break;
      }
      break;
    }
  } else {

  }
  return (retval);
}
}
static int spcp8x5_get_msr(struct usb_device *dev , u8 *status , enum spcp8x5_type type ) ;
static struct _ddebug descriptor___1  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
     {"spcp8x5", "spcp8x5_get_msr", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
    "Get MSR = 0x%p failed (error = %d)", 7, 62, 419, 0};
static struct _ddebug descriptor___2  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
     {"spcp8x5", "spcp8x5_get_msr", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
    "0xc0:0x22:0:6  %d - 0x%p ", 7, 62, 421, 0};
static int spcp8x5_get_msr(struct usb_device *dev , u8 *status , enum spcp8x5_type type ) 
{ 
  u8 *status_buffer ;
  int ret ;
  void *tmp ;
  unsigned int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int __ret ;
  long tmp___3 ;
  long tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int __ret___0 ;
  long tmp___7 ;
  long tmp___8 ;

  {
  if ((unsigned int )type == (unsigned int )SPCP825_007_TYPE) {
    return (-1);
  } else {

  }
  if ((unsigned long )status == (unsigned long )((void *)0)) {
    return (-22);
  } else {

  }
  tmp = kmalloc(1, (16U | 64U) | 128U);
  status_buffer = tmp;
  if (! status_buffer) {
    return (-12);
  } else {

  }
  *(status_buffer + 0) = *(status + 0);
  tmp___0 = __create_pipe(dev, 0);
  ret = usb_control_msg(dev, ((unsigned int )(2 << 30) | tmp___0) | 128U, 34, 192,
                        0, 6, status_buffer, 1, 100);
  if (ret < 0) {
    while (1) {
      while (1) {
        __ret = 0;
        tmp___4 = ldv__builtin_expect(! (! (dynamic_debug_enabled & (1LL << 7) && dynamic_debug_enabled2 & (1LL << 62))),
                                   0);
        if (tmp___4) {
          tmp___3 = ldv__builtin_expect(! (! descriptor___1.flags), 0);
          if (tmp___3) {
            __ret = 1;
          } else {

          }
        } else {

        }
        if (__ret) {
          tmp___1 = dev_name(& dev->dev);
          tmp___2 = dev_driver_string(& dev->dev);
          printk("<7>%s %s: spcp8x5: Get MSR = 0x%p failed (error = %d)", tmp___2,
                 tmp___1, status_buffer, ret);
        } else {

        }
        break;
      }
      break;
    }
  } else {

  }
  while (1) {
    while (1) {
      __ret___0 = 0;
      tmp___8 = ldv__builtin_expect(! (! (dynamic_debug_enabled & (1LL << 7) && dynamic_debug_enabled2 & (1LL << 62))),
                                 0);
      if (tmp___8) {
        tmp___7 = ldv__builtin_expect(! (! descriptor___2.flags), 0);
        if (tmp___7) {
          __ret___0 = 1;
        } else {

        }
      } else {

      }
      if (__ret___0) {
        tmp___5 = dev_name(& dev->dev);
        tmp___6 = dev_driver_string(& dev->dev);
        printk("<7>%s %s: spcp8x5: 0xc0:0x22:0:6  %d - 0x%p ", tmp___6, tmp___5, ret,
               status_buffer);
      } else {

      }
      break;
    }
    break;
  }
  *(status + 0) = *(status_buffer + 0);
  kfree(status_buffer);
  return (ret);
}
}
static void spcp8x5_set_workMode(struct usb_device *dev , u16 value , u16 index ,
                                 enum spcp8x5_type type ) ;
static struct _ddebug descriptor___3  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
     {"spcp8x5", "spcp8x5_set_workMode", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
    "value = %#x , index = %#x\n", 7, 62, 443, 0};
static struct _ddebug descriptor___4  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
     {"spcp8x5", "spcp8x5_set_workMode", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
    "RTSCTS usb_control_msg(enable flowctrl) = %d\n", 7, 62, 446, 0};
static void spcp8x5_set_workMode(struct usb_device *dev , u16 value , u16 index ,
                                 enum spcp8x5_type type ) 
{ 
  int ret ;
  unsigned int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int __ret ;
  long tmp___2 ;
  long tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int __ret___0 ;
  long tmp___6 ;
  long tmp___7 ;

  {
  if ((unsigned int )type == (unsigned int )SPCP825_007_TYPE) {
    return;
  } else {

  }
  tmp = __create_pipe(dev, 0);
  ret = usb_control_msg(dev, (unsigned int )(2 << 30) | tmp, 36, 64, value, index,
                        (void *)0, 0, 100);
  while (1) {
    while (1) {
      __ret = 0;
      tmp___3 = ldv__builtin_expect(! (! (dynamic_debug_enabled & (1LL << 7) && dynamic_debug_enabled2 & (1LL << 62))),
                                 0);
      if (tmp___3) {
        tmp___2 = ldv__builtin_expect(! (! descriptor___3.flags), 0);
        if (tmp___2) {
          __ret = 1;
        } else {

        }
      } else {

      }
      if (__ret) {
        tmp___0 = dev_name(& dev->dev);
        tmp___1 = dev_driver_string(& dev->dev);
        printk("<7>%s %s: spcp8x5: value = %#x , index = %#x\n", tmp___1, tmp___0,
               value, index);
      } else {

      }
      break;
    }
    break;
  }
  if (ret < 0) {
    while (1) {
      while (1) {
        __ret___0 = 0;
        tmp___7 = ldv__builtin_expect(! (! (dynamic_debug_enabled & (1LL << 7) && dynamic_debug_enabled2 & (1LL << 62))),
                                   0);
        if (tmp___7) {
          tmp___6 = ldv__builtin_expect(! (! descriptor___4.flags), 0);
          if (tmp___6) {
            __ret___0 = 1;
          } else {

          }
        } else {

        }
        if (__ret___0) {
          tmp___4 = dev_name(& dev->dev);
          tmp___5 = dev_driver_string(& dev->dev);
          printk("<7>%s %s: spcp8x5: RTSCTS usb_control_msg(enable flowctrl) = %d\n",
                 tmp___5, tmp___4, ret);
        } else {

        }
        break;
      }
      break;
    }
  } else {

  }
  return;
}
}
static int spcp8x5_carrier_raised(struct usb_serial_port *port ) 
{ 
  struct spcp8x5_private *priv ;
  void *tmp ;

  {
  tmp = usb_get_serial_port_data(port);
  priv = tmp;
  if ((int )priv->line_status & 128) {
    return (1);
  } else {

  }
  return (0);
}
}
static void spcp8x5_dtr_rts(struct usb_serial_port *port , int on ) 
{ 
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned long flags ;
  u8 control ;

  {
  tmp = usb_get_serial_port_data(port);
  priv = tmp;
  while (1) {
    flags = _spin_lock_irqsave(& priv->lock);
    break;
  }
  if (on) {
    priv->line_control = 1 | 2;
  } else {
    priv->line_control = (int )priv->line_control & ~ (1 | 2);
  }
  control = priv->line_control;
  while (1) {
    _spin_unlock_irqrestore(& priv->lock, flags);
    break;
  }
  spcp8x5_set_ctrlLine((port->serial)->dev, control, priv->type);
  return;
}
}
static void spcp8x5_close(struct usb_serial_port *port ) ;
static struct _ddebug descriptor___5  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
     {"spcp8x5", "spcp8x5_close", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
    "usb_unlink_urb(write_urb) = %d\n", 7, 62, 495, 0};
static struct _ddebug descriptor___6  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
     {"spcp8x5", "spcp8x5_close", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
    "usb_unlink_urb(read_urb) = %d\n", 7, 62, 499, 0};
static void spcp8x5_close(struct usb_serial_port *port ) 
{ 
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned long flags ;
  int result ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int __ret ;
  long tmp___2 ;
  long tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int __ret___0 ;
  long tmp___6 ;
  long tmp___7 ;

  {
  tmp = usb_get_serial_port_data(port);
  priv = tmp;
  while (1) {
    if (debug) {
      printk("<7>%s: %s - port %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
             "spcp8x5_close", port->number);
    } else {

    }
    break;
  }
  while (1) {
    flags = _spin_lock_irqsave(& priv->lock);
    break;
  }
  clear_ringbuf(priv->buf);
  while (1) {
    _spin_unlock_irqrestore(& priv->lock, flags);
    break;
  }
  if ((unsigned long )port->write_urb != (unsigned long )((void *)0)) {
    result = usb_unlink_urb(port->write_urb);
    if (result) {
      while (1) {
        while (1) {
          __ret = 0;
          tmp___3 = ldv__builtin_expect(! (! (dynamic_debug_enabled & (1LL << 7) && dynamic_debug_enabled2 & (1LL << 62))),
                                     0);
          if (tmp___3) {
            tmp___2 = ldv__builtin_expect(! (! descriptor___5.flags), 0);
            if (tmp___2) {
              __ret = 1;
            } else {

            }
          } else {

          }
          if (__ret) {
            tmp___0 = dev_name(& port->dev);
            tmp___1 = dev_driver_string(& port->dev);
            printk("<7>%s %s: spcp8x5: usb_unlink_urb(write_urb) = %d\n", tmp___1,
                   tmp___0, result);
          } else {

          }
          break;
        }
        break;
      }
    } else {

    }
  } else {

  }
  result = usb_unlink_urb(port->read_urb);
  if (result) {
    while (1) {
      while (1) {
        __ret___0 = 0;
        tmp___7 = ldv__builtin_expect(! (! (dynamic_debug_enabled & (1LL << 7) && dynamic_debug_enabled2 & (1LL << 62))),
                                   0);
        if (tmp___7) {
          tmp___6 = ldv__builtin_expect(! (! descriptor___6.flags), 0);
          if (tmp___6) {
            __ret___0 = 1;
          } else {

          }
        } else {

        }
        if (__ret___0) {
          tmp___4 = dev_name(& port->dev);
          tmp___5 = dev_driver_string(& port->dev);
          printk("<7>%s %s: spcp8x5: usb_unlink_urb(read_urb) = %d\n", tmp___5, tmp___4,
                 result);
        } else {

        }
        break;
      }
      break;
    }
  } else {

  }
  return;
}
}
static void spcp8x5_set_termios(struct tty_struct *tty , struct usb_serial_port *port ,
                                struct ktermios *old_termios ) 
{ 
  struct usb_serial *serial ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned long flags ;
  unsigned int cflag ;
  unsigned int old_cflag ;
  unsigned short uartdata ;
  unsigned char buf[2] ;
  int baud ;
  int i ;
  u8 control ;
  int tmp___0 ;
  speed_t tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  unsigned int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
  serial = port->serial;
  tmp = usb_get_serial_port_data(port);
  priv = tmp;
  cflag = (tty->termios)->c_cflag;
  old_cflag = old_termios->c_cflag;
  buf[0] = 0;
  buf[1] = 0;
  while (1) {
    flags = _spin_lock_irqsave(& priv->lock);
    break;
  }
  if (! priv->termios_initialized) {
    *(tty->termios) = tty_std_termios;
    (tty->termios)->c_cflag = (((4098 | 48) | 128) | 1024) | 2048;
    (tty->termios)->c_ispeed = 115200;
    (tty->termios)->c_ospeed = 115200;
    priv->termios_initialized = 1;
  } else {

  }
  while (1) {
    _spin_unlock_irqrestore(& priv->lock, flags);
    break;
  }
  tmp___0 = tty_termios_hw_change(tty->termios, old_termios);
  if (tmp___0) {

  } else {
    return;
  }
  while (1) {
    flags = _spin_lock_irqsave(& priv->lock);
    break;
  }
  control = priv->line_control;
  if ((old_cflag & 4111U) == 0U) {
    priv->line_control = (int )priv->line_control | 1;
    if (! (old_cflag & 2147483648U)) {
      priv->line_control = (int )priv->line_control | 2;
    } else {

    }
  } else {

  }
  if ((int )control != (int )priv->line_control) {
    control = priv->line_control;
    while (1) {
      _spin_unlock_irqrestore(& priv->lock, flags);
      break;
    }
    spcp8x5_set_ctrlLine(serial->dev, control, priv->type);
  } else {
    while (1) {
      _spin_unlock_irqrestore(& priv->lock, flags);
      break;
    }
  }
  tmp___1 = tty_get_baud_rate(tty);
  baud = tmp___1;
  switch (baud) {
  case 300: 
  buf[0] = 0;
  break;
  case 600: 
  buf[0] = 1;
  break;
  case 1200: 
  buf[0] = 2;
  break;
  case 2400: 
  buf[0] = 3;
  break;
  case 4800: 
  buf[0] = 4;
  break;
  case 9600: 
  buf[0] = 5;
  break;
  case 19200: 
  buf[0] = 7;
  break;
  case 38400: 
  buf[0] = 9;
  break;
  case 57600: 
  buf[0] = 10;
  break;
  case 115200: 
  buf[0] = 11;
  break;
  case 230400: 
  buf[0] = 12;
  break;
  case 460800: 
  buf[0] = 13;
  break;
  case 921600: 
  buf[0] = 14;
  break;
  case 3000000: 
  buf[0] = 17;
  break;
  case 1000000: 
  case 0: 
  buf[0] = 11;
  break;
  default: 
  tmp___2 = dev_name(& port->dev);
  tmp___3 = dev_driver_string(& port->dev);
  printk("<3>%s %s: spcp825 driver does not support the baudrate requested, using default of 9600.\n",
         tmp___3, tmp___2);
  }
  if (cflag & 48U) {
    switch (cflag & 48U) {
    case 0U: 
    buf[1] = (int )buf[1] | 0;
    break;
    case 16U: 
    buf[1] = (int )buf[1] | 1;
    break;
    case 32U: 
    buf[1] = (int )buf[1] | 2;
    break;
    default: 
    buf[1] = (int )buf[1] | 3;
    break;
    }
  } else {

  }
  buf[1] = (int )buf[1] | (cflag & 64U ? 4 : 0);
  if (cflag & 256U) {
    buf[1] = (int )buf[1] | (cflag & 512U ? 16 : 48);
  } else {
    buf[1] = (int )buf[1] | 0;
  }
  uartdata = (int )buf[0] | ((int )buf[1] << 8);
  tmp___4 = __create_pipe(serial->dev, 0);
  i = usb_control_msg(serial->dev, (unsigned int )(2 << 30) | tmp___4, 33, 64, uartdata,
                      0, (void *)0, 0, 100);
  if (i < 0) {
    tmp___5 = dev_name(& port->dev);
    tmp___6 = dev_driver_string(& port->dev);
    printk("<3>%s %s: Set UART format %#x failed (error = %d)\n", tmp___6, tmp___5,
           uartdata, i);
  } else {

  }
  while (1) {
    if (debug) {
      printk("<7>%s: 0x21:0x40:0:0  %d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
             i);
    } else {

    }
    break;
  }
  if (cflag & 2147483648U) {
    spcp8x5_set_workMode(serial->dev, 10, 0, priv->type);
  } else {

  }
  return;
}
}
static int spcp8x5_open(struct tty_struct *tty , struct usb_serial_port *port , struct file *filp ) 
{ 
  struct ktermios tmp_termios ;
  struct usb_serial *serial ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  int ret ;
  unsigned long flags ;
  u8 status ;
  unsigned int tmp___0 ;

  {
  serial = port->serial;
  tmp = usb_get_serial_port_data(port);
  priv = tmp;
  status = 48;
  while (1) {
    if (debug) {
      printk("<7>%s: %s -  port %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
             "spcp8x5_open", port->number);
    } else {

    }
    break;
  }
  usb_clear_halt(serial->dev, (port->write_urb)->pipe);
  usb_clear_halt(serial->dev, (port->read_urb)->pipe);
  tmp___0 = __create_pipe(serial->dev, 0);
  ret = usb_control_msg(serial->dev, (unsigned int )(2 << 30) | tmp___0, 9, 0, 1,
                        0, (void *)0, 0, 100);
  if (ret) {
    return (ret);
  } else {

  }
  spcp8x5_set_ctrlLine(serial->dev, priv->line_control, priv->type);
  if (tty) {
    spcp8x5_set_termios(tty, port, & tmp_termios);
  } else {

  }
  spcp8x5_get_msr(serial->dev, & status, priv->type);
  while (1) {
    flags = _spin_lock_irqsave(& priv->lock);
    break;
  }
  priv->line_status = (int )status & 240;
  while (1) {
    _spin_unlock_irqrestore(& priv->lock, flags);
    break;
  }
  while (1) {
    if (debug) {
      printk("<7>%s: %s - submitting read urb\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
             "spcp8x5_open");
    } else {

    }
    break;
  }
  (port->read_urb)->dev = serial->dev;
  ret = usb_submit_urb(port->read_urb, (16U | 64U) | 128U);
  if (ret) {
    spcp8x5_close(port);
    return (-71);
  } else {

  }
  port->port.drain_delay = 256;
  return (0);
}
}
static void spcp8x5_read_bulk_callback(struct urb *urb ) ;
static struct _ddebug descriptor___7  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
     {"spcp8x5", "spcp8x5_read_bulk_callback", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
    "start, result = %d, urb->actual_length = %d\n,", 7, 62, 692, 0};
static struct _ddebug descriptor___8  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
     {"spcp8x5", "spcp8x5_read_bulk_callback", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
    "failed submitting read urb %d\n", 7, 62, 706, 0};
static struct _ddebug descriptor___9  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
     {"spcp8x5", "spcp8x5_read_bulk_callback", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
    "unable to handle the error, exiting.\n", 7, 62, 709, 0};
static struct _ddebug descriptor___10  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
     {"spcp8x5", "spcp8x5_read_bulk_callback", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
    "tty_flag = %d\n", 7, 62, 731, 0};
static struct _ddebug descriptor___11  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
     {"spcp8x5", "spcp8x5_read_bulk_callback", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
    "failed submitting read urb %d\n", 7, 62, 751, 0};
static void spcp8x5_read_bulk_callback(struct urb *urb ) 
{ 
  struct usb_serial_port *port ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  struct tty_struct *tty ;
  unsigned char *data ;
  unsigned long flags ;
  int i ;
  int result ;
  u8 status ;
  char tty_flag ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int __ret ;
  long tmp___2 ;
  long tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int __ret___0 ;
  long tmp___6 ;
  long tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int __ret___1 ;
  long tmp___10 ;
  long tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int __ret___2 ;
  long tmp___14 ;
  long tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  int __ret___3 ;
  long tmp___18 ;
  long tmp___19 ;

  {
  port = urb->context;
  tmp = usb_get_serial_port_data(port);
  priv = tmp;
  data = urb->transfer_buffer;
  result = urb->status;
  while (1) {
    while (1) {
      __ret = 0;
      tmp___3 = ldv__builtin_expect(! (! (dynamic_debug_enabled & (1LL << 7) && dynamic_debug_enabled2 & (1LL << 62))),
                                 0);
      if (tmp___3) {
        tmp___2 = ldv__builtin_expect(! (! descriptor___7.flags), 0);
        if (tmp___2) {
          __ret = 1;
        } else {

        }
      } else {

      }
      if (__ret) {
        tmp___0 = dev_name(& port->dev);
        tmp___1 = dev_driver_string(& port->dev);
        printk("<7>%s %s: spcp8x5: start, result = %d, urb->actual_length = %d\n,",
               tmp___1, tmp___0, result, urb->actual_length);
      } else {

      }
      break;
    }
    break;
  }
  if (result) {
    if (! port->port.count) {
      return;
    } else {

    }
    if (result == -71) {
      urb->dev = (port->serial)->dev;
      result = usb_submit_urb(urb, 32U);
      if (result) {
        while (1) {
          while (1) {
            __ret___0 = 0;
            tmp___7 = ldv__builtin_expect(! (! (dynamic_debug_enabled & (1LL << 7) && dynamic_debug_enabled2 & (1LL << 62))),
                                       0);
            if (tmp___7) {
              tmp___6 = ldv__builtin_expect(! (! descriptor___8.flags), 0);
              if (tmp___6) {
                __ret___0 = 1;
              } else {

              }
            } else {

            }
            if (__ret___0) {
              tmp___4 = dev_name(& port->dev);
              tmp___5 = dev_driver_string(& port->dev);
              printk("<7>%s %s: spcp8x5: failed submitting read urb %d\n", tmp___5,
                     tmp___4, result);
            } else {

            }
            break;
          }
          break;
        }
      } else {

      }
      return;
    } else {

    }
    while (1) {
      while (1) {
        __ret___1 = 0;
        tmp___11 = ldv__builtin_expect(! (! (dynamic_debug_enabled & (1LL << 7) && dynamic_debug_enabled2 & (1LL << 62))),
                                    0);
        if (tmp___11) {
          tmp___10 = ldv__builtin_expect(! (! descriptor___9.flags), 0);
          if (tmp___10) {
            __ret___1 = 1;
          } else {

          }
        } else {

        }
        if (__ret___1) {
          tmp___8 = dev_name(& port->dev);
          tmp___9 = dev_driver_string(& port->dev);
          printk("<7>%s %s: spcp8x5: unable to handle the error, exiting.\n", tmp___9,
                 tmp___8);
        } else {

        }
        break;
      }
      break;
    }
    return;
  } else {

  }
  tty_flag = 0;
  while (1) {
    flags = _spin_lock_irqsave(& priv->lock);
    break;
  }
  status = priv->line_status;
  priv->line_status = (int )priv->line_status & ~ 116;
  while (1) {
    _spin_unlock_irqrestore(& priv->lock, flags);
    break;
  }
  __wake_up(& priv->delta_msr_wait, 1, 1, (void *)0);
  if ((int )status & 4) {
    tty_flag = 1;
  } else
  if ((int )status & 32) {
    tty_flag = 3;
  } else
  if ((int )status & 16) {
    tty_flag = 2;
  } else {

  }
  while (1) {
    while (1) {
      __ret___2 = 0;
      tmp___15 = ldv__builtin_expect(! (! (dynamic_debug_enabled & (1LL << 7) && dynamic_debug_enabled2 & (1LL << 62))),
                                  0);
      if (tmp___15) {
        tmp___14 = ldv__builtin_expect(! (! descriptor___10.flags), 0);
        if (tmp___14) {
          __ret___2 = 1;
        } else {

        }
      } else {

      }
      if (__ret___2) {
        tmp___12 = dev_name(& port->dev);
        tmp___13 = dev_driver_string(& port->dev);
        printk("<7>%s %s: spcp8x5: tty_flag = %d\n", tmp___13, tmp___12, tty_flag);
      } else {

      }
      break;
    }
    break;
  }
  tty = tty_port_tty_get(& port->port);
  if (tty && urb->actual_length) {
    tty_buffer_request_room(tty, urb->actual_length + (u32 )1);
    if ((int )status & 64) {
      tty_insert_flip_char(tty, 0, 4);
    } else {

    }
    i = 0;
    while (1) {
      if ((u32 )i < urb->actual_length) {

      } else {
        break;
      }
      tty_insert_flip_char(tty, *(data + i), tty_flag);
      i = i + 1;
    }
    tty_flip_buffer_push(tty);
  } else {

  }
  tty_kref_put(tty);
  if (port->port.count) {
    urb->dev = (port->serial)->dev;
    result = usb_submit_urb(urb, 32U);
    if (result) {
      while (1) {
        while (1) {
          __ret___3 = 0;
          tmp___19 = ldv__builtin_expect(! (! (dynamic_debug_enabled & (1LL << 7) && dynamic_debug_enabled2 & (1LL << 62))),
                                      0);
          if (tmp___19) {
            tmp___18 = ldv__builtin_expect(! (! descriptor___11.flags), 0);
            if (tmp___18) {
              __ret___3 = 1;
            } else {

            }
          } else {

          }
          if (__ret___3) {
            tmp___16 = dev_name(& port->dev);
            tmp___17 = dev_driver_string(& port->dev);
            printk("<7>%s %s: spcp8x5: failed submitting read urb %d\n", tmp___17,
                   tmp___16, result);
          } else {

          }
          break;
        }
        break;
      }
    } else {

    }
  } else {

  }
  return;
}
}
static void spcp8x5_send(struct usb_serial_port *port ) ;
static struct _ddebug descriptor___12  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
     {"spcp8x5", "spcp8x5_send", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
    "write urb still used\n", 7, 62, 767, 0};
static struct _ddebug descriptor___13  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
     {"spcp8x5", "spcp8x5_send", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
    "failed submitting write urb, error %d\n", 7, 62, 793, 0};
static void spcp8x5_send(struct usb_serial_port *port ) 
{ 
  int count ;
  int result ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned long flags ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int __ret ;
  long tmp___2 ;
  long tmp___3 ;
  unsigned int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int __ret___0 ;
  long tmp___7 ;
  long tmp___8 ;

  {
  tmp = usb_get_serial_port_data(port);
  priv = tmp;
  while (1) {
    flags = _spin_lock_irqsave(& priv->lock);
    break;
  }
  if (priv->write_urb_in_use) {
    while (1) {
      while (1) {
        __ret = 0;
        tmp___3 = ldv__builtin_expect(! (! (dynamic_debug_enabled & (1LL << 7) && dynamic_debug_enabled2 & (1LL << 62))),
                                   0);
        if (tmp___3) {
          tmp___2 = ldv__builtin_expect(! (! descriptor___12.flags), 0);
          if (tmp___2) {
            __ret = 1;
          } else {

          }
        } else {

        }
        if (__ret) {
          tmp___0 = dev_name(& port->dev);
          tmp___1 = dev_driver_string(& port->dev);
          printk("<7>%s %s: spcp8x5: write urb still used\n", tmp___1, tmp___0);
        } else {

        }
        break;
      }
      break;
    }
    while (1) {
      _spin_unlock_irqrestore(& priv->lock, flags);
      break;
    }
    return;
  } else {

  }
  memset((port->write_urb)->transfer_buffer, 0, port->bulk_out_size);
  tmp___4 = get_ringbuf(priv->buf, (port->write_urb)->transfer_buffer, port->bulk_out_size);
  count = tmp___4;
  if (count == 0) {
    while (1) {
      _spin_unlock_irqrestore(& priv->lock, flags);
      break;
    }
    return;
  } else {

  }
  priv->write_urb_in_use = 1;
  while (1) {
    _spin_unlock_irqrestore(& priv->lock, flags);
    break;
  }
  (port->write_urb)->transfer_buffer_length = count;
  (port->write_urb)->dev = (port->serial)->dev;
  result = usb_submit_urb(port->write_urb, 32U);
  if (result) {
    while (1) {
      while (1) {
        __ret___0 = 0;
        tmp___8 = ldv__builtin_expect(! (! (dynamic_debug_enabled & (1LL << 7) && dynamic_debug_enabled2 & (1LL << 62))),
                                   0);
        if (tmp___8) {
          tmp___7 = ldv__builtin_expect(! (! descriptor___13.flags), 0);
          if (tmp___7) {
            __ret___0 = 1;
          } else {

          }
        } else {

        }
        if (__ret___0) {
          tmp___5 = dev_name(& port->dev);
          tmp___6 = dev_driver_string(& port->dev);
          printk("<7>%s %s: spcp8x5: failed submitting write urb, error %d\n", tmp___6,
                 tmp___5, result);
        } else {

        }
        break;
      }
      break;
    }
    priv->write_urb_in_use = 0;
  } else {

  }
  schedule_work(& port->work);
  return;
}
}
static void spcp8x5_write_bulk_callback(struct urb *urb ) ;
static struct _ddebug descriptor___14  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
     {"spcp8x5", "spcp8x5_write_bulk_callback", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
    "urb shutting down with status: %d\n", 7, 62, 821, 0};
static struct _ddebug descriptor___15  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
     {"spcp8x5", "spcp8x5_write_bulk_callback", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
    "failed resubmitting write urb %d\n", 7, 62, 834, 0};
static void spcp8x5_write_bulk_callback(struct urb *urb ) 
{ 
  struct usb_serial_port *port ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  int result ;
  int status ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int __ret ;
  long tmp___2 ;
  long tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int __ret___0 ;
  long tmp___6 ;
  long tmp___7 ;

  {
  port = urb->context;
  tmp = usb_get_serial_port_data(port);
  priv = tmp;
  status = urb->status;
  switch (status) {
  case 0: 
  break;
  case -108: 
  case -2: 
  case -104: 
  while (1) {
    while (1) {
      __ret = 0;
      tmp___3 = ldv__builtin_expect(! (! (dynamic_debug_enabled & (1LL << 7) && dynamic_debug_enabled2 & (1LL << 62))),
                                 0);
      if (tmp___3) {
        tmp___2 = ldv__builtin_expect(! (! descriptor___14.flags), 0);
        if (tmp___2) {
          __ret = 1;
        } else {

        }
      } else {

      }
      if (__ret) {
        tmp___0 = dev_name(& port->dev);
        tmp___1 = dev_driver_string(& port->dev);
        printk("<7>%s %s: spcp8x5: urb shutting down with status: %d\n", tmp___1,
               tmp___0, status);
      } else {

      }
      break;
    }
    break;
  }
  priv->write_urb_in_use = 0;
  return;
  default: 
  while (1) {
    if (debug) {
      printk("<7>%s: %s - Overflow in write\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
             "spcp8x5_write_bulk_callback");
    } else {

    }
    break;
  }
  while (1) {
    if (debug) {
      printk("<7>%s: %s - nonzero write bulk status received: %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
             "spcp8x5_write_bulk_callback", status);
    } else {

    }
    break;
  }
  (port->write_urb)->transfer_buffer_length = 1;
  (port->write_urb)->dev = (port->serial)->dev;
  result = usb_submit_urb(port->write_urb, 32U);
  if (result) {
    while (1) {
      while (1) {
        __ret___0 = 0;
        tmp___7 = ldv__builtin_expect(! (! (dynamic_debug_enabled & (1LL << 7) && dynamic_debug_enabled2 & (1LL << 62))),
                                   0);
        if (tmp___7) {
          tmp___6 = ldv__builtin_expect(! (! descriptor___15.flags), 0);
          if (tmp___6) {
            __ret___0 = 1;
          } else {

          }
        } else {

        }
        if (__ret___0) {
          tmp___4 = dev_name(& port->dev);
          tmp___5 = dev_driver_string(& port->dev);
          printk("<7>%s %s: spcp8x5: failed resubmitting write urb %d\n", tmp___5,
                 tmp___4, result);
        } else {

        }
        break;
      }
      break;
    }
  } else {
    return;
  }
  }
  priv->write_urb_in_use = 0;
  spcp8x5_send(port);
  return;
}
}
static int spcp8x5_write(struct tty_struct *tty , struct usb_serial_port *port , unsigned char const   *buf ,
                         int count ) ;
static struct _ddebug descriptor___16  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
     {"spcp8x5", "spcp8x5_write", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
    "%d bytes\n", 7, 62, 852, 0};
static int spcp8x5_write(struct tty_struct *tty , struct usb_serial_port *port , unsigned char const   *buf ,
                         int count ) 
{ 
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned long flags ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int __ret ;
  long tmp___2 ;
  long tmp___3 ;
  unsigned int tmp___4 ;

  {
  tmp = usb_get_serial_port_data(port);
  priv = tmp;
  while (1) {
    while (1) {
      __ret = 0;
      tmp___3 = ldv__builtin_expect(! (! (dynamic_debug_enabled & (1LL << 7) && dynamic_debug_enabled2 & (1LL << 62))),
                                 0);
      if (tmp___3) {
        tmp___2 = ldv__builtin_expect(! (! descriptor___16.flags), 0);
        if (tmp___2) {
          __ret = 1;
        } else {

        }
      } else {

      }
      if (__ret) {
        tmp___0 = dev_name(& port->dev);
        tmp___1 = dev_driver_string(& port->dev);
        printk("<7>%s %s: spcp8x5: %d bytes\n", tmp___1, tmp___0, count);
      } else {

      }
      break;
    }
    break;
  }
  if (! count) {
    return (count);
  } else {

  }
  while (1) {
    flags = _spin_lock_irqsave(& priv->lock);
    break;
  }
  tmp___4 = put_ringbuf(priv->buf, buf, count);
  count = tmp___4;
  while (1) {
    _spin_unlock_irqrestore(& priv->lock, flags);
    break;
  }
  spcp8x5_send(port);
  return (count);
}
}
static int spcp8x5_wait_modem_info(struct usb_serial_port *port , unsigned int arg ) 
{ 
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned long flags ;
  unsigned int prevstatus ;
  unsigned int status ;
  unsigned int changed ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
  tmp = usb_get_serial_port_data(port);
  priv = tmp;
  while (1) {
    flags = _spin_lock_irqsave(& priv->lock);
    break;
  }
  prevstatus = priv->line_status;
  while (1) {
    _spin_unlock_irqrestore(& priv->lock, flags);
    break;
  }
  while (1) {
    interruptible_sleep_on(& priv->delta_msr_wait);
    tmp___0 = get_current();
    tmp___1 = signal_pending(tmp___0);
    if (tmp___1) {
      return (-512);
    } else {

    }
    while (1) {
      flags = _spin_lock_irqsave(& priv->lock);
      break;
    }
    status = priv->line_status;
    while (1) {
      _spin_unlock_irqrestore(& priv->lock, flags);
      break;
    }
    changed = prevstatus ^ status;
    if ((((arg & 128U && changed & 64U) || (arg & 256U && changed & 32U)) || (arg & 64U && changed & 128U)) || (arg & 32U && changed & 16U)) {
      return (0);
    } else {

    }
    prevstatus = status;
  }
  return (0);
}
}
static int spcp8x5_ioctl(struct tty_struct *tty , struct file *file , unsigned int cmd ,
                         unsigned long arg ) 
{ 
  struct usb_serial_port *port ;
  int tmp ;

  {
  port = tty->driver_data;
  while (1) {
    if (debug) {
      printk("<7>%s: %s (%d) cmd = 0x%04x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
             "spcp8x5_ioctl", port->number, cmd);
    } else {

    }
    break;
  }
  switch (cmd) {
  case 21596U: 
  while (1) {
    if (debug) {
      printk("<7>%s: %s (%d) TIOCMIWAIT\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
             "spcp8x5_ioctl", port->number);
    } else {

    }
    break;
  }
  tmp = spcp8x5_wait_modem_info(port, arg);
  return (tmp);
  default: 
  while (1) {
    if (debug) {
      printk("<7>%s: %s not supported = 0x%04x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/spcp8x5.c",
             "spcp8x5_ioctl", cmd);
    } else {

    }
    break;
  }
  break;
  }
  return (-515);
}
}
static int spcp8x5_tiocmset(struct tty_struct *tty , struct file *file , unsigned int set ,
                            unsigned int clear ) 
{ 
  struct usb_serial_port *port ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned long flags ;
  u8 control ;
  int tmp___0 ;

  {
  port = tty->driver_data;
  tmp = usb_get_serial_port_data(port);
  priv = tmp;
  while (1) {
    flags = _spin_lock_irqsave(& priv->lock);
    break;
  }
  if (set & 4U) {
    priv->line_control = (int )priv->line_control | 2;
  } else {

  }
  if (set & 2U) {
    priv->line_control = (int )priv->line_control | 1;
  } else {

  }
  if (clear & 4U) {
    priv->line_control = (int )priv->line_control & ~ 2;
  } else {

  }
  if (clear & 2U) {
    priv->line_control = (int )priv->line_control & ~ 1;
  } else {

  }
  control = priv->line_control;
  while (1) {
    _spin_unlock_irqrestore(& priv->lock, flags);
    break;
  }
  tmp___0 = spcp8x5_set_ctrlLine((port->serial)->dev, control, priv->type);
  return (tmp___0);
}
}
static int spcp8x5_tiocmget(struct tty_struct *tty , struct file *file ) 
{ 
  struct usb_serial_port *port ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned long flags ;
  unsigned int mcr ;
  unsigned int status ;
  unsigned int result ;

  {
  port = tty->driver_data;
  tmp = usb_get_serial_port_data(port);
  priv = tmp;
  while (1) {
    flags = _spin_lock_irqsave(& priv->lock);
    break;
  }
  mcr = priv->line_control;
  status = priv->line_status;
  while (1) {
    _spin_unlock_irqrestore(& priv->lock, flags);
    break;
  }
  result = (((((mcr & 1U ? 2 : 0) | (mcr & 2U ? 4 : 0)) | (status & 16U ? 32 : 0)) | (status & 32U ? 256 : 0)) | (status & 64U ? 128 : 0)) | (status & 128U ? 64 : 0);
  return (result);
}
}
static int spcp8x5_write_room(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  int room ;
  unsigned long flags ;
  unsigned int tmp___0 ;

  {
  port = tty->driver_data;
  tmp = usb_get_serial_port_data(port);
  priv = tmp;
  room = 0;
  while (1) {
    flags = _spin_lock_irqsave(& priv->lock);
    break;
  }
  tmp___0 = ringbuf_avail_space(priv->buf);
  room = tmp___0;
  while (1) {
    _spin_unlock_irqrestore(& priv->lock, flags);
    break;
  }
  return (room);
}
}
static int spcp8x5_chars_in_buffer(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  int chars ;
  unsigned long flags ;
  unsigned int tmp___0 ;

  {
  port = tty->driver_data;
  tmp = usb_get_serial_port_data(port);
  priv = tmp;
  chars = 0;
  while (1) {
    flags = _spin_lock_irqsave(& priv->lock);
    break;
  }
  tmp___0 = ringbuf_avail_data(priv->buf);
  chars = tmp___0;
  while (1) {
    _spin_unlock_irqrestore(& priv->lock, flags);
    break;
  }
  return (chars);
}
}
static struct usb_serial_driver spcp8x5_device  = 
     {0, id_table, 1, {0, 0}, {"SPCP8x5", 0, & __this_module, 0, 0, 0, 0, 0, 0, 0, 0,
                             0}, 0, {{{0U}, 0U, 0U, 0, {0, 0, 0, 0, 0UL}}, {0, 0}},
    0, 0, & spcp8x5_startup, 0, 0, & spcp8x5_release, 0, 0, 0, 0, & spcp8x5_open,
    & spcp8x5_close, & spcp8x5_write, & spcp8x5_write_room, & spcp8x5_ioctl, & spcp8x5_set_termios,
    0, & spcp8x5_chars_in_buffer, 0, 0, & spcp8x5_tiocmget, & spcp8x5_tiocmset, & spcp8x5_dtr_rts,
    & spcp8x5_carrier_raised, 0, 0, & spcp8x5_read_bulk_callback, & spcp8x5_write_bulk_callback};
static int spcp8x5_init(void)  __attribute__((__section__(".init.text"), __no_instrument_function__)) ;
static int spcp8x5_init(void) 
{ 
  int retval ;

  {
  retval = usb_serial_register(& spcp8x5_device);
  if (retval) {
    goto failed_usb_serial_register;
  } else {

  }
  retval = usb_register(& spcp8x5_driver);
  if (retval) {
    goto failed_usb_register;
  } else {

  }
  printk("<6>spcp8x5: v0.04:SPCP8x5 USB to serial adaptor driver\n");
  return (0);
  failed_usb_register: 
  usb_serial_deregister(& spcp8x5_device);
  failed_usb_serial_register: 
  return (retval);
}
}
static void spcp8x5_exit(void)  __attribute__((__section__(".exit.text"))) ;
static void spcp8x5_exit(void) 
{ 


  {
  usb_deregister(& spcp8x5_driver);
  usb_serial_deregister(& spcp8x5_device);
  return;
}
}
int init_module(void) 
{ 
  int tmp ;

  {
  tmp = spcp8x5_init();
  return (tmp);
}
}
void cleanup_module(void) 
{ 


  {
  spcp8x5_exit();
  return;
}
}
static char const   __mod_description1053[49]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
  {      'd',      'e',      's',      'c', 
        'r',      'i',      'p',      't', 
        'i',      'o',      'n',      '=', 
        'S',      'P',      'C',      'P', 
        '8',      'x',      '5',      ' ', 
        'U',      'S',      'B',      ' ', 
        't',      'o',      ' ',      's', 
        'e',      'r',      'i',      'a', 
        'l',      ' ',      'a',      'd', 
        'a',      'p',      't',      'o', 
        'r',      ' ',      'd',      'r', 
        'i',      'v',      'e',      'r', 
        '\000'};
static char const   __mod_version1054[14]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
  {      'v',      'e',      'r',      's', 
        'i',      'o',      'n',      '=', 
        'v',      '0',      '.',      '0', 
        '4',      '\000'};
static char const   __mod_license1055[12]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
  {      'l',      'i',      'c',      'e', 
        'n',      's',      'e',      '=', 
        'G',      'P',      'L',      '\000'};
static char const   __param_str_debug[6]  = {      'd',      'e',      'b',      'u', 
        'g',      '\000'};
static struct kernel_param  const  __param_debug  __attribute__((__used__, __unused__,
__section__("__param"), __aligned__(sizeof(void *))))  =    {__param_str_debug, ((256 | 32) | 4) | 128, 0, & param_set_bool, & param_get_bool,
    {& debug}};
static char const   __mod_debugtype1057[20]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
  {      'p',      'a',      'r',      'm', 
        't',      'y',      'p',      'e', 
        '=',      'd',      'e',      'b', 
        'u',      'g',      ':',      'b', 
        'o',      'o',      'l',      '\000'};
static char const   __mod_debug1058[32]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
  {      'p',      'a',      'r',      'm', 
        '=',      'd',      'e',      'b', 
        'u',      'g',      ':',      'D', 
        'e',      'b',      'u',      'g', 
        ' ',      'e',      'n',      'a', 
        'b',      'l',      'e',      'd', 
        ' ',      'o',      'r',      ' ', 
        'n',      'o',      't',      '\000'};
void ldv_check_final_state(void) ;
extern void ldv_check_return_value(int res ) ;
extern void ldv_initialize(void) ;
extern void ldv_handler_precall(void) ;
extern int nondet_int(void) ;
int LDV_IN_INTERRUPT  ;
static int res_spcp8x5_open_16  ;
int main(void) 
{ 
  struct tty_struct *var_group1 ;
  struct usb_serial_port *var_group2 ;
  struct file *var_spcp8x5_open_16_p2 ;
  int var_spcp8x5_dtr_rts_13_p1 ;
  unsigned char const   *var_spcp8x5_write_20_p2 ;
  int var_spcp8x5_write_20_p3 ;
  struct ktermios *var_spcp8x5_set_termios_15_p2 ;
  struct file *var_group3 ;
  unsigned int var_spcp8x5_ioctl_22_p2 ;
  unsigned long var_spcp8x5_ioctl_22_p3 ;
  unsigned int var_spcp8x5_tiocmset_23_p2 ;
  unsigned int var_spcp8x5_tiocmset_23_p3 ;
  struct urb *var_group4 ;
  struct usb_serial *var_group5 ;
  int tmp ;
  int ldv_s_spcp8x5_device_usb_serial_driver ;
  int tmp___0 ;
  int tmp___1 ;

  {
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  ldv_handler_precall();
  tmp = spcp8x5_init();
  if (tmp) {
    goto ldv_final;
  } else {

  }
  ldv_s_spcp8x5_device_usb_serial_driver = 0;
  while (1) {
    tmp___1 = nondet_int();
    if (tmp___1 || ! (ldv_s_spcp8x5_device_usb_serial_driver == 0)) {

    } else {
      break;
    }
    tmp___0 = nondet_int();
    switch (tmp___0) {
    case 0: 
    if (ldv_s_spcp8x5_device_usb_serial_driver == 0) {
      ldv_handler_precall();
      res_spcp8x5_open_16 = spcp8x5_open(var_group1, var_group2, var_spcp8x5_open_16_p2);
      ldv_check_return_value(res_spcp8x5_open_16);
      if (res_spcp8x5_open_16) {
        goto ldv_module_exit;
      } else {

      }
      ldv_s_spcp8x5_device_usb_serial_driver = ldv_s_spcp8x5_device_usb_serial_driver + 1;
    } else {

    }
    break;
    case 1: 
    if (ldv_s_spcp8x5_device_usb_serial_driver == 1) {
      ldv_handler_precall();
      spcp8x5_close(var_group2);
      ldv_s_spcp8x5_device_usb_serial_driver = ldv_s_spcp8x5_device_usb_serial_driver + 1;
    } else {

    }
    break;
    case 2: 
    if (ldv_s_spcp8x5_device_usb_serial_driver == 2) {
      ldv_handler_precall();
      spcp8x5_release(var_group5);
      ldv_s_spcp8x5_device_usb_serial_driver = 0;
    } else {

    }
    break;
    case 3: 
    ldv_handler_precall();
    spcp8x5_dtr_rts(var_group2, var_spcp8x5_dtr_rts_13_p1);
    break;
    case 4: 
    ldv_handler_precall();
    spcp8x5_carrier_raised(var_group2);
    break;
    case 5: 
    ldv_handler_precall();
    spcp8x5_write(var_group1, var_group2, var_spcp8x5_write_20_p2, var_spcp8x5_write_20_p3);
    break;
    case 6: 
    ldv_handler_precall();
    spcp8x5_set_termios(var_group1, var_group2, var_spcp8x5_set_termios_15_p2);
    break;
    case 7: 
    ldv_handler_precall();
    spcp8x5_ioctl(var_group1, var_group3, var_spcp8x5_ioctl_22_p2, var_spcp8x5_ioctl_22_p3);
    break;
    case 8: 
    ldv_handler_precall();
    spcp8x5_tiocmget(var_group1, var_group3);
    break;
    case 9: 
    ldv_handler_precall();
    spcp8x5_tiocmset(var_group1, var_group3, var_spcp8x5_tiocmset_23_p2, var_spcp8x5_tiocmset_23_p3);
    break;
    case 10: 
    ldv_handler_precall();
    spcp8x5_write_room(var_group1);
    break;
    case 11: 
    ldv_handler_precall();
    spcp8x5_read_bulk_callback(var_group4);
    break;
    case 12: 
    ldv_handler_precall();
    spcp8x5_write_bulk_callback(var_group4);
    break;
    case 13: 
    ldv_handler_precall();
    spcp8x5_chars_in_buffer(var_group1);
    break;
    case 14: 
    ldv_handler_precall();
    spcp8x5_startup(var_group5);
    break;
    default: 
    break;
    }
  }
  ldv_module_exit: 
  ldv_handler_precall();
  spcp8x5_exit();
  ldv_final: 
  ldv_check_final_state();
  return 0;
}
}
struct urb *usb_alloc_urb(int iso_packets , gfp_t mem_flags ) ;
void usb_free_urb(struct urb *urb ) ;
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: __VERIFIER_error();
}
}
__inline static void ldv_stop(void) 
{ 


  {
  LDV_STOP: 
  goto LDV_STOP;
}
}
extern void *ldv_undef_ptr(void) ;
long ldv__builtin_expect(long exp , long c ) 
{ 


  {
  return (exp);
}
}
int ldv_urb_state  =    0;
int ldv_coherent_state  =    0;
void *usb_alloc_coherent(struct usb_device *dev , size_t size , gfp_t mem_flags ,
                         dma_addr_t *dma ) 
{ 
  void *arbitrary_memory ;
  void *tmp ;

  {
  while (1) {
    tmp = ldv_undef_ptr();
    arbitrary_memory = tmp;
    if (! arbitrary_memory) {
      return ((void *)0);
    } else {

    }
    ldv_coherent_state = ldv_coherent_state + 1;
    return (arbitrary_memory);
    break;
  }
  return ((void *)0);
}
}
void usb_free_coherent(struct usb_device *dev , size_t size , void *addr , dma_addr_t dma ) 
{ 


  {
  while (1) {
    if ((unsigned long )addr != (unsigned long )((void *)0)) {

    } else {
      ldv_stop();
    }
    if (addr) {
      if (ldv_coherent_state >= 1) {

      } else {
        ldv_error();
      }
      ldv_coherent_state = ldv_coherent_state - 1;
    } else {

    }
    break;
  }
  return;
}
}
struct urb *usb_alloc_urb(int iso_packets , gfp_t mem_flags ) 
{ 
  void *arbitrary_memory ;
  void *tmp ;

  {
  while (1) {
    tmp = ldv_undef_ptr();
    arbitrary_memory = tmp;
    if (! arbitrary_memory) {
      return ((void *)0);
    } else {

    }
    ldv_urb_state = ldv_urb_state + 1;
    return (arbitrary_memory);
    break;
  }
  return ((struct urb *)0);
}
}
void usb_free_urb(struct urb *urb ) 
{ 


  {
  while (1) {
    if ((unsigned long )urb != (unsigned long )((struct urb *)0)) {

    } else {
      ldv_stop();
    }
    if (urb) {
      if (ldv_urb_state >= 1) {

      } else {
        ldv_error();
      }
      ldv_urb_state = ldv_urb_state - 1;
    } else {

    }
    break;
  }
  return;
}
}
void ldv_check_final_state(void) 
{ 


  {
  if (ldv_urb_state == 0) {

  } else {
    ldv_error();
  }
  if (ldv_coherent_state == 0) {

  } else {
    ldv_error();
  }
  return;
}
}
