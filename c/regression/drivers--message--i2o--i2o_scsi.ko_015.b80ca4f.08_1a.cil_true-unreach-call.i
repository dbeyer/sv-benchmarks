extern void __VERIFIER_error() __attribute__ ((__noreturn__));

/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

typedef unsigned int __kernel_mode_t;
typedef unsigned long __kernel_nlink_t;
typedef long __kernel_off_t;
typedef int __kernel_pid_t;
typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;
typedef unsigned long __kernel_size_t;
typedef long __kernel_ssize_t;
typedef long __kernel_time_t;
typedef long __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef long long __kernel_loff_t;
typedef __kernel_uid_t __kernel_uid32_t;
typedef __kernel_gid_t __kernel_gid32_t;
typedef unsigned short umode_t;
typedef signed char __s8;
typedef unsigned char __u8;
typedef short __s16;
typedef unsigned short __u16;
typedef int __s32;
typedef unsigned int __u32;
typedef long long __s64;
typedef unsigned long long __u64;
typedef signed char s8;
typedef unsigned char u8;
typedef unsigned short u16;
typedef int s32;
typedef unsigned int u32;
typedef long long s64;
typedef unsigned long long u64;
typedef u64 dma_addr_t;
typedef __u32 __kernel_dev_t;
typedef __kernel_dev_t dev_t;
typedef __kernel_mode_t mode_t;
typedef __kernel_nlink_t nlink_t;
typedef __kernel_off_t off_t;
typedef __kernel_pid_t pid_t;
typedef __kernel_timer_t timer_t;
typedef __kernel_clockid_t clockid_t;
typedef _Bool bool;
typedef __kernel_uid32_t uid_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_loff_t loff_t;
typedef __kernel_size_t size_t;
typedef __kernel_ssize_t ssize_t;
typedef __kernel_time_t time_t;
typedef __kernel_clock_t clock_t;
typedef unsigned int uint;
typedef __s32 int32_t;
typedef __u32 uint32_t;
typedef unsigned long sector_t;
typedef unsigned long blkcnt_t;
typedef unsigned int gfp_t;
typedef u64 resource_size_t;
struct __anonstruct_pgd_t_6 {
   unsigned long pgd ;
};
typedef struct __anonstruct_pgd_t_6 pgd_t;
struct __anonstruct_pgprot_t_7 {
   unsigned long pgprot ;
};
typedef struct __anonstruct_pgprot_t_7 pgprot_t;
struct bug_entry {
   unsigned long bug_addr ;
   char const   *file ;
   unsigned short line ;
   unsigned short flags ;
};
struct page;
struct module;
struct task_struct;
struct completion;
struct pt_regs;
struct pid;
struct mm_struct;
struct __anonstruct_mm_segment_t_8 {
   unsigned long seg ;
};
typedef struct __anonstruct_mm_segment_t_8 mm_segment_t;
struct exec_domain;
struct map_segment;
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
struct __anonstruct_cpumask_t_9 {
   unsigned long bits[1U] ;
};
typedef struct __anonstruct_cpumask_t_9 cpumask_t;
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   u64 rip ;
   u64 rdp ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[24U] ;
};
union i387_union {
   struct i387_fxsave_struct fxsave ;
};
struct thread_struct {
   unsigned long rsp0 ;
   unsigned long rsp ;
   unsigned long userrsp ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union i387_union i387 ;
   int ioperm ;
   unsigned long *io_bitmap_ptr ;
   unsigned int io_bitmap_max ;
   u64 tls_array[3U] ;
};
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
struct hlist_node;
struct hlist_head {
   struct hlist_node *first ;
};
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
struct __anonstruct_ldv_2654_11 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
struct __anonstruct_futex_12 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u64 time ;
};
union __anonunion_ldv_2661_10 {
   struct __anonstruct_ldv_2654_11 ldv_2654 ;
   struct __anonstruct_futex_12 futex ;
};
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_2661_10 ldv_2661 ;
};
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
};
struct __anonstruct_raw_spinlock_t_13 {
   unsigned int slock ;
};
typedef struct __anonstruct_raw_spinlock_t_13 raw_spinlock_t;
struct __anonstruct_raw_rwlock_t_14 {
   unsigned int lock ;
};
typedef struct __anonstruct_raw_rwlock_t_14 raw_rwlock_t;
struct lockdep_map;
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
struct lockdep_subclass_key {
   char __one_byte ;
};
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[9U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
};
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
};
struct held_lock {
   u64 prev_chain_key ;
   struct lock_class *class ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   int irq_context ;
   int trylock ;
   int read ;
   int check ;
   int hardirqs_off ;
};
struct __anonstruct_spinlock_t_15 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
typedef struct __anonstruct_spinlock_t_15 spinlock_t;
struct __anonstruct_rwlock_t_16 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
typedef struct __anonstruct_rwlock_t_16 rwlock_t;
struct __anonstruct_atomic_t_17 {
   int counter ;
};
typedef struct __anonstruct_atomic_t_17 atomic_t;
struct __anonstruct_atomic64_t_18 {
   long counter ;
};
typedef struct __anonstruct_atomic64_t_18 atomic64_t;
typedef atomic64_t atomic_long_t;
struct timespec {
   time_t tv_sec ;
   long tv_nsec ;
};
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
struct key;
struct file;
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long rbp ;
   unsigned long rbx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long rax ;
   unsigned long rcx ;
   unsigned long rdx ;
   unsigned long rsi ;
   unsigned long rdi ;
   unsigned long orig_rax ;
   unsigned long rip ;
   unsigned long cs ;
   unsigned long eflags ;
   unsigned long rsp ;
   unsigned long ss ;
};
struct linux_binprm;
typedef __u64 Elf64_Addr;
typedef __u16 Elf64_Half;
typedef __u32 Elf64_Word;
typedef __u64 Elf64_Xword;
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
typedef struct elf64_sym Elf64_Sym;
struct kobject;
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
struct attribute_group {
   char const   *name ;
   int (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
struct vm_area_struct;
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct kobject * , struct bin_attribute * , char * , loff_t  ,
                   size_t  ) ;
   ssize_t (*write)(struct kobject * , struct bin_attribute * , char * , loff_t  ,
                    size_t  ) ;
   int (*mmap)(struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
struct kref {
   atomic_t refcount ;
};
struct __wait_queue;
typedef struct __wait_queue wait_queue_t;
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
typedef struct __wait_queue_head wait_queue_head_t;
struct kset;
struct kobj_type;
struct sysfs_dirent;
struct kobject {
   char const   *k_name ;
   struct kref kref ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
};
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
struct kset_uevent_ops {
   int (*filter)(struct kset * , struct kobject * ) ;
   char const   *(*name)(struct kset * , struct kobject * ) ;
   int (*uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
struct kset {
   struct kobj_type *ktype ;
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
struct subsys_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct kset * , char * ) ;
   ssize_t (*store)(struct kset * , char const   * , size_t  ) ;
};
struct marker;
typedef void marker_probe_func(struct marker  const  * , void * , char const   * 
                               , ...);
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   marker_probe_func *call ;
   void *private ;
};
struct __anonstruct_nodemask_t_25 {
   unsigned long bits[1U] ;
};
typedef struct __anonstruct_nodemask_t_25 nodemask_t;
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct mutex *lock ;
   void *magic ;
};
struct rw_semaphore;
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
struct blocking_notifier_head {
   struct rw_semaphore rwsem ;
   struct notifier_block *head ;
};
struct device;
struct pm_message {
   int event ;
};
typedef struct pm_message pm_message_t;
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   struct list_head entry ;
};
struct kmem_cache;
union ktime {
   s64 tv64 ;
};
typedef union ktime ktime_t;
struct tvec_t_base_s;
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_t_base_s *base ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
};
struct hrtimer;
enum hrtimer_restart;
struct workqueue_struct;
struct work_struct;
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
struct execute_work {
   struct work_struct work ;
};
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
};
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   atomic_long_t nr_slabs ;
   struct list_head partial ;
   struct list_head full ;
};
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   int order ;
   struct kmem_cache_node local_node ;
   int objects ;
   int refcount ;
   void (*ctor)(struct kmem_cache * , void * ) ;
   int inuse ;
   int align ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int defrag_ratio ;
   struct kmem_cache_node *node[64U] ;
   struct kmem_cache_cpu *cpu_slab[8U] ;
};
struct __anonstruct_local_t_76 {
   atomic_long_t a ;
};
typedef struct __anonstruct_local_t_76 local_t;
struct mod_arch_specific {

};
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
};
struct exception_table_entry;
struct module_ref {
   local_t count ;
};
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
struct module_sect_attr {
   struct module_attribute mattr ;
   char *name ;
   unsigned long address ;
};
struct module_sect_attrs {
   struct attribute_group grp ;
   int nsections ;
   struct module_sect_attr attrs[0U] ;
};
struct module_param_attrs;
struct module_notes_attrs;
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_param_attrs *param_attrs ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned int num_syms ;
   unsigned long const   *crcs ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned int num_gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned int num_unused_syms ;
   unsigned long const   *unused_crcs ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned int num_unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned int num_gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_exentries ;
   struct exception_table_entry  const  *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned long init_size ;
   unsigned long core_size ;
   unsigned long init_text_size ;
   unsigned long core_text_size ;
   void *unwind_info ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   unsigned int num_bugs ;
   struct module_ref ref[8U] ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   Elf64_Sym *symtab ;
   unsigned long num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
};
struct device_driver;
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const   *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
struct pci_dev;
typedef __u32 kernel_cap_t;
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
struct rb_root {
   struct rb_node *rb_node ;
};
struct prio_tree_node;
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
struct __anonstruct_mm_context_t_77 {
   void *ldt ;
   rwlock_t ldtlock ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
typedef struct __anonstruct_mm_context_t_77 mm_context_t;
struct address_space;
typedef atomic_long_t mm_counter_t;
union __anonunion_ldv_6723_78 {
   atomic_t _mapcount ;
   unsigned int inuse ;
};
struct __anonstruct_ldv_6728_80 {
   unsigned long private ;
   struct address_space *mapping ;
};
union __anonunion_ldv_6732_79 {
   struct __anonstruct_ldv_6728_80 ldv_6728 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
union __anonunion_ldv_6736_81 {
   unsigned long index ;
   void *freelist ;
};
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_6723_78 ldv_6723 ;
   union __anonunion_ldv_6732_79 ldv_6732 ;
   union __anonunion_ldv_6736_81 ldv_6736 ;
   struct list_head lru ;
};
struct __anonstruct_vm_set_83 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
union __anonunion_shared_82 {
   struct __anonstruct_vm_set_83 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
struct anon_vma;
struct vm_operations_struct;
struct mempolicy;
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_82 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
struct kioctx;
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[38U] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   int core_waiters ;
   struct completion *core_startup_done ;
   struct completion core_done ;
   rwlock_t ioctx_list_lock ;
   struct kioctx *ioctx_list ;
};
struct semaphore {
   atomic_t count ;
   int sleepers ;
   wait_queue_head_t wait ;
};
typedef unsigned long cputime_t;
struct sem_undo;
struct sem_undo {
   struct sem_undo *proc_next ;
   struct sem_undo *id_next ;
   int semid ;
   short *semadj ;
};
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct sem_undo *proc_list ;
};
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
struct siginfo;
struct __anonstruct_sigset_t_84 {
   unsigned long sig[1U] ;
};
typedef struct __anonstruct_sigset_t_84 sigset_t;
typedef void __signalfn_t(int  );
typedef __signalfn_t *__sighandler_t;
typedef void __restorefn_t(void);
typedef __restorefn_t *__sigrestore_t;
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
struct k_sigaction {
   struct sigaction sa ;
};
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
typedef union sigval sigval_t;
struct __anonstruct__kill_86 {
   pid_t _pid ;
   uid_t _uid ;
};
struct __anonstruct__timer_87 {
   timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
struct __anonstruct__rt_88 {
   pid_t _pid ;
   uid_t _uid ;
   sigval_t _sigval ;
};
struct __anonstruct__sigchld_89 {
   pid_t _pid ;
   uid_t _uid ;
   int _status ;
   clock_t _utime ;
   clock_t _stime ;
};
struct __anonstruct__sigfault_90 {
   void *_addr ;
};
struct __anonstruct__sigpoll_91 {
   long _band ;
   int _fd ;
};
union __anonunion__sifields_85 {
   int _pad[28U] ;
   struct __anonstruct__kill_86 _kill ;
   struct __anonstruct__timer_87 _timer ;
   struct __anonstruct__rt_88 _rt ;
   struct __anonstruct__sigchld_89 _sigchld ;
   struct __anonstruct__sigfault_90 _sigfault ;
   struct __anonstruct__sigpoll_91 _sigpoll ;
};
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_85 _sifields ;
};
typedef struct siginfo siginfo_t;
struct user_struct;
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
struct dentry;
struct vfsmount;
struct fs_struct {
   atomic_t count ;
   rwlock_t lock ;
   int umask ;
   struct dentry *root ;
   struct dentry *pwd ;
   struct dentry *altroot ;
   struct vfsmount *rootmnt ;
   struct vfsmount *pwdmnt ;
   struct vfsmount *altrootmnt ;
};
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
struct pid_namespace;
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
struct pid {
   atomic_t count ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   int level ;
   struct upid numbers[1U] ;
};
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
struct percpu_counter {
   spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
struct prop_local_percpu {
   struct percpu_counter events ;
   int shift ;
   unsigned long period ;
   spinlock_t lock ;
};
struct prop_local_single {
   unsigned long events ;
   int shift ;
   unsigned long period ;
   spinlock_t lock ;
};
struct __anonstruct_seccomp_t_94 {
   int mode ;
};
typedef struct __anonstruct_seccomp_t_94 seccomp_t;
struct robust_list {
   struct robust_list *next ;
};
struct robust_list_head {
   struct robust_list list ;
   long futex_offset ;
   struct robust_list *list_op_pending ;
};
struct inode;
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
struct rt_mutex_waiter;
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
struct hrtimer_clock_base;
struct hrtimer_cpu_base;
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
enum hrtimer_cb_mode {
    HRTIMER_CB_SOFTIRQ = 0,
    HRTIMER_CB_IRQSAFE = 1,
    HRTIMER_CB_IRQSAFE_NO_RESTART = 2,
    HRTIMER_CB_IRQSAFE_NO_SOFTIRQ = 3
} ;
struct hrtimer {
   struct rb_node node ;
   ktime_t expires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   enum hrtimer_cb_mode cb_mode ;
   struct list_head cb_entry ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
};
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t (*get_softirq_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
   int (*reprogram)(struct hrtimer * , struct hrtimer_clock_base * , ktime_t  ) ;
};
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct lock_class_key lock_key ;
   struct hrtimer_clock_base clock_base[2U] ;
   ktime_t expires_next ;
   int hres_active ;
   struct list_head cb_pending ;
   unsigned long nr_events ;
};
struct task_io_accounting {
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
struct futex_pi_state;
struct bio;
struct seq_file;
struct cfs_rq;
struct task_group;
struct nsproxy;
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
union __anonunion_ki_obj_98 {
   void *user ;
   struct task_struct *tsk ;
};
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_98 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   atomic_t ki_bio_count ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct kioctx *next ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
};
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
union __anonunion_ldv_8162_99 {
   pid_t pgrp ;
   pid_t __pgrp ;
};
union __anonunion_ldv_8167_100 {
   pid_t session ;
   pid_t __session ;
};
struct tty_struct;
struct taskstats;
struct tty_audit_buf;
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   struct task_struct *group_exit_task ;
   int notify_count ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct task_struct *tsk ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   union __anonunion_ldv_8162_99 ldv_8162 ;
   struct pid *tty_old_pgrp ;
   union __anonunion_ldv_8167_100 ldv_8167 ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[15U] ;
   struct list_head cpu_timers[3U] ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct task_group *tg ;
   struct kset kset ;
   struct subsys_attribute user_attr ;
   struct work_struct work ;
};
struct backing_dev_info;
struct reclaim_state;
struct sched_info {
   unsigned long pcount ;
   unsigned long long cpu_time ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
struct file_operations;
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
};
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
struct sched_group {
   struct sched_group *next ;
   cpumask_t cpumask ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
};
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   cpumask_t span ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   unsigned int lb_count[3U] ;
   unsigned int lb_failed[3U] ;
   unsigned int lb_balanced[3U] ;
   unsigned int lb_imbalance[3U] ;
   unsigned int lb_gained[3U] ;
   unsigned int lb_hot_gained[3U] ;
   unsigned int lb_nobusyg[3U] ;
   unsigned int lb_nobusyq[3U] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
};
struct io_context;
struct group_info {
   int ngroups ;
   atomic_t usage ;
   gid_t small_block[32U] ;
   int nblocks ;
   gid_t *blocks[0U] ;
};
struct audit_context;
struct pipe_inode_info;
struct rq;
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   unsigned long (*load_balance)(struct rq * , int  , struct rq * , unsigned long  ,
                                 struct sched_domain * , enum cpu_idle_type  , int * ,
                                 int * ) ;
   int (*move_one_task)(struct rq * , int  , struct rq * , struct sched_domain * ,
                        enum cpu_idle_type  ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * ) ;
   void (*task_new)(struct rq * , struct task_struct * ) ;
};
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 wait_start ;
   u64 wait_max ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
struct linux_binfmt;
struct files_struct;
struct css_set;
struct compat_robust_list_head;
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   struct list_head run_list ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct hlist_head preempt_notifiers ;
   unsigned short ioprio ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   unsigned int time_slice ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct list_head ptrace_children ;
   struct list_head ptrace_list ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   unsigned int rt_priority ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   unsigned long long it_sched_expires ;
   struct list_head cpu_timers[3U] ;
   uid_t uid ;
   uid_t euid ;
   uid_t suid ;
   uid_t fsuid ;
   gid_t gid ;
   gid_t egid ;
   gid_t sgid ;
   gid_t fsgid ;
   struct group_info *group_info ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   unsigned char keep_capabilities : 1 ;
   struct user_struct *user ;
   struct key *request_key_auth ;
   struct key *thread_keyring ;
   unsigned char jit_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   void *security ;
   struct audit_context *audit_context ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   struct held_lock held_locks[30U] ;
   unsigned int lockdep_recursion ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_stimexpd ;
   struct mempolicy *mempolicy ;
   short il_next ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
};
struct proc_dir_entry;
struct nameidata;
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
struct dcookie_struct;
union __anonunion_d_u_101 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
struct dentry_operations;
struct super_block;
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_101 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   struct dcookie_struct *d_cookie ;
   int d_mounted ;
   unsigned char d_iname[36U] ;
};
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
struct open_intent {
   int flags ;
   int create_mode ;
   struct file *file ;
};
union __anonunion_intent_102 {
   struct open_intent open ;
};
struct nameidata {
   struct dentry *dentry ;
   struct vfsmount *mnt ;
   struct qstr last ;
   unsigned int flags ;
   int last_type ;
   unsigned int depth ;
   char *saved_names[9U] ;
   union __anonunion_intent_102 intent ;
};
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
struct radix_tree_node;
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
struct export_operations;
struct hd_geometry;
struct poll_table_struct;
struct kstatfs;
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
typedef __kernel_uid32_t qid_t;
typedef __u64 qsize_t;
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
typedef struct fs_qfilestat fs_qfilestat_t;
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
struct v1_mem_dqinfo {

};
struct v2_mem_dqinfo {
   unsigned int dqi_blocks ;
   unsigned int dqi_free_blk ;
   unsigned int dqi_free_entry ;
};
struct mem_dqblk {
   __u32 dqb_bhardlimit ;
   __u32 dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   __u32 dqb_ihardlimit ;
   __u32 dqb_isoftlimit ;
   __u32 dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
struct quota_format_type;
union __anonunion_u_103 {
   struct v1_mem_dqinfo v1_i ;
   struct v2_mem_dqinfo v2_i ;
};
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   union __anonunion_u_103 u ;
};
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , unsigned long  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , unsigned long  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
};
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops *ops[2U] ;
};
struct writeback_control;
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*prepare_write)(struct file * , struct page * , unsigned int  , unsigned int  ) ;
   int (*commit_write)(struct file * , struct page * , unsigned int  , unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   struct page *(*get_xip_page)(struct address_space * , sector_t  , int  ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
};
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   rwlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
struct hd_struct;
struct gendisk;
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
};
struct inode_operations;
struct file_lock;
struct cdev;
union __anonunion_ldv_10515_104 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
struct dnotify_struct;
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   unsigned long i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_10515_104 ldv_10515 ;
   int i_cindex ;
   __u32 i_generation ;
   unsigned long i_dnotify_mask ;
   struct dnotify_struct *i_dnotify ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
union __anonunion_f_u_105 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
struct file {
   union __anonunion_f_u_105 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   atomic_t f_count ;
   unsigned int f_flags ;
   mode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   unsigned int f_uid ;
   unsigned int f_gid ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   spinlock_t f_ep_lock ;
   struct address_space *f_mapping ;
};
typedef struct files_struct *fl_owner_t;
struct file_lock_operations {
   void (*fl_insert)(struct file_lock * ) ;
   void (*fl_remove)(struct file_lock * ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
struct nlm_lockowner;
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
struct nfs4_lock_state;
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
struct fasync_struct;
struct __anonstruct_afs_107 {
   struct list_head link ;
   int state ;
};
union __anonunion_fl_u_106 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_107 afs ;
};
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_pid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_106 fl_u ;
};
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
struct file_system_type;
struct super_operations;
struct xattr_handler;
struct mtd_info;
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_syncing ;
   int s_need_sync_fs ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
};
struct block_device_operations {
   int (*open)(struct inode * , struct file * ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , unsigned long * ) ;
   int (*media_changed)(struct gendisk * ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   struct module *owner ;
};
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*dir_notify)(struct file * , unsigned long  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  , struct nameidata * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
};
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*read_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*put_inode)(struct inode * ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   void (*write_super_lockfs)(struct super_block * ) ;
   void (*unlockfs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct vfsmount * , int  ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
};
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
typedef int get_info_t(char * , char ** , off_t  , int  );
typedef struct proc_dir_entry *shadow_proc_t(struct task_struct * , struct proc_dir_entry * );
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned short namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   get_info_t *get_info ;
   struct module *owner ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   shadow_proc_t *shadow_proc ;
};
typedef unsigned long kernel_ulong_t;
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
struct klist_node;
struct klist {
   spinlock_t k_lock ;
   struct list_head k_list ;
   void (*get)(struct klist_node * ) ;
   void (*put)(struct klist_node * ) ;
};
struct klist_node {
   struct klist *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
   struct completion n_removed ;
};
struct dev_archdata {
   void *acpi_handle ;
   void *iommu ;
};
struct class;
struct class_device;
struct bus_type;
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
struct device_attribute;
struct driver_attribute;
struct bus_type {
   char const   *name ;
   struct module *owner ;
   struct kset subsys ;
   struct kset drivers ;
   struct kset devices ;
   struct klist klist_devices ;
   struct klist klist_drivers ;
   struct blocking_notifier_head bus_notifier ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*suspend_late)(struct device * , pm_message_t  ) ;
   int (*resume_early)(struct device * ) ;
   int (*resume)(struct device * ) ;
   unsigned char drivers_autoprobe : 1 ;
};
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct kobject kobj ;
   struct klist klist_devices ;
   struct klist_node knode_bus ;
   struct module *owner ;
   char const   *mod_name ;
   struct module_kobject *mkobj ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
};
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
struct class_attribute;
struct class_device_attribute;
struct class {
   char const   *name ;
   struct module *owner ;
   struct kset subsys ;
   struct list_head children ;
   struct list_head devices ;
   struct list_head interfaces ;
   struct kset class_dirs ;
   struct semaphore sem ;
   struct class_attribute *class_attrs ;
   struct class_device_attribute *class_dev_attrs ;
   struct device_attribute *dev_attrs ;
   int (*uevent)(struct class_device * , struct kobj_uevent_env * ) ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*release)(struct class_device * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
};
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , char * ) ;
   ssize_t (*store)(struct class * , char const   * , size_t  ) ;
};
struct class_device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class_device * , char * ) ;
   ssize_t (*store)(struct class_device * , char const   * , size_t  ) ;
};
struct class_device {
   struct list_head node ;
   struct kobject kobj ;
   struct class *class ;
   dev_t devt ;
   struct device *dev ;
   void *class_data ;
   struct class_device *parent ;
   struct attribute_group **groups ;
   void (*release)(struct class_device * ) ;
   int (*uevent)(struct class_device * , struct kobj_uevent_env * ) ;
   char class_id[20U] ;
};
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
};
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
struct dma_coherent_mem;
struct device {
   struct klist klist_children ;
   struct klist_node knode_parent ;
   struct klist_node knode_driver ;
   struct klist_node knode_bus ;
   struct device *parent ;
   struct kobject kobj ;
   char bus_id[20U] ;
   struct device_type *type ;
   unsigned char is_registered : 1 ;
   unsigned char uevent_suppress : 1 ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct list_head node ;
   struct class *class ;
   dev_t devt ;
   struct attribute_group **groups ;
   void (*release)(struct device * ) ;
};
typedef int pci_power_t;
typedef unsigned int pci_channel_state_t;
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
} ;
typedef unsigned short pci_dev_flags_t;
typedef unsigned short pci_bus_flags_t;
struct pci_bus;
struct pci_driver;
struct pci_dev {
   struct list_head global_list ;
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_type ;
   u8 rom_base_reg ;
   u8 pin ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   pci_power_t current_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   unsigned short vendor_compatible[4U] ;
   unsigned short device_compatible[4U] ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[12U] ;
   unsigned char transparent : 1 ;
   unsigned char multifunction : 1 ;
   unsigned char is_busmaster : 1 ;
   unsigned char no_msi : 1 ;
   unsigned char no_d1d2 : 1 ;
   unsigned char block_ucfg_access : 1 ;
   unsigned char broken_parity_status : 1 ;
   unsigned char msi_enabled : 1 ;
   unsigned char msix_enabled : 1 ;
   unsigned char is_managed : 1 ;
   unsigned char is_pcie : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[12U] ;
   struct list_head msi_list ;
};
struct pci_ops;
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct resource *resource[8U] ;
   struct pci_ops *ops ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char secondary ;
   unsigned char subordinate ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct class_device class_dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
};
struct pci_ops {
   int (*read)(struct pci_bus * , unsigned int  , int  , int  , u32 * ) ;
   int (*write)(struct pci_bus * , unsigned int  , int  , int  , u32  ) ;
};
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
   unsigned char use_driver_data : 1 ;
};
typedef unsigned int pci_ers_result_t;
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev * , enum pci_channel_state  ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev * ) ;
   pci_ers_result_t (*link_reset)(struct pci_dev * ) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev * ) ;
   void (*resume)(struct pci_dev * ) ;
};
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id  const  *id_table ;
   int (*probe)(struct pci_dev * , struct pci_device_id  const  * ) ;
   void (*remove)(struct pci_dev * ) ;
   int (*suspend)(struct pci_dev * , pm_message_t  ) ;
   int (*suspend_late)(struct pci_dev * , pm_message_t  ) ;
   int (*resume_early)(struct pci_dev * ) ;
   int (*resume)(struct pci_dev * ) ;
   void (*shutdown)(struct pci_dev * ) ;
   struct pci_error_handlers *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
struct linux_binprm {
   char buf[128U] ;
   struct vm_area_struct *vma ;
   struct mm_struct *mm ;
   unsigned long p ;
   int sh_bang ;
   struct file *file ;
   int e_uid ;
   int e_gid ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   bool cap_effective ;
   void *security ;
   int argc ;
   int envc ;
   char *filename ;
   char *interp ;
   unsigned int interp_flags ;
   unsigned int interp_data ;
   unsigned long loader ;
   unsigned long exec ;
   unsigned long argv_len ;
};
struct linux_binfmt {
   struct list_head lh ;
   struct module *module ;
   int (*load_binary)(struct linux_binprm * , struct pt_regs * ) ;
   int (*load_shlib)(struct file * ) ;
   int (*core_dump)(long  , struct pt_regs * , struct file * , unsigned long  ) ;
   unsigned long min_coredump ;
   int hasvdso ;
};
typedef int32_t key_serial_t;
typedef uint32_t key_perm_t;
struct key_type;
struct keyring_list;
struct key_user;
union __anonunion_type_data_111 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
};
union __anonunion_payload_112 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   time_t expiry ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_111 type_data ;
   union __anonunion_payload_112 payload ;
};
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   struct page *(*nopage)(struct vm_area_struct * , unsigned long  , int * ) ;
   unsigned long (*nopfn)(struct vm_area_struct * , unsigned long  ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct page * ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
struct dma_mapping_ops {
   int (*mapping_error)(dma_addr_t  ) ;
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_single)(struct device * , void * , size_t  , int  ) ;
   dma_addr_t (*map_simple)(struct device * , char * , size_t  , int  ) ;
   void (*unmap_single)(struct device * , dma_addr_t  , size_t  , int  ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , int  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , int  ) ;
   void (*sync_single_range_for_cpu)(struct device * , dma_addr_t  , unsigned long  ,
                                     size_t  , int  ) ;
   void (*sync_single_range_for_device)(struct device * , dma_addr_t  , unsigned long  ,
                                        size_t  , int  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , int  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , int  ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , int  ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , int  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int is_phys ;
};
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   struct kobject kobj ;
   struct kobject *holder_dir ;
   unsigned int ios[2U] ;
   unsigned int sectors[2U] ;
   int policy ;
   int partno ;
   int make_it_fail ;
};
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
struct request_queue;
struct timer_rand_state;
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   struct hd_struct **part ;
   int part_uevent_suppress ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   sector_t capacity ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject kobj ;
   struct kobject *holder_dir ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   int policy ;
   atomic_t sync_io ;
   unsigned long stamp ;
   int in_flight ;
   struct disk_stats *dkstats ;
   struct work_struct async_notify ;
};
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
typedef int congested_fn(void * , int  );
struct backing_dev_info {
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   void (*unplug_io_fn)(struct backing_dev_info * , struct page * ) ;
   void *unplug_io_data ;
   struct percpu_counter bdi_stat[2U] ;
   struct prop_local_percpu completions ;
   int dirty_exceeded ;
};
typedef void *mempool_alloc_t(gfp_t  , void * );
typedef void mempool_free_t(void * , void * );
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
typedef struct mempool_s mempool_t;
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
typedef void bio_end_io_t(struct bio * , int  );
typedef void bio_destructor_t(struct bio * );
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned short bi_phys_segments ;
   unsigned short bi_hw_segments ;
   unsigned int bi_size ;
   unsigned int bi_hw_front_size ;
   unsigned int bi_hw_back_size ;
   unsigned int bi_max_vecs ;
   struct bio_vec *bi_io_vec ;
   bio_end_io_t *bi_end_io ;
   atomic_t bi_cnt ;
   void *bi_private ;
   bio_destructor_t *bi_destructor ;
};
struct bsg_class_device {
   struct class_device *class_dev ;
   struct device *dev ;
   int minor ;
   struct request_queue *queue ;
};
struct elevator_queue;
typedef struct elevator_queue elevator_t;
struct blk_trace;
struct request;
struct as_io_context {
   spinlock_t lock ;
   void (*dtor)(struct as_io_context * ) ;
   void (*exit)(struct as_io_context * ) ;
   unsigned long state ;
   atomic_t nr_queued ;
   atomic_t nr_dispatched ;
   unsigned long last_end_request ;
   unsigned long ttime_total ;
   unsigned long ttime_samples ;
   unsigned long ttime_mean ;
   unsigned int seek_samples ;
   sector_t last_request_pos ;
   u64 seek_total ;
   sector_t seek_mean ;
};
struct io_context {
   atomic_t refcount ;
   struct task_struct *task ;
   unsigned int ioprio_changed ;
   unsigned long last_waited ;
   int nr_batch_requests ;
   struct as_io_context *aic ;
   struct rb_root cic_root ;
   void *ioc_data ;
};
typedef void rq_end_io_fn(struct request * , int  );
struct request_list {
   int count[2U] ;
   int starved[2U] ;
   int elvpriv ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
};
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_FLUSH = 7,
    REQ_TYPE_SPECIAL = 8,
    REQ_TYPE_LINUX_BLOCK = 9,
    REQ_TYPE_ATA_CMD = 10,
    REQ_TYPE_ATA_TASK = 11,
    REQ_TYPE_ATA_TASKFILE = 12,
    REQ_TYPE_ATA_PC = 13
} ;
union __anonunion_ldv_18840_124 {
   struct rb_node rb_node ;
   void *completion_data ;
};
struct request {
   struct list_head queuelist ;
   struct list_head donelist ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   sector_t sector ;
   sector_t hard_sector ;
   unsigned long nr_sectors ;
   unsigned long hard_nr_sectors ;
   unsigned int current_nr_sectors ;
   unsigned int hard_cur_sectors ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_18840_124 ldv_18840 ;
   void *elevator_private ;
   void *elevator_private2 ;
   struct gendisk *rq_disk ;
   unsigned long start_time ;
   unsigned short nr_phys_segments ;
   unsigned short nr_hw_segments ;
   unsigned short ioprio ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   int ref_count ;
   unsigned int cmd_len ;
   unsigned char cmd[16U] ;
   unsigned int data_len ;
   unsigned int sense_len ;
   void *data ;
   void *sense ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
typedef int elevator_dispatch_fn(struct request_queue * , int  );
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
typedef int elevator_queue_empty_fn(struct request_queue * );
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
typedef int elevator_may_queue_fn(struct request_queue * , int  );
typedef int elevator_set_req_fn(struct request_queue * , struct request * , gfp_t  );
typedef void elevator_put_req_fn(struct request * );
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
typedef void *elevator_init_fn(struct request_queue * );
typedef void elevator_exit_fn(elevator_t * );
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_queue_empty_fn *elevator_queue_empty_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
   void (*trim)(struct io_context * ) ;
};
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(elevator_t * , char * ) ;
   ssize_t (*store)(elevator_t * , char const   * , size_t  ) ;
};
struct elevator_type {
   struct list_head list ;
   struct elevator_ops ops ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
};
struct elevator_queue {
   struct elevator_ops *ops ;
   void *elevator_data ;
   struct kobject kobj ;
   struct elevator_type *elevator_type ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
};
typedef void request_fn_proc(struct request_queue * );
typedef int make_request_fn(struct request_queue * , struct bio * );
typedef int prep_rq_fn(struct request_queue * , struct request * );
typedef void unplug_fn(struct request_queue * );
typedef int merge_bvec_fn(struct request_queue * , struct bio * , struct bio_vec * );
typedef void prepare_flush_fn(struct request_queue * , struct request * );
typedef void softirq_done_fn(struct request * );
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   elevator_t *elevator ;
   struct request_list rq ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unplug_fn *unplug_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   prepare_flush_fn *prepare_flush_fn ;
   softirq_done_fn *softirq_done_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct timer_list unplug_timer ;
   int unplug_thresh ;
   unsigned long unplug_delay ;
   struct work_struct unplug_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   unsigned long bounce_pfn ;
   gfp_t bounce_gfp ;
   unsigned long queue_flags ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   unsigned int max_sectors ;
   unsigned int max_hw_sectors ;
   unsigned short max_phys_segments ;
   unsigned short max_hw_segments ;
   unsigned short hardsect_size ;
   unsigned int max_segment_size ;
   unsigned long seg_boundary_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   unsigned int ordered ;
   unsigned int next_ordered ;
   unsigned int ordseq ;
   int orderr ;
   int ordcolor ;
   struct request pre_flush_rq ;
   struct request bar_rq ;
   struct request post_flush_rq ;
   struct request *orig_bar_rq ;
   struct mutex sysfs_lock ;
   struct bsg_class_device bsg_dev ;
};
struct _i2o_lct_entry {
   unsigned short entry_size ;
   unsigned short tid : 12 ;
   unsigned char reserved : 4 ;
   __u32 change_ind ;
   __u32 device_flags ;
   unsigned short class_id : 12 ;
   unsigned char version : 4 ;
   unsigned short vendor_id ;
   __u32 sub_class ;
   unsigned short user_tid : 12 ;
   unsigned short parent_tid : 12 ;
   unsigned char bios_info ;
   __u8 identity_tag[8U] ;
   __u32 event_capabilities ;
};
typedef struct _i2o_lct_entry i2o_lct_entry;
struct _i2o_lct {
   unsigned short table_size ;
   unsigned short boot_tid : 12 ;
   unsigned char lct_ver : 4 ;
   __u32 iop_flags ;
   __u32 change_ind ;
   i2o_lct_entry lct_entry[1U] ;
};
typedef struct _i2o_lct i2o_lct;
struct _i2o_status_block {
   __u16 org_id ;
   __u16 reserved ;
   unsigned short iop_id : 12 ;
   unsigned char reserved1 : 4 ;
   __u16 host_unit_id ;
   unsigned short segment_number : 12 ;
   unsigned char i2o_version : 4 ;
   __u8 iop_state ;
   __u8 msg_type ;
   __u16 inbound_frame_size ;
   __u8 init_code ;
   __u8 reserved2 ;
   __u32 max_inbound_frames ;
   __u32 cur_inbound_frames ;
   __u32 max_outbound_frames ;
   char product_id[24U] ;
   __u32 expected_lct_size ;
   __u32 iop_capabilities ;
   __u32 desired_mem_size ;
   __u32 current_mem_size ;
   __u32 current_mem_base ;
   __u32 desired_io_size ;
   __u32 current_io_size ;
   __u32 current_io_base ;
   unsigned int reserved3 : 24 ;
   unsigned char cmd_status ;
};
typedef struct _i2o_status_block i2o_status_block;
struct __anonstruct_s_128 {
   u8 version_offset ;
   u8 flags ;
   u16 size ;
   unsigned short target_tid : 12 ;
   unsigned short init_tid : 12 ;
   unsigned char function ;
   u32 icntxt ;
   u32 tcntxt ;
};
union __anonunion_u_127 {
   struct __anonstruct_s_128 s ;
   u32 head[4U] ;
};
struct i2o_message {
   union __anonunion_u_127 u ;
   u32 body[0U] ;
};
struct i2o_msg_mfa {
   u32 mfa ;
   struct i2o_message msg ;
};
struct i2o_controller;
struct i2o_device {
   i2o_lct_entry lct_data ;
   struct i2o_controller *iop ;
   struct list_head list ;
   struct device device ;
   struct mutex lock ;
};
struct i2o_class_id {
   unsigned short class_id : 12 ;
};
struct i2o_driver {
   char *name ;
   int context ;
   struct i2o_class_id *classes ;
   int (*reply)(struct i2o_controller * , u32  , struct i2o_message * ) ;
   void (*event)(struct work_struct * ) ;
   struct workqueue_struct *event_queue ;
   struct device_driver driver ;
   void (*notify_controller_add)(struct i2o_controller * ) ;
   void (*notify_controller_remove)(struct i2o_controller * ) ;
   void (*notify_device_add)(struct i2o_device * ) ;
   void (*notify_device_remove)(struct i2o_device * ) ;
   struct semaphore lock ;
};
struct i2o_dma {
   void *virt ;
   dma_addr_t phys ;
   size_t len ;
};
struct i2o_pool {
   char *name ;
   struct kmem_cache *slab ;
   mempool_t *mempool ;
};
struct i2o_io {
   void *virt ;
   unsigned long phys ;
   unsigned long len ;
};
struct i2o_controller {
   char name[16U] ;
   int unit ;
   int type ;
   struct pci_dev *pdev ;
   unsigned char promise : 1 ;
   unsigned char adaptec : 1 ;
   unsigned char raptor : 1 ;
   unsigned char no_quiesce : 1 ;
   unsigned char short_req : 1 ;
   unsigned char limit_sectors : 1 ;
   unsigned char pae_support : 1 ;
   struct list_head devices ;
   struct list_head list ;
   void *in_port ;
   void *out_port ;
   void *irq_status ;
   void *irq_mask ;
   struct i2o_dma status ;
   struct i2o_dma hrt ;
   i2o_lct *lct ;
   struct i2o_dma dlct ;
   struct mutex lct_lock ;
   struct i2o_dma status_block ;
   struct i2o_io base ;
   struct i2o_io in_queue ;
   struct i2o_dma out_queue ;
   struct i2o_pool in_msg ;
   unsigned char battery : 1 ;
   unsigned char io_alloc : 1 ;
   unsigned char mem_alloc : 1 ;
   struct resource io_resource ;
   struct resource mem_resource ;
   struct device device ;
   struct i2o_device *exec ;
   spinlock_t context_list_lock ;
   atomic_t context_list_counter ;
   struct list_head context_list ;
   spinlock_t lock ;
   void *driver_data[8U] ;
};
struct scsi_cmnd;
struct scsi_device;
struct scsi_target;
struct Scsi_Host;
struct scsi_host_cmd_pool;
struct scsi_transport_template;
enum scsi_eh_timer_return {
    EH_NOT_HANDLED = 0,
    EH_HANDLED = 1,
    EH_RESET_TIMER = 2
} ;
struct scsi_host_template {
   struct module *module ;
   char const   *name ;
   int (*detect)(struct scsi_host_template * ) ;
   int (*release)(struct Scsi_Host * ) ;
   char const   *(*info)(struct Scsi_Host * ) ;
   int (*ioctl)(struct scsi_device * , int  , void * ) ;
   int (*compat_ioctl)(struct scsi_device * , int  , void * ) ;
   int (*queuecommand)(struct scsi_cmnd * , void (*)(struct scsi_cmnd * ) ) ;
   int (*transfer_response)(struct scsi_cmnd * , void (*)(struct scsi_cmnd * ) ) ;
   int (*eh_abort_handler)(struct scsi_cmnd * ) ;
   int (*eh_device_reset_handler)(struct scsi_cmnd * ) ;
   int (*eh_bus_reset_handler)(struct scsi_cmnd * ) ;
   int (*eh_host_reset_handler)(struct scsi_cmnd * ) ;
   int (*slave_alloc)(struct scsi_device * ) ;
   int (*slave_configure)(struct scsi_device * ) ;
   void (*slave_destroy)(struct scsi_device * ) ;
   int (*target_alloc)(struct scsi_target * ) ;
   void (*target_destroy)(struct scsi_target * ) ;
   int (*scan_finished)(struct Scsi_Host * , unsigned long  ) ;
   void (*scan_start)(struct Scsi_Host * ) ;
   int (*change_queue_depth)(struct scsi_device * , int  ) ;
   int (*change_queue_type)(struct scsi_device * , int  ) ;
   int (*bios_param)(struct scsi_device * , struct block_device * , sector_t  , int * ) ;
   int (*proc_info)(struct Scsi_Host * , char * , char ** , off_t  , int  , int  ) ;
   enum scsi_eh_timer_return (*eh_timed_out)(struct scsi_cmnd * ) ;
   char const   *proc_name ;
   struct proc_dir_entry *proc_dir ;
   int can_queue ;
   int this_id ;
   unsigned short sg_tablesize ;
   unsigned short max_sectors ;
   unsigned long dma_boundary ;
   short cmd_per_lun ;
   unsigned char present ;
   unsigned char supported_mode : 2 ;
   unsigned char unchecked_isa_dma : 1 ;
   unsigned char use_clustering : 1 ;
   unsigned char emulated : 1 ;
   unsigned char skip_settle_delay : 1 ;
   unsigned char ordered_tag : 1 ;
   unsigned char use_sg_chaining : 1 ;
   unsigned int max_host_blocked ;
   struct class_device_attribute **shost_attrs ;
   struct device_attribute **sdev_attrs ;
   struct list_head legacy_hosts ;
};
enum scsi_host_state {
    SHOST_CREATED = 1,
    SHOST_RUNNING = 2,
    SHOST_CANCEL = 3,
    SHOST_DEL = 4,
    SHOST_RECOVERY = 5,
    SHOST_CANCEL_RECOVERY = 6,
    SHOST_DEL_RECOVERY = 7
} ;
struct Scsi_Host {
   struct list_head __devices ;
   struct list_head __targets ;
   struct scsi_host_cmd_pool *cmd_pool ;
   spinlock_t free_list_lock ;
   struct list_head free_list ;
   struct list_head starved_list ;
   spinlock_t default_lock ;
   spinlock_t *host_lock ;
   struct mutex scan_mutex ;
   struct list_head eh_cmd_q ;
   struct task_struct *ehandler ;
   struct completion *eh_action ;
   wait_queue_head_t host_wait ;
   struct scsi_host_template *hostt ;
   struct scsi_transport_template *transportt ;
   struct blk_queue_tag *bqt ;
   unsigned int host_busy ;
   unsigned int host_failed ;
   unsigned int host_eh_scheduled ;
   unsigned short host_no ;
   int resetting ;
   unsigned long last_reset ;
   unsigned int max_id ;
   unsigned int max_lun ;
   unsigned int max_channel ;
   unsigned int unique_id ;
   unsigned char max_cmd_len ;
   int this_id ;
   int can_queue ;
   short cmd_per_lun ;
   unsigned short sg_tablesize ;
   unsigned short max_sectors ;
   unsigned long dma_boundary ;
   unsigned long cmd_serial_number ;
   unsigned char active_mode : 2 ;
   unsigned char unchecked_isa_dma : 1 ;
   unsigned char use_clustering : 1 ;
   unsigned char use_blk_tcq : 1 ;
   unsigned char use_sg_chaining : 1 ;
   unsigned char host_self_blocked : 1 ;
   unsigned char reverse_ordering : 1 ;
   unsigned char ordered_tag : 1 ;
   unsigned char tmf_in_progress : 1 ;
   unsigned char async_scan : 1 ;
   char work_q_name[20U] ;
   struct workqueue_struct *work_q ;
   unsigned int host_blocked ;
   unsigned int max_host_blocked ;
   struct request_queue *uspace_req_q ;
   unsigned long base ;
   unsigned long io_port ;
   unsigned char n_io_port ;
   unsigned char dma_channel ;
   unsigned int irq ;
   enum scsi_host_state shost_state ;
   struct device shost_gendev ;
   struct class_device shost_classdev ;
   struct list_head sht_legacy_list ;
   void *shost_data ;
   unsigned long hostdata[0U] ;
};
enum scsi_device_state {
    SDEV_CREATED = 1,
    SDEV_RUNNING = 2,
    SDEV_CANCEL = 3,
    SDEV_DEL = 4,
    SDEV_QUIESCE = 5,
    SDEV_OFFLINE = 6,
    SDEV_BLOCK = 7
} ;
struct scsi_device {
   struct Scsi_Host *host ;
   struct request_queue *request_queue ;
   struct list_head siblings ;
   struct list_head same_target_siblings ;
   unsigned int device_busy ;
   spinlock_t list_lock ;
   struct list_head cmd_list ;
   struct list_head starved_entry ;
   struct scsi_cmnd *current_cmnd ;
   unsigned short queue_depth ;
   unsigned short last_queue_full_depth ;
   unsigned short last_queue_full_count ;
   unsigned long last_queue_full_time ;
   unsigned int id ;
   unsigned int lun ;
   unsigned int channel ;
   unsigned int manufacturer ;
   unsigned int sector_size ;
   void *hostdata ;
   char type ;
   char scsi_level ;
   char inq_periph_qual ;
   unsigned char inquiry_len ;
   unsigned char *inquiry ;
   char const   *vendor ;
   char const   *model ;
   char const   *rev ;
   unsigned char current_tag ;
   struct scsi_target *sdev_target ;
   unsigned int sdev_bflags ;
   unsigned char writeable : 1 ;
   unsigned char removable : 1 ;
   unsigned char changed : 1 ;
   unsigned char busy : 1 ;
   unsigned char lockable : 1 ;
   unsigned char locked : 1 ;
   unsigned char borken : 1 ;
   unsigned char disconnect : 1 ;
   unsigned char soft_reset : 1 ;
   unsigned char sdtr : 1 ;
   unsigned char wdtr : 1 ;
   unsigned char ppr : 1 ;
   unsigned char tagged_supported : 1 ;
   unsigned char simple_tags : 1 ;
   unsigned char ordered_tags : 1 ;
   unsigned char was_reset : 1 ;
   unsigned char expecting_cc_ua : 1 ;
   unsigned char use_10_for_rw : 1 ;
   unsigned char use_10_for_ms : 1 ;
   unsigned char skip_ms_page_8 : 1 ;
   unsigned char skip_ms_page_3f : 1 ;
   unsigned char use_192_bytes_for_3f : 1 ;
   unsigned char no_start_on_add : 1 ;
   unsigned char allow_restart : 1 ;
   unsigned char manage_start_stop : 1 ;
   unsigned char no_uld_attach : 1 ;
   unsigned char select_no_atn : 1 ;
   unsigned char fix_capacity : 1 ;
   unsigned char guess_capacity : 1 ;
   unsigned char retry_hwerror : 1 ;
   unsigned long supported_events[1U] ;
   struct list_head event_list ;
   struct work_struct event_work ;
   unsigned int device_blocked ;
   unsigned int max_device_blocked ;
   atomic_t iorequest_cnt ;
   atomic_t iodone_cnt ;
   atomic_t ioerr_cnt ;
   int timeout ;
   struct device sdev_gendev ;
   struct class_device sdev_classdev ;
   struct execute_work ew ;
   enum scsi_device_state sdev_state ;
   unsigned long sdev_data[0U] ;
};
enum scsi_target_state {
    STARGET_RUNNING = 1,
    STARGET_DEL = 2
} ;
struct scsi_target {
   struct scsi_device *starget_sdev_user ;
   struct list_head siblings ;
   struct list_head devices ;
   struct device dev ;
   unsigned int reap_ref ;
   unsigned int channel ;
   unsigned int id ;
   unsigned char create : 1 ;
   unsigned char single_lun : 1 ;
   unsigned int pdt_1f_for_no_lun ;
   char scsi_level ;
   struct execute_work ew ;
   enum scsi_target_state state ;
   void *hostdata ;
   unsigned long starget_data[0U] ;
};
struct scsi_pointer {
   char *ptr ;
   int this_residual ;
   struct scatterlist *buffer ;
   int buffers_residual ;
   dma_addr_t dma_handle ;
   int volatile   Status ;
   int volatile   Message ;
   int volatile   have_data_in ;
   int volatile   sent_command ;
   int volatile   phase ;
};
struct scsi_cmnd {
   struct scsi_device *device ;
   struct list_head list ;
   struct list_head eh_entry ;
   int eh_eflags ;
   unsigned long serial_number ;
   unsigned long jiffies_at_alloc ;
   int retries ;
   int allowed ;
   int timeout_per_command ;
   unsigned char cmd_len ;
   enum dma_data_direction sc_data_direction ;
   unsigned char cmnd[16U] ;
   unsigned int request_bufflen ;
   struct timer_list eh_timeout ;
   void *request_buffer ;
   unsigned short use_sg ;
   unsigned short __use_sg ;
   unsigned int underflow ;
   unsigned int transfersize ;
   int resid ;
   struct request *request ;
   unsigned char sense_buffer[96U] ;
   void (*scsi_done)(struct scsi_cmnd * ) ;
   struct scsi_pointer SCp ;
   unsigned char *host_scribble ;
   int result ;
   unsigned char tag ;
};
struct i2o_scsi_host {
   struct Scsi_Host *scsi_host ;
   struct i2o_controller *iop ;
   unsigned int lun ;
   struct i2o_device *channel[0U] ;
};
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
void __builtin_prefetch(void const   *  , ...) ;
long ldv__builtin_expect(long exp , long c ) ;
extern int printk(char const   *  , ...) ;
extern void *__memcpy(void * , void const   * , size_t  ) ;
extern int sysfs_create_link(struct kobject * , struct kobject * , char const   * ) ;
extern void sysfs_remove_link(struct kobject * , char const   * ) ;
__inline static void *ERR_PTR(long error ) 
{ 


  {
  return ((void *)error);
}
}
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
  return ((long )ptr);
}
}
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
  tmp = ldv__builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
  return (tmp);
}
}
__inline static __u32 __readl(void const volatile   *addr ) 
{ 


  {
  return ((__u32 )*((__u32 volatile   *)addr));
}
}
__inline static void __writel(__u32 b , void volatile   *addr ) 
{ 


  {
  *((__u32 volatile   *)addr) = b;
  return;
}
}
extern void __memcpy_toio(unsigned long  , void const   * , unsigned int  ) ;
__inline static void memcpy_toio(void volatile   *to , void const   *from , unsigned int len ) 
{ 


  {
  __memcpy_toio((unsigned long )to, from, len);
  return;
}
}
__inline static int valid_dma_direction(int dma_direction ) 
{ 


  {
  return ((dma_direction == 0 || dma_direction == 1) || dma_direction == 2);
}
}
__inline static struct scatterlist *sg_next(struct scatterlist *sg ) 
{ 
  long tmp ;
  long tmp___0 ;

  {
  tmp = ldv__builtin_expect(sg->sg_magic != 2271560481UL, 0L);
  if (tmp != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (122), "i" (24UL));
    ldv_17179: ;
    goto ldv_17179;
  } else {

  }
  if ((sg->page_link & 2UL) != 0UL) {
    return (0);
  } else {

  }
  sg = sg + 1;
  tmp___0 = ldv__builtin_expect((long )((int )sg->page_link) & 1L, 0L);
  if (tmp___0 != 0L) {
    sg = (struct scatterlist *)(sg->page_link & 0xfffffffffffffffcUL);
  } else {

  }
  return (sg);
}
}
extern struct dma_mapping_ops  const  *dma_ops ;
__inline static int dma_map_sg(struct device *hwdev , struct scatterlist *sg , int nents ,
                               int direction ) 
{ 
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  tmp = valid_dma_direction(direction);
  tmp___0 = ldv__builtin_expect(tmp == 0, 0L);
  if (tmp___0 != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/asm/dma-mapping_64.h"),
                         "i" (168), "i" (24UL));
    ldv_17451: ;
    goto ldv_17451;
  } else {

  }
  tmp___1 = (*(dma_ops->map_sg))(hwdev, sg, nents, direction);
  return (tmp___1);
}
}
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
extern void mempool_free(void * , mempool_t * ) ;
__inline static struct i2o_message *i2o_msg_get(struct i2o_controller *c ) ;
extern struct i2o_message *i2o_msg_get_wait(struct i2o_controller * , int  ) ;
__inline static void i2o_msg_post(struct i2o_controller *c , struct i2o_message *msg ) ;
__inline static int i2o_msg_post_wait(struct i2o_controller *c , struct i2o_message *msg ,
                                      unsigned long timeout ) ;
extern int i2o_msg_post_wait_mem(struct i2o_controller * , struct i2o_message * ,
                                 unsigned long  , struct i2o_dma * ) ;
extern struct i2o_device *i2o_iop_find_device(struct i2o_controller * , u16  ) ;
extern u32 i2o_cntxt_list_add(struct i2o_controller * , void * ) ;
extern void *i2o_cntxt_list_get(struct i2o_controller * , u32  ) ;
extern u32 i2o_cntxt_list_get_ptr(struct i2o_controller * , void * ) ;
__inline static u32 i2o_dma_low(dma_addr_t dma_addr ) 
{ 


  {
  return ((u32 )dma_addr);
}
}
__inline static u32 i2o_dma_high(dma_addr_t dma_addr ) 
{ 


  {
  return ((u32 )(dma_addr >> 32));
}
}
__inline static u16 i2o_sg_tablesize(struct i2o_controller *c , u16 body_size ) 
{ 
  i2o_status_block *sb ;
  u16 sg_count ;

  {
  sb = (i2o_status_block *)c->status_block.virt;
  sg_count = (unsigned int )((int )sb->inbound_frame_size - (int )body_size) - 4U;
  if ((unsigned int )*((unsigned char *)c + 32UL) != 0U) {
    sg_count = (unsigned int )sg_count + 65534U;
    sg_count = (u16 )((unsigned int )sg_count / 3U);
  } else {
    sg_count = (u16 )((unsigned int )sg_count / 2U);
  }
  if ((unsigned int )*((unsigned char *)c + 32UL) != 0U && (unsigned int )sg_count > 8U) {
    sg_count = 8U;
  } else {

  }
  return (sg_count);
}
}
__inline static int i2o_dma_map_sg(struct i2o_controller *c , struct scatterlist *sg ,
                                   int sg_count , enum dma_data_direction direction ,
                                   u32 **sg_ptr ) 
{ 
  u32 sg_flags ;
  u32 *mptr ;
  u32 *tmp ;
  u32 *tmp___0 ;
  u32 *tmp___1 ;
  u32 *tmp___2 ;
  u32 *tmp___3 ;
  int tmp___4 ;

  {
  mptr = *sg_ptr;
  switch ((unsigned int )direction) {
  case 1U: 
  sg_flags = 335544320U;
  goto ldv_19858;
  case 2U: 
  sg_flags = 268435456U;
  goto ldv_19858;
  default: ;
  return (0);
  }
  ldv_19858: 
  sg_count = dma_map_sg(& (c->pdev)->dev, sg, sg_count, (int )direction);
  if (sg_count == 0) {
    return (0);
  } else {

  }
  if ((unsigned int )*((unsigned char *)c + 32UL) != 0U) {
    tmp = mptr;
    mptr = mptr + 1;
    *tmp = 2080505858U;
    tmp___0 = mptr;
    mptr = mptr + 1;
    *tmp___0 = 4096U;
  } else {

  }
  goto ldv_19862;
  ldv_19861: ;
  if (sg_count == 0) {
    sg_flags = sg_flags | 3221225472U;
  } else {

  }
  tmp___1 = mptr;
  mptr = mptr + 1;
  *tmp___1 = sg->dma_length | sg_flags;
  tmp___2 = mptr;
  mptr = mptr + 1;
  *tmp___2 = i2o_dma_low(sg->dma_address);
  if ((unsigned int )*((unsigned char *)c + 32UL) != 0U) {
    tmp___3 = mptr;
    mptr = mptr + 1;
    *tmp___3 = i2o_dma_high(sg->dma_address);
  } else {

  }
  sg = sg_next(sg);
  ldv_19862: 
  tmp___4 = sg_count;
  sg_count = sg_count - 1;
  if (tmp___4 > 0) {
    goto ldv_19861;
  } else {

  }
  *sg_ptr = mptr;
  return (1);
}
}
extern int i2o_driver_register(struct i2o_driver * ) ;
extern void i2o_driver_unregister(struct i2o_driver * ) ;
__inline static struct i2o_message *i2o_msg_in_to_virt(struct i2o_controller *c ,
                                                       u32 m ) 
{ 


  {
  return ((struct i2o_message *)c->in_queue.virt + (unsigned long )m);
}
}
__inline static struct i2o_message *i2o_msg_get(struct i2o_controller *c ) 
{ 
  struct i2o_msg_mfa *mmsg ;
  void *tmp ;
  void *tmp___0 ;
  u32 mfa ;
  void *tmp___1 ;
  void *tmp___2 ;
  long tmp___3 ;

  {
  tmp = mempool_alloc(c->in_msg.mempool, 32U);
  mmsg = (struct i2o_msg_mfa *)tmp;
  if ((unsigned long )mmsg == (unsigned long )((struct i2o_msg_mfa *)0)) {
    tmp___0 = ERR_PTR(-12L);
    return ((struct i2o_message *)tmp___0);
  } else {

  }
  mmsg->mfa = __readl((void const volatile   *)c->in_port);
  tmp___3 = ldv__builtin_expect((unsigned long )mmsg->mfa >= c->in_queue.len, 0L);
  if (tmp___3 != 0L) {
    mfa = mmsg->mfa;
    mempool_free((void *)mmsg, c->in_msg.mempool);
    if (mfa == 4294967295U) {
      tmp___1 = ERR_PTR(-16L);
      return ((struct i2o_message *)tmp___1);
    } else {

    }
    tmp___2 = ERR_PTR(-14L);
    return ((struct i2o_message *)tmp___2);
  } else {

  }
  return (& mmsg->msg);
}
}
__inline static void i2o_msg_post(struct i2o_controller *c , struct i2o_message *msg ) 
{ 
  struct i2o_msg_mfa *mmsg ;
  struct i2o_message  const  *__mptr ;
  struct i2o_message *tmp ;

  {
  __mptr = (struct i2o_message  const  *)msg;
  mmsg = (struct i2o_msg_mfa *)__mptr + 0xfffffffffffffffcUL;
  tmp = i2o_msg_in_to_virt(c, mmsg->mfa);
  memcpy_toio((void volatile   *)tmp, (void const   *)msg, (msg->u.head[0] >> 16) << 2);
  __writel(mmsg->mfa, (void volatile   *)c->in_port);
  mempool_free((void *)mmsg, c->in_msg.mempool);
  return;
}
}
__inline static int i2o_msg_post_wait(struct i2o_controller *c , struct i2o_message *msg ,
                                      unsigned long timeout ) 
{ 
  int tmp ;

  {
  tmp = i2o_msg_post_wait_mem(c, msg, timeout, 0);
  return (tmp);
}
}
__inline static void i2o_msg_nop_mfa(struct i2o_controller *c , u32 mfa ) 
{ 
  struct i2o_message *msg ;
  u32 nop[3U] ;

  {
  nop[0] = 196609U;
  nop[1] = 4096U;
  nop[2] = 0U;
  msg = i2o_msg_in_to_virt(c, mfa);
  memcpy_toio((void volatile   *)msg, (void const   *)(& nop), 12U);
  __writel(mfa, (void volatile   *)c->in_port);
  return;
}
}
__inline static void i2o_msg_nop(struct i2o_controller *c , struct i2o_message *msg ) 
{ 
  struct i2o_msg_mfa *mmsg ;
  struct i2o_message  const  *__mptr ;

  {
  __mptr = (struct i2o_message  const  *)msg;
  mmsg = (struct i2o_msg_mfa *)__mptr + 0xfffffffffffffffcUL;
  i2o_msg_nop_mfa(c, mmsg->mfa);
  mempool_free((void *)mmsg, c->in_msg.mempool);
  return;
}
}
extern int i2o_parm_field_get(struct i2o_device * , int  , int  , void * , int  ) ;
extern struct Scsi_Host *scsi_host_alloc(struct scsi_host_template * , int  ) ;
extern int scsi_add_host(struct Scsi_Host * , struct device * ) ;
extern void scsi_remove_host(struct Scsi_Host * ) ;
extern void scsi_host_put(struct Scsi_Host * ) ;
extern struct scsi_device *__scsi_add_device(struct Scsi_Host * , uint  , uint  ,
                                             uint  , void * ) ;
extern void scsi_remove_device(struct scsi_device * ) ;
extern void scsi_device_put(struct scsi_device * ) ;
extern struct scsi_device *__scsi_iterate_devices(struct Scsi_Host * , struct scsi_device * ) ;
extern void scsi_dma_unmap(struct scsi_cmnd * ) ;
static struct i2o_driver i2o_scsi_driver ;
static unsigned int i2o_scsi_max_id  =    16U;
static unsigned int i2o_scsi_max_lun  =    255U;
static struct scsi_host_template i2o_scsi_host_template ;
static struct i2o_class_id i2o_scsi_class_id[2U]  = {      {81U}, 
        {4095U}};
static struct i2o_scsi_host *i2o_scsi_host_alloc(struct i2o_controller *c ) 
{ 
  struct i2o_scsi_host *i2o_shost ;
  struct i2o_device *i2o_dev ;
  struct Scsi_Host *scsi_host ;
  int max_channel ;
  u8 type ;
  int i ;
  size_t size ;
  u16 body_size ;
  struct list_head  const  *__mptr ;
  int tmp ;
  struct list_head  const  *__mptr___0 ;
  void *tmp___0 ;
  void *tmp___1 ;
  struct list_head  const  *__mptr___1 ;
  int tmp___2 ;
  int tmp___3 ;
  struct list_head  const  *__mptr___2 ;

  {
  max_channel = 0;
  body_size = 6U;
  if ((unsigned int )*((unsigned char *)c + 32UL) != 0U) {
    body_size = 8U;
  } else {

  }
  __mptr = (struct list_head  const  *)c->devices.next;
  i2o_dev = (struct i2o_device *)__mptr + 0xffffffffffffffd0UL;
  goto ldv_20793;
  ldv_20792: ;
  if ((unsigned int )*((unsigned short *)i2o_dev + 6UL) == 128U) {
    tmp = i2o_parm_field_get(i2o_dev, 0, 0, (void *)(& type), 1);
    if (tmp == 0 && (unsigned int )type == 1U) {
      max_channel = max_channel + 1;
    } else {

    }
  } else {

  }
  __mptr___0 = (struct list_head  const  *)i2o_dev->list.next;
  i2o_dev = (struct i2o_device *)__mptr___0 + 0xffffffffffffffd0UL;
  ldv_20793: 
  __builtin_prefetch((void const   *)i2o_dev->list.next);
  if ((unsigned long )(& i2o_dev->list) != (unsigned long )(& c->devices)) {
    goto ldv_20792;
  } else {

  }

  if (max_channel == 0) {
    printk("<4>%s: no channels found on %s\n", (char *)"scsi-osm", (char *)(& c->name));
    tmp___0 = ERR_PTR(-14L);
    return ((struct i2o_scsi_host *)tmp___0);
  } else {

  }
  size = ((unsigned long )max_channel + 3UL) * 8UL;
  scsi_host = scsi_host_alloc(& i2o_scsi_host_template, (int )size);
  if ((unsigned long )scsi_host == (unsigned long )((struct Scsi_Host *)0)) {
    printk("<4>%s: Could not allocate SCSI host\n", (char *)"scsi-osm");
    tmp___1 = ERR_PTR(-12L);
    return ((struct i2o_scsi_host *)tmp___1);
  } else {

  }
  scsi_host->max_channel = (unsigned int )(max_channel + -1);
  scsi_host->max_id = i2o_scsi_max_id;
  scsi_host->max_lun = i2o_scsi_max_lun;
  scsi_host->this_id = c->unit;
  scsi_host->sg_tablesize = i2o_sg_tablesize(c, (int )body_size);
  i2o_shost = (struct i2o_scsi_host *)(& scsi_host->hostdata);
  i2o_shost->scsi_host = scsi_host;
  i2o_shost->iop = c;
  i2o_shost->lun = 1U;
  i = 0;
  __mptr___1 = (struct list_head  const  *)c->devices.next;
  i2o_dev = (struct i2o_device *)__mptr___1 + 0xffffffffffffffd0UL;
  goto ldv_20801;
  ldv_20800: ;
  if ((unsigned int )*((unsigned short *)i2o_dev + 6UL) == 128U) {
    tmp___3 = i2o_parm_field_get(i2o_dev, 0, 0, (void *)(& type), 1);
    if (tmp___3 == 0 && (unsigned int )type == 1U) {
      tmp___2 = i;
      i = i + 1;
      i2o_shost->channel[tmp___2] = i2o_dev;
    } else {

    }
    if (i >= max_channel) {
      goto ldv_20799;
    } else {

    }
  } else {

  }
  __mptr___2 = (struct list_head  const  *)i2o_dev->list.next;
  i2o_dev = (struct i2o_device *)__mptr___2 + 0xffffffffffffffd0UL;
  ldv_20801: 
  __builtin_prefetch((void const   *)i2o_dev->list.next);
  if ((unsigned long )(& i2o_dev->list) != (unsigned long )(& c->devices)) {
    goto ldv_20800;
  } else {

  }
  ldv_20799: ;
  return (i2o_shost);
}
}
static struct i2o_scsi_host *i2o_scsi_get_host(struct i2o_controller *c ) 
{ 


  {
  return ((struct i2o_scsi_host *)c->driver_data[i2o_scsi_driver.context]);
}
}
static int i2o_scsi_remove(struct device *dev ) 
{ 
  struct i2o_device *i2o_dev ;
  struct device  const  *__mptr ;
  struct i2o_controller *c ;
  struct i2o_scsi_host *i2o_shost ;
  struct scsi_device *scsi_dev ;

  {
  __mptr = (struct device  const  *)dev;
  i2o_dev = (struct i2o_device *)__mptr + 0xffffffffffffffc0UL;
  c = i2o_dev->iop;
  printk("<6>%s: device removed (TID: %03x)\n", (char *)"scsi-osm", (int )i2o_dev->lct_data.tid);
  i2o_shost = i2o_scsi_get_host(c);
  scsi_dev = __scsi_iterate_devices(i2o_shost->scsi_host, 0);
  goto ldv_20816;
  ldv_20815: ;
  if ((unsigned long )scsi_dev->hostdata == (unsigned long )((void *)i2o_dev)) {
    sysfs_remove_link(& i2o_dev->device.kobj, "scsi");
    scsi_remove_device(scsi_dev);
    scsi_device_put(scsi_dev);
    goto ldv_20814;
  } else {

  }
  scsi_dev = __scsi_iterate_devices(i2o_shost->scsi_host, scsi_dev);
  ldv_20816: ;
  if ((unsigned long )scsi_dev != (unsigned long )((struct scsi_device *)0)) {
    goto ldv_20815;
  } else {

  }
  ldv_20814: ;
  return (0);
}
}
static int i2o_scsi_probe(struct device *dev ) 
{ 
  struct i2o_device *i2o_dev ;
  struct device  const  *__mptr ;
  struct i2o_controller *c ;
  struct i2o_scsi_host *i2o_shost ;
  struct Scsi_Host *scsi_host ;
  struct i2o_device *parent ;
  struct scsi_device *scsi_dev ;
  u32 id ;
  u64 lun ;
  int channel ;
  int i ;
  int rc ;
  u8 type ;
  struct i2o_device *d ;
  unsigned int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;

  {
  __mptr = (struct device  const  *)dev;
  i2o_dev = (struct i2o_device *)__mptr + 0xffffffffffffffc0UL;
  c = i2o_dev->iop;
  id = 4294967295U;
  lun = 0xffffffffffffffffULL;
  channel = -1;
  i2o_shost = i2o_scsi_get_host(c);
  if ((unsigned long )i2o_shost == (unsigned long )((struct i2o_scsi_host *)0)) {
    return (-14);
  } else {

  }
  scsi_host = i2o_shost->scsi_host;
  switch ((int )i2o_dev->lct_data.class_id) {
  case 16: ;
  case 0: ;
  if ((unsigned int )*((unsigned char *)c + 32UL) != 0U) {
    d = i2o_shost->channel[0];
    tmp___1 = i2o_parm_field_get(d, 0, 0, (void *)(& type), 1);
    if (tmp___1 == 0 && (unsigned int )type == 1U) {
      tmp___0 = i2o_parm_field_get(d, 512, 4, (void *)(& id), 4);
      if (tmp___0 == 0) {
        channel = 0;
        if ((unsigned int )*((unsigned short *)i2o_dev + 6UL) == 16U) {
          tmp = i2o_shost->lun;
          i2o_shost->lun = i2o_shost->lun + 1U;
          lun = (unsigned long long )tmp;
        } else {
          lun = 0ULL;
        }
      } else {

      }
    } else {

    }
  } else {

  }
  goto ldv_20837;
  case 81: 
  tmp___2 = i2o_parm_field_get(i2o_dev, 0, 3, (void *)(& id), 4);
  if (tmp___2 != 0) {
    return (-14);
  } else {

  }
  tmp___3 = i2o_parm_field_get(i2o_dev, 0, 4, (void *)(& lun), 8);
  if (tmp___3 != 0) {
    return (-14);
  } else {

  }
  parent = i2o_iop_find_device(c, (int )i2o_dev->lct_data.parent_tid);
  if ((unsigned long )parent == (unsigned long )((struct i2o_device *)0)) {
    printk("<4>%s: can not find parent of device %03x\n", (char *)"scsi-osm", (int )i2o_dev->lct_data.tid);
    return (-14);
  } else {

  }
  i = 0;
  goto ldv_20840;
  ldv_20839: ;
  if ((unsigned long )i2o_shost->channel[i] == (unsigned long )parent) {
    channel = i;
  } else {

  }
  i = i + 1;
  ldv_20840: ;
  if ((unsigned int )i <= (i2o_shost->scsi_host)->max_channel) {
    goto ldv_20839;
  } else {

  }

  goto ldv_20837;
  default: ;
  return (-14);
  }
  ldv_20837: ;
  if (channel == -1) {
    printk("<4>%s: can not find channel of device %03x\n", (char *)"scsi-osm", (int )i2o_dev->lct_data.tid);
    return (-14);
  } else {

  }
  if (scsi_host->max_id <= id) {
    printk("<4>%s: SCSI device id (%d) >= max_id of I2O host (%d)", (char *)"scsi-osm",
           id, scsi_host->max_id);
    return (-14);
  } else {

  }
  if ((u64 )scsi_host->max_lun <= lun) {
    printk("<4>%s: SCSI device lun (%lu) >= max_lun of I2O host (%d)", (char *)"scsi-osm",
           (unsigned long )lun, scsi_host->max_lun);
    return (-14);
  } else {

  }
  scsi_dev = __scsi_add_device(i2o_shost->scsi_host, (uint )channel, id, (uint )lun,
                               (void *)i2o_dev);
  tmp___5 = IS_ERR((void const   *)scsi_dev);
  if (tmp___5 != 0L) {
    printk("<4>%s: can not add SCSI device %03x\n", (char *)"scsi-osm", (int )i2o_dev->lct_data.tid);
    tmp___4 = PTR_ERR((void const   *)scsi_dev);
    return ((int )tmp___4);
  } else {

  }
  rc = sysfs_create_link(& i2o_dev->device.kobj, & scsi_dev->sdev_gendev.kobj, "scsi");
  if (rc != 0) {
    goto err;
  } else {

  }
  printk("<6>%s: device added (TID: %03x) channel: %d, id: %d, lun: %ld\n", (char *)"scsi-osm",
         (int )i2o_dev->lct_data.tid, channel, id, (unsigned long )lun);
  return (0);
  err: 
  scsi_remove_device(scsi_dev);
  return (rc);
}
}
static char const   *i2o_scsi_info(struct Scsi_Host *SChost ) 
{ 
  struct i2o_scsi_host *hostdata ;

  {
  hostdata = (struct i2o_scsi_host *)(& SChost->hostdata);
  return ((char const   *)(& (hostdata->iop)->name));
}
}
static int i2o_scsi_reply(struct i2o_controller *c , u32 m , struct i2o_message *msg ) 
{ 
  struct scsi_cmnd *cmd ;
  u32 error ;
  struct device *dev ;
  void *tmp ;
  long tmp___0 ;
  size_t __len ;
  int _x ;
  int _y ;
  void *__ret ;

  {
  tmp = i2o_cntxt_list_get(c, msg->u.s.tcntxt);
  cmd = (struct scsi_cmnd *)tmp;
  tmp___0 = ldv__builtin_expect((unsigned long )cmd == (unsigned long )((struct scsi_cmnd *)0),
                             0L);
  if (tmp___0 != 0L) {
    printk("<3>%s: NULL reply received!\n", (char *)"scsi-osm");
    return (-1);
  } else {

  }
  error = msg->body[0];
  cmd->result = (int )error & 255;
  if (cmd->result != 0) {
    _x = 96;
    _y = 40;
    __len = (size_t )(_x < _y ? _x : _y);
    __ret = __builtin_memcpy((void *)(& cmd->sense_buffer), (void const   *)(& msg->body) + 3U,
                             __len);
  } else {

  }
  if (((error >> 8) & 255U) != 0U) {
    printk("<3>%s: SCSI error %08x\n", (char *)"scsi-osm", error);
  } else {

  }
  dev = & (c->pdev)->dev;
  scsi_dma_unmap(cmd);
  (*(cmd->scsi_done))(cmd);
  return (1);
}
}
static void i2o_scsi_notify_device_add(struct i2o_device *i2o_dev ) 
{ 


  {
  switch ((int )i2o_dev->lct_data.class_id) {
  case 0: ;
  case 16: 
  i2o_scsi_probe(& i2o_dev->device);
  goto ldv_20870;
  default: ;
  goto ldv_20870;
  }
  ldv_20870: ;
  return;
}
}
static void i2o_scsi_notify_device_remove(struct i2o_device *i2o_dev ) 
{ 


  {
  switch ((int )i2o_dev->lct_data.class_id) {
  case 0: ;
  case 16: 
  i2o_scsi_remove(& i2o_dev->device);
  goto ldv_20877;
  default: ;
  goto ldv_20877;
  }
  ldv_20877: ;
  return;
}
}
static void i2o_scsi_notify_controller_add(struct i2o_controller *c ) 
{ 
  struct i2o_scsi_host *i2o_shost ;
  int rc ;
  long tmp ;

  {
  i2o_shost = i2o_scsi_host_alloc(c);
  tmp = IS_ERR((void const   *)i2o_shost);
  if (tmp != 0L) {
    printk("<3>%s: Could not initialize SCSI host\n", (char *)"scsi-osm");
    return;
  } else {

  }
  rc = scsi_add_host(i2o_shost->scsi_host, & c->device);
  if (rc != 0) {
    printk("<3>%s: Could not add SCSI host\n", (char *)"scsi-osm");
    scsi_host_put(i2o_shost->scsi_host);
    return;
  } else {

  }
  c->driver_data[i2o_scsi_driver.context] = (void *)i2o_shost;
  return;
}
}
static void i2o_scsi_notify_controller_remove(struct i2o_controller *c ) 
{ 
  struct i2o_scsi_host *i2o_shost ;

  {
  i2o_shost = i2o_scsi_get_host(c);
  if ((unsigned long )i2o_shost == (unsigned long )((struct i2o_scsi_host *)0)) {
    return;
  } else {

  }
  c->driver_data[i2o_scsi_driver.context] = 0;
  scsi_remove_host(i2o_shost->scsi_host);
  scsi_host_put(i2o_shost->scsi_host);
  return;
}
}
static struct i2o_driver i2o_scsi_driver  = 
     {(char *)"scsi-osm", 0, (struct i2o_class_id *)(& i2o_scsi_class_id), & i2o_scsi_reply,
    0, 0, {0, 0, {0, {{0}}, {0, 0}, 0, 0, 0, 0}, {{{0U}, 0U, 0U, 0, {0, 0, 0, 0}},
                                                  {0, 0}, 0, 0}, {0, {0, 0}, {{0}},
                                                                  {0U, {{{0U}, 0U,
                                                                         0U, 0, {0,
                                                                                 0,
                                                                                 0,
                                                                                 0}},
                                                                        {0, 0}}}},
           0, 0, 0, & i2o_scsi_probe, & i2o_scsi_remove, 0, 0, 0}, & i2o_scsi_notify_controller_add,
    & i2o_scsi_notify_controller_remove, & i2o_scsi_notify_device_add, & i2o_scsi_notify_device_remove,
    {{0}, 0, {{{0U}, 0U, 0U, 0, {0, 0, 0, 0}}, {0, 0}}}};
static int i2o_scsi_queuecommand(struct scsi_cmnd *SCpnt , void (*done)(struct scsi_cmnd * ) ) 
{ 
  struct i2o_controller *c ;
  struct i2o_device *i2o_dev ;
  int tid ;
  struct i2o_message *msg ;
  u32 scsi_flags ;
  u32 sgl_offset ;
  u32 *mptr ;
  u32 cmd ;
  int rc ;
  long tmp ;
  long tmp___0 ;
  u32 *tmp___1 ;
  size_t __len ;
  void *__ret ;
  u32 *tmp___2 ;
  int tmp___3 ;

  {
  scsi_flags = 547356672U;
  cmd = 2164260864U;
  rc = 0;
  i2o_dev = (struct i2o_device *)(SCpnt->device)->hostdata;
  c = i2o_dev->iop;
  SCpnt->scsi_done = done;
  tmp = ldv__builtin_expect((unsigned long )i2o_dev == (unsigned long )((struct i2o_device *)0),
                         0L);
  if (tmp != 0L) {
    printk("<4>%s: no I2O device in request\n", (char *)"scsi-osm");
    SCpnt->result = 65536;
    (*done)(SCpnt);
    goto exit;
  } else {

  }
  tid = (int )i2o_dev->lct_data.tid;
  switch ((unsigned int )SCpnt->sc_data_direction) {
  case 3U: 
  sgl_offset = 1U;
  goto ldv_20905;
  case 1U: 
  scsi_flags = scsi_flags | 2147483648U;
  sgl_offset = 161U;
  goto ldv_20905;
  case 2U: 
  scsi_flags = scsi_flags | 1073741824U;
  sgl_offset = 161U;
  goto ldv_20905;
  default: 
  SCpnt->result = 65536;
  (*done)(SCpnt);
  goto exit;
  }
  ldv_20905: 
  msg = i2o_msg_get(c);
  tmp___0 = IS_ERR((void const   *)msg);
  if (tmp___0 != 0L) {
    rc = 4181;
    goto exit;
  } else {

  }
  mptr = (u32 *)(& msg->body);
  msg->u.head[1] = (cmd | (u32 )tid) | 4096U;
  msg->u.s.icntxt = (unsigned int )i2o_scsi_driver.context;
  msg->u.s.tcntxt = i2o_cntxt_list_add(c, (void *)SCpnt);
  tmp___1 = mptr;
  mptr = mptr + 1;
  *tmp___1 = (u32 )SCpnt->cmd_len | scsi_flags;
  __len = 16UL;
  if (__len > 63UL) {
    __ret = __memcpy((void *)mptr, (void const   *)(& SCpnt->cmnd), __len);
  } else {
    __ret = __builtin_memcpy((void *)mptr, (void const   *)(& SCpnt->cmnd), __len);
  }
  mptr = mptr + 4UL;
  if (sgl_offset != 1U) {
    tmp___2 = mptr;
    mptr = mptr + 1;
    *tmp___2 = SCpnt->request_bufflen;
    if ((unsigned int )SCpnt->use_sg != 0U) {
      tmp___3 = i2o_dma_map_sg(c, (struct scatterlist *)SCpnt->request_buffer, (int )SCpnt->use_sg,
                               SCpnt->sc_data_direction, & mptr);
      if (tmp___3 == 0) {
        goto nomem;
      } else {

      }
    } else {

    }
  } else {

  }
  msg->u.head[0] = (unsigned int )((int )(((long )mptr - (long )(& msg->u.head)) / 4L << 16) | (int )sgl_offset);
  i2o_msg_post(c, msg);
  return (0);
  nomem: 
  rc = -12;
  i2o_msg_nop(c, msg);
  exit: ;
  return (rc);
}
}
static int i2o_scsi_abort(struct scsi_cmnd *SCpnt ) 
{ 
  struct i2o_device *i2o_dev ;
  struct i2o_controller *c ;
  struct i2o_message *msg ;
  int tid ;
  int status ;
  long tmp ;
  int tmp___0 ;

  {
  status = 8195;
  printk("<4>%s: Aborting command block.\n", (char *)"scsi-osm");
  i2o_dev = (struct i2o_device *)(SCpnt->device)->hostdata;
  c = i2o_dev->iop;
  tid = (int )i2o_dev->lct_data.tid;
  msg = i2o_msg_get_wait(c, 5);
  tmp = IS_ERR((void const   *)msg);
  if (tmp != 0L) {
    return (4181);
  } else {

  }
  msg->u.head[0] = 327681U;
  msg->u.head[1] = (unsigned int )(tid | -2097147904);
  msg->body[0] = i2o_cntxt_list_get_ptr(c, (void *)SCpnt);
  tmp___0 = i2o_msg_post_wait(c, msg, 240UL);
  if (tmp___0 == 0) {
    status = 8194;
  } else {

  }
  return (status);
}
}
static int i2o_scsi_bios_param(struct scsi_device *sdev , struct block_device *dev ,
                               sector_t capacity , int *ip ) 
{ 
  int size ;
  int tmp ;

  {
  size = (int )capacity;
  *ip = 64;
  *(ip + 1UL) = 32;
  tmp = size >> 11;
  *(ip + 2UL) = tmp;
  if (tmp > 1024) {
    *ip = 255;
    *(ip + 1UL) = 63;
    *(ip + 2UL) = size / 16065;
  } else {

  }
  return (0);
}
}
static struct scsi_host_template i2o_scsi_host_template  = 
     {0, "I2O SCSI Peripheral OSM", 0, 0, & i2o_scsi_info, 0, 0, & i2o_scsi_queuecommand,
    0, & i2o_scsi_abort, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, & i2o_scsi_bios_param,
    0, 0, "scsi-osm", 0, 4, 0, 8U, (unsigned short)0, 0UL, 6, (unsigned char)0, (unsigned char)0,
    (unsigned char)0, 1U, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
    0U, 0, 0, {0, 0}};
static int i2o_scsi_init(void) 
{ 
  int rc ;

  {
  printk("<6>I2O SCSI Peripheral OSM v1.316\n");
  rc = i2o_driver_register(& i2o_scsi_driver);
  if (rc != 0) {
    printk("<3>%s: Could not register SCSI driver\n", (char *)"scsi-osm");
    return (rc);
  } else {

  }
  return (0);
}
}
static void i2o_scsi_exit(void) 
{ 


  {
  i2o_driver_unregister(& i2o_scsi_driver);
  return;
}
}
void ldv_check_final_state(void) ;
extern void ldv_check_return_value(int  ) ;
extern void ldv_check_return_value_probe(int  ) ;
extern void ldv_initialize(void) ;
extern void ldv_handler_precall(void) ;
extern int nondet_int(void) ;
int LDV_IN_INTERRUPT  ;
int main(void) 
{ 
  struct i2o_controller *var_group1 ;
  u32 var_i2o_scsi_reply_5_p1 ;
  struct i2o_message *var_i2o_scsi_reply_5_p2 ;
  struct i2o_device *var_group2 ;
  struct device *var_group3 ;
  int res_i2o_scsi_probe_3 ;
  struct Scsi_Host *var_group4 ;
  struct scsi_cmnd *var_group5 ;
  struct scsi_device *var_group6 ;
  struct block_device *var_group7 ;
  sector_t var_i2o_scsi_bios_param_11_p2 ;
  int *var_i2o_scsi_bios_param_11_p3 ;
  int ldv_s_i2o_scsi_driver_i2o_driver ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  ldv_s_i2o_scsi_driver_i2o_driver = 0;
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  ldv_handler_precall();
  tmp = i2o_scsi_init();
  if (tmp != 0) {
    goto ldv_final;
  } else {

  }
  goto ldv_20994;
  ldv_20993: 
  tmp___0 = nondet_int();
  switch (tmp___0) {
  case 0: ;
  if (ldv_s_i2o_scsi_driver_i2o_driver == 0) {
    res_i2o_scsi_probe_3 = i2o_scsi_probe(var_group3);
    ldv_check_return_value(res_i2o_scsi_probe_3);
    ldv_check_return_value_probe(res_i2o_scsi_probe_3);
    if (res_i2o_scsi_probe_3 != 0) {
      goto ldv_module_exit;
    } else {

    }
    ldv_s_i2o_scsi_driver_i2o_driver = ldv_s_i2o_scsi_driver_i2o_driver + 1;
  } else {

  }
  goto ldv_20982;
  case 1: ;
  if (ldv_s_i2o_scsi_driver_i2o_driver == 1) {
    ldv_handler_precall();
    i2o_scsi_remove(var_group3);
    ldv_s_i2o_scsi_driver_i2o_driver = 0;
  } else {

  }
  goto ldv_20982;
  case 2: 
  ldv_handler_precall();
  i2o_scsi_reply(var_group1, var_i2o_scsi_reply_5_p1, var_i2o_scsi_reply_5_p2);
  goto ldv_20982;
  case 3: 
  ldv_handler_precall();
  i2o_scsi_notify_device_add(var_group2);
  goto ldv_20982;
  case 4: 
  ldv_handler_precall();
  i2o_scsi_notify_device_remove(var_group2);
  goto ldv_20982;
  case 5: 
  ldv_handler_precall();
  i2o_scsi_notify_controller_add(var_group1);
  goto ldv_20982;
  case 6: 
  ldv_handler_precall();
  i2o_scsi_notify_controller_remove(var_group1);
  goto ldv_20982;
  case 7: 
  ldv_handler_precall();
  i2o_scsi_info(var_group4);
  goto ldv_20982;
  case 8: 
  ldv_handler_precall();
  i2o_scsi_abort(var_group5);
  goto ldv_20982;
  case 9: 
  ldv_handler_precall();
  i2o_scsi_bios_param(var_group6, var_group7, var_i2o_scsi_bios_param_11_p2, var_i2o_scsi_bios_param_11_p3);
  goto ldv_20982;
  default: ;
  goto ldv_20982;
  }
  ldv_20982: ;
  ldv_20994: 
  tmp___1 = nondet_int();
  if (tmp___1 != 0 || ldv_s_i2o_scsi_driver_i2o_driver != 0) {
    goto ldv_20993;
  } else {

  }

  ldv_module_exit: 
  ldv_handler_precall();
  i2o_scsi_exit();
  ldv_final: 
  ldv_check_final_state();
  return 0;
}
}
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: __VERIFIER_error();
}
}
extern int ldv_undef_int(void) ;
long ldv__builtin_expect(long exp , long c ) 
{ 


  {
  return (exp);
}
}
int ldv_module_refcounter  =    1;
void ldv_module_get(struct module *module ) 
{ 


  {
  if (module) {
    ldv_module_refcounter = ldv_module_refcounter + 1;
  } else {

  }
  return;
}
}
int ldv_try_module_get(struct module *module ) 
{ 
  int module_get_succeeded ;

  {
  if (module) {
    module_get_succeeded = ldv_undef_int();
    if (module_get_succeeded == 1) {
      ldv_module_refcounter = ldv_module_refcounter + 1;
      return (1);
    } else {
      return (0);
    }
  } else {

  }
  return (0);
}
}
void ldv_module_put(struct module *module ) 
{ 


  {
  if (module) {
    if (ldv_module_refcounter > 1) {

    } else {
      ldv_error();
    }
    ldv_module_refcounter = ldv_module_refcounter - 1;
  } else {

  }
  return;
}
}
void ldv_module_put_and_exit(void) 
{ 


  {
  ldv_module_put((struct module *)1);
  LDV_STOP: 
  goto LDV_STOP;
}
}
unsigned int ldv_module_refcount(void) 
{ 


  {
  return (ldv_module_refcounter - 1);
}
}
void ldv_check_final_state(void) 
{ 


  {
  if (ldv_module_refcounter == 1) {

  } else {
    ldv_error();
  }
  return;
}
}
