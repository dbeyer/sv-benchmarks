extern void __VERIFIER_error() __attribute__ ((__noreturn__));

/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

struct __anonstruct____missing_field_name_2 {
   unsigned long correct ;
   unsigned long incorrect ;
};
struct __anonstruct____missing_field_name_3 {
   unsigned long miss ;
   unsigned long hit ;
};
union __anonunion____missing_field_name_1 {
   struct __anonstruct____missing_field_name_2 __annonCompField1 ;
   struct __anonstruct____missing_field_name_3 __annonCompField2 ;
   unsigned long miss_hit[2] ;
};
struct ftrace_branch_data {
   char const   *func ;
   char const   *file ;
   unsigned int line ;
   union __anonunion____missing_field_name_1 __annonCompField3 ;
};
typedef unsigned char __u8;
typedef unsigned short __u16;
typedef int __s32;
typedef unsigned int __u32;
typedef unsigned long long __u64;
typedef signed char s8;
typedef unsigned char u8;
typedef unsigned short u16;
typedef int s32;
typedef unsigned int u32;
typedef long long s64;
typedef unsigned long long u64;
typedef unsigned int __kernel_mode_t;
typedef int __kernel_pid_t;
typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;
typedef unsigned long __kernel_size_t;
typedef long __kernel_ssize_t;
typedef long __kernel_time_t;
typedef long __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef __kernel_uid_t __kernel_uid32_t;
typedef __kernel_gid_t __kernel_gid32_t;
typedef __u32 __kernel_dev_t;
typedef __kernel_dev_t dev_t;
typedef __kernel_mode_t mode_t;
typedef __kernel_pid_t pid_t;
typedef __kernel_clockid_t clockid_t;
typedef __kernel_uid32_t uid_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_size_t size_t;
typedef __kernel_ssize_t ssize_t;
typedef __kernel_time_t time_t;
typedef __s32 int32_t;
typedef __u32 uint32_t;
typedef unsigned int gfp_t;
struct __anonstruct_atomic_t_7 {
   int volatile   counter ;
};
typedef struct __anonstruct_atomic_t_7 atomic_t;
struct __anonstruct_atomic64_t_8 {
   long volatile   counter ;
};
typedef struct __anonstruct_atomic64_t_8 atomic64_t;
struct task_struct;
struct mm_struct;
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
union __anonunion____missing_field_name_9 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion____missing_field_name_9 __annonCompField4 ;
};
struct module;
typedef __builtin_va_list __gnuc_va_list;
typedef __gnuc_va_list va_list;
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
struct completion;
struct pid;
typedef unsigned long pgdval_t;
typedef unsigned long pgprotval_t;
struct pgprot {
   pgprotval_t pgprot ;
};
typedef struct pgprot pgprot_t;
struct __anonstruct_pgd_t_13 {
   pgdval_t pgd ;
};
typedef struct __anonstruct_pgd_t_13 pgd_t;
struct page;
struct file;
struct __anonstruct____missing_field_name_18 {
   unsigned int a ;
   unsigned int b ;
};
struct __anonstruct____missing_field_name_19 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int base1 : 8 ;
   unsigned int type : 4 ;
   unsigned int s : 1 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   unsigned int limit : 4 ;
   unsigned int avl : 1 ;
   unsigned int l : 1 ;
   unsigned int d : 1 ;
   unsigned int g : 1 ;
   unsigned int base2 : 8 ;
};
union __anonunion____missing_field_name_17 {
   struct __anonstruct____missing_field_name_18 __annonCompField6 ;
   struct __anonstruct____missing_field_name_19 __annonCompField7 ;
};
struct desc_struct {
   union __anonunion____missing_field_name_17 __annonCompField8 ;
} __attribute__((__packed__)) ;
struct cpumask {
   unsigned long bits[((4096UL + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
typedef struct cpumask cpumask_t;
struct thread_struct;
struct raw_spinlock;
struct ds_context;
struct bts_tracer;
struct exec_domain;
struct map_segment;
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u32 status ;
};
struct __anonstruct____missing_field_name_28 {
   u64 rip ;
   u64 rdp ;
};
struct __anonstruct____missing_field_name_29 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
union __anonunion____missing_field_name_27 {
   struct __anonstruct____missing_field_name_28 __annonCompField9 ;
   struct __anonstruct____missing_field_name_29 __annonCompField10 ;
};
union __anonunion____missing_field_name_30 {
   u32 padding1[12] ;
   u32 sw_reserved[12] ;
};
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion____missing_field_name_27 __annonCompField11 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32] ;
   u32 xmm_space[64] ;
   u32 padding[12] ;
   union __anonunion____missing_field_name_30 __annonCompField12 ;
} __attribute__((__aligned__(16))) ;
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2] ;
   u64 reserved2[5] ;
} __attribute__((__packed__)) ;
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
} __attribute__((__packed__, __aligned__(64))) ;
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
struct kmem_cache;
struct thread_struct {
   struct desc_struct tls_array[3] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long ip ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   struct ds_context *ds_ctx ;
   unsigned int bts_ovfl_signal ;
};
struct __anonstruct_mm_segment_t_32 {
   unsigned long seg ;
};
typedef struct __anonstruct_mm_segment_t_32 mm_segment_t;
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
struct hlist_node;
struct hlist_head {
   struct hlist_node *first ;
};
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
struct timespec;
struct compat_timespec;
struct __anonstruct____missing_field_name_34 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
struct __anonstruct_futex_35 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
};
struct __anonstruct_nanosleep_36 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
struct pollfd;
struct __anonstruct_poll_37 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
union __anonunion____missing_field_name_33 {
   struct __anonstruct____missing_field_name_34 __annonCompField14 ;
   struct __anonstruct_futex_35 futex ;
   struct __anonstruct_nanosleep_36 nanosleep ;
   struct __anonstruct_poll_37 poll ;
};
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion____missing_field_name_33 __annonCompField15 ;
};
typedef atomic64_t atomic_long_t;
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
struct raw_spinlock {
   unsigned int slock ;
};
typedef struct raw_spinlock raw_spinlock_t;
struct __anonstruct_raw_rwlock_t_38 {
   unsigned int lock ;
};
typedef struct __anonstruct_raw_rwlock_t_38 raw_rwlock_t;
struct lockdep_map;
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8UL] ;
};
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[1 + 3 * 4] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4] ;
   unsigned long contending_point[4] ;
};
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 2 ;
   unsigned int hardirqs_off : 1 ;
};
struct __anonstruct_spinlock_t_39 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
typedef struct __anonstruct_spinlock_t_39 spinlock_t;
struct __anonstruct_rwlock_t_40 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
typedef struct __anonstruct_rwlock_t_40 rwlock_t;
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
typedef struct __wait_queue_head wait_queue_head_t;
struct __anonstruct_nodemask_t_42 {
   unsigned long bits[(((unsigned long )(1 << 9) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
typedef struct __anonstruct_nodemask_t_42 nodemask_t;
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
struct rw_semaphore;
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
struct device;
struct pm_message {
   int event ;
};
typedef struct pm_message pm_message_t;
struct dev_pm_ops {
   int (*prepare)(struct device *dev ) ;
   void (*complete)(struct device *dev ) ;
   int (*suspend)(struct device *dev ) ;
   int (*resume)(struct device *dev ) ;
   int (*freeze)(struct device *dev ) ;
   int (*thaw)(struct device *dev ) ;
   int (*poweroff)(struct device *dev ) ;
   int (*restore)(struct device *dev ) ;
   int (*suspend_noirq)(struct device *dev ) ;
   int (*resume_noirq)(struct device *dev ) ;
   int (*freeze_noirq)(struct device *dev ) ;
   int (*thaw_noirq)(struct device *dev ) ;
   int (*poweroff_noirq)(struct device *dev ) ;
   int (*restore_noirq)(struct device *dev ) ;
};
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
};
struct __anonstruct_mm_context_t_91 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
typedef struct __anonstruct_mm_context_t_91 mm_context_t;
struct vm_area_struct;
struct key;
typedef __u64 Elf64_Addr;
typedef __u16 Elf64_Half;
typedef __u32 Elf64_Word;
typedef __u64 Elf64_Xword;
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
typedef struct elf64_sym Elf64_Sym;
struct kobject;
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
struct sysfs_dirent;
struct kref {
   atomic_t refcount ;
};
struct kset;
struct kobj_type;
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
struct kobj_type {
   void (*release)(struct kobject *kobj ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
struct kobj_uevent_env {
   char *envp[32] ;
   int envp_idx ;
   char buf[2048] ;
   int buflen ;
};
struct kset_uevent_ops {
   int (*filter)(struct kset *kset , struct kobject *kobj ) ;
   char const   *(*name)(struct kset *kset , struct kobject *kobj ) ;
   int (*uevent)(struct kset *kset , struct kobject *kobj , struct kobj_uevent_env *env ) ;
};
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
struct kernel_param;
struct kparam_string;
struct kparam_array;
union __anonunion____missing_field_name_101 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
struct kernel_param {
   char const   *name ;
   unsigned int perm ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   union __anonunion____missing_field_name_101 __annonCompField16 ;
};
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   unsigned int elemsize ;
   void *elem ;
};
struct marker;
typedef void marker_probe_func(void *probe_private , void *call_private , char const   *fmt ,
                               va_list *args );
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  *mdata , void *call_private  , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
   char const   *tp_name ;
   void *tp_cb ;
} __attribute__((__aligned__(8))) ;
union ktime {
   s64 tv64 ;
};
typedef union ktime ktime_t;
struct hrtimer;
enum hrtimer_restart;
struct work_struct;
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *work ) ;
   struct lockdep_map lockdep_map ;
};
enum kmemtrace_type_id {
    KMEMTRACE_TYPE_KMALLOC = 0,
    KMEMTRACE_TYPE_CACHE = 1,
    KMEMTRACE_TYPE_PAGES = 2
} ;
enum stat_item {
    ALLOC_FASTPATH = 0,
    ALLOC_SLOWPATH = 1,
    FREE_FASTPATH = 2,
    FREE_SLOWPATH = 3,
    FREE_FROZEN = 4,
    FREE_ADD_PARTIAL = 5,
    FREE_REMOVE_PARTIAL = 6,
    ALLOC_FROM_PARTIAL = 7,
    ALLOC_SLAB = 8,
    ALLOC_REFILL = 9,
    FREE_SLAB = 10,
    CPUSLAB_FLUSH = 11,
    DEACTIVATE_FULL = 12,
    DEACTIVATE_EMPTY = 13,
    DEACTIVATE_TO_HEAD = 14,
    DEACTIVATE_TO_TAIL = 15,
    DEACTIVATE_REMOTE_FREES = 16,
    ORDER_FALLBACK = 17,
    NR_SLUB_STAT_ITEMS = 18
} ;
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[NR_SLUB_STAT_ITEMS] ;
};
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
struct kmem_cache_order_objects {
   unsigned long x ;
};
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1 << 9] ;
   struct kmem_cache_cpu *cpu_slab[4096] ;
};
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head *head ) ;
};
struct tracepoint;
struct tracepoint {
   char const   *name ;
   int state ;
   void **funcs ;
} __attribute__((__aligned__(32))) ;
struct mod_arch_specific {

};
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t count ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
struct module_param_attrs;
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
struct exception_table_entry;
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
struct module_sect_attrs;
struct module_notes_attrs;
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[64UL - sizeof(unsigned long )] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   char *refptr ;
};
struct device_driver;
typedef unsigned long kernel_ulong_t;
struct i2c_device_id {
   char name[20] ;
   kernel_ulong_t driver_data  __attribute__((__aligned__(sizeof(kernel_ulong_t )))) ;
};
struct klist_node;
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
struct dma_map_ops;
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
struct device_private;
struct driver_private;
struct class;
struct class_private;
struct bus_type;
struct bus_type_private;
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type *bus , char *buf ) ;
   ssize_t (*store)(struct bus_type *bus , char const   *buf , size_t count ) ;
};
struct device_attribute;
struct driver_attribute;
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device *dev , struct device_driver *drv ) ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*suspend_late)(struct device *dev , pm_message_t state ) ;
   int (*resume_early)(struct device *dev ) ;
   int (*resume)(struct device *dev ) ;
   struct dev_pm_ops *pm ;
   struct bus_type_private *p ;
};
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct attribute_group **groups ;
   struct dev_pm_ops *pm ;
   struct driver_private *p ;
};
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver *driver , char *buf ) ;
   ssize_t (*store)(struct device_driver *driver , char const   *buf , size_t count ) ;
};
struct class_attribute;
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   void (*class_release)(struct class *class ) ;
   void (*dev_release)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct dev_pm_ops *pm ;
   struct class_private *p ;
};
struct device_type;
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *class , char *buf ) ;
   ssize_t (*store)(struct class *class , char const   *buf , size_t count ) ;
};
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   void (*release)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct dev_pm_ops *pm ;
};
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *dev , struct device_attribute *attr , char *buf ) ;
   ssize_t (*store)(struct device *dev , struct device_attribute *attr , char const   *buf ,
                    size_t count ) ;
};
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
struct dma_coherent_mem;
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *dev ) ;
};
struct kernel_cap_struct {
   __u32 cap[2] ;
};
typedef struct kernel_cap_struct kernel_cap_t;
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(sizeof(long )))) ;
struct rb_root {
   struct rb_node *rb_node ;
};
struct prio_tree_node;
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
struct address_space;
typedef atomic_long_t mm_counter_t;
struct __anonstruct____missing_field_name_107 {
   u16 inuse ;
   u16 objects ;
};
union __anonunion____missing_field_name_106 {
   atomic_t _mapcount ;
   struct __anonstruct____missing_field_name_107 __annonCompField17 ;
};
struct __anonstruct____missing_field_name_109 {
   unsigned long private ;
   struct address_space *mapping ;
};
union __anonunion____missing_field_name_108 {
   struct __anonstruct____missing_field_name_109 __annonCompField19 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
union __anonunion____missing_field_name_110 {
   unsigned long index ;
   void *freelist ;
};
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion____missing_field_name_106 __annonCompField18 ;
   union __anonunion____missing_field_name_108 __annonCompField20 ;
   union __anonunion____missing_field_name_110 __annonCompField21 ;
   struct list_head lru ;
};
struct __anonstruct_vm_set_112 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
union __anonunion_shared_111 {
   struct __anonstruct_vm_set_112 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
struct anon_vma;
struct vm_operations_struct;
struct mempolicy;
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_111 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
struct mmu_notifier_mm;
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file *filp , unsigned long addr , unsigned long len ,
                                      unsigned long pgoff , unsigned long flags ) ;
   void (*unmap_area)(struct mm_struct *mm , unsigned long addr ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[2 * ((2 + 19) + 1)] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
typedef unsigned long cputime_t;
struct sem_undo_list;
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
struct siginfo;
struct __anonstruct_sigset_t_113 {
   unsigned long sig[64 / 64] ;
};
typedef struct __anonstruct_sigset_t_113 sigset_t;
typedef void __signalfn_t(int  );
typedef __signalfn_t *__sighandler_t;
typedef void __restorefn_t(void);
typedef __restorefn_t *__sigrestore_t;
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
struct k_sigaction {
   struct sigaction sa ;
};
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
typedef union sigval sigval_t;
struct __anonstruct__kill_115 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
struct __anonstruct__timer_116 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[sizeof(__kernel_uid32_t ) - sizeof(int )] ;
   sigval_t _sigval ;
   int _sys_private ;
};
struct __anonstruct__rt_117 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
struct __anonstruct__sigchld_118 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
struct __anonstruct__sigfault_119 {
   void *_addr ;
};
struct __anonstruct__sigpoll_120 {
   long _band ;
   int _fd ;
};
union __anonunion__sifields_114 {
   int _pad[(128UL - 4UL * sizeof(int )) / sizeof(int )] ;
   struct __anonstruct__kill_115 _kill ;
   struct __anonstruct__timer_116 _timer ;
   struct __anonstruct__rt_117 _rt ;
   struct __anonstruct__sigchld_118 _sigchld ;
   struct __anonstruct__sigfault_119 _sigfault ;
   struct __anonstruct__sigpoll_120 _sigpoll ;
};
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_114 _sifields ;
};
typedef struct siginfo siginfo_t;
struct user_struct;
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
struct pid_namespace;
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[PIDTYPE_MAX] ;
   struct rcu_head rcu ;
   struct upid numbers[1] ;
};
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
struct __anonstruct_seccomp_t_123 {
   int mode ;
};
typedef struct __anonstruct_seccomp_t_123 seccomp_t;
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
struct rt_mutex_waiter;
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
struct hrtimer_clock_base;
struct hrtimer_cpu_base;
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   struct list_head cb_entry ;
   int start_pid ;
   void *start_site ;
   char start_comm[16] ;
};
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2] ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
struct latency_record {
   unsigned long backtrace[12] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
struct nsproxy;
typedef int32_t key_serial_t;
typedef uint32_t key_perm_t;
struct signal_struct;
struct cred;
struct key_type;
struct keyring_list;
struct key_user;
union __anonunion_type_data_178 {
   struct list_head link ;
   unsigned long x[2] ;
   void *p[2] ;
};
union __anonunion_payload_179 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   time_t expiry ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_178 type_data ;
   union __anonunion_payload_179 payload ;
};
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32] ;
   gid_t *blocks[0] ;
};
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
struct cred {
   atomic_t usage ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
struct futex_pi_state;
struct robust_list_head;
struct bio;
struct fs_struct;
struct cfs_rq;
struct task_group;
struct user_namespace;
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
struct tty_struct;
struct taskstats;
struct tty_audit_buf;
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
};
struct backing_dev_info;
struct reclaim_state;
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
struct sched_group {
   struct sched_group *next ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
   unsigned long cpumask[] ;
};
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_failed[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_balanced[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_imbalance[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_hot_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyg[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyq[CPU_MAX_IDLE_TYPES] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
   unsigned long span[] ;
};
struct io_context;
struct audit_context;
struct pipe_inode_info;
struct rq;
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq *rq , struct task_struct *p , int wakeup ) ;
   void (*dequeue_task)(struct rq *rq , struct task_struct *p , int sleep ) ;
   void (*yield_task)(struct rq *rq ) ;
   void (*check_preempt_curr)(struct rq *rq , struct task_struct *p , int sync ) ;
   struct task_struct *(*pick_next_task)(struct rq *rq ) ;
   void (*put_prev_task)(struct rq *rq , struct task_struct *p ) ;
   int (*select_task_rq)(struct task_struct *p , int sync ) ;
   unsigned long (*load_balance)(struct rq *this_rq , int this_cpu , struct rq *busiest ,
                                 unsigned long max_load_move , struct sched_domain *sd ,
                                 enum cpu_idle_type idle , int *all_pinned , int *this_best_prio ) ;
   int (*move_one_task)(struct rq *this_rq , int this_cpu , struct rq *busiest , struct sched_domain *sd ,
                        enum cpu_idle_type idle ) ;
   void (*pre_schedule)(struct rq *this_rq , struct task_struct *task ) ;
   int (*needs_post_schedule)(struct rq *this_rq ) ;
   void (*post_schedule)(struct rq *this_rq ) ;
   void (*task_wake_up)(struct rq *this_rq , struct task_struct *task ) ;
   void (*set_cpus_allowed)(struct task_struct *p , struct cpumask  const  *newmask ) ;
   void (*rq_online)(struct rq *rq ) ;
   void (*rq_offline)(struct rq *rq ) ;
   void (*set_curr_task)(struct rq *rq ) ;
   void (*task_tick)(struct rq *rq , struct task_struct *p , int queued ) ;
   void (*task_new)(struct rq *rq , struct task_struct *p ) ;
   void (*switched_from)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*switched_to)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*prio_changed)(struct rq *this_rq , struct task_struct *task , int oldprio ,
                        int running ) ;
   void (*moved_group)(struct task_struct *p ) ;
};
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 start_runtime ;
   u64 avg_wakeup ;
   u64 nr_migrations ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
struct rt_rq;
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
struct linux_binfmt;
struct files_struct;
struct css_set;
struct compat_robust_list_head;
struct ftrace_ret_stack;
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned int did_exec : 1 ;
   unsigned int in_execve : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct bts_tracer *bts ;
   void *bts_buffer ;
   size_t bts_size ;
   struct pid_link pids[PIDTYPE_MAX] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_exec_mutex ;
   char comm[16] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_timestamp ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *priv ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48UL] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
};
struct i2c_msg;
struct i2c_algorithm;
struct i2c_adapter;
struct i2c_client;
struct i2c_driver;
union i2c_smbus_data;
struct i2c_board_info;
struct i2c_client_address_data;
struct i2c_driver {
   int id ;
   unsigned int class ;
   int (*attach_adapter)(struct i2c_adapter * ) ;
   int (*detach_adapter)(struct i2c_adapter * ) ;
   int (*detach_client)(struct i2c_client * )  __attribute__((__deprecated__)) ;
   int (*probe)(struct i2c_client * , struct i2c_device_id  const  * ) ;
   int (*remove)(struct i2c_client * ) ;
   void (*shutdown)(struct i2c_client * ) ;
   int (*suspend)(struct i2c_client * , pm_message_t mesg ) ;
   int (*resume)(struct i2c_client * ) ;
   int (*command)(struct i2c_client *client , unsigned int cmd , void *arg ) ;
   struct device_driver driver ;
   struct i2c_device_id  const  *id_table ;
   int (*detect)(struct i2c_client * , int kind , struct i2c_board_info * ) ;
   struct i2c_client_address_data  const  *address_data ;
   struct list_head clients ;
};
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20] ;
   struct i2c_adapter *adapter ;
   struct i2c_driver *driver ;
   struct device dev ;
   int irq ;
   struct list_head list ;
   struct list_head detected ;
   struct completion released ;
};
struct i2c_board_info {
   char type[20] ;
   unsigned short flags ;
   unsigned short addr ;
   void *platform_data ;
   struct dev_archdata *archdata ;
   int irq ;
};
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *adap , struct i2c_msg *msgs , int num ) ;
   int (*smbus_xfer)(struct i2c_adapter *adap , u16 addr , unsigned short flags ,
                     char read_write , u8 command , int size , union i2c_smbus_data *data ) ;
   u32 (*functionality)(struct i2c_adapter * ) ;
};
struct i2c_adapter {
   struct module *owner ;
   unsigned int id ;
   unsigned int class ;
   struct i2c_algorithm  const  *algo ;
   void *algo_data ;
   int (*client_register)(struct i2c_client * ) ;
   int (*client_unregister)(struct i2c_client * ) ;
   u8 level ;
   struct mutex bus_lock ;
   struct mutex clist_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   int nr ;
   struct list_head clients ;
   char name[48] ;
   struct completion dev_released ;
};
struct i2c_client_address_data {
   unsigned short const   *normal_i2c ;
   unsigned short const   *probe ;
   unsigned short const   *ignore ;
   unsigned short const   * const  *forces ;
};
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[32 + 2] ;
};
enum led_brightness {
    LED_OFF = 0,
    LED_HALF = 127,
    LED_FULL = 255
} ;
struct led_trigger;
struct led_classdev {
   char const   *name ;
   int brightness ;
   int max_brightness ;
   int flags ;
   void (*brightness_set)(struct led_classdev *led_cdev , enum led_brightness brightness ) ;
   enum led_brightness (*brightness_get)(struct led_classdev *led_cdev ) ;
   int (*blink_set)(struct led_classdev *led_cdev , unsigned long *delay_on , unsigned long *delay_off ) ;
   struct device *dev ;
   struct list_head node ;
   char const   *default_trigger ;
   struct rw_semaphore trigger_lock ;
   struct led_trigger *trigger ;
   struct list_head trig_list ;
   void *trigger_data ;
};
struct led_trigger {
   char const   *name ;
   void (*activate)(struct led_classdev *led_cdev ) ;
   void (*deactivate)(struct led_classdev *led_cdev ) ;
   rwlock_t leddev_list_lock ;
   struct list_head led_cdevs ;
   struct list_head next_trig ;
};
struct bd2802_led_platform_data {
   int reset_gpio ;
   u8 rgb_time ;
};
enum led_ids {
    LED1 = 0,
    LED2 = 1,
    LED_NUM = 2
} ;
enum led_colors {
    RED = 0,
    GREEN = 1,
    BLUE = 2
} ;
enum led_bits {
    BD2802_OFF = 0,
    BD2802_BLINK = 1,
    BD2802_ON = 2
} ;
struct led_state {
   unsigned int r : 2 ;
   unsigned int g : 2 ;
   unsigned int b : 2 ;
};
struct bd2802_led {
   struct bd2802_led_platform_data *pdata ;
   struct i2c_client *client ;
   struct rw_semaphore rwsem ;
   struct work_struct work ;
   struct led_state led[2] ;
   struct led_classdev cdev_led1r ;
   struct led_classdev cdev_led1g ;
   struct led_classdev cdev_led1b ;
   struct led_classdev cdev_led2r ;
   struct led_classdev cdev_led2g ;
   struct led_classdev cdev_led2b ;
   int adf_on ;
   enum led_ids led_id ;
   enum led_colors color ;
   enum led_bits state ;
};
typedef signed char __s8;
typedef short __s16;
typedef long long __s64;
typedef unsigned short umode_t;
typedef u64 dma_addr_t;
typedef long long __kernel_loff_t;
typedef __kernel_loff_t loff_t;
typedef unsigned long sector_t;
typedef unsigned long blkcnt_t;
typedef __u16 __le16;
typedef unsigned int fmode_t;
struct seq_file;
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
struct __wait_queue;
typedef struct __wait_queue wait_queue_t;
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t *wait , unsigned int mode , int sync , void *key ) ;
   struct list_head task_list ;
};
struct tvec_base;
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
enum hrtimer_restart;
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
struct usb_device_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 bcdUSB ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bMaxPacketSize0 ;
   __le16 idVendor ;
   __le16 idProduct ;
   __le16 bcdDevice ;
   __u8 iManufacturer ;
   __u8 iProduct ;
   __u8 iSerialNumber ;
   __u8 bNumConfigurations ;
} __attribute__((__packed__)) ;
struct usb_config_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumInterfaces ;
   __u8 bConfigurationValue ;
   __u8 iConfiguration ;
   __u8 bmAttributes ;
   __u8 bMaxPower ;
} __attribute__((__packed__)) ;
struct usb_interface_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bInterfaceNumber ;
   __u8 bAlternateSetting ;
   __u8 bNumEndpoints ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 iInterface ;
} __attribute__((__packed__)) ;
struct usb_endpoint_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bEndpointAddress ;
   __u8 bmAttributes ;
   __le16 wMaxPacketSize ;
   __u8 bInterval ;
   __u8 bRefresh ;
   __u8 bSynchAddress ;
} __attribute__((__packed__)) ;
struct usb_interface_assoc_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bFirstInterface ;
   __u8 bInterfaceCount ;
   __u8 bFunctionClass ;
   __u8 bFunctionSubClass ;
   __u8 bFunctionProtocol ;
   __u8 iFunction ;
} __attribute__((__packed__)) ;
enum usb_device_speed {
    USB_SPEED_UNKNOWN = 0,
    USB_SPEED_LOW = 1,
    USB_SPEED_FULL = 2,
    USB_SPEED_HIGH = 3,
    USB_SPEED_VARIABLE = 4
} ;
enum usb_device_state {
    USB_STATE_NOTATTACHED = 0,
    USB_STATE_ATTACHED = 1,
    USB_STATE_POWERED = 2,
    USB_STATE_RECONNECTING = 3,
    USB_STATE_UNAUTHENTICATED = 4,
    USB_STATE_DEFAULT = 5,
    USB_STATE_ADDRESS = 6,
    USB_STATE_CONFIGURED = 7,
    USB_STATE_SUSPENDED = 8
} ;
struct dentry;
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
struct vfsmount;
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
struct inode;
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
struct kioctx;
union __anonunion_ki_obj_181 {
   void *user ;
   struct task_struct *tsk ;
};
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_181 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8] ;
};
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
struct nameidata;
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
union __anonunion_d_u_185 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
struct dentry_operations;
struct super_block;
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_185 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32] ;
};
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
struct radix_tree_node;
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3] ;
};
struct export_operations;
struct poll_table_struct;
struct kstatfs;
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8] ;
};
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
typedef struct fs_qfilestat fs_qfilestat_t;
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
struct dquot;
typedef __kernel_uid32_t qid_t;
typedef long long qsize_t;
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
struct quota_format_type;
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *sb , int type ) ;
   int (*read_file_info)(struct super_block *sb , int type ) ;
   int (*write_file_info)(struct super_block *sb , int type ) ;
   int (*free_file_info)(struct super_block *sb , int type ) ;
   int (*read_dqblk)(struct dquot *dquot ) ;
   int (*commit_dqblk)(struct dquot *dquot ) ;
   int (*release_dqblk)(struct dquot *dquot ) ;
};
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , qsize_t  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , qsize_t  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   int (*reserve_space)(struct inode * , qsize_t  , int  ) ;
   int (*claim_space)(struct inode * , qsize_t  ) ;
   void (*release_rsv)(struct inode * , qsize_t  ) ;
   qsize_t (*get_reserved_space)(struct inode * ) ;
};
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2] ;
   struct mem_dqinfo info[2] ;
   struct quota_format_ops *ops[2] ;
};
struct writeback_control;
union __anonunion_arg_191 {
   char *buf ;
   void *data ;
};
struct __anonstruct_read_descriptor_t_190 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_191 arg ;
   int error ;
};
typedef struct __anonstruct_read_descriptor_t_190 read_descriptor_t;
struct address_space_operations {
   int (*writepage)(struct page *page , struct writeback_control *wbc ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page *page ) ;
   int (*readpages)(struct file *filp , struct address_space *mapping , struct list_head *pages ,
                    unsigned int nr_pages ) ;
   int (*write_begin)(struct file * , struct address_space *mapping , loff_t pos ,
                      unsigned int len , unsigned int flags , struct page **pagep ,
                      void **fsdata ) ;
   int (*write_end)(struct file * , struct address_space *mapping , loff_t pos , unsigned int len ,
                    unsigned int copied , struct page *page , void *fsdata ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  *iov , loff_t offset ,
                        unsigned long nr_segs ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
};
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
} __attribute__((__aligned__(sizeof(long )))) ;
struct hd_struct;
struct gendisk;
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
struct inode_operations;
struct file_operations;
struct file_lock;
struct cdev;
union __anonunion____missing_field_name_192 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
struct dnotify_struct;
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2] ;
   struct list_head i_devices ;
   union __anonunion____missing_field_name_192 __annonCompField22 ;
   int i_cindex ;
   __u32 i_generation ;
   unsigned long i_dnotify_mask ;
   struct dnotify_struct *i_dnotify ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
union __anonunion_f_u_193 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
struct file {
   union __anonunion_f_u_193 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
typedef struct files_struct *fl_owner_t;
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
struct nlm_lockowner;
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
struct nfs4_lock_state;
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
struct fasync_struct;
struct __anonstruct_afs_195 {
   struct list_head link ;
   int state ;
};
union __anonunion_fl_u_194 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_195 afs ;
};
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_194 fl_u ;
};
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
struct file_system_type;
struct super_operations;
struct xattr_handler;
struct mtd_info;
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_need_sync_fs ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
   struct list_head s_async_list ;
};
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t id ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int datasync ) ;
   int (*aio_fsync)(struct kiocb * , int datasync ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount *mnt , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode *inode , int mode , loff_t offset , loff_t len ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64 start , u64 len ) ;
};
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *sb ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block *sb , int wait ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
struct usb_device;
struct wusb_dev;
struct ep_device;
struct usb_host_endpoint {
   struct usb_endpoint_descriptor desc ;
   struct list_head urb_list ;
   void *hcpriv ;
   struct ep_device *ep_dev ;
   unsigned char *extra ;
   int extralen ;
   int enabled ;
};
struct usb_host_interface {
   struct usb_interface_descriptor desc ;
   struct usb_host_endpoint *endpoint ;
   char *string ;
   unsigned char *extra ;
   int extralen ;
};
enum usb_interface_condition {
    USB_INTERFACE_UNBOUND = 0,
    USB_INTERFACE_BINDING = 1,
    USB_INTERFACE_BOUND = 2,
    USB_INTERFACE_UNBINDING = 3
} ;
struct usb_interface {
   struct usb_host_interface *altsetting ;
   struct usb_host_interface *cur_altsetting ;
   unsigned int num_altsetting ;
   struct usb_interface_assoc_descriptor *intf_assoc ;
   int minor ;
   enum usb_interface_condition condition ;
   unsigned int is_active : 1 ;
   unsigned int sysfs_files_created : 1 ;
   unsigned int ep_devs_created : 1 ;
   unsigned int unregistering : 1 ;
   unsigned int needs_remote_wakeup : 1 ;
   unsigned int needs_altsetting0 : 1 ;
   unsigned int needs_binding : 1 ;
   unsigned int reset_running : 1 ;
   struct device dev ;
   struct device *usb_dev ;
   int pm_usage_cnt ;
   struct work_struct reset_ws ;
};
struct usb_interface_cache {
   unsigned int num_altsetting ;
   struct kref ref ;
   struct usb_host_interface altsetting[0] ;
};
struct usb_host_config {
   struct usb_config_descriptor desc ;
   char *string ;
   struct usb_interface_assoc_descriptor *intf_assoc[32 / 2] ;
   struct usb_interface *interface[32] ;
   struct usb_interface_cache *intf_cache[32] ;
   unsigned char *extra ;
   int extralen ;
};
struct usb_devmap {
   unsigned long devicemap[128UL / (8UL * sizeof(unsigned long ))] ;
};
struct mon_bus;
struct usb_bus {
   struct device *controller ;
   int busnum ;
   char const   *bus_name ;
   u8 uses_dma ;
   u8 otg_port ;
   unsigned int is_b_host : 1 ;
   unsigned int b_hnp_enable : 1 ;
   int devnum_next ;
   struct usb_devmap devmap ;
   struct usb_device *root_hub ;
   struct list_head bus_list ;
   int bandwidth_allocated ;
   int bandwidth_int_reqs ;
   int bandwidth_isoc_reqs ;
   struct dentry *usbfs_dentry ;
   struct device *dev ;
   struct mon_bus *mon_bus ;
   int monitored ;
};
struct usb_tt;
struct usb_device {
   int devnum ;
   char devpath[16] ;
   enum usb_device_state state ;
   enum usb_device_speed speed ;
   struct usb_tt *tt ;
   int ttport ;
   unsigned int toggle[2] ;
   struct usb_device *parent ;
   struct usb_bus *bus ;
   struct usb_host_endpoint ep0 ;
   struct device dev ;
   struct usb_device_descriptor descriptor ;
   struct usb_host_config *config ;
   struct usb_host_config *actconfig ;
   struct usb_host_endpoint *ep_in[16] ;
   struct usb_host_endpoint *ep_out[16] ;
   char **rawdescriptors ;
   unsigned short bus_mA ;
   u8 portnum ;
   u8 level ;
   unsigned int can_submit : 1 ;
   unsigned int discon_suspended : 1 ;
   unsigned int persist_enabled : 1 ;
   unsigned int have_langid : 1 ;
   unsigned int authorized : 1 ;
   unsigned int authenticated : 1 ;
   unsigned int wusb : 1 ;
   int string_langid ;
   char *product ;
   char *manufacturer ;
   char *serial ;
   struct list_head filelist ;
   struct device *usb_classdev ;
   struct dentry *usbfs_dentry ;
   int maxchild ;
   struct usb_device *children[31] ;
   int pm_usage_cnt ;
   u32 quirks ;
   atomic_t urbnum ;
   unsigned long active_duration ;
   struct delayed_work autosuspend ;
   struct work_struct autoresume ;
   struct mutex pm_mutex ;
   unsigned long last_busy ;
   int autosuspend_delay ;
   unsigned long connect_time ;
   unsigned int auto_pm : 1 ;
   unsigned int do_remote_wakeup : 1 ;
   unsigned int reset_resume : 1 ;
   unsigned int autosuspend_disabled : 1 ;
   unsigned int autoresume_disabled : 1 ;
   unsigned int skip_sys_resume : 1 ;
   struct wusb_dev *wusb_dev ;
};
struct usb_iso_packet_descriptor {
   unsigned int offset ;
   unsigned int length ;
   unsigned int actual_length ;
   int status ;
};
struct urb;
struct usb_anchor {
   struct list_head urb_list ;
   wait_queue_head_t wait ;
   spinlock_t lock ;
   unsigned int poisoned : 1 ;
};
struct urb {
   struct kref kref ;
   void *hcpriv ;
   atomic_t use_count ;
   atomic_t reject ;
   int unlinked ;
   struct list_head urb_list ;
   struct list_head anchor_list ;
   struct usb_anchor *anchor ;
   struct usb_device *dev ;
   struct usb_host_endpoint *ep ;
   unsigned int pipe ;
   int status ;
   unsigned int transfer_flags ;
   void *transfer_buffer ;
   dma_addr_t transfer_dma ;
   u32 transfer_buffer_length ;
   u32 actual_length ;
   unsigned char *setup_packet ;
   dma_addr_t setup_dma ;
   int start_frame ;
   int number_of_packets ;
   int interval ;
   int error_count ;
   void *context ;
   void (*complete)(struct urb * ) ;
   struct usb_iso_packet_descriptor iso_frame_desc[0] ;
};
extern  __attribute__((__noreturn__)) int ____ilog2_NaN(void)  __attribute__((__const__)) ;
extern int strict_strtoul(char const   * , unsigned int  , unsigned long * ) ;
extern int ( /* format attribute */  sprintf)(char *buf , char const   *fmt  , ...) ;
extern int ( /* format attribute */  printk)(char const   *fmt  , ...) ;
extern int strncmp(char const   * , char const   * , __kernel_size_t  ) ;
__inline static int get_order(unsigned long size )  __attribute__((__const__)) ;
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
  size = (size - 1UL) >> (12 - 1);
  order = -1;
  while (1) {
    size = size >> 1;
    order = order + 1;
    if (size) {

    } else {
      break;
    }
  }
  return (order);
}
}
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
  list->next = list;
  list->prev = list;
  return;
}
}
extern void lockdep_init_map(struct lockdep_map *lock , char const   *name , struct lock_class_key *key ,
                             int subclass ) ;
extern void __init_rwsem(struct rw_semaphore *sem , char const   *name , struct lock_class_key *key ) ;
extern void down_read(struct rw_semaphore *sem ) ;
extern void down_write(struct rw_semaphore *sem ) ;
extern void up_read(struct rw_semaphore *sem ) ;
extern void up_write(struct rw_semaphore *sem ) ;
extern void __bad_udelay(void) ;
extern void __const_udelay(unsigned long xloops ) ;
extern unsigned long __get_free_pages(gfp_t gfp_mask , unsigned int order ) ;
__inline static char const   *kobject_name(struct kobject  const  *kobj ) 
{ 


  {
  return (kobj->name);
}
}
extern void kfree(void const   * ) ;
extern int schedule_work(struct work_struct *work ) ;
extern int cancel_work_sync(struct work_struct *work ) ;
extern void kmemtrace_mark_alloc_node(enum kmemtrace_type_id type_id , unsigned long call_site ,
                                      void const   *ptr , size_t bytes_req , size_t bytes_alloc ,
                                      gfp_t gfp_flags , int node ) ;
__inline static void kmemtrace_mark_alloc(enum kmemtrace_type_id type_id , unsigned long call_site ,
                                          void const   *ptr , size_t bytes_req , size_t bytes_alloc ,
                                          gfp_t gfp_flags ) 
{ 


  {
  kmemtrace_mark_alloc_node(type_id, call_site, ptr, bytes_req, bytes_alloc, gfp_flags,
                            -1);
  return;
}
}
extern struct kmem_cache kmalloc_caches[12 + 2] ;
__inline static int ( __attribute__((__always_inline__)) kmalloc_index)(size_t size ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___613  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 149, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___614  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 152, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___615  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 156, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___616  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 158, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___617  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 161, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___618  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 162, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___619  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 163, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___620  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 164, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___621  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 165, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___622  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 166, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___623  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 167, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___624  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 168, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___625  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 169, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___626  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 170, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___627  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 175, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___628  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 176, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___629  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 177, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___630  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 178, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___631  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 179, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___632  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 180, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___633  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 181, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___634  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 182, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___635  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_index",
    "include/linux/slub_def.h", 183, {{0UL, 0UL}}};
__inline static int ( __attribute__((__always_inline__)) kmalloc_index)(size_t size ) 
{ 
  int ______r ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  int tmp___36 ;
  int tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  int tmp___41 ;
  int tmp___42 ;
  int tmp___43 ;
  int tmp___44 ;
  int tmp___45 ;
  int tmp___46 ;
  int tmp___47 ;
  int tmp___48 ;
  int tmp___49 ;
  int tmp___50 ;
  int tmp___51 ;
  int tmp___52 ;
  int tmp___53 ;
  int tmp___54 ;
  int tmp___55 ;
  int tmp___56 ;
  int tmp___57 ;
  int tmp___58 ;
  int tmp___59 ;
  int tmp___60 ;
  int tmp___61 ;
  int tmp___62 ;
  int tmp___63 ;
  int tmp___64 ;
  int tmp___65 ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int ______r___4 ;
  int ______r___5 ;
  int ______r___6 ;
  int ______r___7 ;
  int ______r___8 ;
  int ______r___9 ;
  int ______r___10 ;
  int ______r___11 ;
  int ______r___12 ;
  int ______r___13 ;
  int ______r___14 ;
  int ______r___15 ;
  int ______r___16 ;
  int ______r___17 ;
  int ______r___18 ;
  int ______r___19 ;
  int ______r___20 ;
  int ______r___21 ;

  {
  ______r = ! (! (! size));
  ______f___613.__annonCompField3.miss_hit[______r] = ______f___613.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (0);
  } else {

  }
  ______r___0 = ! (! (size <= (size_t )8));
  ______f___614.__annonCompField3.miss_hit[______r___0] = ______f___614.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    if (8 < 1) {
      tmp = ____ilog2_NaN();
      tmp___65 = tmp;
    } else {
      if (8ULL & (1ULL << 63)) {
        tmp___64 = 63;
      } else {
        if (8ULL & (1ULL << 62)) {
          tmp___63 = 62;
        } else {
          if (8ULL & (1ULL << 61)) {
            tmp___62 = 61;
          } else {
            if (8ULL & (1ULL << 60)) {
              tmp___61 = 60;
            } else {
              if (8ULL & (1ULL << 59)) {
                tmp___60 = 59;
              } else {
                if (8ULL & (1ULL << 58)) {
                  tmp___59 = 58;
                } else {
                  if (8ULL & (1ULL << 57)) {
                    tmp___58 = 57;
                  } else {
                    if (8ULL & (1ULL << 56)) {
                      tmp___57 = 56;
                    } else {
                      if (8ULL & (1ULL << 55)) {
                        tmp___56 = 55;
                      } else {
                        if (8ULL & (1ULL << 54)) {
                          tmp___55 = 54;
                        } else {
                          if (8ULL & (1ULL << 53)) {
                            tmp___54 = 53;
                          } else {
                            if (8ULL & (1ULL << 52)) {
                              tmp___53 = 52;
                            } else {
                              if (8ULL & (1ULL << 51)) {
                                tmp___52 = 51;
                              } else {
                                if (8ULL & (1ULL << 50)) {
                                  tmp___51 = 50;
                                } else {
                                  if (8ULL & (1ULL << 49)) {
                                    tmp___50 = 49;
                                  } else {
                                    if (8ULL & (1ULL << 48)) {
                                      tmp___49 = 48;
                                    } else {
                                      if (8ULL & (1ULL << 47)) {
                                        tmp___48 = 47;
                                      } else {
                                        if (8ULL & (1ULL << 46)) {
                                          tmp___47 = 46;
                                        } else {
                                          if (8ULL & (1ULL << 45)) {
                                            tmp___46 = 45;
                                          } else {
                                            if (8ULL & (1ULL << 44)) {
                                              tmp___45 = 44;
                                            } else {
                                              if (8ULL & (1ULL << 43)) {
                                                tmp___44 = 43;
                                              } else {
                                                if (8ULL & (1ULL << 42)) {
                                                  tmp___43 = 42;
                                                } else {
                                                  if (8ULL & (1ULL << 41)) {
                                                    tmp___42 = 41;
                                                  } else {
                                                    if (8ULL & (1ULL << 40)) {
                                                      tmp___41 = 40;
                                                    } else {
                                                      if (8ULL & (1ULL << 39)) {
                                                        tmp___40 = 39;
                                                      } else {
                                                        if (8ULL & (1ULL << 38)) {
                                                          tmp___39 = 38;
                                                        } else {
                                                          if (8ULL & (1ULL << 37)) {
                                                            tmp___38 = 37;
                                                          } else {
                                                            if (8ULL & (1ULL << 36)) {
                                                              tmp___37 = 36;
                                                            } else {
                                                              if (8ULL & (1ULL << 35)) {
                                                                tmp___36 = 35;
                                                              } else {
                                                                if (8ULL & (1ULL << 34)) {
                                                                  tmp___35 = 34;
                                                                } else {
                                                                  if (8ULL & (1ULL << 33)) {
                                                                    tmp___34 = 33;
                                                                  } else {
                                                                    if (8ULL & (1ULL << 32)) {
                                                                      tmp___33 = 32;
                                                                    } else {
                                                                      if (8ULL & (1ULL << 31)) {
                                                                        tmp___32 = 31;
                                                                      } else {
                                                                        if (8ULL & (1ULL << 30)) {
                                                                          tmp___31 = 30;
                                                                        } else {
                                                                          if (8ULL & (1ULL << 29)) {
                                                                            tmp___30 = 29;
                                                                          } else {
                                                                            if (8ULL & (1ULL << 28)) {
                                                                              tmp___29 = 28;
                                                                            } else {
                                                                              if (8ULL & (1ULL << 27)) {
                                                                                tmp___28 = 27;
                                                                              } else {
                                                                                if (8ULL & (1ULL << 26)) {
                                                                                  tmp___27 = 26;
                                                                                } else {
                                                                                  if (8ULL & (1ULL << 25)) {
                                                                                    tmp___26 = 25;
                                                                                  } else {
                                                                                    if (8ULL & (1ULL << 24)) {
                                                                                      tmp___25 = 24;
                                                                                    } else {
                                                                                      if (8ULL & (1ULL << 23)) {
                                                                                        tmp___24 = 23;
                                                                                      } else {
                                                                                        if (8ULL & (1ULL << 22)) {
                                                                                          tmp___23 = 22;
                                                                                        } else {
                                                                                          if (8ULL & (1ULL << 21)) {
                                                                                            tmp___22 = 21;
                                                                                          } else {
                                                                                            if (8ULL & (1ULL << 20)) {
                                                                                              tmp___21 = 20;
                                                                                            } else {
                                                                                              if (8ULL & (1ULL << 19)) {
                                                                                                tmp___20 = 19;
                                                                                              } else {
                                                                                                if (8ULL & (1ULL << 18)) {
                                                                                                  tmp___19 = 18;
                                                                                                } else {
                                                                                                  if (8ULL & (1ULL << 17)) {
                                                                                                    tmp___18 = 17;
                                                                                                  } else {
                                                                                                    if (8ULL & (1ULL << 16)) {
                                                                                                      tmp___17 = 16;
                                                                                                    } else {
                                                                                                      if (8ULL & (1ULL << 15)) {
                                                                                                        tmp___16 = 15;
                                                                                                      } else {
                                                                                                        if (8ULL & (1ULL << 14)) {
                                                                                                          tmp___15 = 14;
                                                                                                        } else {
                                                                                                          if (8ULL & (1ULL << 13)) {
                                                                                                            tmp___14 = 13;
                                                                                                          } else {
                                                                                                            if (8ULL & (1ULL << 12)) {
                                                                                                              tmp___13 = 12;
                                                                                                            } else {
                                                                                                              if (8ULL & (1ULL << 11)) {
                                                                                                                tmp___12 = 11;
                                                                                                              } else {
                                                                                                                if (8ULL & (1ULL << 10)) {
                                                                                                                  tmp___11 = 10;
                                                                                                                } else {
                                                                                                                  if (8ULL & (1ULL << 9)) {
                                                                                                                    tmp___10 = 9;
                                                                                                                  } else {
                                                                                                                    if (8ULL & (1ULL << 8)) {
                                                                                                                      tmp___9 = 8;
                                                                                                                    } else {
                                                                                                                      if (8ULL & (1ULL << 7)) {
                                                                                                                        tmp___8 = 7;
                                                                                                                      } else {
                                                                                                                        if (8ULL & (1ULL << 6)) {
                                                                                                                          tmp___7 = 6;
                                                                                                                        } else {
                                                                                                                          if (8ULL & (1ULL << 5)) {
                                                                                                                            tmp___6 = 5;
                                                                                                                          } else {
                                                                                                                            if (8ULL & (1ULL << 4)) {
                                                                                                                              tmp___5 = 4;
                                                                                                                            } else {
                                                                                                                              if (8ULL & (1ULL << 3)) {
                                                                                                                                tmp___4 = 3;
                                                                                                                              } else {
                                                                                                                                if (8ULL & (1ULL << 2)) {
                                                                                                                                  tmp___3 = 2;
                                                                                                                                } else {
                                                                                                                                  if (8ULL & (1ULL << 1)) {
                                                                                                                                    tmp___2 = 1;
                                                                                                                                  } else {
                                                                                                                                    if (8ULL & (1ULL << 0)) {
                                                                                                                                      tmp___1 = 0;
                                                                                                                                    } else {
                                                                                                                                      tmp___0 = ____ilog2_NaN();
                                                                                                                                      tmp___1 = tmp___0;
                                                                                                                                    }
                                                                                                                                    tmp___2 = tmp___1;
                                                                                                                                  }
                                                                                                                                  tmp___3 = tmp___2;
                                                                                                                                }
                                                                                                                                tmp___4 = tmp___3;
                                                                                                                              }
                                                                                                                              tmp___5 = tmp___4;
                                                                                                                            }
                                                                                                                            tmp___6 = tmp___5;
                                                                                                                          }
                                                                                                                          tmp___7 = tmp___6;
                                                                                                                        }
                                                                                                                        tmp___8 = tmp___7;
                                                                                                                      }
                                                                                                                      tmp___9 = tmp___8;
                                                                                                                    }
                                                                                                                    tmp___10 = tmp___9;
                                                                                                                  }
                                                                                                                  tmp___11 = tmp___10;
                                                                                                                }
                                                                                                                tmp___12 = tmp___11;
                                                                                                              }
                                                                                                              tmp___13 = tmp___12;
                                                                                                            }
                                                                                                            tmp___14 = tmp___13;
                                                                                                          }
                                                                                                          tmp___15 = tmp___14;
                                                                                                        }
                                                                                                        tmp___16 = tmp___15;
                                                                                                      }
                                                                                                      tmp___17 = tmp___16;
                                                                                                    }
                                                                                                    tmp___18 = tmp___17;
                                                                                                  }
                                                                                                  tmp___19 = tmp___18;
                                                                                                }
                                                                                                tmp___20 = tmp___19;
                                                                                              }
                                                                                              tmp___21 = tmp___20;
                                                                                            }
                                                                                            tmp___22 = tmp___21;
                                                                                          }
                                                                                          tmp___23 = tmp___22;
                                                                                        }
                                                                                        tmp___24 = tmp___23;
                                                                                      }
                                                                                      tmp___25 = tmp___24;
                                                                                    }
                                                                                    tmp___26 = tmp___25;
                                                                                  }
                                                                                  tmp___27 = tmp___26;
                                                                                }
                                                                                tmp___28 = tmp___27;
                                                                              }
                                                                              tmp___29 = tmp___28;
                                                                            }
                                                                            tmp___30 = tmp___29;
                                                                          }
                                                                          tmp___31 = tmp___30;
                                                                        }
                                                                        tmp___32 = tmp___31;
                                                                      }
                                                                      tmp___33 = tmp___32;
                                                                    }
                                                                    tmp___34 = tmp___33;
                                                                  }
                                                                  tmp___35 = tmp___34;
                                                                }
                                                                tmp___36 = tmp___35;
                                                              }
                                                              tmp___37 = tmp___36;
                                                            }
                                                            tmp___38 = tmp___37;
                                                          }
                                                          tmp___39 = tmp___38;
                                                        }
                                                        tmp___40 = tmp___39;
                                                      }
                                                      tmp___41 = tmp___40;
                                                    }
                                                    tmp___42 = tmp___41;
                                                  }
                                                  tmp___43 = tmp___42;
                                                }
                                                tmp___44 = tmp___43;
                                              }
                                              tmp___45 = tmp___44;
                                            }
                                            tmp___46 = tmp___45;
                                          }
                                          tmp___47 = tmp___46;
                                        }
                                        tmp___48 = tmp___47;
                                      }
                                      tmp___49 = tmp___48;
                                    }
                                    tmp___50 = tmp___49;
                                  }
                                  tmp___51 = tmp___50;
                                }
                                tmp___52 = tmp___51;
                              }
                              tmp___53 = tmp___52;
                            }
                            tmp___54 = tmp___53;
                          }
                          tmp___55 = tmp___54;
                        }
                        tmp___56 = tmp___55;
                      }
                      tmp___57 = tmp___56;
                    }
                    tmp___58 = tmp___57;
                  }
                  tmp___59 = tmp___58;
                }
                tmp___60 = tmp___59;
              }
              tmp___61 = tmp___60;
            }
            tmp___62 = tmp___61;
          }
          tmp___63 = tmp___62;
        }
        tmp___64 = tmp___63;
      }
      tmp___65 = tmp___64;
    }
    return (tmp___65);
  } else {

  }
  ______r___1 = ! (! (size > (size_t )64 && size <= (size_t )96));
  ______f___615.__annonCompField3.miss_hit[______r___1] = ______f___615.__annonCompField3.miss_hit[______r___1] + 1UL;
  if (______r___1) {
    return (1);
  } else {

  }
  ______r___2 = ! (! (size > (size_t )128 && size <= (size_t )192));
  ______f___616.__annonCompField3.miss_hit[______r___2] = ______f___616.__annonCompField3.miss_hit[______r___2] + 1UL;
  if (______r___2) {
    return (2);
  } else {

  }
  ______r___3 = ! (! (size <= (size_t )8));
  ______f___617.__annonCompField3.miss_hit[______r___3] = ______f___617.__annonCompField3.miss_hit[______r___3] + 1UL;
  if (______r___3) {
    return (3);
  } else {

  }
  ______r___4 = ! (! (size <= (size_t )16));
  ______f___618.__annonCompField3.miss_hit[______r___4] = ______f___618.__annonCompField3.miss_hit[______r___4] + 1UL;
  if (______r___4) {
    return (4);
  } else {

  }
  ______r___5 = ! (! (size <= (size_t )32));
  ______f___619.__annonCompField3.miss_hit[______r___5] = ______f___619.__annonCompField3.miss_hit[______r___5] + 1UL;
  if (______r___5) {
    return (5);
  } else {

  }
  ______r___6 = ! (! (size <= (size_t )64));
  ______f___620.__annonCompField3.miss_hit[______r___6] = ______f___620.__annonCompField3.miss_hit[______r___6] + 1UL;
  if (______r___6) {
    return (6);
  } else {

  }
  ______r___7 = ! (! (size <= (size_t )128));
  ______f___621.__annonCompField3.miss_hit[______r___7] = ______f___621.__annonCompField3.miss_hit[______r___7] + 1UL;
  if (______r___7) {
    return (7);
  } else {

  }
  ______r___8 = ! (! (size <= (size_t )256));
  ______f___622.__annonCompField3.miss_hit[______r___8] = ______f___622.__annonCompField3.miss_hit[______r___8] + 1UL;
  if (______r___8) {
    return (8);
  } else {

  }
  ______r___9 = ! (! (size <= (size_t )512));
  ______f___623.__annonCompField3.miss_hit[______r___9] = ______f___623.__annonCompField3.miss_hit[______r___9] + 1UL;
  if (______r___9) {
    return (9);
  } else {

  }
  ______r___10 = ! (! (size <= (size_t )1024));
  ______f___624.__annonCompField3.miss_hit[______r___10] = ______f___624.__annonCompField3.miss_hit[______r___10] + 1UL;
  if (______r___10) {
    return (10);
  } else {

  }
  ______r___11 = ! (! (size <= (size_t )(2 * 1024)));
  ______f___625.__annonCompField3.miss_hit[______r___11] = ______f___625.__annonCompField3.miss_hit[______r___11] + 1UL;
  if (______r___11) {
    return (11);
  } else {

  }
  ______r___12 = ! (! (size <= (size_t )(4 * 1024)));
  ______f___626.__annonCompField3.miss_hit[______r___12] = ______f___626.__annonCompField3.miss_hit[______r___12] + 1UL;
  if (______r___12) {
    return (12);
  } else {

  }
  ______r___13 = ! (! (size <= (size_t )(8 * 1024)));
  ______f___627.__annonCompField3.miss_hit[______r___13] = ______f___627.__annonCompField3.miss_hit[______r___13] + 1UL;
  if (______r___13) {
    return (13);
  } else {

  }
  ______r___14 = ! (! (size <= (size_t )(16 * 1024)));
  ______f___628.__annonCompField3.miss_hit[______r___14] = ______f___628.__annonCompField3.miss_hit[______r___14] + 1UL;
  if (______r___14) {
    return (14);
  } else {

  }
  ______r___15 = ! (! (size <= (size_t )(32 * 1024)));
  ______f___629.__annonCompField3.miss_hit[______r___15] = ______f___629.__annonCompField3.miss_hit[______r___15] + 1UL;
  if (______r___15) {
    return (15);
  } else {

  }
  ______r___16 = ! (! (size <= (size_t )(64 * 1024)));
  ______f___630.__annonCompField3.miss_hit[______r___16] = ______f___630.__annonCompField3.miss_hit[______r___16] + 1UL;
  if (______r___16) {
    return (16);
  } else {

  }
  ______r___17 = ! (! (size <= (size_t )(128 * 1024)));
  ______f___631.__annonCompField3.miss_hit[______r___17] = ______f___631.__annonCompField3.miss_hit[______r___17] + 1UL;
  if (______r___17) {
    return (17);
  } else {

  }
  ______r___18 = ! (! (size <= (size_t )(256 * 1024)));
  ______f___632.__annonCompField3.miss_hit[______r___18] = ______f___632.__annonCompField3.miss_hit[______r___18] + 1UL;
  if (______r___18) {
    return (18);
  } else {

  }
  ______r___19 = ! (! (size <= (size_t )(512 * 1024)));
  ______f___633.__annonCompField3.miss_hit[______r___19] = ______f___633.__annonCompField3.miss_hit[______r___19] + 1UL;
  if (______r___19) {
    return (19);
  } else {

  }
  ______r___20 = ! (! (size <= (size_t )(1024 * 1024)));
  ______f___634.__annonCompField3.miss_hit[______r___20] = ______f___634.__annonCompField3.miss_hit[______r___20] + 1UL;
  if (______r___20) {
    return (20);
  } else {

  }
  ______r___21 = ! (! (size <= (size_t )((2 * 1024) * 1024)));
  ______f___635.__annonCompField3.miss_hit[______r___21] = ______f___635.__annonCompField3.miss_hit[______r___21] + 1UL;
  if (______r___21) {
    return (21);
  } else {

  }
  return (-1);
}
}
__inline static struct kmem_cache *( __attribute__((__always_inline__)) kmalloc_slab)(size_t size ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___636  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc_slab",
    "include/linux/slub_def.h", 205, {{0UL, 0UL}}};
__inline static struct kmem_cache *( __attribute__((__always_inline__)) kmalloc_slab)(size_t size ) 
{ 
  int index ;
  int tmp ;
  int ______r ;

  {
  tmp = kmalloc_index(size);
  index = tmp;
  ______r = ! (! (index == 0));
  ______f___636.__annonCompField3.miss_hit[______r] = ______f___636.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return ((void *)0);
  } else {

  }
  return (& kmalloc_caches[index]);
}
}
extern void *__kmalloc(size_t size , gfp_t flags ) ;
extern void *kmem_cache_alloc_notrace(struct kmem_cache *s , gfp_t gfpflags ) ;
__inline static void *( __attribute__((__always_inline__)) kmalloc_large)(size_t size ,
                                                                          gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
  tmp = get_order(size);
  order = tmp;
  tmp___0 = __get_free_pages(flags | 16384U, order);
  ret = (void *)tmp___0;
  kmemtrace_mark_alloc(KMEMTRACE_TYPE_KMALLOC, (unsigned long )((void *)0), ret, size,
                       (1UL << 12) << order, flags);
  return (ret);
}
}
__inline static void *( __attribute__((__always_inline__)) kmalloc)(size_t size ,
                                                                    gfp_t flags ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___637  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc",
    "include/linux/slub_def.h", 247, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___638  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc",
    "include/linux/slub_def.h", 253, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___639  __attribute__((__section__("_ftrace_branch")))  =    {"kmalloc",
    "include/linux/slub_def.h", 250, {{0UL, 0UL}}};
__inline static void *( __attribute__((__always_inline__)) kmalloc)(size_t size ,
                                                                    gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  int ______r ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  int ______r___0 ;
  int ______r___1 ;
  void *tmp___1 ;

  {
  if (0) {
    ______r = ! (! (size > 2UL * (1UL << 12)));
    ______f___637.__annonCompField3.miss_hit[______r] = ______f___637.__annonCompField3.miss_hit[______r] + 1UL;
    if (______r) {
      tmp = kmalloc_large(size, flags);
      return (tmp);
    } else {

    }
    ______r___1 = ! (! (! (flags & 1U)));
    ______f___639.__annonCompField3.miss_hit[______r___1] = ______f___639.__annonCompField3.miss_hit[______r___1] + 1UL;
    if (______r___1) {
      tmp___0 = kmalloc_slab(size);
      s = tmp___0;
      ______r___0 = ! (! (! s));
      ______f___638.__annonCompField3.miss_hit[______r___0] = ______f___638.__annonCompField3.miss_hit[______r___0] + 1UL;
      if (______r___0) {
        return ((void *)16);
      } else {

      }
      ret = kmem_cache_alloc_notrace(s, flags);
      kmemtrace_mark_alloc(KMEMTRACE_TYPE_KMALLOC, (unsigned long )((void *)0), ret,
                           size, s->size, flags);
      return (ret);
    } else {

    }
  } else {

  }
  tmp___1 = __kmalloc(size, flags);
  return (tmp___1);
}
}
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
  tmp = kmalloc(size, flags | 32768U);
  return (tmp);
}
}
int init_module(void) ;
void cleanup_module(void) ;
extern struct module __this_module ;
extern int ( __attribute__((__warn_unused_result__)) device_create_file)(struct device *device ,
                                                                         struct device_attribute *entry ) ;
extern void device_remove_file(struct device *dev , struct device_attribute *attr ) ;
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 
  char const   *tmp ;

  {
  tmp = kobject_name(& dev->kobj);
  return (tmp);
}
}
__inline static void *dev_get_drvdata(struct device  const  *dev ) 
{ 


  {
  return (dev->driver_data);
}
}
__inline static void dev_set_drvdata(struct device *dev , void *data ) 
{ 


  {
  dev->driver_data = data;
  return;
}
}
extern char const   *dev_driver_string(struct device  const  *dev ) ;
extern s32 i2c_smbus_write_byte_data(struct i2c_client *client , u8 command , u8 value ) ;
__inline static void *i2c_get_clientdata(struct i2c_client  const  *dev ) 
{ 
  void *tmp ;

  {
  tmp = dev_get_drvdata(& dev->dev);
  return (tmp);
}
}
__inline static void i2c_set_clientdata(struct i2c_client *dev , void *data ) 
{ 


  {
  dev_set_drvdata(& dev->dev, data);
  return;
}
}
extern int i2c_register_driver(struct module * , struct i2c_driver * ) ;
extern void i2c_del_driver(struct i2c_driver * ) ;
__inline static int i2c_add_driver(struct i2c_driver *driver ) 
{ 
  int tmp ;

  {
  tmp = i2c_register_driver(& __this_module, driver);
  return (tmp);
}
}
extern int gpio_request(unsigned int gpio , char const   *label ) ;
extern int gpio_direction_output(unsigned int gpio , int value ) ;
extern void __gpio_set_value(unsigned int gpio , int value ) ;
__inline static void gpio_set_value(unsigned int gpio , int value ) 
{ 


  {
  __gpio_set_value(gpio, value);
  return;
}
}
extern int led_classdev_register(struct device *parent , struct led_classdev *led_cdev ) ;
extern void led_classdev_unregister(struct led_classdev *led_cdev ) ;
__inline static int bd2802_is_rgb_off(struct bd2802_led *led , enum led_ids id , enum led_colors color ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;

  {
  switch ((unsigned int )color) {
  case (unsigned int )RED: 
  return (! led->led[id].r);
  case (unsigned int )GREEN: 
  return (! led->led[id].g);
  case (unsigned int )BLUE: 
  return (! led->led[id].b);
  default: 
  tmp = dev_name(& (led->client)->dev);
  tmp___0 = dev_driver_string(& (led->client)->dev);
  printk("<3>%s %s: %s: Invalid color\n", tmp___0, tmp, "bd2802_is_rgb_off");
  return (-22);
  }
}
}
__inline static int bd2802_is_led_off(struct bd2802_led *led , enum led_ids id ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___695  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_is_led_off",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    126, {{0UL, 0UL}}};
__inline static int bd2802_is_led_off(struct bd2802_led *led , enum led_ids id ) 
{ 
  int ______r ;

  {
  ______r = ! (! ((led->led[id].r || led->led[id].g) || led->led[id].b));
  ______f___695.__annonCompField3.miss_hit[______r] = ______f___695.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (0);
  } else {

  }
  return (1);
}
}
__inline static int bd2802_is_all_off(struct bd2802_led *led ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___696  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_is_all_off",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    137, {{0UL, 0UL}}};
__inline static int bd2802_is_all_off(struct bd2802_led *led ) 
{ 
  int i ;
  int ______r ;
  int tmp___3 ;
  int tmp___4 ;

  {
  i = 0;
  while (1) {
    if (i < LED_NUM) {

    } else {
      break;
    }
    tmp___3 = bd2802_is_led_off(led, i);
    if (tmp___3) {
      tmp___4 = 0;
    } else {
      tmp___4 = 1;
    }
    ______r = tmp___4;
    ______f___696.__annonCompField3.miss_hit[______r] = ______f___696.__annonCompField3.miss_hit[______r] + 1UL;
    if (______r) {
      return (0);
    } else {

    }
    i = i + 1;
  }
  return (1);
}
}
__inline static u8 bd2802_get_base_offset(enum led_ids id , enum led_colors color ) 
{ 


  {
  return ((unsigned int )id * 10U + (unsigned int )color * 3U);
}
}
__inline static u8 bd2802_get_reg_addr(enum led_ids id , enum led_colors color , u8 reg_offset ) 
{ 
  u8 tmp ;

  {
  tmp = bd2802_get_base_offset(id, color);
  return ((int )reg_offset + (int )tmp);
}
}
static int bd2802_write_byte(struct i2c_client *client , u8 reg , u8 val ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___697  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_write_byte",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    162, {{0UL, 0UL}}};
static int bd2802_write_byte(struct i2c_client *client , u8 reg , u8 val ) 
{ 
  int ret ;
  s32 tmp ;
  int ______r ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;

  {
  tmp = i2c_smbus_write_byte_data(client, reg, val);
  ret = tmp;
  ______r = ! (! (ret >= 0));
  ______f___697.__annonCompField3.miss_hit[______r] = ______f___697.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (0);
  } else {

  }
  tmp___0 = dev_name(& client->dev);
  tmp___1 = dev_driver_string(& client->dev);
  printk("<3>%s %s: %s: reg 0x%x, val 0x%x, err %d\n", tmp___1, tmp___0, "bd2802_write_byte",
         reg, val, ret);
  return (ret);
}
}
static void bd2802_update_state(struct bd2802_led *led , enum led_ids id , enum led_colors color ,
                                enum led_bits led_bit ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___698  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_update_state",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    178, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___699  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_update_state",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    197, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___700  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_update_state",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    200, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___701  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_update_state",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    203, {{0UL, 0UL}}};
static void bd2802_update_state(struct bd2802_led *led , enum led_ids id , enum led_colors color ,
                                enum led_bits led_bit ) 
{ 
  int i ;
  u8 value ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;
  int tmp___5 ;
  int tmp___6 ;
  int ______r___2 ;
  int tmp___10 ;
  int tmp___11 ;

  {
  i = 0;
  while (1) {
    if (i < LED_NUM) {

    } else {
      break;
    }
    ______r = ! (! ((unsigned int )i == (unsigned int )id));
    ______f___698.__annonCompField3.miss_hit[______r] = ______f___698.__annonCompField3.miss_hit[______r] + 1UL;
    if (______r) {
      switch ((unsigned int )color) {
      case (unsigned int )RED: 
      led->led[i].r = led_bit;
      break;
      case (unsigned int )GREEN: 
      led->led[i].g = led_bit;
      break;
      case (unsigned int )BLUE: 
      led->led[i].b = led_bit;
      break;
      default: 
      tmp = dev_name(& (led->client)->dev);
      tmp___0 = dev_driver_string(& (led->client)->dev);
      printk("<3>%s %s: %s: Invalid color\n", tmp___0, tmp, "bd2802_update_state");
      return;
      }
    } else {

    }
    i = i + 1;
  }
  ______r___0 = ! (! ((unsigned int )led_bit == (unsigned int )BD2802_BLINK || (unsigned int )led_bit == (unsigned int )BD2802_ON));
  ______f___699.__annonCompField3.miss_hit[______r___0] = ______f___699.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    return;
  } else {

  }
  tmp___5 = bd2802_is_led_off(led, id);
  if (tmp___5) {
    tmp___6 = 0;
  } else {
    tmp___6 = 1;
  }
  ______r___1 = tmp___6;
  ______f___700.__annonCompField3.miss_hit[______r___1] = ______f___700.__annonCompField3.miss_hit[______r___1] + 1UL;
  if (______r___1) {
    return;
  } else {

  }
  tmp___10 = bd2802_is_all_off(led);
  if (tmp___10 && ! led->adf_on) {
    tmp___11 = 1;
  } else {
    tmp___11 = 0;
  }
  ______r___2 = tmp___11;
  ______f___701.__annonCompField3.miss_hit[______r___2] = ______f___701.__annonCompField3.miss_hit[______r___2] + 1UL;
  if (______r___2) {
    gpio_set_value((led->pdata)->reset_gpio, 0);
    return;
  } else {

  }
  value = (unsigned int )id == (unsigned int )LED1 ? (1 << 4) | (0 << 0) : (0 << 4) | (1 << 0);
  bd2802_write_byte(led->client, 1, value);
  return;
}
}
static void bd2802_configure(struct bd2802_led *led ) 
{ 
  struct bd2802_led_platform_data *pdata ;
  u8 reg ;

  {
  pdata = led->pdata;
  reg = bd2802_get_reg_addr(LED1, RED, 2);
  bd2802_write_byte(led->client, reg, pdata->rgb_time);
  reg = bd2802_get_reg_addr(LED2, RED, 2);
  bd2802_write_byte(led->client, reg, pdata->rgb_time);
  return;
}
}
static void bd2802_reset_cancel(struct bd2802_led *led ) 
{ 


  {
  gpio_set_value((led->pdata)->reset_gpio, 1);
  if (100 > 20000) {
    __bad_udelay();
  } else {
    __const_udelay(100UL * 4295UL);
  }
  bd2802_configure(led);
  return;
}
}
static void bd2802_enable(struct bd2802_led *led , enum led_ids id ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___702  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_enable",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    241, {{0UL, 0UL}}};
static void bd2802_enable(struct bd2802_led *led , enum led_ids id ) 
{ 
  enum led_ids other_led ;
  u8 value ;
  u8 other_led_on ;
  int tmp ;
  int tmp___0 ;
  int ______r ;

  {
  other_led = (unsigned int )id == (unsigned int )LED1 ? LED2 : LED1;
  tmp = bd2802_is_led_off(led, other_led);
  if (tmp) {
    tmp___0 = 0;
  } else {
    tmp___0 = 1;
  }
  other_led_on = tmp___0;
  ______r = ! (! ((unsigned int )id == (unsigned int )LED1));
  ______f___702.__annonCompField3.miss_hit[______r] = ______f___702.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    value = ((int )other_led_on << 4) | (1 << 0);
  } else {
    value = (1 << 4) | ((int )other_led_on << 0);
  }
  bd2802_write_byte(led->client, 1, value);
  return;
}
}
static void bd2802_set_on(struct bd2802_led *led , enum led_ids id , enum led_colors color ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___703  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_set_on",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    254, {{0UL, 0UL}}};
static void bd2802_set_on(struct bd2802_led *led , enum led_ids id , enum led_colors color ) 
{ 
  u8 reg ;
  int ______r ;
  int tmp___2 ;
  int tmp___3 ;

  {
  tmp___2 = bd2802_is_all_off(led);
  if (tmp___2 && ! led->adf_on) {
    tmp___3 = 1;
  } else {
    tmp___3 = 0;
  }
  ______r = tmp___3;
  ______f___703.__annonCompField3.miss_hit[______r] = ______f___703.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    bd2802_reset_cancel(led);
  } else {

  }
  reg = bd2802_get_reg_addr(id, color, 3);
  bd2802_write_byte(led->client, reg, 16);
  reg = bd2802_get_reg_addr(id, color, 4);
  bd2802_write_byte(led->client, reg, 0);
  reg = bd2802_get_reg_addr(id, color, 5);
  bd2802_write_byte(led->client, reg, 7);
  bd2802_enable(led, id);
  bd2802_update_state(led, id, color, BD2802_ON);
  return;
}
}
static void bd2802_set_blink(struct bd2802_led *led , enum led_ids id , enum led_colors color ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___704  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_set_blink",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    273, {{0UL, 0UL}}};
static void bd2802_set_blink(struct bd2802_led *led , enum led_ids id , enum led_colors color ) 
{ 
  u8 reg ;
  int ______r ;
  int tmp___2 ;
  int tmp___3 ;

  {
  tmp___2 = bd2802_is_all_off(led);
  if (tmp___2 && ! led->adf_on) {
    tmp___3 = 1;
  } else {
    tmp___3 = 0;
  }
  ______r = tmp___3;
  ______f___704.__annonCompField3.miss_hit[______r] = ______f___704.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    bd2802_reset_cancel(led);
  } else {

  }
  reg = bd2802_get_reg_addr(id, color, 3);
  bd2802_write_byte(led->client, reg, 0);
  reg = bd2802_get_reg_addr(id, color, 4);
  bd2802_write_byte(led->client, reg, 16);
  reg = bd2802_get_reg_addr(id, color, 5);
  bd2802_write_byte(led->client, reg, 3);
  bd2802_enable(led, id);
  bd2802_update_state(led, id, color, BD2802_BLINK);
  return;
}
}
static void bd2802_turn_on(struct bd2802_led *led , enum led_ids id , enum led_colors color ,
                           enum led_bits led_bit ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___705  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_turn_on",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    290, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___706  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_turn_on",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    296, {{0UL, 0UL}}};
static void bd2802_turn_on(struct bd2802_led *led , enum led_ids id , enum led_colors color ,
                           enum led_bits led_bit ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int ______r ;
  int ______r___0 ;

  {
  ______r = ! (! ((unsigned int )led_bit == (unsigned int )BD2802_OFF));
  ______f___705.__annonCompField3.miss_hit[______r] = ______f___705.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    tmp = dev_name(& (led->client)->dev);
    tmp___0 = dev_driver_string(& (led->client)->dev);
    printk("<3>%s %s: Only \'blink\' and \'on\' are allowed\n", tmp___0, tmp);
    return;
  } else {

  }
  ______r___0 = ! (! ((unsigned int )led_bit == (unsigned int )BD2802_BLINK));
  ______f___706.__annonCompField3.miss_hit[______r___0] = ______f___706.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    bd2802_set_blink(led, id, color);
  } else {
    bd2802_set_on(led, id, color);
  }
  return;
}
}
static void bd2802_turn_off(struct bd2802_led *led , enum led_ids id , enum led_colors color ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___707  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_turn_off",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    307, {{0UL, 0UL}}};
static void bd2802_turn_off(struct bd2802_led *led , enum led_ids id , enum led_colors color ) 
{ 
  u8 reg ;
  int ______r ;
  int tmp___2 ;
  int tmp___3 ;

  {
  tmp___2 = bd2802_is_rgb_off(led, id, color);
  if (tmp___2) {
    tmp___3 = 1;
  } else {
    tmp___3 = 0;
  }
  ______r = tmp___3;
  ______f___707.__annonCompField3.miss_hit[______r] = ______f___707.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return;
  } else {

  }
  reg = bd2802_get_reg_addr(id, color, 3);
  bd2802_write_byte(led->client, reg, 0);
  reg = bd2802_get_reg_addr(id, color, 4);
  bd2802_write_byte(led->client, reg, 0);
  bd2802_update_state(led, id, color, BD2802_OFF);
  return;
}
}
static void bd2802_restore_state(struct bd2802_led *led ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___708  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_restore_state",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    323, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___709  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_restore_state",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    325, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___710  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_restore_state",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    327, {{0UL, 0UL}}};
static void bd2802_restore_state(struct bd2802_led *led ) 
{ 
  int i ;
  int ______r ;
  int ______r___0 ;
  int ______r___1 ;

  {
  i = 0;
  while (1) {
    if (i < LED_NUM) {

    } else {
      break;
    }
    ______r = ! (! led->led[i].r);
    ______f___708.__annonCompField3.miss_hit[______r] = ______f___708.__annonCompField3.miss_hit[______r] + 1UL;
    if (______r) {
      bd2802_turn_on(led, i, RED, led->led[i].r);
    } else {

    }
    ______r___0 = ! (! led->led[i].g);
    ______f___709.__annonCompField3.miss_hit[______r___0] = ______f___709.__annonCompField3.miss_hit[______r___0] + 1UL;
    if (______r___0) {
      bd2802_turn_on(led, i, GREEN, led->led[i].g);
    } else {

    }
    ______r___1 = ! (! led->led[i].b);
    ______f___710.__annonCompField3.miss_hit[______r___1] = ______f___710.__annonCompField3.miss_hit[______r___1] + 1UL;
    if (______r___1) {
      bd2802_turn_on(led, i, BLUE, led->led[i].b);
    } else {

    }
    i = i + 1;
  }
  return;
}
}
static ssize_t bd2802_store_reg0x00(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___711  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x00",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    354, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___712  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x00",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    354, {{0UL, 0UL}}};
static ssize_t bd2802_store_reg0x00(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;
  int ______r ;
  int ______r___0 ;

  {
  __mptr = dev;
  tmp = i2c_get_clientdata((struct i2c_client *)((char *)__mptr - (unsigned int )(& ((struct i2c_client *)0)->dev)));
  led = tmp;
  ______r = ! (! (! count));
  ______f___711.__annonCompField3.miss_hit[______r] = ______f___711.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  ret = strict_strtoul(buf, 16, & val);
  ______r___0 = ! (! ret);
  ______f___712.__annonCompField3.miss_hit[______r___0] = ______f___712.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    return (ret);
  } else {

  }
  down_write(& led->rwsem);
  bd2802_write_byte(led->client, 0, (u8 )val);
  up_write(& led->rwsem);
  return (count);
}
}
static struct device_attribute bd2802_reg0x00_attr  =    {{"0x00", & __this_module, 420}, 0, & bd2802_store_reg0x00};
static ssize_t bd2802_store_reg0x01(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___713  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x01",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    355, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___714  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x01",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    355, {{0UL, 0UL}}};
static ssize_t bd2802_store_reg0x01(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;
  int ______r ;
  int ______r___0 ;

  {
  __mptr = dev;
  tmp = i2c_get_clientdata((struct i2c_client *)((char *)__mptr - (unsigned int )(& ((struct i2c_client *)0)->dev)));
  led = tmp;
  ______r = ! (! (! count));
  ______f___713.__annonCompField3.miss_hit[______r] = ______f___713.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  ret = strict_strtoul(buf, 16, & val);
  ______r___0 = ! (! ret);
  ______f___714.__annonCompField3.miss_hit[______r___0] = ______f___714.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    return (ret);
  } else {

  }
  down_write(& led->rwsem);
  bd2802_write_byte(led->client, 1, (u8 )val);
  up_write(& led->rwsem);
  return (count);
}
}
static struct device_attribute bd2802_reg0x01_attr  =    {{"0x01", & __this_module, 420}, 0, & bd2802_store_reg0x01};
static ssize_t bd2802_store_reg0x02(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___715  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x02",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    356, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___716  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x02",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    356, {{0UL, 0UL}}};
static ssize_t bd2802_store_reg0x02(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;
  int ______r ;
  int ______r___0 ;

  {
  __mptr = dev;
  tmp = i2c_get_clientdata((struct i2c_client *)((char *)__mptr - (unsigned int )(& ((struct i2c_client *)0)->dev)));
  led = tmp;
  ______r = ! (! (! count));
  ______f___715.__annonCompField3.miss_hit[______r] = ______f___715.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  ret = strict_strtoul(buf, 16, & val);
  ______r___0 = ! (! ret);
  ______f___716.__annonCompField3.miss_hit[______r___0] = ______f___716.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    return (ret);
  } else {

  }
  down_write(& led->rwsem);
  bd2802_write_byte(led->client, 2, (u8 )val);
  up_write(& led->rwsem);
  return (count);
}
}
static struct device_attribute bd2802_reg0x02_attr  =    {{"0x02", & __this_module, 420}, 0, & bd2802_store_reg0x02};
static ssize_t bd2802_store_reg0x03(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___717  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x03",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    357, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___718  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x03",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    357, {{0UL, 0UL}}};
static ssize_t bd2802_store_reg0x03(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;
  int ______r ;
  int ______r___0 ;

  {
  __mptr = dev;
  tmp = i2c_get_clientdata((struct i2c_client *)((char *)__mptr - (unsigned int )(& ((struct i2c_client *)0)->dev)));
  led = tmp;
  ______r = ! (! (! count));
  ______f___717.__annonCompField3.miss_hit[______r] = ______f___717.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  ret = strict_strtoul(buf, 16, & val);
  ______r___0 = ! (! ret);
  ______f___718.__annonCompField3.miss_hit[______r___0] = ______f___718.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    return (ret);
  } else {

  }
  down_write(& led->rwsem);
  bd2802_write_byte(led->client, 3, (u8 )val);
  up_write(& led->rwsem);
  return (count);
}
}
static struct device_attribute bd2802_reg0x03_attr  =    {{"0x03", & __this_module, 420}, 0, & bd2802_store_reg0x03};
static ssize_t bd2802_store_reg0x04(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___719  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x04",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    358, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___720  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x04",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    358, {{0UL, 0UL}}};
static ssize_t bd2802_store_reg0x04(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;
  int ______r ;
  int ______r___0 ;

  {
  __mptr = dev;
  tmp = i2c_get_clientdata((struct i2c_client *)((char *)__mptr - (unsigned int )(& ((struct i2c_client *)0)->dev)));
  led = tmp;
  ______r = ! (! (! count));
  ______f___719.__annonCompField3.miss_hit[______r] = ______f___719.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  ret = strict_strtoul(buf, 16, & val);
  ______r___0 = ! (! ret);
  ______f___720.__annonCompField3.miss_hit[______r___0] = ______f___720.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    return (ret);
  } else {

  }
  down_write(& led->rwsem);
  bd2802_write_byte(led->client, 4, (u8 )val);
  up_write(& led->rwsem);
  return (count);
}
}
static struct device_attribute bd2802_reg0x04_attr  =    {{"0x04", & __this_module, 420}, 0, & bd2802_store_reg0x04};
static ssize_t bd2802_store_reg0x05(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___721  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x05",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    359, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___722  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x05",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    359, {{0UL, 0UL}}};
static ssize_t bd2802_store_reg0x05(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;
  int ______r ;
  int ______r___0 ;

  {
  __mptr = dev;
  tmp = i2c_get_clientdata((struct i2c_client *)((char *)__mptr - (unsigned int )(& ((struct i2c_client *)0)->dev)));
  led = tmp;
  ______r = ! (! (! count));
  ______f___721.__annonCompField3.miss_hit[______r] = ______f___721.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  ret = strict_strtoul(buf, 16, & val);
  ______r___0 = ! (! ret);
  ______f___722.__annonCompField3.miss_hit[______r___0] = ______f___722.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    return (ret);
  } else {

  }
  down_write(& led->rwsem);
  bd2802_write_byte(led->client, 5, (u8 )val);
  up_write(& led->rwsem);
  return (count);
}
}
static struct device_attribute bd2802_reg0x05_attr  =    {{"0x05", & __this_module, 420}, 0, & bd2802_store_reg0x05};
static ssize_t bd2802_store_reg0x06(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___723  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x06",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    360, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___724  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x06",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    360, {{0UL, 0UL}}};
static ssize_t bd2802_store_reg0x06(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;
  int ______r ;
  int ______r___0 ;

  {
  __mptr = dev;
  tmp = i2c_get_clientdata((struct i2c_client *)((char *)__mptr - (unsigned int )(& ((struct i2c_client *)0)->dev)));
  led = tmp;
  ______r = ! (! (! count));
  ______f___723.__annonCompField3.miss_hit[______r] = ______f___723.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  ret = strict_strtoul(buf, 16, & val);
  ______r___0 = ! (! ret);
  ______f___724.__annonCompField3.miss_hit[______r___0] = ______f___724.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    return (ret);
  } else {

  }
  down_write(& led->rwsem);
  bd2802_write_byte(led->client, 6, (u8 )val);
  up_write(& led->rwsem);
  return (count);
}
}
static struct device_attribute bd2802_reg0x06_attr  =    {{"0x06", & __this_module, 420}, 0, & bd2802_store_reg0x06};
static ssize_t bd2802_store_reg0x07(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___725  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x07",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    361, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___726  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x07",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    361, {{0UL, 0UL}}};
static ssize_t bd2802_store_reg0x07(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;
  int ______r ;
  int ______r___0 ;

  {
  __mptr = dev;
  tmp = i2c_get_clientdata((struct i2c_client *)((char *)__mptr - (unsigned int )(& ((struct i2c_client *)0)->dev)));
  led = tmp;
  ______r = ! (! (! count));
  ______f___725.__annonCompField3.miss_hit[______r] = ______f___725.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  ret = strict_strtoul(buf, 16, & val);
  ______r___0 = ! (! ret);
  ______f___726.__annonCompField3.miss_hit[______r___0] = ______f___726.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    return (ret);
  } else {

  }
  down_write(& led->rwsem);
  bd2802_write_byte(led->client, 7, (u8 )val);
  up_write(& led->rwsem);
  return (count);
}
}
static struct device_attribute bd2802_reg0x07_attr  =    {{"0x07", & __this_module, 420}, 0, & bd2802_store_reg0x07};
static ssize_t bd2802_store_reg0x08(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___727  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x08",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    362, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___728  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x08",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    362, {{0UL, 0UL}}};
static ssize_t bd2802_store_reg0x08(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;
  int ______r ;
  int ______r___0 ;

  {
  __mptr = dev;
  tmp = i2c_get_clientdata((struct i2c_client *)((char *)__mptr - (unsigned int )(& ((struct i2c_client *)0)->dev)));
  led = tmp;
  ______r = ! (! (! count));
  ______f___727.__annonCompField3.miss_hit[______r] = ______f___727.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  ret = strict_strtoul(buf, 16, & val);
  ______r___0 = ! (! ret);
  ______f___728.__annonCompField3.miss_hit[______r___0] = ______f___728.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    return (ret);
  } else {

  }
  down_write(& led->rwsem);
  bd2802_write_byte(led->client, 8, (u8 )val);
  up_write(& led->rwsem);
  return (count);
}
}
static struct device_attribute bd2802_reg0x08_attr  =    {{"0x08", & __this_module, 420}, 0, & bd2802_store_reg0x08};
static ssize_t bd2802_store_reg0x09(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___729  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x09",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    363, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___730  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x09",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    363, {{0UL, 0UL}}};
static ssize_t bd2802_store_reg0x09(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;
  int ______r ;
  int ______r___0 ;

  {
  __mptr = dev;
  tmp = i2c_get_clientdata((struct i2c_client *)((char *)__mptr - (unsigned int )(& ((struct i2c_client *)0)->dev)));
  led = tmp;
  ______r = ! (! (! count));
  ______f___729.__annonCompField3.miss_hit[______r] = ______f___729.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  ret = strict_strtoul(buf, 16, & val);
  ______r___0 = ! (! ret);
  ______f___730.__annonCompField3.miss_hit[______r___0] = ______f___730.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    return (ret);
  } else {

  }
  down_write(& led->rwsem);
  bd2802_write_byte(led->client, 9, (u8 )val);
  up_write(& led->rwsem);
  return (count);
}
}
static struct device_attribute bd2802_reg0x09_attr  =    {{"0x09", & __this_module, 420}, 0, & bd2802_store_reg0x09};
static ssize_t bd2802_store_reg0x0a(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___731  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x0a",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    364, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___732  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x0a",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    364, {{0UL, 0UL}}};
static ssize_t bd2802_store_reg0x0a(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;
  int ______r ;
  int ______r___0 ;

  {
  __mptr = dev;
  tmp = i2c_get_clientdata((struct i2c_client *)((char *)__mptr - (unsigned int )(& ((struct i2c_client *)0)->dev)));
  led = tmp;
  ______r = ! (! (! count));
  ______f___731.__annonCompField3.miss_hit[______r] = ______f___731.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  ret = strict_strtoul(buf, 16, & val);
  ______r___0 = ! (! ret);
  ______f___732.__annonCompField3.miss_hit[______r___0] = ______f___732.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    return (ret);
  } else {

  }
  down_write(& led->rwsem);
  bd2802_write_byte(led->client, 10, (u8 )val);
  up_write(& led->rwsem);
  return (count);
}
}
static struct device_attribute bd2802_reg0x0a_attr  =    {{"0x0a", & __this_module, 420}, 0, & bd2802_store_reg0x0a};
static ssize_t bd2802_store_reg0x0b(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___733  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x0b",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    365, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___734  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x0b",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    365, {{0UL, 0UL}}};
static ssize_t bd2802_store_reg0x0b(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;
  int ______r ;
  int ______r___0 ;

  {
  __mptr = dev;
  tmp = i2c_get_clientdata((struct i2c_client *)((char *)__mptr - (unsigned int )(& ((struct i2c_client *)0)->dev)));
  led = tmp;
  ______r = ! (! (! count));
  ______f___733.__annonCompField3.miss_hit[______r] = ______f___733.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  ret = strict_strtoul(buf, 16, & val);
  ______r___0 = ! (! ret);
  ______f___734.__annonCompField3.miss_hit[______r___0] = ______f___734.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    return (ret);
  } else {

  }
  down_write(& led->rwsem);
  bd2802_write_byte(led->client, 11, (u8 )val);
  up_write(& led->rwsem);
  return (count);
}
}
static struct device_attribute bd2802_reg0x0b_attr  =    {{"0x0b", & __this_module, 420}, 0, & bd2802_store_reg0x0b};
static ssize_t bd2802_store_reg0x0c(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___735  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x0c",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    366, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___736  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x0c",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    366, {{0UL, 0UL}}};
static ssize_t bd2802_store_reg0x0c(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;
  int ______r ;
  int ______r___0 ;

  {
  __mptr = dev;
  tmp = i2c_get_clientdata((struct i2c_client *)((char *)__mptr - (unsigned int )(& ((struct i2c_client *)0)->dev)));
  led = tmp;
  ______r = ! (! (! count));
  ______f___735.__annonCompField3.miss_hit[______r] = ______f___735.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  ret = strict_strtoul(buf, 16, & val);
  ______r___0 = ! (! ret);
  ______f___736.__annonCompField3.miss_hit[______r___0] = ______f___736.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    return (ret);
  } else {

  }
  down_write(& led->rwsem);
  bd2802_write_byte(led->client, 12, (u8 )val);
  up_write(& led->rwsem);
  return (count);
}
}
static struct device_attribute bd2802_reg0x0c_attr  =    {{"0x0c", & __this_module, 420}, 0, & bd2802_store_reg0x0c};
static ssize_t bd2802_store_reg0x0d(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___737  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x0d",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    367, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___738  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x0d",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    367, {{0UL, 0UL}}};
static ssize_t bd2802_store_reg0x0d(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;
  int ______r ;
  int ______r___0 ;

  {
  __mptr = dev;
  tmp = i2c_get_clientdata((struct i2c_client *)((char *)__mptr - (unsigned int )(& ((struct i2c_client *)0)->dev)));
  led = tmp;
  ______r = ! (! (! count));
  ______f___737.__annonCompField3.miss_hit[______r] = ______f___737.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  ret = strict_strtoul(buf, 16, & val);
  ______r___0 = ! (! ret);
  ______f___738.__annonCompField3.miss_hit[______r___0] = ______f___738.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    return (ret);
  } else {

  }
  down_write(& led->rwsem);
  bd2802_write_byte(led->client, 13, (u8 )val);
  up_write(& led->rwsem);
  return (count);
}
}
static struct device_attribute bd2802_reg0x0d_attr  =    {{"0x0d", & __this_module, 420}, 0, & bd2802_store_reg0x0d};
static ssize_t bd2802_store_reg0x0e(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___739  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x0e",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    368, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___740  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x0e",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    368, {{0UL, 0UL}}};
static ssize_t bd2802_store_reg0x0e(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;
  int ______r ;
  int ______r___0 ;

  {
  __mptr = dev;
  tmp = i2c_get_clientdata((struct i2c_client *)((char *)__mptr - (unsigned int )(& ((struct i2c_client *)0)->dev)));
  led = tmp;
  ______r = ! (! (! count));
  ______f___739.__annonCompField3.miss_hit[______r] = ______f___739.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  ret = strict_strtoul(buf, 16, & val);
  ______r___0 = ! (! ret);
  ______f___740.__annonCompField3.miss_hit[______r___0] = ______f___740.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    return (ret);
  } else {

  }
  down_write(& led->rwsem);
  bd2802_write_byte(led->client, 14, (u8 )val);
  up_write(& led->rwsem);
  return (count);
}
}
static struct device_attribute bd2802_reg0x0e_attr  =    {{"0x0e", & __this_module, 420}, 0, & bd2802_store_reg0x0e};
static ssize_t bd2802_store_reg0x0f(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___741  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x0f",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    369, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___742  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x0f",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    369, {{0UL, 0UL}}};
static ssize_t bd2802_store_reg0x0f(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;
  int ______r ;
  int ______r___0 ;

  {
  __mptr = dev;
  tmp = i2c_get_clientdata((struct i2c_client *)((char *)__mptr - (unsigned int )(& ((struct i2c_client *)0)->dev)));
  led = tmp;
  ______r = ! (! (! count));
  ______f___741.__annonCompField3.miss_hit[______r] = ______f___741.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  ret = strict_strtoul(buf, 16, & val);
  ______r___0 = ! (! ret);
  ______f___742.__annonCompField3.miss_hit[______r___0] = ______f___742.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    return (ret);
  } else {

  }
  down_write(& led->rwsem);
  bd2802_write_byte(led->client, 15, (u8 )val);
  up_write(& led->rwsem);
  return (count);
}
}
static struct device_attribute bd2802_reg0x0f_attr  =    {{"0x0f", & __this_module, 420}, 0, & bd2802_store_reg0x0f};
static ssize_t bd2802_store_reg0x10(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___743  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x10",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    370, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___744  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x10",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    370, {{0UL, 0UL}}};
static ssize_t bd2802_store_reg0x10(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;
  int ______r ;
  int ______r___0 ;

  {
  __mptr = dev;
  tmp = i2c_get_clientdata((struct i2c_client *)((char *)__mptr - (unsigned int )(& ((struct i2c_client *)0)->dev)));
  led = tmp;
  ______r = ! (! (! count));
  ______f___743.__annonCompField3.miss_hit[______r] = ______f___743.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  ret = strict_strtoul(buf, 16, & val);
  ______r___0 = ! (! ret);
  ______f___744.__annonCompField3.miss_hit[______r___0] = ______f___744.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    return (ret);
  } else {

  }
  down_write(& led->rwsem);
  bd2802_write_byte(led->client, 16, (u8 )val);
  up_write(& led->rwsem);
  return (count);
}
}
static struct device_attribute bd2802_reg0x10_attr  =    {{"0x10", & __this_module, 420}, 0, & bd2802_store_reg0x10};
static ssize_t bd2802_store_reg0x11(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___745  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x11",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    371, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___746  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x11",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    371, {{0UL, 0UL}}};
static ssize_t bd2802_store_reg0x11(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;
  int ______r ;
  int ______r___0 ;

  {
  __mptr = dev;
  tmp = i2c_get_clientdata((struct i2c_client *)((char *)__mptr - (unsigned int )(& ((struct i2c_client *)0)->dev)));
  led = tmp;
  ______r = ! (! (! count));
  ______f___745.__annonCompField3.miss_hit[______r] = ______f___745.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  ret = strict_strtoul(buf, 16, & val);
  ______r___0 = ! (! ret);
  ______f___746.__annonCompField3.miss_hit[______r___0] = ______f___746.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    return (ret);
  } else {

  }
  down_write(& led->rwsem);
  bd2802_write_byte(led->client, 17, (u8 )val);
  up_write(& led->rwsem);
  return (count);
}
}
static struct device_attribute bd2802_reg0x11_attr  =    {{"0x11", & __this_module, 420}, 0, & bd2802_store_reg0x11};
static ssize_t bd2802_store_reg0x12(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___747  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x12",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    372, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___748  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x12",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    372, {{0UL, 0UL}}};
static ssize_t bd2802_store_reg0x12(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;
  int ______r ;
  int ______r___0 ;

  {
  __mptr = dev;
  tmp = i2c_get_clientdata((struct i2c_client *)((char *)__mptr - (unsigned int )(& ((struct i2c_client *)0)->dev)));
  led = tmp;
  ______r = ! (! (! count));
  ______f___747.__annonCompField3.miss_hit[______r] = ______f___747.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  ret = strict_strtoul(buf, 16, & val);
  ______r___0 = ! (! ret);
  ______f___748.__annonCompField3.miss_hit[______r___0] = ______f___748.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    return (ret);
  } else {

  }
  down_write(& led->rwsem);
  bd2802_write_byte(led->client, 18, (u8 )val);
  up_write(& led->rwsem);
  return (count);
}
}
static struct device_attribute bd2802_reg0x12_attr  =    {{"0x12", & __this_module, 420}, 0, & bd2802_store_reg0x12};
static ssize_t bd2802_store_reg0x13(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___749  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x13",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    373, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___750  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x13",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    373, {{0UL, 0UL}}};
static ssize_t bd2802_store_reg0x13(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;
  int ______r ;
  int ______r___0 ;

  {
  __mptr = dev;
  tmp = i2c_get_clientdata((struct i2c_client *)((char *)__mptr - (unsigned int )(& ((struct i2c_client *)0)->dev)));
  led = tmp;
  ______r = ! (! (! count));
  ______f___749.__annonCompField3.miss_hit[______r] = ______f___749.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  ret = strict_strtoul(buf, 16, & val);
  ______r___0 = ! (! ret);
  ______f___750.__annonCompField3.miss_hit[______r___0] = ______f___750.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    return (ret);
  } else {

  }
  down_write(& led->rwsem);
  bd2802_write_byte(led->client, 19, (u8 )val);
  up_write(& led->rwsem);
  return (count);
}
}
static struct device_attribute bd2802_reg0x13_attr  =    {{"0x13", & __this_module, 420}, 0, & bd2802_store_reg0x13};
static ssize_t bd2802_store_reg0x14(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___751  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x14",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    374, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___752  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x14",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    374, {{0UL, 0UL}}};
static ssize_t bd2802_store_reg0x14(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;
  int ______r ;
  int ______r___0 ;

  {
  __mptr = dev;
  tmp = i2c_get_clientdata((struct i2c_client *)((char *)__mptr - (unsigned int )(& ((struct i2c_client *)0)->dev)));
  led = tmp;
  ______r = ! (! (! count));
  ______f___751.__annonCompField3.miss_hit[______r] = ______f___751.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  ret = strict_strtoul(buf, 16, & val);
  ______r___0 = ! (! ret);
  ______f___752.__annonCompField3.miss_hit[______r___0] = ______f___752.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    return (ret);
  } else {

  }
  down_write(& led->rwsem);
  bd2802_write_byte(led->client, 20, (u8 )val);
  up_write(& led->rwsem);
  return (count);
}
}
static struct device_attribute bd2802_reg0x14_attr  =    {{"0x14", & __this_module, 420}, 0, & bd2802_store_reg0x14};
static ssize_t bd2802_store_reg0x15(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___753  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x15",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    375, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___754  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_reg0x15",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    375, {{0UL, 0UL}}};
static ssize_t bd2802_store_reg0x15(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;
  int ______r ;
  int ______r___0 ;

  {
  __mptr = dev;
  tmp = i2c_get_clientdata((struct i2c_client *)((char *)__mptr - (unsigned int )(& ((struct i2c_client *)0)->dev)));
  led = tmp;
  ______r = ! (! (! count));
  ______f___753.__annonCompField3.miss_hit[______r] = ______f___753.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  ret = strict_strtoul(buf, 16, & val);
  ______r___0 = ! (! ret);
  ______f___754.__annonCompField3.miss_hit[______r___0] = ______f___754.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    return (ret);
  } else {

  }
  down_write(& led->rwsem);
  bd2802_write_byte(led->client, 21, (u8 )val);
  up_write(& led->rwsem);
  return (count);
}
}
static struct device_attribute bd2802_reg0x15_attr  =    {{"0x15", & __this_module, 420}, 0, & bd2802_store_reg0x15};
static struct device_attribute *bd2802_addr_attributes[22]  = 
  {      & bd2802_reg0x00_attr,      & bd2802_reg0x01_attr,      & bd2802_reg0x02_attr,      & bd2802_reg0x03_attr, 
        & bd2802_reg0x04_attr,      & bd2802_reg0x05_attr,      & bd2802_reg0x06_attr,      & bd2802_reg0x07_attr, 
        & bd2802_reg0x08_attr,      & bd2802_reg0x09_attr,      & bd2802_reg0x0a_attr,      & bd2802_reg0x0b_attr, 
        & bd2802_reg0x0c_attr,      & bd2802_reg0x0d_attr,      & bd2802_reg0x0e_attr,      & bd2802_reg0x0f_attr, 
        & bd2802_reg0x10_attr,      & bd2802_reg0x11_attr,      & bd2802_reg0x12_attr,      & bd2802_reg0x13_attr, 
        & bd2802_reg0x14_attr,      & bd2802_reg0x15_attr};
static void bd2802_enable_adv_conf(struct bd2802_led *led ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___755  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_enable_adv_conf",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    409, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___756  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_enable_adv_conf",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    416, {{0UL, 0UL}}};
static void bd2802_enable_adv_conf(struct bd2802_led *led ) 
{ 
  int i ;
  int ret ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int ______r ;
  int ______r___0 ;
  int tmp___4 ;
  int tmp___5 ;

  {
  i = 0;
  while (1) {
    if ((unsigned long )i < sizeof(bd2802_addr_attributes) / sizeof(bd2802_addr_attributes[0]) + (sizeof(char [1 - 2 * 0]) - 1UL)) {

    } else {
      break;
    }
    ret = device_create_file(& (led->client)->dev, bd2802_addr_attributes[i]);
    ______r = ! (! ret);
    ______f___755.__annonCompField3.miss_hit[______r] = ______f___755.__annonCompField3.miss_hit[______r] + 1UL;
    if (______r) {
      tmp = dev_name(& (led->client)->dev);
      tmp___0 = dev_driver_string(& (led->client)->dev);
      printk("<3>%s %s: failed to sysfs file %s\n", tmp___0, tmp, (bd2802_addr_attributes[i])->attr.name);
      goto failed_remove_files;
    } else {

    }
    i = i + 1;
  }
  tmp___4 = bd2802_is_all_off(led);
  if (tmp___4) {
    tmp___5 = 1;
  } else {
    tmp___5 = 0;
  }
  ______r___0 = tmp___5;
  ______f___756.__annonCompField3.miss_hit[______r___0] = ______f___756.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    bd2802_reset_cancel(led);
  } else {

  }
  led->adf_on = 1;
  return;
  failed_remove_files: 
  i = i - 1;
  while (1) {
    if (i >= 0) {

    } else {
      break;
    }
    device_remove_file(& (led->client)->dev, bd2802_addr_attributes[i]);
    i = i - 1;
  }
  return;
}
}
static void bd2802_disable_adv_conf(struct bd2802_led *led ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___757  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_disable_adv_conf",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    437, {{0UL, 0UL}}};
static void bd2802_disable_adv_conf(struct bd2802_led *led ) 
{ 
  int i ;
  int ______r ;
  int tmp___2 ;
  int tmp___3 ;

  {
  i = 0;
  while (1) {
    if ((unsigned long )i < sizeof(bd2802_addr_attributes) / sizeof(bd2802_addr_attributes[0]) + (sizeof(char [1 - 2 * 0]) - 1UL)) {

    } else {
      break;
    }
    device_remove_file(& (led->client)->dev, bd2802_addr_attributes[i]);
    i = i + 1;
  }
  tmp___2 = bd2802_is_all_off(led);
  if (tmp___2) {
    tmp___3 = 1;
  } else {
    tmp___3 = 0;
  }
  ______r = tmp___3;
  ______f___757.__annonCompField3.miss_hit[______r] = ______f___757.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    gpio_set_value((led->pdata)->reset_gpio, 0);
  } else {

  }
  led->adf_on = 0;
  return;
}
}
static ssize_t bd2802_show_adv_conf(struct device *dev , struct device_attribute *attr ,
                                    char *buf ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___758  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_show_adv_conf",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    450, {{0UL, 0UL}}};
static ssize_t bd2802_show_adv_conf(struct device *dev , struct device_attribute *attr ,
                                    char *buf ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  ssize_t ret ;
  int tmp___0 ;
  int tmp___1 ;
  int ______r ;

  {
  __mptr = dev;
  tmp = i2c_get_clientdata((struct i2c_client *)((char *)__mptr - (unsigned int )(& ((struct i2c_client *)0)->dev)));
  led = tmp;
  down_read(& led->rwsem);
  ______r = ! (! led->adf_on);
  ______f___758.__annonCompField3.miss_hit[______r] = ______f___758.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    tmp___0 = sprintf(buf, "on\n");
    ret = tmp___0;
  } else {
    tmp___1 = sprintf(buf, "off\n");
    ret = tmp___1;
  }
  up_read(& led->rwsem);
  return (ret);
}
}
static ssize_t bd2802_store_adv_conf(struct device *dev , struct device_attribute *attr ,
                                     char const   *buf , size_t count ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___759  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_adv_conf",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    464, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___760  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_adv_conf",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    470, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___761  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_store_adv_conf",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    468, {{0UL, 0UL}}};
static ssize_t bd2802_store_adv_conf(struct device *dev , struct device_attribute *attr ,
                                     char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  int ______r ;
  int ______r___0 ;
  int tmp___4 ;
  int tmp___5 ;
  int ______r___1 ;
  int tmp___10 ;
  int tmp___11 ;

  {
  __mptr = dev;
  tmp = i2c_get_clientdata((struct i2c_client *)((char *)__mptr - (unsigned int )(& ((struct i2c_client *)0)->dev)));
  led = tmp;
  ______r = ! (! (! count));
  ______f___759.__annonCompField3.miss_hit[______r] = ______f___759.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  down_write(& led->rwsem);
  if (! led->adf_on) {
    tmp___10 = strncmp(buf, "on", 2);
    if (tmp___10) {
      tmp___11 = 0;
    } else {
      tmp___11 = 1;
    }
  } else {
    tmp___11 = 0;
  }
  ______r___1 = tmp___11;
  ______f___761.__annonCompField3.miss_hit[______r___1] = ______f___761.__annonCompField3.miss_hit[______r___1] + 1UL;
  if (______r___1) {
    bd2802_enable_adv_conf(led);
  } else {
    if (led->adf_on) {
      tmp___4 = strncmp(buf, "off", 3);
      if (tmp___4) {
        tmp___5 = 0;
      } else {
        tmp___5 = 1;
      }
    } else {
      tmp___5 = 0;
    }
    ______r___0 = tmp___5;
    ______f___760.__annonCompField3.miss_hit[______r___0] = ______f___760.__annonCompField3.miss_hit[______r___0] + 1UL;
    if (______r___0) {
      bd2802_disable_adv_conf(led);
    } else {

    }
  }
  up_write(& led->rwsem);
  return (count);
}
}
static struct device_attribute bd2802_adv_conf_attr  =    {{"advanced_configuration", & __this_module, 420}, & bd2802_show_adv_conf, & bd2802_store_adv_conf};
static void bd2802_led_work(struct work_struct *work ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___762  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_led_work",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    491, {{0UL, 0UL}}};
static void bd2802_led_work(struct work_struct *work ) 
{ 
  struct bd2802_led *led ;
  struct work_struct  const  *__mptr ;
  int ______r ;

  {
  __mptr = work;
  led = (struct bd2802_led *)((char *)__mptr - (unsigned int )(& ((struct bd2802_led *)0)->work));
  ______r = ! (! led->state);
  ______f___762.__annonCompField3.miss_hit[______r] = ______f___762.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    bd2802_turn_on(led, led->led_id, led->color, led->state);
  } else {
    bd2802_turn_off(led, led->led_id, led->color);
  }
  return;
}
}
static void bd2802_set_led1r_brightness(struct led_classdev *led_cdev , enum led_brightness value ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___763  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_set_led1r_brightness",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    525, {{0UL, 0UL}}};
static void bd2802_set_led1r_brightness(struct led_classdev *led_cdev , enum led_brightness value ) 
{ 
  struct bd2802_led *led ;
  struct led_classdev  const  *__mptr ;
  int ______r ;

  {
  __mptr = led_cdev;
  led = (struct bd2802_led *)((char *)__mptr - (unsigned int )(& ((struct bd2802_led *)0)->cdev_led1r));
  led->led_id = LED1;
  led->color = RED;
  ______r = ! (! ((unsigned int )value == (unsigned int )LED_OFF));
  ______f___763.__annonCompField3.miss_hit[______r] = ______f___763.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    led->state = BD2802_OFF;
  } else {
    led->state = BD2802_ON;
  }
  schedule_work(& led->work);
  return;
}
}
static int bd2802_set_led1r_blink(struct led_classdev *led_cdev , unsigned long *delay_on ,
                                  unsigned long *delay_off ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___764  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_set_led1r_blink",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    525, {{0UL, 0UL}}};
static int bd2802_set_led1r_blink(struct led_classdev *led_cdev , unsigned long *delay_on ,
                                  unsigned long *delay_off ) 
{ 
  struct bd2802_led *led ;
  struct led_classdev  const  *__mptr ;
  int ______r ;

  {
  __mptr = led_cdev;
  led = (struct bd2802_led *)((char *)__mptr - (unsigned int )(& ((struct bd2802_led *)0)->cdev_led1r));
  ______r = ! (! (*delay_on == 0UL || *delay_off == 0UL));
  ______f___764.__annonCompField3.miss_hit[______r] = ______f___764.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  led->led_id = LED1;
  led->color = RED;
  led->state = BD2802_BLINK;
  schedule_work(& led->work);
  return (0);
}
}
static void bd2802_set_led1g_brightness(struct led_classdev *led_cdev , enum led_brightness value ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___765  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_set_led1g_brightness",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    526, {{0UL, 0UL}}};
static void bd2802_set_led1g_brightness(struct led_classdev *led_cdev , enum led_brightness value ) 
{ 
  struct bd2802_led *led ;
  struct led_classdev  const  *__mptr ;
  int ______r ;

  {
  __mptr = led_cdev;
  led = (struct bd2802_led *)((char *)__mptr - (unsigned int )(& ((struct bd2802_led *)0)->cdev_led1g));
  led->led_id = LED1;
  led->color = GREEN;
  ______r = ! (! ((unsigned int )value == (unsigned int )LED_OFF));
  ______f___765.__annonCompField3.miss_hit[______r] = ______f___765.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    led->state = BD2802_OFF;
  } else {
    led->state = BD2802_ON;
  }
  schedule_work(& led->work);
  return;
}
}
static int bd2802_set_led1g_blink(struct led_classdev *led_cdev , unsigned long *delay_on ,
                                  unsigned long *delay_off ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___766  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_set_led1g_blink",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    526, {{0UL, 0UL}}};
static int bd2802_set_led1g_blink(struct led_classdev *led_cdev , unsigned long *delay_on ,
                                  unsigned long *delay_off ) 
{ 
  struct bd2802_led *led ;
  struct led_classdev  const  *__mptr ;
  int ______r ;

  {
  __mptr = led_cdev;
  led = (struct bd2802_led *)((char *)__mptr - (unsigned int )(& ((struct bd2802_led *)0)->cdev_led1g));
  ______r = ! (! (*delay_on == 0UL || *delay_off == 0UL));
  ______f___766.__annonCompField3.miss_hit[______r] = ______f___766.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  led->led_id = LED1;
  led->color = GREEN;
  led->state = BD2802_BLINK;
  schedule_work(& led->work);
  return (0);
}
}
static void bd2802_set_led1b_brightness(struct led_classdev *led_cdev , enum led_brightness value ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___767  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_set_led1b_brightness",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    527, {{0UL, 0UL}}};
static void bd2802_set_led1b_brightness(struct led_classdev *led_cdev , enum led_brightness value ) 
{ 
  struct bd2802_led *led ;
  struct led_classdev  const  *__mptr ;
  int ______r ;

  {
  __mptr = led_cdev;
  led = (struct bd2802_led *)((char *)__mptr - (unsigned int )(& ((struct bd2802_led *)0)->cdev_led1b));
  led->led_id = LED1;
  led->color = BLUE;
  ______r = ! (! ((unsigned int )value == (unsigned int )LED_OFF));
  ______f___767.__annonCompField3.miss_hit[______r] = ______f___767.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    led->state = BD2802_OFF;
  } else {
    led->state = BD2802_ON;
  }
  schedule_work(& led->work);
  return;
}
}
static int bd2802_set_led1b_blink(struct led_classdev *led_cdev , unsigned long *delay_on ,
                                  unsigned long *delay_off ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___768  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_set_led1b_blink",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    527, {{0UL, 0UL}}};
static int bd2802_set_led1b_blink(struct led_classdev *led_cdev , unsigned long *delay_on ,
                                  unsigned long *delay_off ) 
{ 
  struct bd2802_led *led ;
  struct led_classdev  const  *__mptr ;
  int ______r ;

  {
  __mptr = led_cdev;
  led = (struct bd2802_led *)((char *)__mptr - (unsigned int )(& ((struct bd2802_led *)0)->cdev_led1b));
  ______r = ! (! (*delay_on == 0UL || *delay_off == 0UL));
  ______f___768.__annonCompField3.miss_hit[______r] = ______f___768.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  led->led_id = LED1;
  led->color = BLUE;
  led->state = BD2802_BLINK;
  schedule_work(& led->work);
  return (0);
}
}
static void bd2802_set_led2r_brightness(struct led_classdev *led_cdev , enum led_brightness value ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___769  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_set_led2r_brightness",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    528, {{0UL, 0UL}}};
static void bd2802_set_led2r_brightness(struct led_classdev *led_cdev , enum led_brightness value ) 
{ 
  struct bd2802_led *led ;
  struct led_classdev  const  *__mptr ;
  int ______r ;

  {
  __mptr = led_cdev;
  led = (struct bd2802_led *)((char *)__mptr - (unsigned int )(& ((struct bd2802_led *)0)->cdev_led2r));
  led->led_id = LED2;
  led->color = RED;
  ______r = ! (! ((unsigned int )value == (unsigned int )LED_OFF));
  ______f___769.__annonCompField3.miss_hit[______r] = ______f___769.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    led->state = BD2802_OFF;
  } else {
    led->state = BD2802_ON;
  }
  schedule_work(& led->work);
  return;
}
}
static int bd2802_set_led2r_blink(struct led_classdev *led_cdev , unsigned long *delay_on ,
                                  unsigned long *delay_off ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___770  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_set_led2r_blink",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    528, {{0UL, 0UL}}};
static int bd2802_set_led2r_blink(struct led_classdev *led_cdev , unsigned long *delay_on ,
                                  unsigned long *delay_off ) 
{ 
  struct bd2802_led *led ;
  struct led_classdev  const  *__mptr ;
  int ______r ;

  {
  __mptr = led_cdev;
  led = (struct bd2802_led *)((char *)__mptr - (unsigned int )(& ((struct bd2802_led *)0)->cdev_led2r));
  ______r = ! (! (*delay_on == 0UL || *delay_off == 0UL));
  ______f___770.__annonCompField3.miss_hit[______r] = ______f___770.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  led->led_id = LED2;
  led->color = RED;
  led->state = BD2802_BLINK;
  schedule_work(& led->work);
  return (0);
}
}
static void bd2802_set_led2g_brightness(struct led_classdev *led_cdev , enum led_brightness value ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___771  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_set_led2g_brightness",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    529, {{0UL, 0UL}}};
static void bd2802_set_led2g_brightness(struct led_classdev *led_cdev , enum led_brightness value ) 
{ 
  struct bd2802_led *led ;
  struct led_classdev  const  *__mptr ;
  int ______r ;

  {
  __mptr = led_cdev;
  led = (struct bd2802_led *)((char *)__mptr - (unsigned int )(& ((struct bd2802_led *)0)->cdev_led2g));
  led->led_id = LED2;
  led->color = GREEN;
  ______r = ! (! ((unsigned int )value == (unsigned int )LED_OFF));
  ______f___771.__annonCompField3.miss_hit[______r] = ______f___771.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    led->state = BD2802_OFF;
  } else {
    led->state = BD2802_ON;
  }
  schedule_work(& led->work);
  return;
}
}
static int bd2802_set_led2g_blink(struct led_classdev *led_cdev , unsigned long *delay_on ,
                                  unsigned long *delay_off ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___772  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_set_led2g_blink",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    529, {{0UL, 0UL}}};
static int bd2802_set_led2g_blink(struct led_classdev *led_cdev , unsigned long *delay_on ,
                                  unsigned long *delay_off ) 
{ 
  struct bd2802_led *led ;
  struct led_classdev  const  *__mptr ;
  int ______r ;

  {
  __mptr = led_cdev;
  led = (struct bd2802_led *)((char *)__mptr - (unsigned int )(& ((struct bd2802_led *)0)->cdev_led2g));
  ______r = ! (! (*delay_on == 0UL || *delay_off == 0UL));
  ______f___772.__annonCompField3.miss_hit[______r] = ______f___772.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  led->led_id = LED2;
  led->color = GREEN;
  led->state = BD2802_BLINK;
  schedule_work(& led->work);
  return (0);
}
}
static void bd2802_set_led2b_brightness(struct led_classdev *led_cdev , enum led_brightness value ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___773  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_set_led2b_brightness",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    530, {{0UL, 0UL}}};
static void bd2802_set_led2b_brightness(struct led_classdev *led_cdev , enum led_brightness value ) 
{ 
  struct bd2802_led *led ;
  struct led_classdev  const  *__mptr ;
  int ______r ;

  {
  __mptr = led_cdev;
  led = (struct bd2802_led *)((char *)__mptr - (unsigned int )(& ((struct bd2802_led *)0)->cdev_led2b));
  led->led_id = LED2;
  led->color = BLUE;
  ______r = ! (! ((unsigned int )value == (unsigned int )LED_OFF));
  ______f___773.__annonCompField3.miss_hit[______r] = ______f___773.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    led->state = BD2802_OFF;
  } else {
    led->state = BD2802_ON;
  }
  schedule_work(& led->work);
  return;
}
}
static int bd2802_set_led2b_blink(struct led_classdev *led_cdev , unsigned long *delay_on ,
                                  unsigned long *delay_off ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___774  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_set_led2b_blink",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    530, {{0UL, 0UL}}};
static int bd2802_set_led2b_blink(struct led_classdev *led_cdev , unsigned long *delay_on ,
                                  unsigned long *delay_off ) 
{ 
  struct bd2802_led *led ;
  struct led_classdev  const  *__mptr ;
  int ______r ;

  {
  __mptr = led_cdev;
  led = (struct bd2802_led *)((char *)__mptr - (unsigned int )(& ((struct bd2802_led *)0)->cdev_led2b));
  ______r = ! (! (*delay_on == 0UL || *delay_off == 0UL));
  ______f___774.__annonCompField3.miss_hit[______r] = ______f___774.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    return (-22);
  } else {

  }
  led->led_id = LED2;
  led->color = BLUE;
  led->state = BD2802_BLINK;
  schedule_work(& led->work);
  return (0);
}
}
static struct lock_class_key __key___1  ;
static int bd2802_register_led_classdev(struct bd2802_led *led ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___775  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_register_led_classdev",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    545, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___776  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_register_led_classdev",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    558, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___777  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_register_led_classdev",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    571, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___778  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_register_led_classdev",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    584, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___779  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_register_led_classdev",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    597, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___780  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_register_led_classdev",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    610, {{0UL, 0UL}}};
static int bd2802_register_led_classdev(struct bd2802_led *led ) 
{ 
  int ret ;
  atomic_long_t __constr_expr_0 ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int ______r ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int ______r___0 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int ______r___1 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int ______r___2 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int ______r___3 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int ______r___4 ;

  {
  while (1) {
    __constr_expr_0.counter = 0;
    led->work.data = __constr_expr_0;
    lockdep_init_map(& led->work.lockdep_map, "&led->work", & __key___1, 0);
    INIT_LIST_HEAD(& led->work.entry);
    while (1) {
      led->work.func = & bd2802_led_work;
      break;
    }
    break;
  }
  led->cdev_led1r.name = "led1_R";
  led->cdev_led1r.brightness = LED_OFF;
  led->cdev_led1r.brightness_set = & bd2802_set_led1r_brightness;
  led->cdev_led1r.blink_set = & bd2802_set_led1r_blink;
  led->cdev_led1r.flags = led->cdev_led1r.flags | (1 << 16);
  ret = led_classdev_register(& (led->client)->dev, & led->cdev_led1r);
  ______r = ! (! (ret < 0));
  ______f___775.__annonCompField3.miss_hit[______r] = ______f___775.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    tmp = dev_name(& (led->client)->dev);
    tmp___0 = dev_driver_string(& (led->client)->dev);
    printk("<3>%s %s: couldn\'t register LED %s\n", tmp___0, tmp, led->cdev_led1r.name);
    goto failed_unregister_led1_R;
  } else {

  }
  led->cdev_led1g.name = "led1_G";
  led->cdev_led1g.brightness = LED_OFF;
  led->cdev_led1g.brightness_set = & bd2802_set_led1g_brightness;
  led->cdev_led1g.blink_set = & bd2802_set_led1g_blink;
  led->cdev_led1g.flags = led->cdev_led1g.flags | (1 << 16);
  ret = led_classdev_register(& (led->client)->dev, & led->cdev_led1g);
  ______r___0 = ! (! (ret < 0));
  ______f___776.__annonCompField3.miss_hit[______r___0] = ______f___776.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    tmp___1 = dev_name(& (led->client)->dev);
    tmp___2 = dev_driver_string(& (led->client)->dev);
    printk("<3>%s %s: couldn\'t register LED %s\n", tmp___2, tmp___1, led->cdev_led1g.name);
    goto failed_unregister_led1_G;
  } else {

  }
  led->cdev_led1b.name = "led1_B";
  led->cdev_led1b.brightness = LED_OFF;
  led->cdev_led1b.brightness_set = & bd2802_set_led1b_brightness;
  led->cdev_led1b.blink_set = & bd2802_set_led1b_blink;
  led->cdev_led1b.flags = led->cdev_led1b.flags | (1 << 16);
  ret = led_classdev_register(& (led->client)->dev, & led->cdev_led1b);
  ______r___1 = ! (! (ret < 0));
  ______f___777.__annonCompField3.miss_hit[______r___1] = ______f___777.__annonCompField3.miss_hit[______r___1] + 1UL;
  if (______r___1) {
    tmp___3 = dev_name(& (led->client)->dev);
    tmp___4 = dev_driver_string(& (led->client)->dev);
    printk("<3>%s %s: couldn\'t register LED %s\n", tmp___4, tmp___3, led->cdev_led1b.name);
    goto failed_unregister_led1_B;
  } else {

  }
  led->cdev_led2r.name = "led2_R";
  led->cdev_led2r.brightness = LED_OFF;
  led->cdev_led2r.brightness_set = & bd2802_set_led2r_brightness;
  led->cdev_led2r.blink_set = & bd2802_set_led2r_blink;
  led->cdev_led2r.flags = led->cdev_led2r.flags | (1 << 16);
  ret = led_classdev_register(& (led->client)->dev, & led->cdev_led2r);
  ______r___2 = ! (! (ret < 0));
  ______f___778.__annonCompField3.miss_hit[______r___2] = ______f___778.__annonCompField3.miss_hit[______r___2] + 1UL;
  if (______r___2) {
    tmp___5 = dev_name(& (led->client)->dev);
    tmp___6 = dev_driver_string(& (led->client)->dev);
    printk("<3>%s %s: couldn\'t register LED %s\n", tmp___6, tmp___5, led->cdev_led2r.name);
    goto failed_unregister_led2_R;
  } else {

  }
  led->cdev_led2g.name = "led2_G";
  led->cdev_led2g.brightness = LED_OFF;
  led->cdev_led2g.brightness_set = & bd2802_set_led2g_brightness;
  led->cdev_led2g.blink_set = & bd2802_set_led2g_blink;
  led->cdev_led2g.flags = led->cdev_led2g.flags | (1 << 16);
  ret = led_classdev_register(& (led->client)->dev, & led->cdev_led2g);
  ______r___3 = ! (! (ret < 0));
  ______f___779.__annonCompField3.miss_hit[______r___3] = ______f___779.__annonCompField3.miss_hit[______r___3] + 1UL;
  if (______r___3) {
    tmp___7 = dev_name(& (led->client)->dev);
    tmp___8 = dev_driver_string(& (led->client)->dev);
    printk("<3>%s %s: couldn\'t register LED %s\n", tmp___8, tmp___7, led->cdev_led2g.name);
    goto failed_unregister_led2_G;
  } else {

  }
  led->cdev_led2b.name = "led2_B";
  led->cdev_led2b.brightness = LED_OFF;
  led->cdev_led2b.brightness_set = & bd2802_set_led2b_brightness;
  led->cdev_led2b.blink_set = & bd2802_set_led2b_blink;
  led->cdev_led2b.flags = led->cdev_led2b.flags | (1 << 16);
  ret = led_classdev_register(& (led->client)->dev, & led->cdev_led2b);
  ______r___4 = ! (! (ret < 0));
  ______f___780.__annonCompField3.miss_hit[______r___4] = ______f___780.__annonCompField3.miss_hit[______r___4] + 1UL;
  if (______r___4) {
    tmp___9 = dev_name(& (led->client)->dev);
    tmp___10 = dev_driver_string(& (led->client)->dev);
    printk("<3>%s %s: couldn\'t register LED %s\n", tmp___10, tmp___9, led->cdev_led2b.name);
    goto failed_unregister_led2_B;
  } else {

  }
  return (0);
  failed_unregister_led2_B: 
  led_classdev_unregister(& led->cdev_led2g);
  failed_unregister_led2_G: 
  led_classdev_unregister(& led->cdev_led2r);
  failed_unregister_led2_R: 
  led_classdev_unregister(& led->cdev_led1b);
  failed_unregister_led1_B: 
  led_classdev_unregister(& led->cdev_led1g);
  failed_unregister_led1_G: 
  led_classdev_unregister(& led->cdev_led1r);
  failed_unregister_led1_R: 
  return (ret);
}
}
static void bd2802_unregister_led_classdev(struct bd2802_led *led ) 
{ 


  {
  cancel_work_sync(& led->work);
  led_classdev_unregister(& led->cdev_led1r);
  return;
}
}
static int bd2802_probe(struct i2c_client *client , struct i2c_device_id  const  *id )  __attribute__((__section__(".devinit.text"))) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___781  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_probe",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    647, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___782  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_probe",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    665, {{0UL, 0UL}}};
static struct lock_class_key __key___2  ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___783  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_probe",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    677, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___784  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_probe",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    684, {{0UL, 0UL}}};
static int bd2802_probe(struct i2c_client *client , struct i2c_device_id  const  *id )  __attribute__((__section__(".devinit.text"))) ;
static int bd2802_probe(struct i2c_client *client , struct i2c_device_id  const  *id ) 
{ 
  struct bd2802_led *led ;
  struct bd2802_led_platform_data *pdata ;
  int ret ;
  void *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int ______r ;
  struct bd2802_led_platform_data *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int ______r___0 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int ______r___1 ;
  int ______r___2 ;

  {
  tmp = kzalloc(sizeof(struct bd2802_led ), (16U | 64U) | 128U);
  led = tmp;
  ______r = ! (! (! led));
  ______f___781.__annonCompField3.miss_hit[______r] = ______f___781.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    tmp___0 = dev_name(& client->dev);
    tmp___1 = dev_driver_string(& client->dev);
    printk("<3>%s %s: failed to allocate driver data\n", tmp___1, tmp___0);
    return (-12);
  } else {

  }
  led->client = client;
  tmp___2 = client->dev.platform_data;
  led->pdata = tmp___2;
  pdata = tmp___2;
  i2c_set_clientdata(client, led);
  gpio_request(pdata->reset_gpio, "RGB_RESETB");
  gpio_direction_output(pdata->reset_gpio, 1);
  if (100 > 20000) {
    __bad_udelay();
  } else {
    __const_udelay(100UL * 4295UL);
  }
  ret = bd2802_write_byte(client, 0, 0);
  ______r___0 = ! (! (ret < 0));
  ______f___782.__annonCompField3.miss_hit[______r___0] = ______f___782.__annonCompField3.miss_hit[______r___0] + 1UL;
  if (______r___0) {
    tmp___3 = dev_name(& client->dev);
    tmp___4 = dev_driver_string(& client->dev);
    printk("<3>%s %s: failed to detect device\n", tmp___4, tmp___3);
    goto failed_free;
  } else {
    tmp___5 = dev_name(& client->dev);
    tmp___6 = dev_driver_string(& client->dev);
    printk("<6>%s %s: return 0x%02x\n", tmp___6, tmp___5, ret);
  }
  gpio_set_value((led->pdata)->reset_gpio, 0);
  while (1) {
    __init_rwsem(& led->rwsem, "&led->rwsem", & __key___2);
    break;
  }
  ret = device_create_file(& client->dev, & bd2802_adv_conf_attr);
  ______r___1 = ! (! ret);
  ______f___783.__annonCompField3.miss_hit[______r___1] = ______f___783.__annonCompField3.miss_hit[______r___1] + 1UL;
  if (______r___1) {
    tmp___7 = dev_name(& client->dev);
    tmp___8 = dev_driver_string(& client->dev);
    printk("<3>%s %s: failed to create sysfs file %s\n", tmp___8, tmp___7, bd2802_adv_conf_attr.attr.name);
    goto failed_free;
  } else {

  }
  ret = bd2802_register_led_classdev(led);
  ______r___2 = ! (! (ret < 0));
  ______f___784.__annonCompField3.miss_hit[______r___2] = ______f___784.__annonCompField3.miss_hit[______r___2] + 1UL;
  if (______r___2) {
    goto failed_unregister_dev_file;
  } else {

  }
  return (0);
  failed_unregister_dev_file: 
  device_remove_file(& client->dev, & bd2802_adv_conf_attr);
  failed_free: 
  i2c_set_clientdata(client, (void *)0);
  kfree(led);
  return (ret);
}
}
static int bd2802_remove(struct i2c_client *client )  __attribute__((__section__(".exit.text"))) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___785  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_remove",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    704, {{0UL, 0UL}}};
static int bd2802_remove(struct i2c_client *client )  __attribute__((__section__(".exit.text"))) ;
static int bd2802_remove(struct i2c_client *client ) 
{ 
  struct bd2802_led *led ;
  void *tmp ;
  int ______r ;

  {
  tmp = i2c_get_clientdata(client);
  led = tmp;
  bd2802_unregister_led_classdev(led);
  gpio_set_value((led->pdata)->reset_gpio, 0);
  ______r = ! (! led->adf_on);
  ______f___785.__annonCompField3.miss_hit[______r] = ______f___785.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    bd2802_disable_adv_conf(led);
  } else {

  }
  device_remove_file(& client->dev, & bd2802_adv_conf_attr);
  i2c_set_clientdata(client, (void *)0);
  kfree(led);
  return (0);
}
}
static int bd2802_suspend(struct i2c_client *client , pm_message_t mesg ) 
{ 
  struct bd2802_led *led ;
  void *tmp ;

  {
  tmp = i2c_get_clientdata(client);
  led = tmp;
  gpio_set_value((led->pdata)->reset_gpio, 0);
  return (0);
}
}
static int bd2802_resume(struct i2c_client *client ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___786  __attribute__((__section__("_ftrace_branch")))  =    {"bd2802_resume",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    726, {{0UL, 0UL}}};
static int bd2802_resume(struct i2c_client *client ) 
{ 
  struct bd2802_led *led ;
  void *tmp ;
  int ______r ;
  int tmp___4 ;
  int tmp___5 ;

  {
  tmp = i2c_get_clientdata(client);
  led = tmp;
  tmp___4 = bd2802_is_all_off(led);
  if (tmp___4) {
    if (led->adf_on) {
      tmp___5 = 1;
    } else {
      tmp___5 = 0;
    }
  } else {
    tmp___5 = 1;
  }
  ______r = tmp___5;
  ______f___786.__annonCompField3.miss_hit[______r] = ______f___786.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    gpio_set_value((led->pdata)->reset_gpio, 1);
    if (100 > 20000) {
      __bad_udelay();
    } else {
      __const_udelay(100UL * 4295UL);
    }
    bd2802_restore_state(led);
  } else {

  }
  return (0);
}
}
static struct i2c_device_id  const  bd2802_id[1]  = {      {{'B', 'D', '2', '8', '0', '2', '\000'}, 0}};
extern struct i2c_device_id  const  __mod_i2c_device_table  __attribute__((__unused__,
__alias__("bd2802_id"))) ;
static struct i2c_driver bd2802_i2c_driver  = 
     {0, 0U, 0, 0, 0, & bd2802_probe, & bd2802_remove, 0, & bd2802_suspend, & bd2802_resume,
    0, {"BD2802", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, bd2802_id, 0, 0, {0, 0}};
static int bd2802_init(void)  __attribute__((__section__(".init.text"), __no_instrument_function__)) ;
static int bd2802_init(void) 
{ 
  int tmp ;

  {
  tmp = i2c_add_driver(& bd2802_i2c_driver);
  return (tmp);
}
}
int init_module(void) 
{ 
  int tmp ;

  {
  tmp = bd2802_init();
  return (tmp);
}
}
static void bd2802_exit(void)  __attribute__((__section__(".exit.text"))) ;
static void bd2802_exit(void) 
{ 


  {
  i2c_del_driver(& bd2802_i2c_driver);
  return;
}
}
void cleanup_module(void) 
{ 


  {
  bd2802_exit();
  return;
}
}
static char const   __mod_author764[39]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
  {      'a',      'u',      't',      'h', 
        'o',      'r',      '=',      'K', 
        'i',      'm',      ' ',      'K', 
        'y',      'u',      'w',      'o', 
        'n',      ' ',      '<',      'q', 
        '1',      '.',      'k',      'i', 
        'm',      '@',      's',      'a', 
        'm',      's',      'u',      'n', 
        'g',      '.',      'c',      'o', 
        'm',      '>',      '\000'};
static char const   __mod_description765[30]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
  {      'd',      'e',      's',      'c', 
        'r',      'i',      'p',      't', 
        'i',      'o',      'n',      '=', 
        'B',      'D',      '2',      '8', 
        '0',      '2',      ' ',      'L', 
        'E',      'D',      ' ',      'd', 
        'r',      'i',      'v',      'e', 
        'r',      '\000'};
static char const   __mod_license766[12]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
  {      'l',      'i',      'c',      'e', 
        'n',      's',      'e',      '=', 
        'G',      'P',      'L',      '\000'};
void ldv_check_final_state(void) ;
extern void ldv_check_return_value(int res ) ;
extern void ldv_check_return_value_probe(int res ) ;
extern void ldv_initialize(void) ;
extern void ldv_handler_precall(void) ;
extern int nondet_int(void) ;
int LDV_IN_INTERRUPT  ;
static int res_bd2802_probe_22  ;
static int res_bd2802_remove_23  ;
int main(void) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___787  __attribute__((__section__("_ftrace_branch")))  =    {"main",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    1307, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___788  __attribute__((__section__("_ftrace_branch")))  =    {"main",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    1556, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___789  __attribute__((__section__("_ftrace_branch")))  =    {"main",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    1486, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___790  __attribute__((__section__("_ftrace_branch")))  =    {"main",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    1638, {{0UL, 0UL}}};
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___791  __attribute__((__section__("_ftrace_branch")))  =    {"main",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/leds/leds-bd2802.c",
    1568, {{0UL, 0UL}}};
int main(void) 
{ 
  struct device *var_group1 ;
  struct device_attribute *var_group2 ;
  char *var_bd2802_show_adv_conf_17_p2 ;
  char const   *var_bd2802_store_adv_conf_18_p2 ;
  size_t var_bd2802_store_adv_conf_18_p3 ;
  struct i2c_client *var_group3 ;
  struct i2c_device_id  const  *var_bd2802_probe_22_p1 ;
  pm_message_t var_bd2802_suspend_24_p1 ;
  int ______r ;
  int tmp___2 ;
  int tmp___3 ;
  int ldv_s_bd2802_i2c_driver_i2c_driver ;
  int tmp___4 ;
  int ______r___0 ;
  int ______r___1 ;
  int ______r___2 ;
  int ______r___3 ;
  int tmp___5 ;

  {
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  ldv_handler_precall();
  tmp___2 = bd2802_init();
  if (tmp___2) {
    tmp___3 = 1;
  } else {
    tmp___3 = 0;
  }
  ______r = tmp___3;
  ______f___787.__annonCompField3.miss_hit[______r] = ______f___787.__annonCompField3.miss_hit[______r] + 1UL;
  if (______r) {
    goto ldv_final;
  } else {

  }
  ldv_s_bd2802_i2c_driver_i2c_driver = 0;
  while (1) {
    tmp___5 = nondet_int();
    if (tmp___5 || ! (ldv_s_bd2802_i2c_driver_i2c_driver == 0)) {

    } else {
      break;
    }
    tmp___4 = nondet_int();
    switch (tmp___4) {
    case 0: 
    ldv_handler_precall();
    bd2802_show_adv_conf(var_group1, var_group2, var_bd2802_show_adv_conf_17_p2);
    break;
    case 1: 
    ldv_handler_precall();
    bd2802_store_adv_conf(var_group1, var_group2, var_bd2802_store_adv_conf_18_p2,
                          var_bd2802_store_adv_conf_18_p3);
    break;
    case 2: 
    ______r___1 = ! (! (ldv_s_bd2802_i2c_driver_i2c_driver == 0));
    ______f___789.__annonCompField3.miss_hit[______r___1] = ______f___789.__annonCompField3.miss_hit[______r___1] + 1UL;
    if (______r___1) {
      res_bd2802_probe_22 = bd2802_probe(var_group3, var_bd2802_probe_22_p1);
      ldv_check_return_value(res_bd2802_probe_22);
      ldv_check_return_value_probe(res_bd2802_probe_22);
      ______r___0 = ! (! res_bd2802_probe_22);
      ______f___788.__annonCompField3.miss_hit[______r___0] = ______f___788.__annonCompField3.miss_hit[______r___0] + 1UL;
      if (______r___0) {
        goto ldv_module_exit;
      } else {

      }
      ldv_s_bd2802_i2c_driver_i2c_driver = ldv_s_bd2802_i2c_driver_i2c_driver + 1;
    } else {

    }
    break;
    case 3: 
    ______r___3 = ! (! (ldv_s_bd2802_i2c_driver_i2c_driver == 1));
    ______f___791.__annonCompField3.miss_hit[______r___3] = ______f___791.__annonCompField3.miss_hit[______r___3] + 1UL;
    if (______r___3) {
      ldv_handler_precall();
      res_bd2802_remove_23 = bd2802_remove(var_group3);
      ldv_check_return_value(res_bd2802_remove_23);
      ______r___2 = ! (! res_bd2802_remove_23);
      ______f___790.__annonCompField3.miss_hit[______r___2] = ______f___790.__annonCompField3.miss_hit[______r___2] + 1UL;
      if (______r___2) {
        goto ldv_module_exit;
      } else {

      }
      ldv_s_bd2802_i2c_driver_i2c_driver = 0;
    } else {

    }
    break;
    case 4: 
    ldv_handler_precall();
    bd2802_suspend(var_group3, var_bd2802_suspend_24_p1);
    break;
    case 5: 
    ldv_handler_precall();
    bd2802_resume(var_group3);
    break;
    default: 
    break;
    }
  }
  ldv_module_exit: 
  ldv_handler_precall();
  bd2802_exit();
  ldv_final: 
  ldv_check_final_state();
  return 0;
}
}
long ldv__builtin_expect(long exp , long c ) ;
struct urb *usb_alloc_urb(int iso_packets , gfp_t mem_flags ) ;
void usb_free_urb(struct urb *urb ) ;
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: __VERIFIER_error();
}
}
__inline static void ldv_stop(void) 
{ 


  {
  LDV_STOP: 
  goto LDV_STOP;
}
}
extern void *ldv_undef_ptr(void) ;
long ldv__builtin_expect(long exp , long c ) 
{ 


  {
  return (exp);
}
}
int ldv_urb_state  =    0;
int ldv_coherent_state  =    0;
void *usb_alloc_coherent(struct usb_device *dev , size_t size , gfp_t mem_flags ,
                         dma_addr_t *dma ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___792  __attribute__((__section__("_ftrace_branch")))  =    {"usb_alloc_coherent",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c",
    47, {{0UL, 0UL}}};
void *usb_alloc_coherent(struct usb_device *dev , size_t size , gfp_t mem_flags ,
                         dma_addr_t *dma ) 
{ 
  void *arbitrary_memory ;
  void *tmp ;
  int ______r ;

  {
  while (1) {
    tmp = ldv_undef_ptr();
    arbitrary_memory = tmp;
    ______r = ! (! (! arbitrary_memory));
    ______f___792.__annonCompField3.miss_hit[______r] = ______f___792.__annonCompField3.miss_hit[______r] + 1UL;
    if (______r) {
      return ((void *)0);
    } else {

    }
    ldv_coherent_state = ldv_coherent_state + 1;
    return (arbitrary_memory);
    break;
  }
  return ((void *)0);
}
}
void usb_free_coherent(struct usb_device *dev , size_t size , void *addr , dma_addr_t dma ) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___793  __attribute__((__section__("_ftrace_branch")))  =    {"usb_free_coherent",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c",
    53, {{0UL, 0UL}}};
void usb_free_coherent(struct usb_device *dev , size_t size , void *addr , dma_addr_t dma ) 
{ 
  int ______r ;

  {
  while (1) {
    if ((unsigned long )addr != (unsigned long )((void *)0)) {

    } else {
      ldv_stop();
    }
    ______r = ! (! addr);
    ______f___793.__annonCompField3.miss_hit[______r] = ______f___793.__annonCompField3.miss_hit[______r] + 1UL;
    if (______r) {
      if (ldv_coherent_state >= 1) {

      } else {
        ldv_error();
      }
      ldv_coherent_state = ldv_coherent_state - 1;
    } else {

    }
    break;
  }
  return;
}
}
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___794  __attribute__((__section__("_ftrace_branch")))  =    {"usb_alloc_urb",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c",
    58, {{0UL, 0UL}}};
struct urb *usb_alloc_urb(int iso_packets , gfp_t mem_flags ) 
{ 
  void *arbitrary_memory ;
  void *tmp ;
  int ______r ;

  {
  while (1) {
    tmp = ldv_undef_ptr();
    arbitrary_memory = tmp;
    ______r = ! (! (! arbitrary_memory));
    ______f___794.__annonCompField3.miss_hit[______r] = ______f___794.__annonCompField3.miss_hit[______r] + 1UL;
    if (______r) {
      return ((void *)0);
    } else {

    }
    ldv_urb_state = ldv_urb_state + 1;
    return (arbitrary_memory);
    break;
  }
  return ((struct urb *)0);
}
}
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___795  __attribute__((__section__("_ftrace_branch")))  =    {"usb_free_urb",
    "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c",
    63, {{0UL, 0UL}}};
void usb_free_urb(struct urb *urb ) 
{ 
  int ______r ;

  {
  while (1) {
    if ((unsigned long )urb != (unsigned long )((struct urb *)0)) {

    } else {
      ldv_stop();
    }
    ______r = ! (! urb);
    ______f___795.__annonCompField3.miss_hit[______r] = ______f___795.__annonCompField3.miss_hit[______r] + 1UL;
    if (______r) {
      if (ldv_urb_state >= 1) {

      } else {
        ldv_error();
      }
      ldv_urb_state = ldv_urb_state - 1;
    } else {

    }
    break;
  }
  return;
}
}
void ldv_check_final_state(void) 
{ 


  {
  if (ldv_urb_state == 0) {

  } else {
    ldv_error();
  }
  if (ldv_coherent_state == 0) {

  } else {
    ldv_error();
  }
  return;
}
}
