extern void __VERIFIER_error() __attribute__ ((__noreturn__));

/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

typedef __builtin_va_list __gnuc_va_list[1U];
typedef __gnuc_va_list va_list[1U];
typedef unsigned int __kernel_mode_t;
typedef int __kernel_pid_t;
typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;
typedef unsigned long __kernel_size_t;
typedef long __kernel_ssize_t;
typedef long __kernel_time_t;
typedef long __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef long long __kernel_loff_t;
typedef __kernel_uid_t __kernel_uid32_t;
typedef __kernel_gid_t __kernel_gid32_t;
typedef signed char __s8;
typedef short __s16;
typedef unsigned short __u16;
typedef int __s32;
typedef unsigned int __u32;
typedef long long __s64;
typedef unsigned long long __u64;
typedef signed char s8;
typedef unsigned char u8;
typedef unsigned short u16;
typedef unsigned int u32;
typedef long long s64;
typedef unsigned long long u64;
typedef unsigned short umode_t;
typedef __u32 __kernel_dev_t;
typedef __kernel_dev_t dev_t;
typedef __kernel_mode_t mode_t;
typedef __kernel_pid_t pid_t;
typedef __kernel_timer_t timer_t;
typedef __kernel_clockid_t clockid_t;
typedef __kernel_uid32_t uid_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_loff_t loff_t;
typedef __kernel_size_t size_t;
typedef __kernel_ssize_t ssize_t;
typedef __kernel_time_t time_t;
typedef __kernel_clock_t clock_t;
typedef __s32 int32_t;
typedef __u32 uint32_t;
typedef unsigned long sector_t;
typedef unsigned long blkcnt_t;
typedef unsigned int gfp_t;
typedef unsigned int fmode_t;
typedef u64 phys_addr_t;
typedef phys_addr_t resource_size_t;
struct __anonstruct_atomic_t_6 {
   int volatile   counter ;
};
typedef struct __anonstruct_atomic_t_6 atomic_t;
struct __anonstruct_atomic64_t_7 {
   long volatile   counter ;
};
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
struct module;
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
struct completion;
struct pt_regs;
struct pid;
struct task_struct;
struct mm_struct;
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
union __anonunion_ldv_1758_8 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_1758_8 ldv_1758 ;
};
typedef unsigned long pgdval_t;
typedef unsigned long pgprotval_t;
struct page;
struct __anonstruct_pgd_t_11 {
   pgdval_t pgd ;
};
typedef struct __anonstruct_pgd_t_11 pgd_t;
struct __anonstruct_pgprot_t_12 {
   pgprotval_t pgprot ;
};
typedef struct __anonstruct_pgprot_t_12 pgprot_t;
struct __anonstruct_ldv_1923_16 {
   unsigned int a ;
   unsigned int b ;
};
struct __anonstruct_ldv_1938_17 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
union __anonunion_ldv_1939_15 {
   struct __anonstruct_ldv_1923_16 ldv_1923 ;
   struct __anonstruct_ldv_1938_17 ldv_1938 ;
};
struct desc_struct {
   union __anonunion_ldv_1939_15 ldv_1939 ;
};
struct gate_struct64 {
   u16 offset_low ;
   u16 segment ;
   unsigned char ist : 3 ;
   unsigned char zero0 : 5 ;
   unsigned char type : 5 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   u16 offset_middle ;
   u32 offset_high ;
   u32 zero1 ;
};
typedef struct gate_struct64 gate_desc;
struct desc_ptr {
   unsigned short size ;
   unsigned long address ;
};
struct cpumask {
   unsigned long bits[64U] ;
};
typedef struct cpumask cpumask_t;
struct thread_struct;
struct tss_struct;
struct pv_lazy_ops {
   void (*enter)(void) ;
   void (*leave)(void) ;
};
struct pv_cpu_ops {
   unsigned long (*get_debugreg)(int  ) ;
   void (*set_debugreg)(int  , unsigned long  ) ;
   void (*clts)(void) ;
   unsigned long (*read_cr0)(void) ;
   void (*write_cr0)(unsigned long  ) ;
   unsigned long (*read_cr4_safe)(void) ;
   unsigned long (*read_cr4)(void) ;
   void (*write_cr4)(unsigned long  ) ;
   unsigned long (*read_cr8)(void) ;
   void (*write_cr8)(unsigned long  ) ;
   void (*load_tr_desc)(void) ;
   void (*load_gdt)(struct desc_ptr  const  * ) ;
   void (*load_idt)(struct desc_ptr  const  * ) ;
   void (*store_gdt)(struct desc_ptr * ) ;
   void (*store_idt)(struct desc_ptr * ) ;
   void (*set_ldt)(void const   * , unsigned int  ) ;
   unsigned long (*store_tr)(void) ;
   void (*load_tls)(struct thread_struct * , unsigned int  ) ;
   void (*load_gs_index)(unsigned int  ) ;
   void (*write_ldt_entry)(struct desc_struct * , int  , void const   * ) ;
   void (*write_gdt_entry)(struct desc_struct * , int  , void const   * , int  ) ;
   void (*write_idt_entry)(gate_desc * , int  , gate_desc const   * ) ;
   void (*alloc_ldt)(struct desc_struct * , unsigned int  ) ;
   void (*free_ldt)(struct desc_struct * , unsigned int  ) ;
   void (*load_sp0)(struct tss_struct * , struct thread_struct * ) ;
   void (*set_iopl_mask)(unsigned int  ) ;
   void (*wbinvd)(void) ;
   void (*io_delay)(void) ;
   void (*cpuid)(unsigned int * , unsigned int * , unsigned int * , unsigned int * ) ;
   u64 (*read_msr_amd)(unsigned int  , int * ) ;
   u64 (*read_msr)(unsigned int  , int * ) ;
   int (*write_msr)(unsigned int  , unsigned int  , unsigned int  ) ;
   u64 (*read_tsc)(void) ;
   u64 (*read_pmc)(int  ) ;
   unsigned long long (*read_tscp)(unsigned int * ) ;
   void (*irq_enable_sysexit)(void) ;
   void (*usergs_sysret64)(void) ;
   void (*usergs_sysret32)(void) ;
   void (*iret)(void) ;
   void (*swapgs)(void) ;
   struct pv_lazy_ops lazy_mode ;
};
struct raw_spinlock;
struct ds_context;
struct bts_tracer;
struct exec_domain;
struct map_segment;
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
struct x86_hw_tss {
   u32 reserved1 ;
   u64 sp0 ;
   u64 sp1 ;
   u64 sp2 ;
   u64 reserved2 ;
   u64 ist[7U] ;
   u32 reserved3 ;
   u32 reserved4 ;
   u16 reserved5 ;
   u16 io_bitmap_base ;
};
struct tss_struct {
   struct x86_hw_tss x86_tss ;
   unsigned long io_bitmap[1025U] ;
   unsigned long io_bitmap_max ;
   struct thread_struct *io_bitmap_owner ;
   unsigned long stack[64U] ;
};
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
struct __anonstruct_ldv_4631_22 {
   u64 rip ;
   u64 rdp ;
};
struct __anonstruct_ldv_4637_23 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
union __anonunion_ldv_4638_21 {
   struct __anonstruct_ldv_4631_22 ldv_4631 ;
   struct __anonstruct_ldv_4637_23 ldv_4637 ;
};
union __anonunion_ldv_4647_24 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4638_21 ldv_4638 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4647_24 ldv_4647 ;
};
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
};
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
struct kmem_cache;
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long ip ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   struct ds_context *ds_ctx ;
   unsigned int bts_ovfl_signal ;
};
struct __anonstruct_mm_segment_t_25 {
   unsigned long seg ;
};
typedef struct __anonstruct_mm_segment_t_25 mm_segment_t;
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
struct hlist_node;
struct hlist_head {
   struct hlist_node *first ;
};
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
struct raw_spinlock {
   unsigned int slock ;
};
typedef struct raw_spinlock raw_spinlock_t;
struct __anonstruct_raw_rwlock_t_26 {
   unsigned int lock ;
};
typedef struct __anonstruct_raw_rwlock_t_26 raw_rwlock_t;
struct lockdep_map;
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[9U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
};
struct __anonstruct_spinlock_t_27 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
typedef struct __anonstruct_spinlock_t_27 spinlock_t;
struct __anonstruct_rwlock_t_28 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
typedef struct __anonstruct_rwlock_t_28 rwlock_t;
typedef atomic64_t atomic_long_t;
struct thread_info;
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct mutex *lock ;
   void *magic ;
};
struct timespec;
struct compat_timespec;
struct __anonstruct_ldv_5613_30 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
struct __anonstruct_futex_31 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
};
struct __anonstruct_nanosleep_32 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
struct pollfd;
struct __anonstruct_poll_33 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
union __anonunion_ldv_5635_29 {
   struct __anonstruct_ldv_5613_30 ldv_5613 ;
   struct __anonstruct_futex_31 futex ;
   struct __anonstruct_nanosleep_32 nanosleep ;
   struct __anonstruct_poll_33 poll ;
};
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_5635_29 ldv_5635 ;
};
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
};
struct timespec {
   time_t tv_sec ;
   long tv_nsec ;
};
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
struct __wait_queue;
typedef struct __wait_queue wait_queue_t;
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
typedef struct __wait_queue_head wait_queue_head_t;
struct __anonstruct_nodemask_t_35 {
   unsigned long bits[8U] ;
};
typedef struct __anonstruct_nodemask_t_35 nodemask_t;
struct rw_semaphore;
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
struct file;
struct device;
struct pm_message {
   int event ;
};
typedef struct pm_message pm_message_t;
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
};
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
};
struct __anonstruct_mm_context_t_83 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
typedef struct __anonstruct_mm_context_t_83 mm_context_t;
struct vm_area_struct;
struct key;
typedef __u64 Elf64_Addr;
typedef __u16 Elf64_Half;
typedef __u32 Elf64_Word;
typedef __u64 Elf64_Xword;
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
typedef struct elf64_sym Elf64_Sym;
struct kobject;
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
struct sysfs_dirent;
struct kref {
   atomic_t refcount ;
};
struct kset;
struct kobj_type;
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
};
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
struct kset_uevent_ops {
   int (*filter)(struct kset * , struct kobject * ) ;
   char const   *(*name)(struct kset * , struct kobject * ) ;
   int (*uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
struct marker;
typedef void marker_probe_func(void * , void * , char const   * , va_list * );
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  * , void *  , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
   char const   *tp_name ;
   void *tp_cb ;
};
union ktime {
   s64 tv64 ;
};
typedef union ktime ktime_t;
struct tvec_base;
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
};
struct hrtimer;
enum hrtimer_restart;
struct work_struct;
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[18U] ;
};
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   unsigned long min_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
struct kmem_cache_order_objects {
   unsigned long x ;
};
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[512U] ;
   struct kmem_cache_cpu *cpu_slab[4096U] ;
};
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
struct tracepoint;
struct tracepoint {
   char const   *name ;
   int state ;
   void **funcs ;
};
struct mod_arch_specific {

};
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
struct module_param_attrs;
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
struct exception_table_entry;
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
struct module_sect_attrs;
struct module_notes_attrs;
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   char *refptr ;
};
struct device_driver;
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const   *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
struct klist_node;
struct klist {
   spinlock_t k_lock ;
   struct list_head k_list ;
   void (*get)(struct klist_node * ) ;
   void (*put)(struct klist_node * ) ;
};
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
struct dma_mapping_ops;
struct dev_archdata {
   void *acpi_handle ;
   struct dma_mapping_ops *dma_ops ;
   void *iommu ;
};
struct driver_private;
struct class;
struct class_private;
struct bus_type;
struct bus_type_private;
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
struct device_attribute;
struct driver_attribute;
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*suspend_late)(struct device * , pm_message_t  ) ;
   int (*resume_early)(struct device * ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops *pm ;
   struct bus_type_private *p ;
};
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group **groups ;
   struct dev_pm_ops *pm ;
   struct driver_private *p ;
};
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
struct class_attribute;
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops *pm ;
   struct class_private *p ;
};
struct device_type;
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , char * ) ;
   ssize_t (*store)(struct class * , char const   * , size_t  ) ;
};
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops *pm ;
};
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
struct dma_coherent_mem;
struct device {
   struct klist klist_children ;
   struct klist_node knode_parent ;
   struct klist_node knode_driver ;
   struct klist_node knode_bus ;
   struct device *parent ;
   struct kobject kobj ;
   char bus_id[20U] ;
   unsigned char uevent_suppress : 1 ;
   char const   *init_name ;
   struct device_type *type ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device * ) ;
};
struct platform_device {
   char const   *name ;
   int id ;
   struct device dev ;
   u32 num_resources ;
   struct resource *resource ;
};
struct platform_driver {
   int (*probe)(struct platform_device * ) ;
   int (*remove)(struct platform_device * ) ;
   void (*shutdown)(struct platform_device * ) ;
   int (*suspend)(struct platform_device * , pm_message_t  ) ;
   int (*suspend_late)(struct platform_device * , pm_message_t  ) ;
   int (*resume_early)(struct platform_device * ) ;
   int (*resume)(struct platform_device * ) ;
   struct device_driver driver ;
};
struct sensor_device_attribute {
   struct device_attribute dev_attr ;
   int index ;
};
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
typedef struct kernel_cap_struct kernel_cap_t;
struct dentry;
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
struct rb_root {
   struct rb_node *rb_node ;
};
struct prio_tree_node;
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
struct address_space;
typedef atomic_long_t mm_counter_t;
struct __anonstruct_ldv_11153_98 {
   u16 inuse ;
   u16 objects ;
};
union __anonunion_ldv_11154_97 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_11153_98 ldv_11153 ;
};
struct __anonstruct_ldv_11159_100 {
   unsigned long private ;
   struct address_space *mapping ;
};
union __anonunion_ldv_11163_99 {
   struct __anonstruct_ldv_11159_100 ldv_11159 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
union __anonunion_ldv_11167_101 {
   unsigned long index ;
   void *freelist ;
};
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_11154_97 ldv_11154 ;
   union __anonunion_ldv_11163_99 ldv_11163 ;
   union __anonunion_ldv_11167_101 ldv_11167 ;
   struct list_head lru ;
};
struct __anonstruct_vm_set_103 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
union __anonunion_shared_102 {
   struct __anonstruct_vm_set_103 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
struct anon_vma;
struct vm_operations_struct;
struct mempolicy;
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_102 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
struct mmu_notifier_mm;
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
typedef unsigned long cputime_t;
struct sem_undo_list;
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
struct siginfo;
struct __anonstruct_sigset_t_104 {
   unsigned long sig[1U] ;
};
typedef struct __anonstruct_sigset_t_104 sigset_t;
typedef void __signalfn_t(int  );
typedef __signalfn_t *__sighandler_t;
typedef void __restorefn_t(void);
typedef __restorefn_t *__sigrestore_t;
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
struct k_sigaction {
   struct sigaction sa ;
};
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
typedef union sigval sigval_t;
struct __anonstruct__kill_106 {
   pid_t _pid ;
   uid_t _uid ;
};
struct __anonstruct__timer_107 {
   timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
struct __anonstruct__rt_108 {
   pid_t _pid ;
   uid_t _uid ;
   sigval_t _sigval ;
};
struct __anonstruct__sigchld_109 {
   pid_t _pid ;
   uid_t _uid ;
   int _status ;
   clock_t _utime ;
   clock_t _stime ;
};
struct __anonstruct__sigfault_110 {
   void *_addr ;
};
struct __anonstruct__sigpoll_111 {
   long _band ;
   int _fd ;
};
union __anonunion__sifields_105 {
   int _pad[28U] ;
   struct __anonstruct__kill_106 _kill ;
   struct __anonstruct__timer_107 _timer ;
   struct __anonstruct__rt_108 _rt ;
   struct __anonstruct__sigchld_109 _sigchld ;
   struct __anonstruct__sigfault_110 _sigfault ;
   struct __anonstruct__sigpoll_111 _sigpoll ;
};
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_105 _sifields ;
};
typedef struct siginfo siginfo_t;
struct user_struct;
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
struct vfsmount;
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
struct fs_struct {
   atomic_t count ;
   rwlock_t lock ;
   int umask ;
   struct path root ;
   struct path pwd ;
};
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
struct pid_namespace;
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
struct __anonstruct_seccomp_t_114 {
   int mode ;
};
typedef struct __anonstruct_seccomp_t_114 seccomp_t;
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
struct rt_mutex_waiter;
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
struct hrtimer_clock_base;
struct hrtimer_cpu_base;
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   struct list_head cb_entry ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
struct nsproxy;
typedef int32_t key_serial_t;
typedef uint32_t key_perm_t;
struct seq_file;
struct signal_struct;
struct cred;
struct key_type;
struct keyring_list;
struct key_user;
union __anonunion_type_data_115 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
};
union __anonunion_payload_116 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   time_t expiry ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_115 type_data ;
   union __anonunion_payload_116 payload ;
};
struct inode;
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
struct cred {
   atomic_t usage ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
struct futex_pi_state;
struct robust_list_head;
struct bio;
struct cfs_rq;
struct task_group;
struct user_namespace;
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
struct kioctx;
union __anonunion_ki_obj_117 {
   void *user ;
   struct task_struct *tsk ;
};
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_117 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
union __anonunion_ldv_13640_118 {
   pid_t pgrp ;
   pid_t __pgrp ;
};
union __anonunion_ldv_13645_119 {
   pid_t session ;
   pid_t __session ;
};
struct tty_struct;
struct taskstats;
struct tty_audit_buf;
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   union __anonunion_ldv_13640_118 ldv_13640 ;
   struct pid *tty_old_pgrp ;
   union __anonunion_ldv_13645_119 ldv_13645 ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
};
struct backing_dev_info;
struct reclaim_state;
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
struct sched_group {
   struct sched_group *next ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
   unsigned long cpumask[] ;
};
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[3U] ;
   unsigned int lb_failed[3U] ;
   unsigned int lb_balanced[3U] ;
   unsigned int lb_imbalance[3U] ;
   unsigned int lb_gained[3U] ;
   unsigned int lb_hot_gained[3U] ;
   unsigned int lb_nobusyg[3U] ;
   unsigned int lb_nobusyq[3U] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
   unsigned long span[] ;
};
struct io_context;
struct audit_context;
struct pipe_inode_info;
struct rq;
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  ) ;
   unsigned long (*load_balance)(struct rq * , int  , struct rq * , unsigned long  ,
                                 struct sched_domain * , enum cpu_idle_type  , int * ,
                                 int * ) ;
   int (*move_one_task)(struct rq * , int  , struct rq * , struct sched_domain * ,
                        enum cpu_idle_type  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_wake_up)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_new)(struct rq * , struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*moved_group)(struct task_struct * ) ;
};
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
struct rt_rq;
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
struct linux_binfmt;
struct files_struct;
struct css_set;
struct compat_robust_list_head;
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct bts_tracer *bts ;
   void *bts_buffer ;
   size_t bts_size ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_exec_mutex ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_timestamp ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   unsigned long trace ;
};
struct nameidata;
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
union __anonunion_d_u_127 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
struct dentry_operations;
struct super_block;
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_127 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32U] ;
};
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
struct radix_tree_node;
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
struct export_operations;
struct poll_table_struct;
struct kstatfs;
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
typedef struct fs_qfilestat fs_qfilestat_t;
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
struct dquot;
typedef __kernel_uid32_t qid_t;
typedef long long qsize_t;
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
struct quota_format_type;
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , qsize_t  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , qsize_t  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
};
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops *ops[2U] ;
};
struct writeback_control;
union __anonunion_arg_129 {
   char *buf ;
   void *data ;
};
struct __anonstruct_read_descriptor_t_128 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_129 arg ;
   int error ;
};
typedef struct __anonstruct_read_descriptor_t_128 read_descriptor_t;
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
};
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
struct hd_struct;
struct gendisk;
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
struct inode_operations;
struct file_operations;
struct file_lock;
struct cdev;
union __anonunion_ldv_17326_130 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
struct dnotify_struct;
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_17326_130 ldv_17326 ;
   int i_cindex ;
   __u32 i_generation ;
   unsigned long i_dnotify_mask ;
   struct dnotify_struct *i_dnotify ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
union __anonunion_f_u_131 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
struct file {
   union __anonunion_f_u_131 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   spinlock_t f_ep_lock ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
typedef struct files_struct *fl_owner_t;
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
struct nlm_lockowner;
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
struct nfs4_lock_state;
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
struct fasync_struct;
struct __anonstruct_afs_133 {
   struct list_head link ;
   int state ;
};
union __anonunion_fl_u_132 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_133 afs ;
};
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_132 fl_u ;
};
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
struct file_system_type;
struct super_operations;
struct xattr_handler;
struct mtd_info;
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_need_sync_fs ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
   struct list_head s_async_list ;
};
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
enum chips {
    it87 = 0,
    it8712 = 1,
    it8716 = 2,
    it8718 = 3,
    it8720 = 4
} ;
struct it87_sio_data {
   enum chips type ;
   u8 revision ;
   u8 vid_value ;
   u8 skip_pwm ;
};
struct it87_data {
   struct device *hwmon_dev ;
   enum chips type ;
   u8 revision ;
   unsigned short addr ;
   char const   *name ;
   struct mutex update_lock ;
   char valid ;
   unsigned long last_updated ;
   u8 in[9U] ;
   u8 in_max[8U] ;
   u8 in_min[8U] ;
   u8 has_fan ;
   u16 fan[5U] ;
   u16 fan_min[5U] ;
   s8 temp[3U] ;
   s8 temp_high[3U] ;
   s8 temp_low[3U] ;
   u8 sensor ;
   u8 fan_div[3U] ;
   u8 vid ;
   u8 vrm ;
   u32 alarms ;
   u8 fan_main_ctrl ;
   u8 fan_ctl ;
   u8 manual_pwm_ctl[3U] ;
};
enum lock_usage_bit {
    LOCK_USED = 0,
    LOCK_USED_IN_HARDIRQ = 1,
    LOCK_USED_IN_SOFTIRQ = 2,
    LOCK_ENABLED_SOFTIRQS = 3,
    LOCK_ENABLED_HARDIRQS = 4,
    LOCK_USED_IN_HARDIRQ_READ = 5,
    LOCK_USED_IN_SOFTIRQ_READ = 6,
    LOCK_ENABLED_SOFTIRQS_READ = 7,
    LOCK_ENABLED_HARDIRQS_READ = 8,
    LOCK_USAGE_STATES = 9
} ;
long ldv__builtin_expect(long exp , long c ) ;
extern unsigned long simple_strtoul(char const   * , char ** , unsigned int  ) ;
extern long simple_strtol(char const   * , char ** , unsigned int  ) ;
extern int sprintf(char * , char const   *  , ...) ;
extern int printk(char const   *  , ...) ;
extern void *memset(void * , int  , size_t  ) ;
extern int strcmp(char const   * , char const   * ) ;
extern struct pv_cpu_ops pv_cpu_ops ;
__inline static void slow_down_io(void) 
{ 


  {
  (*(pv_cpu_ops.io_delay))();
  return;
}
}
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
  return ((long )ptr);
}
}
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
  tmp = ldv__builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
  return (tmp);
}
}
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
extern void mutex_unlock(struct mutex * ) ;
void ldv_mutex_unlock_2(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_4(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_6(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_8(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_10(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_11(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_13(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_15(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_17(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_18(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_20(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_22(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_24(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_unlock_26(struct mutex *ldv_func_arg1 ) ;
extern void mutex_lock(struct mutex * ) ;
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_3(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_5(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_7(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_9(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_12(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_14(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_16(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_19(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_21(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_23(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_25(struct mutex *ldv_func_arg1 ) ;
void ldv_mutex_lock_update_lock_of_it87_data(struct mutex *lock ) ;
void ldv_mutex_unlock_update_lock_of_it87_data(struct mutex *lock ) ;
extern int sysfs_create_group(struct kobject * , struct attribute_group  const  * ) ;
extern void sysfs_remove_group(struct kobject * , struct attribute_group  const  * ) ;
extern void kfree(void const   * ) ;
extern unsigned long volatile   jiffies ;
extern void *__kmalloc(size_t  , gfp_t  ) ;
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
  tmp___2 = __kmalloc(size, flags);
  return (tmp___2);
}
}
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
  tmp = kmalloc(size, flags | 32768U);
  return (tmp);
}
}
extern struct module __this_module ;
extern struct resource ioport_resource ;
extern struct resource *__request_region(struct resource * , resource_size_t  , resource_size_t  ,
                                         char const   * , int  ) ;
extern void __release_region(struct resource * , resource_size_t  , resource_size_t  ) ;
extern int device_create_file(struct device * , struct device_attribute * ) ;
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 


  {
  return ((char const   *)(& dev->bus_id));
}
}
__inline static void *dev_get_drvdata(struct device  const  *dev ) 
{ 


  {
  return ((void *)dev->driver_data);
}
}
__inline static void dev_set_drvdata(struct device *dev , void *data ) 
{ 


  {
  dev->driver_data = data;
  return;
}
}
extern char const   *dev_driver_string(struct device  const  * ) ;
extern void platform_device_unregister(struct platform_device * ) ;
extern struct resource *platform_get_resource(struct platform_device * , unsigned int  ,
                                              unsigned int  ) ;
extern struct platform_device *platform_device_alloc(char const   * , int  ) ;
extern int platform_device_add_resources(struct platform_device * , struct resource * ,
                                         unsigned int  ) ;
extern int platform_device_add_data(struct platform_device * , void const   * , size_t  ) ;
extern int platform_device_add(struct platform_device * ) ;
extern void platform_device_put(struct platform_device * ) ;
extern int platform_driver_register(struct platform_driver * ) ;
extern void platform_driver_unregister(struct platform_driver * ) ;
extern struct device *hwmon_device_register(struct device * ) ;
extern void hwmon_device_unregister(struct device * ) ;
__inline static int SENSORS_LIMIT(long value , long low , long high ) 
{ 


  {
  if (value < low) {
    return ((int )low);
  } else
  if (value > high) {
    return ((int )high);
  } else {
    return ((int )value);
  }
}
}
extern int vid_from_reg(int  , u8  ) ;
extern u8 vid_which_vrm(void) ;
extern char const   *dmi_get_system_info(int  ) ;
extern int acpi_check_resource_conflict(struct resource * ) ;
__inline static unsigned char inb(unsigned short port ) 
{ 
  unsigned char _v ;

  {
  __asm__  volatile   ("inb %w1,%0": "=a" (_v): "Nd" (port));
  return (_v);
}
}
__inline static unsigned char inb_p(unsigned short port ) 
{ 
  unsigned char _v ;

  {
  __asm__  volatile   ("inb %w1,%0": "=a" (_v): "Nd" (port));
  slow_down_io();
  return (_v);
}
}
__inline static void outb(unsigned char value , unsigned short port ) 
{ 


  {
  __asm__  volatile   ("outb %b0,%w1": : "a" (value), "Nd" (port));
  return;
}
}
__inline static void outb_p(unsigned char value , unsigned short port ) 
{ 


  {
  __asm__  volatile   ("outb %b0,%w1": : "a" (value), "Nd" (port));
  slow_down_io();
  return;
}
}
static unsigned short force_id  ;
static struct platform_device *pdev  ;
__inline static int superio_inb(int reg ) 
{ 
  unsigned char tmp ;

  {
  outb((int )((unsigned char )reg), 46);
  tmp = inb(47);
  return ((int )tmp);
}
}
static int superio_inw(int reg ) 
{ 
  int val ;
  int tmp ;
  unsigned char tmp___0 ;
  unsigned char tmp___1 ;

  {
  tmp = reg;
  reg = reg + 1;
  outb((int )((unsigned char )tmp), 46);
  tmp___0 = inb(47);
  val = (int )tmp___0 << 8;
  outb((int )((unsigned char )reg), 46);
  tmp___1 = inb(47);
  val = (int )tmp___1 | val;
  return (val);
}
}
__inline static void superio_select(int ldn ) 
{ 


  {
  outb(7, 46);
  outb((int )((unsigned char )ldn), 47);
  return;
}
}
__inline static void superio_enter(void) 
{ 


  {
  outb(135, 46);
  outb(1, 46);
  outb(85, 46);
  outb(85, 46);
  return;
}
}
__inline static void superio_exit(void) 
{ 


  {
  outb(2, 46);
  outb(2, 47);
  return;
}
}
static int update_vbat  ;
static int fix_pwm_polarity  ;
static u8 const   IT87_REG_FAN[5U]  = {      13U,      14U,      15U,      128U, 
        130U};
static u8 const   IT87_REG_FAN_MIN[5U]  = {      16U,      17U,      18U,      132U, 
        134U};
static u8 const   IT87_REG_FANX[5U]  = {      24U,      25U,      26U,      129U, 
        131U};
static u8 const   IT87_REG_FANX_MIN[5U]  = {      27U,      28U,      29U,      133U, 
        135U};
__inline static u8 FAN_TO_REG(long rpm , int div ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  if (rpm == 0L) {
    return (255U);
  } else {

  }
  tmp = SENSORS_LIMIT(rpm, 1L, 1000000L);
  rpm = (long )tmp;
  tmp___0 = SENSORS_LIMIT((((long )div * rpm) / 2L + 1350000L) / ((long )div * rpm),
                          1L, 254L);
  return ((u8 )tmp___0);
}
}
__inline static u16 FAN16_TO_REG(long rpm ) 
{ 
  int tmp ;

  {
  if (rpm == 0L) {
    return (65535U);
  } else {

  }
  tmp = SENSORS_LIMIT((rpm + 1350000L) / (rpm * 2L), 1L, 65534L);
  return ((u16 )tmp);
}
}
static int DIV_TO_REG(int val ) 
{ 
  int answer ;

  {
  answer = 0;
  goto ldv_20413;
  ldv_20412: 
  answer = answer + 1;
  ldv_20413: ;
  if (answer <= 6) {
    val = val >> 1;
    if (val != 0) {
      goto ldv_20412;
    } else {
      goto ldv_20414;
    }
  } else {

  }
  ldv_20414: ;
  return (answer);
}
}
static unsigned int const   pwm_freq[8U]  = 
  {      375000U,      187500U,      93750U,      62500U, 
        46875U,      23437U,      11718U,      5859U};
__inline static int has_16bit_fans(struct it87_data  const  *data ) 
{ 


  {
  return ((((((unsigned int )data->type == 0U && (unsigned int )((unsigned char )data->revision) > 2U) || ((unsigned int )data->type == 1U && (unsigned int )((unsigned char )data->revision) > 7U)) || (unsigned int )data->type == 2U) || (unsigned int )data->type == 3U) || (unsigned int )data->type == 4U);
}
}
static int it87_probe(struct platform_device *pdev___0 ) ;
static int it87_remove(struct platform_device *pdev___0 ) ;
static int it87_read_value(struct it87_data *data , u8 reg ) ;
static void it87_write_value(struct it87_data *data , u8 reg , u8 value ) ;
static struct it87_data *it87_update_device(struct device *dev ) ;
static int it87_check_pwm(struct device *dev ) ;
static void it87_init_device(struct platform_device *pdev___0 ) ;
static struct platform_driver it87_driver  = 
     {& it87_probe, & it87_remove, 0, 0, 0, 0, 0, {"it87", 0, & __this_module, 0, 0,
                                                 0, 0, 0, 0, 0, 0, 0}};
static ssize_t show_in(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = sprintf(buf, "%d\n", (int )data->in[nr] * 16);
  return ((ssize_t )tmp___0);
}
}
static ssize_t show_in_min(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = sprintf(buf, "%d\n", (int )data->in_min[nr] * 16);
  return ((ssize_t )tmp___0);
}
}
static ssize_t show_in_max(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = sprintf(buf, "%d\n", (int )data->in_max[nr] * 16);
  return ((ssize_t )tmp___0);
}
}
static ssize_t set_in_min(struct device *dev , struct device_attribute *attr , char const   *buf ,
                          size_t count ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  void *tmp ;
  unsigned long val ;
  unsigned long tmp___0 ;
  int tmp___1 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = simple_strtoul(buf, 0, 10U);
  val = tmp___0;
  ldv_mutex_lock_1(& data->update_lock);
  tmp___1 = SENSORS_LIMIT((long )((val + 8UL) / 16UL), 0L, 255L);
  data->in_min[nr] = (u8 )tmp___1;
  it87_write_value(data, (int )((unsigned int )((u8 )nr) * 2U + 49U), (int )data->in_min[nr]);
  ldv_mutex_unlock_2(& data->update_lock);
  return ((ssize_t )count);
}
}
static ssize_t set_in_max(struct device *dev , struct device_attribute *attr , char const   *buf ,
                          size_t count ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  void *tmp ;
  unsigned long val ;
  unsigned long tmp___0 ;
  int tmp___1 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = simple_strtoul(buf, 0, 10U);
  val = tmp___0;
  ldv_mutex_lock_3(& data->update_lock);
  tmp___1 = SENSORS_LIMIT((long )((val + 8UL) / 16UL), 0L, 255L);
  data->in_max[nr] = (u8 )tmp___1;
  it87_write_value(data, (int )((unsigned int )((u8 )(nr + 24)) * 2U), (int )data->in_max[nr]);
  ldv_mutex_unlock_4(& data->update_lock);
  return ((ssize_t )count);
}
}
static struct sensor_device_attribute sensor_dev_attr_in0_input  =    {{{"in0_input", 0, 292U}, & show_in, 0}, 0};
static struct sensor_device_attribute sensor_dev_attr_in0_min  =    {{{"in0_min", 0, 420U}, & show_in_min, & set_in_min}, 0};
static struct sensor_device_attribute sensor_dev_attr_in0_max  =    {{{"in0_max", 0, 420U}, & show_in_max, & set_in_max}, 0};
static struct sensor_device_attribute sensor_dev_attr_in1_input  =    {{{"in1_input", 0, 292U}, & show_in, 0}, 1};
static struct sensor_device_attribute sensor_dev_attr_in1_min  =    {{{"in1_min", 0, 420U}, & show_in_min, & set_in_min}, 1};
static struct sensor_device_attribute sensor_dev_attr_in1_max  =    {{{"in1_max", 0, 420U}, & show_in_max, & set_in_max}, 1};
static struct sensor_device_attribute sensor_dev_attr_in2_input  =    {{{"in2_input", 0, 292U}, & show_in, 0}, 2};
static struct sensor_device_attribute sensor_dev_attr_in2_min  =    {{{"in2_min", 0, 420U}, & show_in_min, & set_in_min}, 2};
static struct sensor_device_attribute sensor_dev_attr_in2_max  =    {{{"in2_max", 0, 420U}, & show_in_max, & set_in_max}, 2};
static struct sensor_device_attribute sensor_dev_attr_in3_input  =    {{{"in3_input", 0, 292U}, & show_in, 0}, 3};
static struct sensor_device_attribute sensor_dev_attr_in3_min  =    {{{"in3_min", 0, 420U}, & show_in_min, & set_in_min}, 3};
static struct sensor_device_attribute sensor_dev_attr_in3_max  =    {{{"in3_max", 0, 420U}, & show_in_max, & set_in_max}, 3};
static struct sensor_device_attribute sensor_dev_attr_in4_input  =    {{{"in4_input", 0, 292U}, & show_in, 0}, 4};
static struct sensor_device_attribute sensor_dev_attr_in4_min  =    {{{"in4_min", 0, 420U}, & show_in_min, & set_in_min}, 4};
static struct sensor_device_attribute sensor_dev_attr_in4_max  =    {{{"in4_max", 0, 420U}, & show_in_max, & set_in_max}, 4};
static struct sensor_device_attribute sensor_dev_attr_in5_input  =    {{{"in5_input", 0, 292U}, & show_in, 0}, 5};
static struct sensor_device_attribute sensor_dev_attr_in5_min  =    {{{"in5_min", 0, 420U}, & show_in_min, & set_in_min}, 5};
static struct sensor_device_attribute sensor_dev_attr_in5_max  =    {{{"in5_max", 0, 420U}, & show_in_max, & set_in_max}, 5};
static struct sensor_device_attribute sensor_dev_attr_in6_input  =    {{{"in6_input", 0, 292U}, & show_in, 0}, 6};
static struct sensor_device_attribute sensor_dev_attr_in6_min  =    {{{"in6_min", 0, 420U}, & show_in_min, & set_in_min}, 6};
static struct sensor_device_attribute sensor_dev_attr_in6_max  =    {{{"in6_max", 0, 420U}, & show_in_max, & set_in_max}, 6};
static struct sensor_device_attribute sensor_dev_attr_in7_input  =    {{{"in7_input", 0, 292U}, & show_in, 0}, 7};
static struct sensor_device_attribute sensor_dev_attr_in7_min  =    {{{"in7_min", 0, 420U}, & show_in_min, & set_in_min}, 7};
static struct sensor_device_attribute sensor_dev_attr_in7_max  =    {{{"in7_max", 0, 420U}, & show_in_max, & set_in_max}, 7};
static struct sensor_device_attribute sensor_dev_attr_in8_input  =    {{{"in8_input", 0, 292U}, & show_in, 0}, 8};
static ssize_t show_temp(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = sprintf(buf, "%d\n", (int )data->temp[nr] * 1000);
  return ((ssize_t )tmp___0);
}
}
static ssize_t show_temp_max(struct device *dev , struct device_attribute *attr ,
                             char *buf ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = sprintf(buf, "%d\n", (int )data->temp_high[nr] * 1000);
  return ((ssize_t )tmp___0);
}
}
static ssize_t show_temp_min(struct device *dev , struct device_attribute *attr ,
                             char *buf ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = sprintf(buf, "%d\n", (int )data->temp_low[nr] * 1000);
  return ((ssize_t )tmp___0);
}
}
static ssize_t set_temp_max(struct device *dev , struct device_attribute *attr , char const   *buf ,
                            size_t count ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  void *tmp ;
  int val ;
  long tmp___0 ;
  int tmp___1 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = simple_strtol(buf, 0, 10U);
  val = (int )tmp___0;
  ldv_mutex_lock_5(& data->update_lock);
  tmp___1 = SENSORS_LIMIT((long )(val < 0 ? (val + -500) / 1000 : (val + 500) / 1000),
                          -128L, 127L);
  data->temp_high[nr] = (s8 )tmp___1;
  it87_write_value(data, (int )((unsigned int )((u8 )(nr + 32)) * 2U), (int )((u8 )data->temp_high[nr]));
  ldv_mutex_unlock_6(& data->update_lock);
  return ((ssize_t )count);
}
}
static ssize_t set_temp_min(struct device *dev , struct device_attribute *attr , char const   *buf ,
                            size_t count ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  void *tmp ;
  int val ;
  long tmp___0 ;
  int tmp___1 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = simple_strtol(buf, 0, 10U);
  val = (int )tmp___0;
  ldv_mutex_lock_7(& data->update_lock);
  tmp___1 = SENSORS_LIMIT((long )(val < 0 ? (val + -500) / 1000 : (val + 500) / 1000),
                          -128L, 127L);
  data->temp_low[nr] = (s8 )tmp___1;
  it87_write_value(data, (int )((unsigned int )((u8 )nr) * 2U + 65U), (int )((u8 )data->temp_low[nr]));
  ldv_mutex_unlock_8(& data->update_lock);
  return ((ssize_t )count);
}
}
static struct sensor_device_attribute sensor_dev_attr_temp1_input  =    {{{"temp1_input", 0, 292U}, & show_temp, 0}, 0};
static struct sensor_device_attribute sensor_dev_attr_temp1_max  =    {{{"temp1_max", 0, 420U}, & show_temp_max, & set_temp_max}, 0};
static struct sensor_device_attribute sensor_dev_attr_temp1_min  =    {{{"temp1_min", 0, 420U}, & show_temp_min, & set_temp_min}, 0};
static struct sensor_device_attribute sensor_dev_attr_temp2_input  =    {{{"temp2_input", 0, 292U}, & show_temp, 0}, 1};
static struct sensor_device_attribute sensor_dev_attr_temp2_max  =    {{{"temp2_max", 0, 420U}, & show_temp_max, & set_temp_max}, 1};
static struct sensor_device_attribute sensor_dev_attr_temp2_min  =    {{{"temp2_min", 0, 420U}, & show_temp_min, & set_temp_min}, 1};
static struct sensor_device_attribute sensor_dev_attr_temp3_input  =    {{{"temp3_input", 0, 292U}, & show_temp, 0}, 2};
static struct sensor_device_attribute sensor_dev_attr_temp3_max  =    {{{"temp3_max", 0, 420U}, & show_temp_max, & set_temp_max}, 2};
static struct sensor_device_attribute sensor_dev_attr_temp3_min  =    {{{"temp3_min", 0, 420U}, & show_temp_min, & set_temp_min}, 2};
static ssize_t show_sensor(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  u8 reg ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  reg = data->sensor;
  if (((int )reg >> nr) & 1) {
    tmp___0 = sprintf(buf, "3\n");
    return ((ssize_t )tmp___0);
  } else {

  }
  if (((int )reg & (8 << nr)) != 0) {
    tmp___1 = sprintf(buf, "4\n");
    return ((ssize_t )tmp___1);
  } else {

  }
  tmp___2 = sprintf(buf, "0\n");
  return ((ssize_t )tmp___2);
}
}
static ssize_t set_sensor(struct device *dev , struct device_attribute *attr , char const   *buf ,
                          size_t count ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  void *tmp ;
  int val ;
  long tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = simple_strtol(buf, 0, 10U);
  val = (int )tmp___0;
  ldv_mutex_lock_9(& data->update_lock);
  data->sensor = (u8 )((int )((signed char )data->sensor) & ~ ((int )((signed char )(1 << nr))));
  data->sensor = (u8 )((int )((signed char )data->sensor) & ~ ((int )((signed char )(8 << nr))));
  if (val == 2) {
    tmp___1 = dev_name((struct device  const  *)dev);
    tmp___2 = dev_driver_string((struct device  const  *)dev);
    printk("<4>%s %s: Sensor type 2 is deprecated, please use 4 instead\n", tmp___2,
           tmp___1);
    val = 4;
  } else {

  }
  if (val == 3) {
    data->sensor = (u8 )((int )((signed char )data->sensor) | (int )((signed char )(1 << nr)));
  } else
  if (val == 4) {
    data->sensor = (u8 )((int )((signed char )data->sensor) | (int )((signed char )(8 << nr)));
  } else
  if (val != 0) {
    ldv_mutex_unlock_10(& data->update_lock);
    return (-22L);
  } else {

  }
  it87_write_value(data, 81, (int )data->sensor);
  ldv_mutex_unlock_11(& data->update_lock);
  return ((ssize_t )count);
}
}
static struct sensor_device_attribute sensor_dev_attr_temp1_type  =    {{{"temp1_type", 0, 420U}, & show_sensor, & set_sensor}, 0};
static struct sensor_device_attribute sensor_dev_attr_temp2_type  =    {{{"temp2_type", 0, 420U}, & show_sensor, & set_sensor}, 1};
static struct sensor_device_attribute sensor_dev_attr_temp3_type  =    {{{"temp3_type", 0, 420U}, & show_sensor, & set_sensor}, 2};
static ssize_t show_fan(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = sprintf(buf, "%d\n", (unsigned int )data->fan[nr] != 0U ? ((unsigned int )data->fan[nr] != 255U ? 1350000 / ((int )data->fan[nr] << (int )data->fan_div[nr]) : 0) : -1);
  return ((ssize_t )tmp___0);
}
}
static ssize_t show_fan_min(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = sprintf(buf, "%d\n", (unsigned int )data->fan_min[nr] != 0U ? ((unsigned int )data->fan_min[nr] != 255U ? 1350000 / ((int )data->fan_min[nr] << (int )data->fan_div[nr]) : 0) : -1);
  return ((ssize_t )tmp___0);
}
}
static ssize_t show_fan_div(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = sprintf(buf, "%d\n", 1 << (int )data->fan_div[nr]);
  return ((ssize_t )tmp___0);
}
}
static ssize_t show_pwm_enable(struct device *dev , struct device_attribute *attr ,
                               char *buf ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = sprintf(buf, "%d\n", ((int )data->fan_main_ctrl >> nr) & 1);
  return ((ssize_t )tmp___0);
}
}
static ssize_t show_pwm(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = sprintf(buf, "%d\n", (int )data->manual_pwm_ctl[nr]);
  return ((ssize_t )tmp___0);
}
}
static ssize_t show_pwm_freq(struct device *dev , struct device_attribute *attr ,
                             char *buf ) 
{ 
  struct it87_data *data ;
  struct it87_data *tmp ;
  int index ;
  int tmp___0 ;

  {
  tmp = it87_update_device(dev);
  data = tmp;
  index = ((int )data->fan_ctl >> 4) & 7;
  tmp___0 = sprintf(buf, "%u\n", pwm_freq[index]);
  return ((ssize_t )tmp___0);
}
}
static ssize_t set_fan_min(struct device *dev , struct device_attribute *attr , char const   *buf ,
                           size_t count ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  void *tmp ;
  int val ;
  long tmp___0 ;
  u8 reg ;
  int tmp___1 ;
  u8 tmp___2 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = simple_strtol(buf, 0, 10U);
  val = (int )tmp___0;
  ldv_mutex_lock_12(& data->update_lock);
  tmp___1 = it87_read_value(data, 11);
  reg = (u8 )tmp___1;
  switch (nr) {
  case 0: 
  data->fan_div[nr] = (unsigned int )reg & 7U;
  goto ldv_20707;
  case 1: 
  data->fan_div[nr] = (unsigned int )((u8 )((int )reg >> 3)) & 7U;
  goto ldv_20707;
  case 2: 
  data->fan_div[nr] = ((int )reg & 64) != 0 ? 3U : 1U;
  goto ldv_20707;
  }
  ldv_20707: 
  tmp___2 = FAN_TO_REG((long )val, 1 << (int )data->fan_div[nr]);
  data->fan_min[nr] = (u16 )tmp___2;
  it87_write_value(data, (int )IT87_REG_FAN_MIN[nr], (int )((u8 )data->fan_min[nr]));
  ldv_mutex_unlock_13(& data->update_lock);
  return ((ssize_t )count);
}
}
static ssize_t set_fan_div(struct device *dev , struct device_attribute *attr , char const   *buf ,
                           size_t count ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  void *tmp ;
  unsigned long val ;
  unsigned long tmp___0 ;
  int min ;
  u8 old ;
  int tmp___1 ;
  int tmp___2 ;
  u8 tmp___3 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = simple_strtoul(buf, 0, 10U);
  val = tmp___0;
  ldv_mutex_lock_14(& data->update_lock);
  tmp___1 = it87_read_value(data, 11);
  old = (u8 )tmp___1;
  min = (unsigned int )data->fan_min[nr] != 0U ? ((unsigned int )data->fan_min[nr] != 255U ? 1350000 / ((int )data->fan_min[nr] << (int )data->fan_div[nr]) : 0) : -1;
  switch (nr) {
  case 0: ;
  case 1: 
  tmp___2 = DIV_TO_REG((int )val);
  data->fan_div[nr] = (u8 )tmp___2;
  goto ldv_20726;
  case 2: ;
  if (val <= 7UL) {
    data->fan_div[nr] = 1U;
  } else {
    data->fan_div[nr] = 3U;
  }
  }
  ldv_20726: 
  val = (unsigned long )old & 128UL;
  val = ((unsigned long )data->fan_div[0] & 7UL) | val;
  val = (unsigned long )(((int )data->fan_div[1] & 7) << 3) | val;
  if ((unsigned int )data->fan_div[2] == 3U) {
    val = val | 64UL;
  } else {

  }
  it87_write_value(data, 11, (int )((u8 )val));
  tmp___3 = FAN_TO_REG((long )min, 1 << (int )data->fan_div[nr]);
  data->fan_min[nr] = (u16 )tmp___3;
  it87_write_value(data, (int )IT87_REG_FAN_MIN[nr], (int )((u8 )data->fan_min[nr]));
  ldv_mutex_unlock_15(& data->update_lock);
  return ((ssize_t )count);
}
}
static ssize_t set_pwm_enable(struct device *dev , struct device_attribute *attr ,
                              char const   *buf , size_t count ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  void *tmp ;
  int val ;
  long tmp___0 ;
  int tmp___1 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = simple_strtol(buf, 0, 10U);
  val = (int )tmp___0;
  ldv_mutex_lock_16(& data->update_lock);
  if (val == 0) {
    tmp___1 = it87_read_value(data, 20);
    it87_write_value(data, 20, (int )((u8 )((int )((signed char )(1 << nr)) | (int )((signed char )tmp___1))));
    data->fan_main_ctrl = (u8 )((int )((signed char )data->fan_main_ctrl) & ~ ((int )((signed char )(1 << nr))));
    it87_write_value(data, 19, (int )data->fan_main_ctrl);
  } else
  if (val == 1) {
    data->fan_main_ctrl = (u8 )((int )((signed char )data->fan_main_ctrl) | (int )((signed char )(1 << nr)));
    it87_write_value(data, 19, (int )data->fan_main_ctrl);
    it87_write_value(data, (int )((unsigned int )((u8 )nr) + 21U), (int )data->manual_pwm_ctl[nr] >> 1);
  } else {
    ldv_mutex_unlock_17(& data->update_lock);
    return (-22L);
  }
  ldv_mutex_unlock_18(& data->update_lock);
  return ((ssize_t )count);
}
}
static ssize_t set_pwm(struct device *dev , struct device_attribute *attr , char const   *buf ,
                       size_t count ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  void *tmp ;
  int val ;
  long tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = simple_strtol(buf, 0, 10U);
  val = (int )tmp___0;
  if (val < 0 || val > 255) {
    return (-22L);
  } else {

  }
  ldv_mutex_lock_19(& data->update_lock);
  data->manual_pwm_ctl[nr] = (u8 )val;
  if (((int )data->fan_main_ctrl >> nr) & 1) {
    it87_write_value(data, (int )((unsigned int )((u8 )nr) + 21U), (int )data->manual_pwm_ctl[nr] >> 1);
  } else {

  }
  ldv_mutex_unlock_20(& data->update_lock);
  return ((ssize_t )count);
}
}
static ssize_t set_pwm_freq(struct device *dev , struct device_attribute *attr , char const   *buf ,
                            size_t count ) 
{ 
  struct it87_data *data ;
  void *tmp ;
  unsigned long val ;
  unsigned long tmp___0 ;
  int i ;
  int tmp___1 ;

  {
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = simple_strtoul(buf, 0, 10U);
  val = tmp___0;
  i = 0;
  goto ldv_20764;
  ldv_20763: ;
  if ((unsigned long )(((unsigned int )pwm_freq[i] + (unsigned int )pwm_freq[i + 1]) / 2U) < val) {
    goto ldv_20762;
  } else {

  }
  i = i + 1;
  ldv_20764: ;
  if (i <= 6) {
    goto ldv_20763;
  } else {

  }
  ldv_20762: 
  ldv_mutex_lock_21(& data->update_lock);
  tmp___1 = it87_read_value(data, 20);
  data->fan_ctl = (unsigned int )((u8 )tmp___1) & 143U;
  data->fan_ctl = (u8 )((int )((signed char )data->fan_ctl) | (int )((signed char )(i << 4)));
  it87_write_value(data, 20, (int )data->fan_ctl);
  ldv_mutex_unlock_22(& data->update_lock);
  return ((ssize_t )count);
}
}
static struct sensor_device_attribute sensor_dev_attr_fan1_input  =    {{{"fan1_input", 0, 292U}, & show_fan, 0}, 0};
static struct sensor_device_attribute sensor_dev_attr_fan1_min  =    {{{"fan1_min", 0, 420U}, & show_fan_min, & set_fan_min}, 0};
static struct sensor_device_attribute sensor_dev_attr_fan1_div  =    {{{"fan1_div", 0, 420U}, & show_fan_div, & set_fan_div}, 0};
static struct sensor_device_attribute sensor_dev_attr_fan2_input  =    {{{"fan2_input", 0, 292U}, & show_fan, 0}, 1};
static struct sensor_device_attribute sensor_dev_attr_fan2_min  =    {{{"fan2_min", 0, 420U}, & show_fan_min, & set_fan_min}, 1};
static struct sensor_device_attribute sensor_dev_attr_fan2_div  =    {{{"fan2_div", 0, 420U}, & show_fan_div, & set_fan_div}, 1};
static struct sensor_device_attribute sensor_dev_attr_fan3_input  =    {{{"fan3_input", 0, 292U}, & show_fan, 0}, 2};
static struct sensor_device_attribute sensor_dev_attr_fan3_min  =    {{{"fan3_min", 0, 420U}, & show_fan_min, & set_fan_min}, 2};
static struct sensor_device_attribute sensor_dev_attr_fan3_div  =    {{{"fan3_div", 0, 420U}, & show_fan_div, & set_fan_div}, 2};
static struct sensor_device_attribute sensor_dev_attr_pwm1_enable  =    {{{"pwm1_enable", 0, 420U}, & show_pwm_enable, & set_pwm_enable}, 0};
static struct sensor_device_attribute sensor_dev_attr_pwm1  =    {{{"pwm1", 0, 420U}, & show_pwm, & set_pwm}, 0};
static struct device_attribute dev_attr_pwm1_freq  =    {{"pwm1_freq", 0, 420U}, & show_pwm_freq, & set_pwm_freq};
static struct sensor_device_attribute sensor_dev_attr_pwm2_enable  =    {{{"pwm2_enable", 0, 420U}, & show_pwm_enable, & set_pwm_enable}, 1};
static struct sensor_device_attribute sensor_dev_attr_pwm2  =    {{{"pwm2", 0, 420U}, & show_pwm, & set_pwm}, 1};
static struct device_attribute dev_attr_pwm2_freq  =    {{"pwm2_freq", 0, 292U}, & show_pwm_freq, 0};
static struct sensor_device_attribute sensor_dev_attr_pwm3_enable  =    {{{"pwm3_enable", 0, 420U}, & show_pwm_enable, & set_pwm_enable}, 2};
static struct sensor_device_attribute sensor_dev_attr_pwm3  =    {{{"pwm3", 0, 420U}, & show_pwm, & set_pwm}, 2};
static struct device_attribute dev_attr_pwm3_freq  =    {{"pwm3_freq", 0, 292U}, & show_pwm_freq, 0};
static ssize_t show_fan16(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = sprintf(buf, "%d\n", (unsigned int )data->fan[nr] != 0U ? ((unsigned int )data->fan[nr] != 65535U ? 1350000 / ((int )data->fan[nr] * 2) : 0) : -1);
  return ((ssize_t )tmp___0);
}
}
static ssize_t show_fan16_min(struct device *dev , struct device_attribute *attr ,
                              char *buf ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = sprintf(buf, "%d\n", (unsigned int )data->fan_min[nr] != 0U ? ((unsigned int )data->fan_min[nr] != 65535U ? 1350000 / ((int )data->fan_min[nr] * 2) : 0) : -1);
  return ((ssize_t )tmp___0);
}
}
static ssize_t set_fan16_min(struct device *dev , struct device_attribute *attr ,
                             char const   *buf , size_t count ) 
{ 
  struct sensor_device_attribute *sensor_attr ;
  struct device_attribute  const  *__mptr ;
  int nr ;
  struct it87_data *data ;
  void *tmp ;
  int val ;
  long tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  sensor_attr = (struct sensor_device_attribute *)__mptr;
  nr = sensor_attr->index;
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = simple_strtol(buf, 0, 10U);
  val = (int )tmp___0;
  ldv_mutex_lock_23(& data->update_lock);
  data->fan_min[nr] = FAN16_TO_REG((long )val);
  it87_write_value(data, (int )IT87_REG_FAN_MIN[nr], (int )((u8 )data->fan_min[nr]));
  it87_write_value(data, (int )IT87_REG_FANX_MIN[nr], (int )((u8 )((int )data->fan_min[nr] >> 8)));
  ldv_mutex_unlock_24(& data->update_lock);
  return ((ssize_t )count);
}
}
static struct sensor_device_attribute sensor_dev_attr_fan1_input16  =    {{{"fan1_input", 0, 292U}, & show_fan16, 0}, 0};
static struct sensor_device_attribute sensor_dev_attr_fan1_min16  =    {{{"fan1_min", 0, 420U}, & show_fan16_min, & set_fan16_min}, 0};
static struct sensor_device_attribute sensor_dev_attr_fan2_input16  =    {{{"fan2_input", 0, 292U}, & show_fan16, 0}, 1};
static struct sensor_device_attribute sensor_dev_attr_fan2_min16  =    {{{"fan2_min", 0, 420U}, & show_fan16_min, & set_fan16_min}, 1};
static struct sensor_device_attribute sensor_dev_attr_fan3_input16  =    {{{"fan3_input", 0, 292U}, & show_fan16, 0}, 2};
static struct sensor_device_attribute sensor_dev_attr_fan3_min16  =    {{{"fan3_min", 0, 420U}, & show_fan16_min, & set_fan16_min}, 2};
static struct sensor_device_attribute sensor_dev_attr_fan4_input16  =    {{{"fan4_input", 0, 292U}, & show_fan16, 0}, 3};
static struct sensor_device_attribute sensor_dev_attr_fan4_min16  =    {{{"fan4_min", 0, 420U}, & show_fan16_min, & set_fan16_min}, 3};
static struct sensor_device_attribute sensor_dev_attr_fan5_input16  =    {{{"fan5_input", 0, 292U}, & show_fan16, 0}, 4};
static struct sensor_device_attribute sensor_dev_attr_fan5_min16  =    {{{"fan5_min", 0, 420U}, & show_fan16_min, & set_fan16_min}, 4};
static ssize_t show_alarms(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;

  {
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = sprintf(buf, "%u\n", data->alarms);
  return ((ssize_t )tmp___0);
}
}
static struct device_attribute dev_attr_alarms  =    {{"alarms", 0, 292U}, & show_alarms, 0};
static ssize_t show_alarm(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  int bitnr ;
  struct device_attribute  const  *__mptr ;
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;

  {
  __mptr = (struct device_attribute  const  *)attr;
  bitnr = ((struct sensor_device_attribute *)__mptr)->index;
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = sprintf(buf, "%u\n", (data->alarms >> bitnr) & 1U);
  return ((ssize_t )tmp___0);
}
}
static struct sensor_device_attribute sensor_dev_attr_in0_alarm  =    {{{"in0_alarm", 0, 292U}, & show_alarm, 0}, 8};
static struct sensor_device_attribute sensor_dev_attr_in1_alarm  =    {{{"in1_alarm", 0, 292U}, & show_alarm, 0}, 9};
static struct sensor_device_attribute sensor_dev_attr_in2_alarm  =    {{{"in2_alarm", 0, 292U}, & show_alarm, 0}, 10};
static struct sensor_device_attribute sensor_dev_attr_in3_alarm  =    {{{"in3_alarm", 0, 292U}, & show_alarm, 0}, 11};
static struct sensor_device_attribute sensor_dev_attr_in4_alarm  =    {{{"in4_alarm", 0, 292U}, & show_alarm, 0}, 12};
static struct sensor_device_attribute sensor_dev_attr_in5_alarm  =    {{{"in5_alarm", 0, 292U}, & show_alarm, 0}, 13};
static struct sensor_device_attribute sensor_dev_attr_in6_alarm  =    {{{"in6_alarm", 0, 292U}, & show_alarm, 0}, 14};
static struct sensor_device_attribute sensor_dev_attr_in7_alarm  =    {{{"in7_alarm", 0, 292U}, & show_alarm, 0}, 15};
static struct sensor_device_attribute sensor_dev_attr_fan1_alarm  =    {{{"fan1_alarm", 0, 292U}, & show_alarm, 0}, 0};
static struct sensor_device_attribute sensor_dev_attr_fan2_alarm  =    {{{"fan2_alarm", 0, 292U}, & show_alarm, 0}, 1};
static struct sensor_device_attribute sensor_dev_attr_fan3_alarm  =    {{{"fan3_alarm", 0, 292U}, & show_alarm, 0}, 2};
static struct sensor_device_attribute sensor_dev_attr_fan4_alarm  =    {{{"fan4_alarm", 0, 292U}, & show_alarm, 0}, 3};
static struct sensor_device_attribute sensor_dev_attr_fan5_alarm  =    {{{"fan5_alarm", 0, 292U}, & show_alarm, 0}, 6};
static struct sensor_device_attribute sensor_dev_attr_temp1_alarm  =    {{{"temp1_alarm", 0, 292U}, & show_alarm, 0}, 16};
static struct sensor_device_attribute sensor_dev_attr_temp2_alarm  =    {{{"temp2_alarm", 0, 292U}, & show_alarm, 0}, 17};
static struct sensor_device_attribute sensor_dev_attr_temp3_alarm  =    {{{"temp3_alarm", 0, 292U}, & show_alarm, 0}, 18};
static ssize_t show_vrm_reg(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct it87_data *data ;
  void *tmp ;
  int tmp___0 ;

  {
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = sprintf(buf, "%u\n", (int )data->vrm);
  return ((ssize_t )tmp___0);
}
}
static ssize_t store_vrm_reg(struct device *dev , struct device_attribute *attr ,
                             char const   *buf , size_t count ) 
{ 
  struct it87_data *data ;
  void *tmp ;
  u32 val ;
  unsigned long tmp___0 ;

  {
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = simple_strtoul(buf, 0, 10U);
  val = (u32 )tmp___0;
  data->vrm = (u8 )val;
  return ((ssize_t )count);
}
}
static struct device_attribute dev_attr_vrm  =    {{"vrm", 0, 420U}, & show_vrm_reg, & store_vrm_reg};
static ssize_t show_vid_reg(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct it87_data *data ;
  struct it87_data *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  tmp = it87_update_device(dev);
  data = tmp;
  tmp___0 = vid_from_reg((int )data->vid, (int )data->vrm);
  tmp___1 = sprintf(buf, "%ld\n", (long )tmp___0);
  return ((ssize_t )tmp___1);
}
}
static struct device_attribute dev_attr_cpu0_vid  =    {{"cpu0_vid", 0, 292U}, & show_vid_reg, 0};
static ssize_t show_name(struct device *dev , struct device_attribute *devattr , char *buf ) 
{ 
  struct it87_data *data ;
  void *tmp ;
  int tmp___0 ;

  {
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___0 = sprintf(buf, "%s\n", data->name);
  return ((ssize_t )tmp___0);
}
}
static struct device_attribute dev_attr_name  =    {{"name", 0, 292U}, & show_name, 0};
static struct attribute *it87_attributes[51U]  = 
  {      & sensor_dev_attr_in0_input.dev_attr.attr,      & sensor_dev_attr_in1_input.dev_attr.attr,      & sensor_dev_attr_in2_input.dev_attr.attr,      & sensor_dev_attr_in3_input.dev_attr.attr, 
        & sensor_dev_attr_in4_input.dev_attr.attr,      & sensor_dev_attr_in5_input.dev_attr.attr,      & sensor_dev_attr_in6_input.dev_attr.attr,      & sensor_dev_attr_in7_input.dev_attr.attr, 
        & sensor_dev_attr_in8_input.dev_attr.attr,      & sensor_dev_attr_in0_min.dev_attr.attr,      & sensor_dev_attr_in1_min.dev_attr.attr,      & sensor_dev_attr_in2_min.dev_attr.attr, 
        & sensor_dev_attr_in3_min.dev_attr.attr,      & sensor_dev_attr_in4_min.dev_attr.attr,      & sensor_dev_attr_in5_min.dev_attr.attr,      & sensor_dev_attr_in6_min.dev_attr.attr, 
        & sensor_dev_attr_in7_min.dev_attr.attr,      & sensor_dev_attr_in0_max.dev_attr.attr,      & sensor_dev_attr_in1_max.dev_attr.attr,      & sensor_dev_attr_in2_max.dev_attr.attr, 
        & sensor_dev_attr_in3_max.dev_attr.attr,      & sensor_dev_attr_in4_max.dev_attr.attr,      & sensor_dev_attr_in5_max.dev_attr.attr,      & sensor_dev_attr_in6_max.dev_attr.attr, 
        & sensor_dev_attr_in7_max.dev_attr.attr,      & sensor_dev_attr_in0_alarm.dev_attr.attr,      & sensor_dev_attr_in1_alarm.dev_attr.attr,      & sensor_dev_attr_in2_alarm.dev_attr.attr, 
        & sensor_dev_attr_in3_alarm.dev_attr.attr,      & sensor_dev_attr_in4_alarm.dev_attr.attr,      & sensor_dev_attr_in5_alarm.dev_attr.attr,      & sensor_dev_attr_in6_alarm.dev_attr.attr, 
        & sensor_dev_attr_in7_alarm.dev_attr.attr,      & sensor_dev_attr_temp1_input.dev_attr.attr,      & sensor_dev_attr_temp2_input.dev_attr.attr,      & sensor_dev_attr_temp3_input.dev_attr.attr, 
        & sensor_dev_attr_temp1_max.dev_attr.attr,      & sensor_dev_attr_temp2_max.dev_attr.attr,      & sensor_dev_attr_temp3_max.dev_attr.attr,      & sensor_dev_attr_temp1_min.dev_attr.attr, 
        & sensor_dev_attr_temp2_min.dev_attr.attr,      & sensor_dev_attr_temp3_min.dev_attr.attr,      & sensor_dev_attr_temp1_type.dev_attr.attr,      & sensor_dev_attr_temp2_type.dev_attr.attr, 
        & sensor_dev_attr_temp3_type.dev_attr.attr,      & sensor_dev_attr_temp1_alarm.dev_attr.attr,      & sensor_dev_attr_temp2_alarm.dev_attr.attr,      & sensor_dev_attr_temp3_alarm.dev_attr.attr, 
        & dev_attr_alarms.attr,      & dev_attr_name.attr,      0};
static struct attribute_group  const  it87_group  =    {0, 0, (struct attribute **)(& it87_attributes)};
static struct attribute *it87_attributes_opt[36U]  = 
  {      & sensor_dev_attr_fan1_input16.dev_attr.attr,      & sensor_dev_attr_fan1_min16.dev_attr.attr,      & sensor_dev_attr_fan2_input16.dev_attr.attr,      & sensor_dev_attr_fan2_min16.dev_attr.attr, 
        & sensor_dev_attr_fan3_input16.dev_attr.attr,      & sensor_dev_attr_fan3_min16.dev_attr.attr,      & sensor_dev_attr_fan4_input16.dev_attr.attr,      & sensor_dev_attr_fan4_min16.dev_attr.attr, 
        & sensor_dev_attr_fan5_input16.dev_attr.attr,      & sensor_dev_attr_fan5_min16.dev_attr.attr,      & sensor_dev_attr_fan1_input.dev_attr.attr,      & sensor_dev_attr_fan1_min.dev_attr.attr, 
        & sensor_dev_attr_fan1_div.dev_attr.attr,      & sensor_dev_attr_fan2_input.dev_attr.attr,      & sensor_dev_attr_fan2_min.dev_attr.attr,      & sensor_dev_attr_fan2_div.dev_attr.attr, 
        & sensor_dev_attr_fan3_input.dev_attr.attr,      & sensor_dev_attr_fan3_min.dev_attr.attr,      & sensor_dev_attr_fan3_div.dev_attr.attr,      & sensor_dev_attr_fan1_alarm.dev_attr.attr, 
        & sensor_dev_attr_fan2_alarm.dev_attr.attr,      & sensor_dev_attr_fan3_alarm.dev_attr.attr,      & sensor_dev_attr_fan4_alarm.dev_attr.attr,      & sensor_dev_attr_fan5_alarm.dev_attr.attr, 
        & sensor_dev_attr_pwm1_enable.dev_attr.attr,      & sensor_dev_attr_pwm2_enable.dev_attr.attr,      & sensor_dev_attr_pwm3_enable.dev_attr.attr,      & sensor_dev_attr_pwm1.dev_attr.attr, 
        & sensor_dev_attr_pwm2.dev_attr.attr,      & sensor_dev_attr_pwm3.dev_attr.attr,      & dev_attr_pwm1_freq.attr,      & dev_attr_pwm2_freq.attr, 
        & dev_attr_pwm3_freq.attr,      & dev_attr_vrm.attr,      & dev_attr_cpu0_vid.attr,      0};
static struct attribute_group  const  it87_group_opt  =    {0, 0, (struct attribute **)(& it87_attributes_opt)};
static int it87_find(unsigned short *address , struct it87_sio_data *sio_data ) 
{ 
  int err ;
  u16 chip_type ;
  char const   *board_vendor ;
  char const   *board_name ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int reg ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
  err = -19;
  superio_enter();
  if ((unsigned int )force_id == 0U) {
    tmp = superio_inw(32);
    chip_type = (u16 )tmp;
  } else {
    chip_type = force_id;
  }
  switch ((int )chip_type) {
  case 34565: 
  sio_data->type = it87;
  goto ldv_20899;
  case 34578: 
  sio_data->type = it8712;
  goto ldv_20899;
  case 34582: ;
  case 34598: 
  sio_data->type = it8716;
  goto ldv_20899;
  case 34584: 
  sio_data->type = it8718;
  goto ldv_20899;
  case 34592: 
  sio_data->type = it8720;
  goto ldv_20899;
  case 65535: ;
  goto exit;
  default: 
  printk("<7>it87: Unsupported chip (DEVID=0x%x)\n", (int )chip_type);
  goto exit;
  }
  ldv_20899: 
  superio_select(4);
  tmp___0 = superio_inb(48);
  if ((tmp___0 & 1) == 0) {
    printk("<6>it87: Device not activated, skipping\n");
    goto exit;
  } else {

  }
  tmp___1 = superio_inw(96);
  *address = (unsigned int )((unsigned short )tmp___1) & 65528U;
  if ((unsigned int )*address == 0U) {
    printk("<6>it87: Base address not set, skipping\n");
    goto exit;
  } else {

  }
  err = 0;
  tmp___2 = superio_inb(34);
  sio_data->revision = (unsigned int )((u8 )tmp___2) & 15U;
  printk("<6>it87: Found IT%04xF chip at 0x%x, revision %d\n", (int )chip_type, (int )*address,
         (int )sio_data->revision);
  if ((unsigned int )chip_type != 34565U) {
    superio_select(7);
    if ((unsigned int )chip_type == 3U || (unsigned int )chip_type == 4U) {
      tmp___3 = superio_inb(252);
      sio_data->vid_value = (u8 )tmp___3;
    } else {

    }
    reg = superio_inb(44);
    if (reg & 1) {
      printk("<6>it87: in3 is VCC (+5V)\n");
    } else {

    }
    if ((reg & 2) != 0) {
      printk("<6>it87: in7 is VCCH (+5V Stand-By)\n");
    } else {

    }
  } else {

  }
  board_vendor = dmi_get_system_info(9);
  board_name = dmi_get_system_info(10);
  if ((unsigned long )board_vendor != (unsigned long )((char const   *)0) && (unsigned long )board_name != (unsigned long )((char const   *)0)) {
    tmp___4 = strcmp(board_vendor, "nVIDIA");
    if (tmp___4 == 0) {
      tmp___5 = strcmp(board_name, "FN68PT");
      if (tmp___5 == 0) {
        printk("<6>it87: Disabling pwm2 due to hardware constraints\n");
        sio_data->skip_pwm = 2U;
      } else {

      }
    } else {

    }
  } else {

  }
  exit: 
  superio_exit();
  return (err);
}
}
static int it87_probe(struct platform_device *pdev___0 ) 
{ 
  struct it87_data *data ;
  struct resource *res ;
  struct device *dev ;
  struct it87_sio_data *sio_data ;
  int err ;
  int enable_pwm_interface ;
  char const   *names[5U] ;
  char const   *tmp ;
  char const   *tmp___0 ;
  struct resource *tmp___1 ;
  void *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  struct lock_class_key __key ;
  int tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;

  {
  dev = & pdev___0->dev;
  sio_data = (struct it87_sio_data *)dev->platform_data;
  err = 0;
  names[0] = "it87";
  names[1] = "it8712";
  names[2] = "it8716";
  names[3] = "it8718";
  names[4] = "it8720";
  res = platform_get_resource(pdev___0, 256U, 0U);
  tmp___1 = __request_region(& ioport_resource, res->start, 2ULL, "it87", 0);
  if ((unsigned long )tmp___1 == (unsigned long )((struct resource *)0)) {
    tmp = dev_name((struct device  const  *)dev);
    tmp___0 = dev_driver_string((struct device  const  *)dev);
    printk("<3>%s %s: Failed to request region 0x%lx-0x%lx\n", tmp___0, tmp, (unsigned long )res->start,
           (unsigned long )(res->start + 1ULL));
    err = -16;
    goto ERROR0;
  } else {

  }
  tmp___2 = kzalloc(272UL, 208U);
  data = (struct it87_data *)tmp___2;
  if ((unsigned long )data == (unsigned long )((struct it87_data *)0)) {
    err = -12;
    goto ERROR1;
  } else {

  }
  data->addr = (unsigned short )res->start;
  data->type = sio_data->type;
  data->revision = sio_data->revision;
  data->name = names[(unsigned int )sio_data->type];
  tmp___3 = it87_read_value(data, 0);
  if ((tmp___3 & 128) != 0) {
    err = -19;
    goto ERROR2;
  } else {
    tmp___4 = it87_read_value(data, 88);
    if (tmp___4 != 144) {
      err = -19;
      goto ERROR2;
    } else {

    }
  }
  dev_set_drvdata(& pdev___0->dev, (void *)data);
  __mutex_init(& data->update_lock, "&data->update_lock", & __key);
  enable_pwm_interface = it87_check_pwm(dev);
  it87_init_device(pdev___0);
  err = sysfs_create_group(& dev->kobj, & it87_group);
  if (err != 0) {
    goto ERROR2;
  } else {

  }
  tmp___5 = has_16bit_fans((struct it87_data  const  *)data);
  if (tmp___5 != 0) {
    if ((int )data->has_fan & 1) {
      err = device_create_file(dev, & sensor_dev_attr_fan1_input16.dev_attr);
      if (err != 0) {
        goto ERROR4;
      } else {
        err = device_create_file(dev, & sensor_dev_attr_fan1_min16.dev_attr);
        if (err != 0) {
          goto ERROR4;
        } else {
          err = device_create_file(dev, & sensor_dev_attr_fan1_alarm.dev_attr);
          if (err != 0) {
            goto ERROR4;
          } else {

          }
        }
      }
    } else {

    }
    if (((int )data->has_fan & 2) != 0) {
      err = device_create_file(dev, & sensor_dev_attr_fan2_input16.dev_attr);
      if (err != 0) {
        goto ERROR4;
      } else {
        err = device_create_file(dev, & sensor_dev_attr_fan2_min16.dev_attr);
        if (err != 0) {
          goto ERROR4;
        } else {
          err = device_create_file(dev, & sensor_dev_attr_fan2_alarm.dev_attr);
          if (err != 0) {
            goto ERROR4;
          } else {

          }
        }
      }
    } else {

    }
    if (((int )data->has_fan & 4) != 0) {
      err = device_create_file(dev, & sensor_dev_attr_fan3_input16.dev_attr);
      if (err != 0) {
        goto ERROR4;
      } else {
        err = device_create_file(dev, & sensor_dev_attr_fan3_min16.dev_attr);
        if (err != 0) {
          goto ERROR4;
        } else {
          err = device_create_file(dev, & sensor_dev_attr_fan3_alarm.dev_attr);
          if (err != 0) {
            goto ERROR4;
          } else {

          }
        }
      }
    } else {

    }
    if (((int )data->has_fan & 8) != 0) {
      err = device_create_file(dev, & sensor_dev_attr_fan4_input16.dev_attr);
      if (err != 0) {
        goto ERROR4;
      } else {
        err = device_create_file(dev, & sensor_dev_attr_fan4_min16.dev_attr);
        if (err != 0) {
          goto ERROR4;
        } else {
          err = device_create_file(dev, & sensor_dev_attr_fan4_alarm.dev_attr);
          if (err != 0) {
            goto ERROR4;
          } else {

          }
        }
      }
    } else {

    }
    if (((int )data->has_fan & 16) != 0) {
      err = device_create_file(dev, & sensor_dev_attr_fan5_input16.dev_attr);
      if (err != 0) {
        goto ERROR4;
      } else {
        err = device_create_file(dev, & sensor_dev_attr_fan5_min16.dev_attr);
        if (err != 0) {
          goto ERROR4;
        } else {
          err = device_create_file(dev, & sensor_dev_attr_fan5_alarm.dev_attr);
          if (err != 0) {
            goto ERROR4;
          } else {

          }
        }
      }
    } else {

    }
  } else {
    if ((int )data->has_fan & 1) {
      err = device_create_file(dev, & sensor_dev_attr_fan1_input.dev_attr);
      if (err != 0) {
        goto ERROR4;
      } else {
        err = device_create_file(dev, & sensor_dev_attr_fan1_min.dev_attr);
        if (err != 0) {
          goto ERROR4;
        } else {
          err = device_create_file(dev, & sensor_dev_attr_fan1_div.dev_attr);
          if (err != 0) {
            goto ERROR4;
          } else {
            err = device_create_file(dev, & sensor_dev_attr_fan1_alarm.dev_attr);
            if (err != 0) {
              goto ERROR4;
            } else {

            }
          }
        }
      }
    } else {

    }
    if (((int )data->has_fan & 2) != 0) {
      err = device_create_file(dev, & sensor_dev_attr_fan2_input.dev_attr);
      if (err != 0) {
        goto ERROR4;
      } else {
        err = device_create_file(dev, & sensor_dev_attr_fan2_min.dev_attr);
        if (err != 0) {
          goto ERROR4;
        } else {
          err = device_create_file(dev, & sensor_dev_attr_fan2_div.dev_attr);
          if (err != 0) {
            goto ERROR4;
          } else {
            err = device_create_file(dev, & sensor_dev_attr_fan2_alarm.dev_attr);
            if (err != 0) {
              goto ERROR4;
            } else {

            }
          }
        }
      }
    } else {

    }
    if (((int )data->has_fan & 4) != 0) {
      err = device_create_file(dev, & sensor_dev_attr_fan3_input.dev_attr);
      if (err != 0) {
        goto ERROR4;
      } else {
        err = device_create_file(dev, & sensor_dev_attr_fan3_min.dev_attr);
        if (err != 0) {
          goto ERROR4;
        } else {
          err = device_create_file(dev, & sensor_dev_attr_fan3_div.dev_attr);
          if (err != 0) {
            goto ERROR4;
          } else {
            err = device_create_file(dev, & sensor_dev_attr_fan3_alarm.dev_attr);
            if (err != 0) {
              goto ERROR4;
            } else {

            }
          }
        }
      }
    } else {

    }
  }
  if (enable_pwm_interface != 0) {
    if (((int )sio_data->skip_pwm & 1) == 0) {
      err = device_create_file(dev, & sensor_dev_attr_pwm1_enable.dev_attr);
      if (err != 0) {
        goto ERROR4;
      } else {
        err = device_create_file(dev, & sensor_dev_attr_pwm1.dev_attr);
        if (err != 0) {
          goto ERROR4;
        } else {
          err = device_create_file(dev, & dev_attr_pwm1_freq);
          if (err != 0) {
            goto ERROR4;
          } else {

          }
        }
      }
    } else {

    }
    if (((int )sio_data->skip_pwm & 2) == 0) {
      err = device_create_file(dev, & sensor_dev_attr_pwm2_enable.dev_attr);
      if (err != 0) {
        goto ERROR4;
      } else {
        err = device_create_file(dev, & sensor_dev_attr_pwm2.dev_attr);
        if (err != 0) {
          goto ERROR4;
        } else {
          err = device_create_file(dev, & dev_attr_pwm2_freq);
          if (err != 0) {
            goto ERROR4;
          } else {

          }
        }
      }
    } else {

    }
    if (((int )sio_data->skip_pwm & 4) == 0) {
      err = device_create_file(dev, & sensor_dev_attr_pwm3_enable.dev_attr);
      if (err != 0) {
        goto ERROR4;
      } else {
        err = device_create_file(dev, & sensor_dev_attr_pwm3.dev_attr);
        if (err != 0) {
          goto ERROR4;
        } else {
          err = device_create_file(dev, & dev_attr_pwm3_freq);
          if (err != 0) {
            goto ERROR4;
          } else {

          }
        }
      }
    } else {

    }
  } else {

  }
  if ((((unsigned int )data->type == 1U || (unsigned int )data->type == 2U) || (unsigned int )data->type == 3U) || (unsigned int )data->type == 4U) {
    data->vrm = vid_which_vrm();
    data->vid = sio_data->vid_value;
    err = device_create_file(dev, & dev_attr_vrm);
    if (err != 0) {
      goto ERROR4;
    } else {
      err = device_create_file(dev, & dev_attr_cpu0_vid);
      if (err != 0) {
        goto ERROR4;
      } else {

      }
    }
  } else {

  }
  data->hwmon_dev = hwmon_device_register(dev);
  tmp___7 = IS_ERR((void const   *)data->hwmon_dev);
  if (tmp___7 != 0L) {
    tmp___6 = PTR_ERR((void const   *)data->hwmon_dev);
    err = (int )tmp___6;
    goto ERROR4;
  } else {

  }
  return (0);
  ERROR4: 
  sysfs_remove_group(& dev->kobj, & it87_group);
  sysfs_remove_group(& dev->kobj, & it87_group_opt);
  ERROR2: 
  dev_set_drvdata(& pdev___0->dev, 0);
  kfree((void const   *)data);
  ERROR1: 
  __release_region(& ioport_resource, res->start, 2ULL);
  ERROR0: ;
  return (err);
}
}
static int it87_remove(struct platform_device *pdev___0 ) 
{ 
  struct it87_data *data ;
  void *tmp ;

  {
  tmp = dev_get_drvdata((struct device  const  *)(& pdev___0->dev));
  data = (struct it87_data *)tmp;
  hwmon_device_unregister(data->hwmon_dev);
  sysfs_remove_group(& pdev___0->dev.kobj, & it87_group);
  sysfs_remove_group(& pdev___0->dev.kobj, & it87_group_opt);
  __release_region(& ioport_resource, (resource_size_t )data->addr, 2ULL);
  dev_set_drvdata(& pdev___0->dev, 0);
  kfree((void const   *)data);
  return (0);
}
}
static int it87_read_value(struct it87_data *data , u8 reg ) 
{ 
  unsigned char tmp ;

  {
  outb_p((int )reg, (int )data->addr);
  tmp = inb_p((int )((unsigned int )data->addr + 1U));
  return ((int )tmp);
}
}
static void it87_write_value(struct it87_data *data , u8 reg , u8 value ) 
{ 


  {
  outb_p((int )reg, (int )data->addr);
  outb_p((int )value, (int )((unsigned int )data->addr + 1U));
  return;
}
}
static int it87_check_pwm(struct device *dev ) 
{ 
  struct it87_data *data ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int i ;
  u8 pwm[3U] ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;

  {
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  tmp___1 = it87_read_value(data, 20);
  tmp___0 = tmp___1;
  if ((tmp___0 & 135) == 0) {
    if (fix_pwm_polarity != 0) {
      i = 0;
      goto ldv_20945;
      ldv_20944: 
      tmp___2 = it87_read_value(data, (int )((unsigned int )((u8 )i) + 21U));
      pwm[i] = (u8 )tmp___2;
      i = i + 1;
      ldv_20945: ;
      if (i <= 2) {
        goto ldv_20944;
      } else {

      }

      if ((int )((signed char )(((int )pwm[0] | (int )pwm[1]) | (int )pwm[2])) >= 0) {
        tmp___3 = dev_name((struct device  const  *)dev);
        tmp___4 = dev_driver_string((struct device  const  *)dev);
        printk("<6>%s %s: Reconfiguring PWM to active high polarity\n", tmp___4, tmp___3);
        it87_write_value(data, 20, (int )((u8 )((int )((signed char )tmp___0) | -121)));
        i = 0;
        goto ldv_20948;
        ldv_20947: 
        it87_write_value(data, (int )((unsigned int )((u8 )i) + 21U), ~ ((int )pwm[i]) & 127);
        i = i + 1;
        ldv_20948: ;
        if (i <= 2) {
          goto ldv_20947;
        } else {

        }

        return (1);
      } else {

      }
      tmp___5 = dev_name((struct device  const  *)dev);
      tmp___6 = dev_driver_string((struct device  const  *)dev);
      printk("<6>%s %s: PWM configuration is too broken to be fixed\n", tmp___6, tmp___5);
    } else {

    }
    tmp___7 = dev_name((struct device  const  *)dev);
    tmp___8 = dev_driver_string((struct device  const  *)dev);
    printk("<6>%s %s: Detected broken BIOS defaults, disabling PWM interface\n", tmp___8,
           tmp___7);
    return (0);
  } else
  if (fix_pwm_polarity != 0) {
    tmp___9 = dev_name((struct device  const  *)dev);
    tmp___10 = dev_driver_string((struct device  const  *)dev);
    printk("<6>%s %s: PWM configuration looks sane, won\'t touch\n", tmp___10, tmp___9);
  } else {

  }
  return (1);
}
}
static void it87_init_device(struct platform_device *pdev___0 ) 
{ 
  struct it87_data *data ;
  void *tmp ;
  int tmp___0 ;
  int i ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
  tmp = dev_get_drvdata((struct device  const  *)(& pdev___0->dev));
  data = (struct it87_data *)tmp;
  i = 0;
  goto ldv_20957;
  ldv_20956: 
  data->manual_pwm_ctl[i] = 255U;
  i = i + 1;
  ldv_20957: ;
  if (i <= 2) {
    goto ldv_20956;
  } else {

  }
  i = 0;
  goto ldv_20960;
  ldv_20959: 
  tmp___0 = it87_read_value(data, (int )((unsigned int )((u8 )i) * 2U + 49U));
  if (tmp___0 == 255) {
    it87_write_value(data, (int )((unsigned int )((u8 )i) * 2U + 49U), 0);
  } else {

  }
  i = i + 1;
  ldv_20960: ;
  if (i <= 7) {
    goto ldv_20959;
  } else {

  }
  i = 0;
  goto ldv_20963;
  ldv_20962: 
  tmp___0 = it87_read_value(data, (int )((unsigned int )((u8 )(i + 32)) * 2U));
  if (tmp___0 == 255) {
    it87_write_value(data, (int )((unsigned int )((u8 )(i + 32)) * 2U), 127);
  } else {

  }
  i = i + 1;
  ldv_20963: ;
  if (i <= 2) {
    goto ldv_20962;
  } else {

  }
  tmp___0 = it87_read_value(data, 81);
  if ((tmp___0 & 63) == 0) {
    tmp___0 = (tmp___0 & 192) | 42;
    it87_write_value(data, 81, (int )((u8 )tmp___0));
  } else {

  }
  data->sensor = (u8 )tmp___0;
  tmp___0 = it87_read_value(data, 80);
  if ((tmp___0 & 255) == 0) {
    it87_write_value(data, 80, 255);
  } else {

  }
  tmp___1 = it87_read_value(data, 19);
  data->fan_main_ctrl = (u8 )tmp___1;
  if (((int )data->fan_main_ctrl & 112) == 0) {
    data->fan_main_ctrl = (u8 )((unsigned int )data->fan_main_ctrl | 112U);
    it87_write_value(data, 19, (int )data->fan_main_ctrl);
  } else {

  }
  data->has_fan = (unsigned int )((u8 )((int )data->fan_main_ctrl >> 4)) & 7U;
  tmp___4 = has_16bit_fans((struct it87_data  const  *)data);
  if (tmp___4 != 0) {
    tmp___0 = it87_read_value(data, 12);
    if (((~ tmp___0 & 7) & (int )data->has_fan) != 0) {
      tmp___2 = dev_name((struct device  const  *)(& pdev___0->dev));
      tmp___3 = dev_driver_string((struct device  const  *)(& pdev___0->dev));
      printk("<7>%s %s: Setting fan1-3 to 16-bit mode\n", tmp___3, tmp___2);
      it87_write_value(data, 12, (int )((u8 )((int )((signed char )tmp___0) | 7)));
    } else {

    }
    if ((unsigned int )data->type != 0U) {
      if ((tmp___0 & 16) != 0) {
        data->has_fan = (u8 )((unsigned int )data->has_fan | 8U);
      } else {

      }
      if ((tmp___0 & 32) != 0) {
        data->has_fan = (u8 )((unsigned int )data->has_fan | 16U);
      } else {

      }
    } else {

    }
  } else {

  }
  i = 0;
  goto ldv_20966;
  ldv_20965: ;
  if (((int )data->fan_main_ctrl >> i) & 1) {
    tmp___0 = it87_read_value(data, (int )((unsigned int )((u8 )i) + 21U));
    if ((tmp___0 & 128) != 0) {

    } else {
      data->manual_pwm_ctl[i] = (u8 )(tmp___0 << 1);
    }
  } else {

  }
  i = i + 1;
  ldv_20966: ;
  if (i <= 2) {
    goto ldv_20965;
  } else {

  }
  tmp___5 = it87_read_value(data, 0);
  it87_write_value(data, 0, (int )((u8 )(((int )((signed char )tmp___5) & 54) | (update_vbat != 0 ? 65 : 1))));
  return;
}
}
static struct it87_data *it87_update_device(struct device *dev ) 
{ 
  struct it87_data *data ;
  void *tmp ;
  int i ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;

  {
  tmp = dev_get_drvdata((struct device  const  *)dev);
  data = (struct it87_data *)tmp;
  ldv_mutex_lock_25(& data->update_lock);
  if (((1 != 0 && 1 != 0) && (long )(data->last_updated + 375UL) - (long )jiffies < 0L) || (int )((signed char )data->valid) == 0) {
    if (update_vbat != 0) {
      tmp___0 = it87_read_value(data, 0);
      it87_write_value(data, 0, (int )((u8 )((int )((signed char )tmp___0) | 64)));
    } else {

    }
    i = 0;
    goto ldv_20980;
    ldv_20979: 
    tmp___1 = it87_read_value(data, (int )((unsigned int )((u8 )i) + 32U));
    data->in[i] = (u8 )tmp___1;
    tmp___2 = it87_read_value(data, (int )((unsigned int )((u8 )i) * 2U + 49U));
    data->in_min[i] = (u8 )tmp___2;
    tmp___3 = it87_read_value(data, (int )((unsigned int )((u8 )(i + 24)) * 2U));
    data->in_max[i] = (u8 )tmp___3;
    i = i + 1;
    ldv_20980: ;
    if (i <= 7) {
      goto ldv_20979;
    } else {

    }
    tmp___4 = it87_read_value(data, 40);
    data->in[8] = (u8 )tmp___4;
    i = 0;
    goto ldv_20984;
    ldv_20983: ;
    if ((((int )data->has_fan >> i) & 1) == 0) {
      goto ldv_20982;
    } else {

    }
    tmp___5 = it87_read_value(data, (int )IT87_REG_FAN_MIN[i]);
    data->fan_min[i] = (u16 )tmp___5;
    tmp___6 = it87_read_value(data, (int )IT87_REG_FAN[i]);
    data->fan[i] = (u16 )tmp___6;
    tmp___9 = has_16bit_fans((struct it87_data  const  *)data);
    if (tmp___9 != 0) {
      tmp___7 = it87_read_value(data, (int )IT87_REG_FANX[i]);
      data->fan[i] = (u16 )((int )((short )data->fan[i]) | (int )((short )(tmp___7 << 8)));
      tmp___8 = it87_read_value(data, (int )IT87_REG_FANX_MIN[i]);
      data->fan_min[i] = (u16 )((int )((short )data->fan_min[i]) | (int )((short )(tmp___8 << 8)));
    } else {

    }
    ldv_20982: 
    i = i + 1;
    ldv_20984: ;
    if (i <= 4) {
      goto ldv_20983;
    } else {

    }
    i = 0;
    goto ldv_20987;
    ldv_20986: 
    tmp___10 = it87_read_value(data, (int )((unsigned int )((u8 )i) + 41U));
    data->temp[i] = (s8 )tmp___10;
    tmp___11 = it87_read_value(data, (int )((unsigned int )((u8 )(i + 32)) * 2U));
    data->temp_high[i] = (s8 )tmp___11;
    tmp___12 = it87_read_value(data, (int )((unsigned int )((u8 )i) * 2U + 65U));
    data->temp_low[i] = (s8 )tmp___12;
    i = i + 1;
    ldv_20987: ;
    if (i <= 2) {
      goto ldv_20986;
    } else {

    }

    if (((int )data->has_fan & 7) != 0) {
      tmp___13 = has_16bit_fans((struct it87_data  const  *)data);
      if (tmp___13 == 0) {
        i = it87_read_value(data, 11);
        data->fan_div[0] = (unsigned int )((u8 )i) & 7U;
        data->fan_div[1] = (unsigned int )((u8 )(i >> 3)) & 7U;
        data->fan_div[2] = (i & 64) != 0 ? 3U : 1U;
      } else {

      }
    } else {

    }
    tmp___14 = it87_read_value(data, 1);
    tmp___15 = it87_read_value(data, 2);
    tmp___16 = it87_read_value(data, 3);
    data->alarms = (u32 )((tmp___14 | (tmp___15 << 8)) | (tmp___16 << 16));
    tmp___17 = it87_read_value(data, 19);
    data->fan_main_ctrl = (u8 )tmp___17;
    tmp___18 = it87_read_value(data, 20);
    data->fan_ctl = (u8 )tmp___18;
    tmp___19 = it87_read_value(data, 81);
    data->sensor = (u8 )tmp___19;
    if ((unsigned int )data->type == 1U || (unsigned int )data->type == 2U) {
      tmp___20 = it87_read_value(data, 10);
      data->vid = (u8 )tmp___20;
      data->vid = (unsigned int )data->vid & 63U;
    } else {

    }
    data->last_updated = jiffies;
    data->valid = 1;
  } else {

  }
  ldv_mutex_unlock_26(& data->update_lock);
  return (data);
}
}
static int it87_device_add(unsigned short address , struct it87_sio_data  const  *sio_data ) 
{ 
  struct resource res ;
  int err ;

  {
  res.start = (unsigned long long )((int )address + 5);
  res.end = (unsigned long long )((int )address + 6);
  res.name = "it87";
  res.flags = 256UL;
  res.parent = 0;
  res.sibling = 0;
  res.child = 0;
  err = acpi_check_resource_conflict(& res);
  if (err != 0) {
    goto exit;
  } else {

  }
  pdev = platform_device_alloc("it87", (int )address);
  if ((unsigned long )pdev == (unsigned long )((struct platform_device *)0)) {
    err = -12;
    printk("<3>it87: Device allocation failed\n");
    goto exit;
  } else {

  }
  err = platform_device_add_resources(pdev, & res, 1U);
  if (err != 0) {
    printk("<3>it87: Device resource addition failed (%d)\n", err);
    goto exit_device_put;
  } else {

  }
  err = platform_device_add_data(pdev, (void const   *)sio_data, 8UL);
  if (err != 0) {
    printk("<3>it87: Platform data allocation failed\n");
    goto exit_device_put;
  } else {

  }
  err = platform_device_add(pdev);
  if (err != 0) {
    printk("<3>it87: Device addition failed (%d)\n", err);
    goto exit_device_put;
  } else {

  }
  return (0);
  exit_device_put: 
  platform_device_put(pdev);
  exit: ;
  return (err);
}
}
static int sm_it87_init(void) 
{ 
  int err ;
  unsigned short isa_address ;
  struct it87_sio_data sio_data ;

  {
  isa_address = 0U;
  memset((void *)(& sio_data), 0, 8UL);
  err = it87_find(& isa_address, & sio_data);
  if (err != 0) {
    return (err);
  } else {

  }
  err = platform_driver_register(& it87_driver);
  if (err != 0) {
    return (err);
  } else {

  }
  err = it87_device_add((int )isa_address, (struct it87_sio_data  const  *)(& sio_data));
  if (err != 0) {
    platform_driver_unregister(& it87_driver);
    return (err);
  } else {

  }
  return (0);
}
}
static void sm_it87_exit(void) 
{ 


  {
  platform_device_unregister(pdev);
  platform_driver_unregister(& it87_driver);
  return;
}
}
void ldv_check_final_state(void) ;
extern void ldv_check_return_value(int  ) ;
extern void ldv_check_return_value_probe(int  ) ;
void ldv_initialize(void) ;
extern void ldv_handler_precall(void) ;
extern int nondet_int(void) ;
int LDV_IN_INTERRUPT  ;
int main(void) 
{ 
  struct platform_device *var_group1 ;
  int res_it87_probe_42 ;
  int ldv_s_it87_driver_platform_driver ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  ldv_s_it87_driver_platform_driver = 0;
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  ldv_handler_precall();
  tmp = sm_it87_init();
  if (tmp != 0) {
    goto ldv_final;
  } else {

  }
  goto ldv_21061;
  ldv_21060: 
  tmp___0 = nondet_int();
  switch (tmp___0) {
  case 0: ;
  if (ldv_s_it87_driver_platform_driver == 0) {
    res_it87_probe_42 = it87_probe(var_group1);
    ldv_check_return_value(res_it87_probe_42);
    ldv_check_return_value_probe(res_it87_probe_42);
    if (res_it87_probe_42 != 0) {
      goto ldv_module_exit;
    } else {

    }
    ldv_s_it87_driver_platform_driver = ldv_s_it87_driver_platform_driver + 1;
  } else {

  }
  goto ldv_21057;
  case 1: ;
  if (ldv_s_it87_driver_platform_driver == 1) {
    ldv_handler_precall();
    it87_remove(var_group1);
    ldv_s_it87_driver_platform_driver = 0;
  } else {

  }
  goto ldv_21057;
  default: ;
  goto ldv_21057;
  }
  ldv_21057: ;
  ldv_21061: 
  tmp___1 = nondet_int();
  if (tmp___1 != 0 || ldv_s_it87_driver_platform_driver != 0) {
    goto ldv_21060;
  } else {

  }

  ldv_module_exit: 
  ldv_handler_precall();
  sm_it87_exit();
  ldv_final: 
  ldv_check_final_state();
  return 0;
}
}
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_2(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_3(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_4(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_5(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_6(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_7(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_8(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_9(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_10(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_11(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_12(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_13(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_14(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_15(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_16(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_17(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_18(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_19(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_20(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_21(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_22(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_23(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_24(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_lock_25(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_lock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_lock(ldv_func_arg1);
  return;
}
}
void ldv_mutex_unlock_26(struct mutex *ldv_func_arg1 ) 
{ 


  {
  ldv_mutex_unlock_update_lock_of_it87_data(ldv_func_arg1);
  mutex_unlock(ldv_func_arg1);
  return;
}
}
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: __VERIFIER_error();
}
}
extern int ldv_undef_int(void) ;
long ldv__builtin_expect(long exp , long c ) 
{ 


  {
  return (exp);
}
}
static int ldv_mutex_update_lock_of_it87_data  ;
int ldv_mutex_lock_interruptible_update_lock_of_it87_data(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
  if (ldv_mutex_update_lock_of_it87_data == 1) {

  } else {
    ldv_error();
  }
  nondetermined = ldv_undef_int();
  if (nondetermined) {
    ldv_mutex_update_lock_of_it87_data = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
int ldv_mutex_lock_killable_update_lock_of_it87_data(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
  if (ldv_mutex_update_lock_of_it87_data == 1) {

  } else {
    ldv_error();
  }
  nondetermined = ldv_undef_int();
  if (nondetermined) {
    ldv_mutex_update_lock_of_it87_data = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
void ldv_mutex_lock_update_lock_of_it87_data(struct mutex *lock ) 
{ 


  {
  if (ldv_mutex_update_lock_of_it87_data == 1) {

  } else {
    ldv_error();
  }
  ldv_mutex_update_lock_of_it87_data = 2;
  return;
}
}
int ldv_mutex_trylock_update_lock_of_it87_data(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
  if (ldv_mutex_update_lock_of_it87_data == 1) {

  } else {
    ldv_error();
  }
  is_mutex_held_by_another_thread = ldv_undef_int();
  if (is_mutex_held_by_another_thread) {
    return (0);
  } else {
    ldv_mutex_update_lock_of_it87_data = 2;
    return (1);
  }
}
}
int ldv_atomic_dec_and_mutex_lock_update_lock_of_it87_data(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
  if (ldv_mutex_update_lock_of_it87_data == 1) {

  } else {
    ldv_error();
  }
  atomic_value_after_dec = ldv_undef_int();
  if (atomic_value_after_dec == 0) {
    ldv_mutex_update_lock_of_it87_data = 2;
    return (1);
  } else {

  }
  return (0);
}
}
int ldv_mutex_is_locked_update_lock_of_it87_data(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
  if (ldv_mutex_update_lock_of_it87_data == 1) {
    nondetermined = ldv_undef_int();
    if (nondetermined) {
      return (0);
    } else {
      return (1);
    }
  } else {
    return (1);
  }
}
}
void ldv_mutex_unlock_update_lock_of_it87_data(struct mutex *lock ) 
{ 


  {
  if (ldv_mutex_update_lock_of_it87_data == 2) {

  } else {
    ldv_error();
  }
  ldv_mutex_update_lock_of_it87_data = 1;
  return;
}
}
void ldv_initialize(void) 
{ 


  {
  ldv_mutex_update_lock_of_it87_data = 1;
  return;
}
}
void ldv_check_final_state(void) 
{ 


  {
  if (ldv_mutex_update_lock_of_it87_data == 1) {

  } else {
    ldv_error();
  }
  return;
}
}
