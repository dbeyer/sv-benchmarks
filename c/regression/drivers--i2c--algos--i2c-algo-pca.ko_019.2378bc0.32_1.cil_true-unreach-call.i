extern void __VERIFIER_error() __attribute__ ((__noreturn__));

/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

typedef __builtin_va_list __gnuc_va_list;
typedef __gnuc_va_list va_list;
typedef unsigned char __u8;
typedef unsigned short __u16;
typedef int __s32;
typedef unsigned int __u32;
typedef unsigned long long __u64;
typedef signed char s8;
typedef unsigned char u8;
typedef unsigned short u16;
typedef unsigned int u32;
typedef long long s64;
typedef unsigned long long u64;
typedef unsigned int __kernel_mode_t;
typedef int __kernel_pid_t;
typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;
typedef unsigned long __kernel_size_t;
typedef long __kernel_ssize_t;
typedef long __kernel_time_t;
typedef long __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef __kernel_uid_t __kernel_uid32_t;
typedef __kernel_gid_t __kernel_gid32_t;
typedef __u32 __kernel_dev_t;
typedef __kernel_dev_t dev_t;
typedef __kernel_mode_t mode_t;
typedef __kernel_pid_t pid_t;
typedef __kernel_clockid_t clockid_t;
typedef __kernel_uid32_t uid_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_size_t size_t;
typedef __kernel_ssize_t ssize_t;
typedef __kernel_time_t time_t;
typedef __s32 int32_t;
typedef __u32 uint32_t;
struct __anonstruct_atomic_t_7 {
   int volatile   counter ;
};
typedef struct __anonstruct_atomic_t_7 atomic_t;
struct __anonstruct_atomic64_t_8 {
   long volatile   counter ;
};
typedef struct __anonstruct_atomic64_t_8 atomic64_t;
struct module;
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
struct completion;
struct pt_regs;
struct pid;
struct task_struct;
struct mm_struct;
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
union __anonunion____missing_field_name_10 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion____missing_field_name_10 __annonCompField4 ;
};
typedef unsigned long pgdval_t;
typedef unsigned long pgprotval_t;
struct __anonstruct_pgd_t_13 {
   pgdval_t pgd ;
};
typedef struct __anonstruct_pgd_t_13 pgd_t;
struct __anonstruct_pgprot_t_14 {
   pgprotval_t pgprot ;
};
typedef struct __anonstruct_pgprot_t_14 pgprot_t;
struct __anonstruct____missing_field_name_18 {
   unsigned int a ;
   unsigned int b ;
};
struct __anonstruct____missing_field_name_19 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int base1 : 8 ;
   unsigned int type : 4 ;
   unsigned int s : 1 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   unsigned int limit : 4 ;
   unsigned int avl : 1 ;
   unsigned int l : 1 ;
   unsigned int d : 1 ;
   unsigned int g : 1 ;
   unsigned int base2 : 8 ;
};
union __anonunion____missing_field_name_17 {
   struct __anonstruct____missing_field_name_18 __annonCompField6 ;
   struct __anonstruct____missing_field_name_19 __annonCompField7 ;
};
struct desc_struct {
   union __anonunion____missing_field_name_17 __annonCompField8 ;
} __attribute__((__packed__)) ;
struct cpumask {
   unsigned long bits[((4096UL + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
typedef struct cpumask cpumask_t;
struct thread_struct;
struct raw_spinlock;
struct ds_context;
struct bts_tracer;
struct exec_domain;
struct map_segment;
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u32 status ;
};
struct __anonstruct____missing_field_name_28 {
   u64 rip ;
   u64 rdp ;
};
struct __anonstruct____missing_field_name_29 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
union __anonunion____missing_field_name_27 {
   struct __anonstruct____missing_field_name_28 __annonCompField9 ;
   struct __anonstruct____missing_field_name_29 __annonCompField10 ;
};
union __anonunion____missing_field_name_30 {
   u32 padding1[12] ;
   u32 sw_reserved[12] ;
};
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion____missing_field_name_27 __annonCompField11 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32] ;
   u32 xmm_space[64] ;
   u32 padding[12] ;
   union __anonunion____missing_field_name_30 __annonCompField12 ;
} __attribute__((__aligned__(16))) ;
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2] ;
   u64 reserved2[5] ;
} __attribute__((__packed__)) ;
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
} __attribute__((__packed__, __aligned__(64))) ;
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
struct thread_struct {
   struct desc_struct tls_array[3] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long ip ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   struct ds_context *ds_ctx ;
   unsigned int bts_ovfl_signal ;
};
struct __anonstruct_mm_segment_t_31 {
   unsigned long seg ;
};
typedef struct __anonstruct_mm_segment_t_31 mm_segment_t;
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
struct hlist_node;
struct hlist_head {
   struct hlist_node *first ;
};
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
struct timespec;
struct compat_timespec;
struct __anonstruct____missing_field_name_33 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
struct __anonstruct_futex_34 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
};
struct __anonstruct_nanosleep_35 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
struct pollfd;
struct __anonstruct_poll_36 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
union __anonunion____missing_field_name_32 {
   struct __anonstruct____missing_field_name_33 __annonCompField13 ;
   struct __anonstruct_futex_34 futex ;
   struct __anonstruct_nanosleep_35 nanosleep ;
   struct __anonstruct_poll_36 poll ;
};
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion____missing_field_name_32 __annonCompField14 ;
};
typedef atomic64_t atomic_long_t;
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
};
struct raw_spinlock {
   unsigned int slock ;
};
typedef struct raw_spinlock raw_spinlock_t;
struct __anonstruct_raw_rwlock_t_37 {
   unsigned int lock ;
};
typedef struct __anonstruct_raw_rwlock_t_37 raw_rwlock_t;
struct __anonstruct_spinlock_t_38 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
};
typedef struct __anonstruct_spinlock_t_38 spinlock_t;
struct __anonstruct_rwlock_t_39 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
};
typedef struct __anonstruct_rwlock_t_39 rwlock_t;
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
typedef struct __wait_queue_head wait_queue_head_t;
struct __anonstruct_nodemask_t_41 {
   unsigned long bits[(((unsigned long )(1 << 9) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
typedef struct __anonstruct_nodemask_t_41 nodemask_t;
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
};
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct mutex *lock ;
   void *magic ;
};
struct rw_semaphore;
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
};
struct file;
struct device;
struct pm_message {
   int event ;
};
typedef struct pm_message pm_message_t;
struct dev_pm_ops {
   int (*prepare)(struct device *dev ) ;
   void (*complete)(struct device *dev ) ;
   int (*suspend)(struct device *dev ) ;
   int (*resume)(struct device *dev ) ;
   int (*freeze)(struct device *dev ) ;
   int (*thaw)(struct device *dev ) ;
   int (*poweroff)(struct device *dev ) ;
   int (*restore)(struct device *dev ) ;
   int (*suspend_noirq)(struct device *dev ) ;
   int (*resume_noirq)(struct device *dev ) ;
   int (*freeze_noirq)(struct device *dev ) ;
   int (*thaw_noirq)(struct device *dev ) ;
   int (*poweroff_noirq)(struct device *dev ) ;
   int (*restore_noirq)(struct device *dev ) ;
};
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
};
struct __anonstruct_mm_context_t_90 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
typedef struct __anonstruct_mm_context_t_90 mm_context_t;
struct vm_area_struct;
struct key;
typedef __u64 Elf64_Addr;
typedef __u16 Elf64_Half;
typedef __u32 Elf64_Word;
typedef __u64 Elf64_Xword;
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
typedef struct elf64_sym Elf64_Sym;
struct kobject;
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
struct sysfs_dirent;
struct kref {
   atomic_t refcount ;
};
struct kset;
struct kobj_type;
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
struct kobj_type {
   void (*release)(struct kobject *kobj ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
struct kobj_uevent_env {
   char *envp[32] ;
   int envp_idx ;
   char buf[2048] ;
   int buflen ;
};
struct kset_uevent_ops {
   int (*filter)(struct kset *kset , struct kobject *kobj ) ;
   char const   *(*name)(struct kset *kset , struct kobject *kobj ) ;
   int (*uevent)(struct kset *kset , struct kobject *kobj , struct kobj_uevent_env *env ) ;
};
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
struct kernel_param;
struct kparam_string;
struct kparam_array;
union __anonunion____missing_field_name_100 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
struct kernel_param {
   char const   *name ;
   unsigned int perm ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   union __anonunion____missing_field_name_100 __annonCompField15 ;
};
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   unsigned int elemsize ;
   void *elem ;
};
struct marker;
typedef void marker_probe_func(void *probe_private , void *call_private , char const   *fmt ,
                               va_list *args );
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  *mdata , void *call_private  , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
   char const   *tp_name ;
   void *tp_cb ;
} __attribute__((__aligned__(8))) ;
union ktime {
   s64 tv64 ;
};
typedef union ktime ktime_t;
struct hrtimer;
enum hrtimer_restart;
struct work_struct;
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *work ) ;
};
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head *head ) ;
};
struct tracepoint;
struct tracepoint {
   char const   *name ;
   int state ;
   void **funcs ;
} __attribute__((__aligned__(32))) ;
struct mod_arch_specific {

};
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t count ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
struct module_param_attrs;
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
struct exception_table_entry;
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
struct module_sect_attrs;
struct module_notes_attrs;
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[64UL - sizeof(unsigned long )] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   char *refptr ;
};
struct device_driver;
typedef unsigned long kernel_ulong_t;
struct i2c_device_id {
   char name[20] ;
   kernel_ulong_t driver_data  __attribute__((__aligned__(sizeof(kernel_ulong_t )))) ;
};
struct klist_node;
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
struct dma_mapping_ops;
struct dev_archdata {
   void *acpi_handle ;
   struct dma_mapping_ops *dma_ops ;
   void *iommu ;
};
struct device_private;
struct driver_private;
struct class;
struct class_private;
struct bus_type;
struct bus_type_private;
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type *bus , char *buf ) ;
   ssize_t (*store)(struct bus_type *bus , char const   *buf , size_t count ) ;
};
struct device_attribute;
struct driver_attribute;
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device *dev , struct device_driver *drv ) ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*suspend_late)(struct device *dev , pm_message_t state ) ;
   int (*resume_early)(struct device *dev ) ;
   int (*resume)(struct device *dev ) ;
   struct dev_pm_ops *pm ;
   struct bus_type_private *p ;
};
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct attribute_group **groups ;
   struct dev_pm_ops *pm ;
   struct driver_private *p ;
};
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver *driver , char *buf ) ;
   ssize_t (*store)(struct device_driver *driver , char const   *buf , size_t count ) ;
};
struct class_attribute;
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   void (*class_release)(struct class *class ) ;
   void (*dev_release)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct dev_pm_ops *pm ;
   struct class_private *p ;
};
struct device_type;
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *class , char *buf ) ;
   ssize_t (*store)(struct class *class , char const   *buf , size_t count ) ;
};
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   void (*release)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct dev_pm_ops *pm ;
};
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *dev , struct device_attribute *attr , char *buf ) ;
   ssize_t (*store)(struct device *dev , struct device_attribute *attr , char const   *buf ,
                    size_t count ) ;
};
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
struct dma_coherent_mem;
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *dev ) ;
};
struct kernel_cap_struct {
   __u32 cap[2] ;
};
typedef struct kernel_cap_struct kernel_cap_t;
struct dentry;
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(sizeof(long )))) ;
struct rb_root {
   struct rb_node *rb_node ;
};
struct prio_tree_node;
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
typedef atomic_long_t mm_counter_t;
struct __anonstruct_vm_set_110 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
union __anonunion_shared_109 {
   struct __anonstruct_vm_set_110 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
struct anon_vma;
struct vm_operations_struct;
struct mempolicy;
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_109 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
struct mmu_notifier_mm;
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file *filp , unsigned long addr , unsigned long len ,
                                      unsigned long pgoff , unsigned long flags ) ;
   void (*unmap_area)(struct mm_struct *mm , unsigned long addr ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[2 * ((2 + 19) + 1)] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
typedef unsigned long cputime_t;
struct sem_undo_list;
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
struct siginfo;
struct __anonstruct_sigset_t_111 {
   unsigned long sig[64 / 64] ;
};
typedef struct __anonstruct_sigset_t_111 sigset_t;
typedef void __signalfn_t(int  );
typedef __signalfn_t *__sighandler_t;
typedef void __restorefn_t(void);
typedef __restorefn_t *__sigrestore_t;
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
struct k_sigaction {
   struct sigaction sa ;
};
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
typedef union sigval sigval_t;
struct __anonstruct__kill_113 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
struct __anonstruct__timer_114 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[sizeof(__kernel_uid32_t ) - sizeof(int )] ;
   sigval_t _sigval ;
   int _sys_private ;
};
struct __anonstruct__rt_115 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
struct __anonstruct__sigchld_116 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
struct __anonstruct__sigfault_117 {
   void *_addr ;
};
struct __anonstruct__sigpoll_118 {
   long _band ;
   int _fd ;
};
union __anonunion__sifields_112 {
   int _pad[(128UL - 4UL * sizeof(int )) / sizeof(int )] ;
   struct __anonstruct__kill_113 _kill ;
   struct __anonstruct__timer_114 _timer ;
   struct __anonstruct__rt_115 _rt ;
   struct __anonstruct__sigchld_116 _sigchld ;
   struct __anonstruct__sigfault_117 _sigfault ;
   struct __anonstruct__sigpoll_118 _sigpoll ;
};
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_112 _sifields ;
};
typedef struct siginfo siginfo_t;
struct user_struct;
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
struct vfsmount;
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
struct fs_struct {
   atomic_t count ;
   rwlock_t lock ;
   int umask ;
   struct path root ;
   struct path pwd ;
};
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
struct pid_namespace;
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[PIDTYPE_MAX] ;
   struct rcu_head rcu ;
   struct upid numbers[1] ;
};
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
struct __anonstruct_seccomp_t_121 {
   int mode ;
};
typedef struct __anonstruct_seccomp_t_121 seccomp_t;
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
struct rt_mutex_waiter;
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
struct hrtimer_clock_base;
struct hrtimer_cpu_base;
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   struct list_head cb_entry ;
   int start_pid ;
   void *start_site ;
   char start_comm[16] ;
};
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2] ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
struct latency_record {
   unsigned long backtrace[12] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
struct nsproxy;
typedef int32_t key_serial_t;
typedef uint32_t key_perm_t;
struct signal_struct;
struct cred;
struct key_type;
struct keyring_list;
struct key_user;
union __anonunion_type_data_176 {
   struct list_head link ;
   unsigned long x[2] ;
   void *p[2] ;
};
union __anonunion_payload_177 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   time_t expiry ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_176 type_data ;
   union __anonunion_payload_177 payload ;
};
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32] ;
   gid_t *blocks[0] ;
};
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
struct cred {
   atomic_t usage ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
struct futex_pi_state;
struct robust_list_head;
struct bio;
struct cfs_rq;
struct task_group;
struct user_namespace;
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
union __anonunion____missing_field_name_180 {
   pid_t pgrp  __attribute__((__deprecated__)) ;
   pid_t __pgrp ;
};
union __anonunion____missing_field_name_181 {
   pid_t session  __attribute__((__deprecated__)) ;
   pid_t __session ;
};
struct tty_struct;
struct taskstats;
struct tty_audit_buf;
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3] ;
   union __anonunion____missing_field_name_180 __annonCompField21 ;
   struct pid *tty_old_pgrp ;
   union __anonunion____missing_field_name_181 __annonCompField22 ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
};
struct backing_dev_info;
struct reclaim_state;
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
struct sched_group {
   struct sched_group *next ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
   unsigned long cpumask[] ;
};
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_failed[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_balanced[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_imbalance[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_hot_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyg[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyq[CPU_MAX_IDLE_TYPES] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
   unsigned long span[] ;
};
struct io_context;
struct audit_context;
struct pipe_inode_info;
struct rq;
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq *rq , struct task_struct *p , int wakeup ) ;
   void (*dequeue_task)(struct rq *rq , struct task_struct *p , int sleep ) ;
   void (*yield_task)(struct rq *rq ) ;
   void (*check_preempt_curr)(struct rq *rq , struct task_struct *p , int sync ) ;
   struct task_struct *(*pick_next_task)(struct rq *rq ) ;
   void (*put_prev_task)(struct rq *rq , struct task_struct *p ) ;
   int (*select_task_rq)(struct task_struct *p , int sync ) ;
   unsigned long (*load_balance)(struct rq *this_rq , int this_cpu , struct rq *busiest ,
                                 unsigned long max_load_move , struct sched_domain *sd ,
                                 enum cpu_idle_type idle , int *all_pinned , int *this_best_prio ) ;
   int (*move_one_task)(struct rq *this_rq , int this_cpu , struct rq *busiest , struct sched_domain *sd ,
                        enum cpu_idle_type idle ) ;
   void (*pre_schedule)(struct rq *this_rq , struct task_struct *task ) ;
   int (*needs_post_schedule)(struct rq *this_rq ) ;
   void (*post_schedule)(struct rq *this_rq ) ;
   void (*task_wake_up)(struct rq *this_rq , struct task_struct *task ) ;
   void (*set_cpus_allowed)(struct task_struct *p , struct cpumask  const  *newmask ) ;
   void (*rq_online)(struct rq *rq ) ;
   void (*rq_offline)(struct rq *rq ) ;
   void (*set_curr_task)(struct rq *rq ) ;
   void (*task_tick)(struct rq *rq , struct task_struct *p , int queued ) ;
   void (*task_new)(struct rq *rq , struct task_struct *p ) ;
   void (*switched_from)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*switched_to)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*prio_changed)(struct rq *this_rq , struct task_struct *task , int oldprio ,
                        int running ) ;
   void (*moved_group)(struct task_struct *p ) ;
};
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 start_runtime ;
   u64 avg_wakeup ;
   u64 nr_migrations ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
struct rt_rq;
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
struct linux_binfmt;
struct files_struct;
struct css_set;
struct compat_robust_list_head;
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned int did_exec : 1 ;
   unsigned int in_execve : 1 ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct bts_tracer *bts ;
   void *bts_buffer ;
   size_t bts_size ;
   struct pid_link pids[PIDTYPE_MAX] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_exec_mutex ;
   char comm[16] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_timestamp ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *priv ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   unsigned long trace ;
};
struct i2c_msg;
struct i2c_algorithm;
struct i2c_adapter;
struct i2c_client;
struct i2c_driver;
union i2c_smbus_data;
struct i2c_board_info;
struct i2c_client_address_data;
struct i2c_driver {
   int id ;
   unsigned int class ;
   int (*attach_adapter)(struct i2c_adapter * ) ;
   int (*detach_adapter)(struct i2c_adapter * ) ;
   int (*detach_client)(struct i2c_client * )  __attribute__((__deprecated__)) ;
   int (*probe)(struct i2c_client * , struct i2c_device_id  const  * ) ;
   int (*remove)(struct i2c_client * ) ;
   void (*shutdown)(struct i2c_client * ) ;
   int (*suspend)(struct i2c_client * , pm_message_t mesg ) ;
   int (*resume)(struct i2c_client * ) ;
   int (*command)(struct i2c_client *client , unsigned int cmd , void *arg ) ;
   struct device_driver driver ;
   struct i2c_device_id  const  *id_table ;
   int (*detect)(struct i2c_client * , int kind , struct i2c_board_info * ) ;
   struct i2c_client_address_data  const  *address_data ;
   struct list_head clients ;
};
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20] ;
   struct i2c_adapter *adapter ;
   struct i2c_driver *driver ;
   struct device dev ;
   int irq ;
   struct list_head list ;
   struct list_head detected ;
   struct completion released ;
};
struct i2c_board_info {
   char type[20] ;
   unsigned short flags ;
   unsigned short addr ;
   void *platform_data ;
   struct dev_archdata *archdata ;
   int irq ;
};
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *adap , struct i2c_msg *msgs , int num ) ;
   int (*smbus_xfer)(struct i2c_adapter *adap , u16 addr , unsigned short flags ,
                     char read_write , u8 command , int size , union i2c_smbus_data *data ) ;
   u32 (*functionality)(struct i2c_adapter * ) ;
};
struct i2c_adapter {
   struct module *owner ;
   unsigned int id ;
   unsigned int class ;
   struct i2c_algorithm  const  *algo ;
   void *algo_data ;
   int (*client_register)(struct i2c_client * ) ;
   int (*client_unregister)(struct i2c_client * ) ;
   u8 level ;
   struct mutex bus_lock ;
   struct mutex clist_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   int nr ;
   struct list_head clients ;
   char name[48] ;
   struct completion dev_released ;
};
struct i2c_client_address_data {
   unsigned short const   *normal_i2c ;
   unsigned short const   *probe ;
   unsigned short const   *ignore ;
   unsigned short const   * const  *forces ;
};
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[32 + 2] ;
};
struct i2c_algo_pca_data {
   void *data ;
   void (*write_byte)(void *data , int reg , int val ) ;
   int (*read_byte)(void *data , int reg ) ;
   int (*wait_for_completion)(void *data ) ;
   void (*reset_chip)(void *data ) ;
   unsigned int i2c_clock ;
};
extern int ( /* format attribute */  printk)(char const   *fmt  , ...) ;
extern void __bad_udelay(void) ;
extern void __const_udelay(unsigned long xloops ) ;
extern void msleep(unsigned int msecs ) ;
__inline static char const   *kobject_name(struct kobject  const  *kobj ) 
{ 


  {
  return (kobj->name);
}
}
extern int param_set_int(char const   *val , struct kernel_param *kp ) ;
extern int param_get_int(char *buffer , struct kernel_param *kp ) ;
extern unsigned long volatile   jiffies  __attribute__((__section__(".data"))) ;
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 
  char const   *tmp ;

  {
  tmp = kobject_name(& dev->kobj);
  return (tmp);
}
}
extern char const   *dev_driver_string(struct device  const  *dev ) ;
extern int i2c_add_adapter(struct i2c_adapter * ) ;
extern int i2c_add_numbered_adapter(struct i2c_adapter * ) ;
int i2c_pca_add_bus(struct i2c_adapter *adap ) ;
int i2c_pca_add_numbered_bus(struct i2c_adapter *adap ) ;
static int i2c_debug  ;
static void pca9665_reset(void *pd ) 
{ 
  struct i2c_algo_pca_data *adap ;

  {
  adap = pd;
  (*(adap->write_byte))(adap->data, 0, 5);
  (*(adap->write_byte))(adap->data, 2, 165);
  (*(adap->write_byte))(adap->data, 2, 90);
  return;
}
}
static int pca_start(struct i2c_algo_pca_data *adap ) 
{ 
  int sta ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = (*(adap->read_byte))(adap->data, 3);
  sta = tmp;
  while (1) {
    if (i2c_debug >= 2) {
      printk("<7>=== START\n");
    } else {

    }
    break;
  }
  sta = sta | 32;
  sta = sta & ~ (16 | 8);
  (*(adap->write_byte))(adap->data, 3, sta);
  tmp___0 = (*(adap->wait_for_completion))(adap->data);
  return (tmp___0);
}
}
static int pca_repeated_start(struct i2c_algo_pca_data *adap ) 
{ 
  int sta ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = (*(adap->read_byte))(adap->data, 3);
  sta = tmp;
  while (1) {
    if (i2c_debug >= 2) {
      printk("<7>=== REPEATED START\n");
    } else {

    }
    break;
  }
  sta = sta | 32;
  sta = sta & ~ (16 | 8);
  (*(adap->write_byte))(adap->data, 3, sta);
  tmp___0 = (*(adap->wait_for_completion))(adap->data);
  return (tmp___0);
}
}
static void pca_stop(struct i2c_algo_pca_data *adap ) 
{ 
  int sta ;
  int tmp ;

  {
  tmp = (*(adap->read_byte))(adap->data, 3);
  sta = tmp;
  while (1) {
    if (i2c_debug >= 2) {
      printk("<7>=== STOP\n");
    } else {

    }
    break;
  }
  sta = sta | 16;
  sta = sta & ~ (32 | 8);
  (*(adap->write_byte))(adap->data, 3, sta);
  return;
}
}
static int pca_address(struct i2c_algo_pca_data *adap , struct i2c_msg *msg ) 
{ 
  int sta ;
  int tmp ;
  int addr ;
  int tmp___0 ;

  {
  tmp = (*(adap->read_byte))(adap->data, 3);
  sta = tmp;
  addr = (127 & (int )msg->addr) << 1;
  if ((int )msg->flags & 1) {
    addr = addr | 1;
  } else {

  }
  while (1) {
    if (i2c_debug >= 2) {
      printk("<7>=== SLAVE ADDRESS %#04x+%c=%#04x\n", msg->addr, (int )msg->flags & 1 ? 'R' : 'W',
             addr);
    } else {

    }
    break;
  }
  (*(adap->write_byte))(adap->data, 1, addr);
  sta = sta & ~ ((16 | 32) | 8);
  (*(adap->write_byte))(adap->data, 3, sta);
  tmp___0 = (*(adap->wait_for_completion))(adap->data);
  return (tmp___0);
}
}
static int pca_tx_byte(struct i2c_algo_pca_data *adap , __u8 b ) 
{ 
  int sta ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = (*(adap->read_byte))(adap->data, 3);
  sta = tmp;
  while (1) {
    if (i2c_debug >= 2) {
      printk("<7>=== WRITE %#04x\n", b);
    } else {

    }
    break;
  }
  (*(adap->write_byte))(adap->data, 1, b);
  sta = sta & ~ ((16 | 32) | 8);
  (*(adap->write_byte))(adap->data, 3, sta);
  tmp___0 = (*(adap->wait_for_completion))(adap->data);
  return (tmp___0);
}
}
static void pca_rx_byte(struct i2c_algo_pca_data *adap , __u8 *b , int ack ) 
{ 
  int tmp ;

  {
  tmp = (*(adap->read_byte))(adap->data, 1);
  *b = tmp;
  while (1) {
    if (i2c_debug >= 2) {
      printk("<7>=== READ %#04x %s\n", *b, ack ? "ACK" : "NACK");
    } else {

    }
    break;
  }
  return;
}
}
static int pca_rx_ack(struct i2c_algo_pca_data *adap , int ack ) 
{ 
  int sta ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = (*(adap->read_byte))(adap->data, 3);
  sta = tmp;
  sta = sta & ~ (((16 | 32) | 8) | 128);
  if (ack) {
    sta = sta | 128;
  } else {

  }
  (*(adap->write_byte))(adap->data, 3, sta);
  tmp___0 = (*(adap->wait_for_completion))(adap->data);
  return (tmp___0);
}
}
static int pca_xfer(struct i2c_adapter *i2c_adap , struct i2c_msg *msgs , int num ) 
{ 
  struct i2c_algo_pca_data *adap ;
  struct i2c_msg *msg ;
  int curmsg ;
  int numbytes ;
  int state ;
  int ret ;
  int completed ;
  unsigned long timeout ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int addr ;
  int i ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
  adap = i2c_adap->algo_data;
  msg = (void *)0;
  numbytes = 0;
  completed = 1;
  timeout = jiffies + (unsigned long volatile   )i2c_adap->timeout;
  while (1) {
    tmp___1 = (*(adap->read_byte))(adap->data, 0);
    if (tmp___1 != 248) {

    } else {
      break;
    }
    if ((long )jiffies - (long )timeout < 0L) {
      msleep(10);
    } else {
      tmp = dev_name(& i2c_adap->dev);
      tmp___0 = dev_driver_string(& i2c_adap->dev);
      printk("<7>%s %s: bus is not idle. status is %#04x\n", tmp___0, tmp, state);
      return (-11);
    }
  }
  while (1) {
    if (i2c_debug >= 1) {
      printk("<7>{{{ XFER %d messages\n", num);
    } else {

    }
    break;
  }
  if (i2c_debug >= 2) {
    curmsg = 0;
    while (1) {
      if (curmsg < num) {

      } else {
        break;
      }
      msg = msgs + curmsg;
      addr = 127 & (int )msg->addr;
      if ((int )msg->flags & 1) {
        printk("<6>    [%02d] RD %d bytes from %#02x [%#02x, ...]\n", curmsg, msg->len,
               addr, (addr << 1) | 1);
      } else {
        printk("<6>    [%02d] WR %d bytes to %#02x [%#02x%s", curmsg, msg->len, addr,
               addr << 1, (int )msg->len == 0 ? "" : ", ");
        i = 0;
        while (1) {
          if (i < (int )msg->len) {

          } else {
            break;
          }
          printk("%#04x%s", *(msg->buf + i), i == (int )msg->len - 1 ? "" : ", ");
          i = i + 1;
        }
        printk("]\n");
      }
      curmsg = curmsg + 1;
    }
  } else {

  }
  curmsg = 0;
  ret = -121;
  while (1) {
    if (curmsg < num) {

    } else {
      break;
    }
    state = (*(adap->read_byte))(adap->data, 0);
    while (1) {
      if (i2c_debug >= 3) {
        printk("<7>STATE is 0x%02x\n", state);
      } else {

      }
      break;
    }
    msg = msgs + curmsg;
    switch (state) {
    case 248: 
    completed = pca_start(adap);
    break;
    case 16: 
    case 8: 
    completed = pca_address(adap, msg);
    break;
    case 40: 
    case 24: 
    if (numbytes < (int )msg->len) {
      completed = pca_tx_byte(adap, *(msg->buf + numbytes));
      numbytes = numbytes + 1;
      break;
    } else {

    }
    curmsg = curmsg + 1;
    numbytes = 0;
    if (curmsg == num) {
      pca_stop(adap);
    } else {
      completed = pca_repeated_start(adap);
    }
    break;
    case 32: 
    while (1) {
      if (i2c_debug >= 2) {
        printk("<7>NOT ACK received after SLA+W\n");
      } else {

      }
      break;
    }
    pca_stop(adap);
    goto out;
    case 64: 
    completed = pca_rx_ack(adap, (int )msg->len > 1);
    break;
    case 80: 
    if (numbytes < (int )msg->len) {
      pca_rx_byte(adap, msg->buf + numbytes, 1);
      numbytes = numbytes + 1;
      completed = pca_rx_ack(adap, numbytes < (int )msg->len - 1);
      break;
    } else {

    }
    curmsg = curmsg + 1;
    numbytes = 0;
    if (curmsg == num) {
      pca_stop(adap);
    } else {
      completed = pca_repeated_start(adap);
    }
    break;
    case 72: 
    while (1) {
      if (i2c_debug >= 2) {
        printk("<7>NOT ACK received after SLA+R\n");
      } else {

      }
      break;
    }
    pca_stop(adap);
    goto out;
    case 48: 
    while (1) {
      if (i2c_debug >= 2) {
        printk("<7>NOT ACK received after data byte\n");
      } else {

      }
      break;
    }
    goto out;
    case 56: 
    while (1) {
      if (i2c_debug >= 2) {
        printk("<7>Arbitration lost\n");
      } else {

      }
      break;
    }
    goto out;
    case 88: 
    if (numbytes == (int )msg->len - 1) {
      pca_rx_byte(adap, msg->buf + numbytes, 0);
      curmsg = curmsg + 1;
      numbytes = 0;
      if (curmsg == num) {
        pca_stop(adap);
      } else {
        completed = pca_repeated_start(adap);
      }
    } else {
      while (1) {
        if (i2c_debug >= 2) {
          printk("<7>NOT ACK sent after data byte received. Not final byte. numbytes %d. len %d\n",
                 numbytes, msg->len);
        } else {

        }
        break;
      }
      pca_stop(adap);
      goto out;
    }
    break;
    case 112: 
    while (1) {
      if (i2c_debug >= 2) {
        printk("<7>BUS ERROR - SDA Stuck low\n");
      } else {

      }
      break;
    }
    (*(adap->reset_chip))(adap->data);
    goto out;
    case 144: 
    while (1) {
      if (i2c_debug >= 2) {
        printk("<7>BUS ERROR - SCL Stuck low\n");
      } else {

      }
      break;
    }
    (*(adap->reset_chip))(adap->data);
    goto out;
    case 0: 
    while (1) {
      if (i2c_debug >= 2) {
        printk("<7>BUS ERROR - Illegal START or STOP\n");
      } else {

      }
      break;
    }
    (*(adap->reset_chip))(adap->data);
    goto out;
    default: 
    tmp___2 = dev_name(& i2c_adap->dev);
    tmp___3 = dev_driver_string(& i2c_adap->dev);
    printk("<3>%s %s: unhandled SIO state 0x%02x\n", tmp___3, tmp___2, state);
    break;
    }
    if (! completed) {
      goto out;
    } else {

    }
  }
  ret = curmsg;
  out: 
  while (1) {
    if (i2c_debug >= 1) {
      tmp___4 = (*(adap->read_byte))(adap->data, 3);
      tmp___5 = (*(adap->read_byte))(adap->data, 0);
      printk("<7>}}} transfered %d/%d messages. status is %#04x. control is %#04x\n",
             curmsg, num, tmp___5, tmp___4);
    } else {

    }
    break;
  }
  return (ret);
}
}
static u32 pca_func(struct i2c_adapter *adap ) 
{ 


  {
  return (1 | (((((((65536 | (131072 | 262144)) | (524288 | 1048576)) | (2097152 | 4194304)) | 8388608) | 33554432) | (67108864 | 134217728)) | 8));
}
}
static struct i2c_algorithm  const  pca_algo  =    {& pca_xfer, 0, & pca_func};
static unsigned int pca_probe_chip(struct i2c_adapter *adap ) 
{ 
  struct i2c_algo_pca_data *pca_data ;
  int tmp ;

  {
  pca_data = adap->algo_data;
  (*(pca_data->write_byte))(pca_data->data, 0, 1);
  (*(pca_data->write_byte))(pca_data->data, 2, 170);
  (*(pca_data->write_byte))(pca_data->data, 0, 4);
  (*(pca_data->write_byte))(pca_data->data, 2, 0);
  (*(pca_data->write_byte))(pca_data->data, 0, 1);
  tmp = (*(pca_data->read_byte))(pca_data->data, 2);
  if (tmp == 170) {
    printk("<6>%s: PCA9665 detected.\n", adap->name);
    return (1);
  } else {
    printk("<6>%s: PCA9564 detected.\n", adap->name);
    return (0);
  }
}
}
static int pca_init(struct i2c_adapter *adap ) ;
static int freqs[8]  = 
  {      330,      288,      217,      146, 
        88,      59,      44,      36};
static int pca_init(struct i2c_adapter *adap ) 
{ 
  struct i2c_algo_pca_data *pca_data ;
  int clock ;
  int clock___0 ;
  int mode ;
  int tlow ;
  int thi ;
  int min_tlow ;
  int min_thi ;
  int raise_fall_time ;
  struct i2c_algo_pca_data *pca_data___0 ;
  unsigned int tmp ;

  {
  pca_data = adap->algo_data;
  adap->algo = & pca_algo;
  tmp = pca_probe_chip(adap);
  if (tmp == 0U) {
    if (pca_data->i2c_clock > 7U) {
      switch (pca_data->i2c_clock) {
      case 330000U: 
      pca_data->i2c_clock = 0;
      break;
      case 288000U: 
      pca_data->i2c_clock = 1;
      break;
      case 217000U: 
      pca_data->i2c_clock = 2;
      break;
      case 146000U: 
      pca_data->i2c_clock = 3;
      break;
      case 88000U: 
      pca_data->i2c_clock = 4;
      break;
      case 59000U: 
      pca_data->i2c_clock = 5;
      break;
      case 44000U: 
      pca_data->i2c_clock = 6;
      break;
      case 36000U: 
      pca_data->i2c_clock = 7;
      break;
      default: 
      printk("<4>%s: Invalid I2C clock speed selected. Using default 59kHz.\n", adap->name);
      pca_data->i2c_clock = 5;
      }
    } else {
      printk("<4>%s: Choosing the clock frequency based on index is deprecated. Use the nominal frequency.\n",
             adap->name);
    }
    (*(pca_data->reset_chip))(pca_data->data);
    clock = pca_data->i2c_clock;
    printk("<6>%s: Clock frequency is %dkHz\n", adap->name, freqs[clock]);
    (*(pca_data->write_byte))(pca_data->data, 3, 64 | clock);
  } else {
    pca_data___0 = adap->algo_data;
    pca_data___0->reset_chip = & pca9665_reset;
    if (pca_data___0->i2c_clock > 1265800U) {
      printk("<4>%s: I2C clock speed too high. Using 1265.8kHz.\n", adap->name);
      pca_data___0->i2c_clock = 1265800;
    } else {

    }
    if (pca_data___0->i2c_clock < 60300U) {
      printk("<4>%s: I2C clock speed too low. Using 60.3kHz.\n", adap->name);
      pca_data___0->i2c_clock = 60300;
    } else {

    }
    clock___0 = pca_data___0->i2c_clock / 100U;
    if (pca_data___0->i2c_clock > 10000U) {
      mode = 3;
      min_tlow = 14;
      min_thi = 5;
      raise_fall_time = 22;
    } else
    if (pca_data___0->i2c_clock > 4000U) {
      mode = 2;
      min_tlow = 17;
      min_thi = 9;
      raise_fall_time = 22;
    } else
    if (pca_data___0->i2c_clock > 1000U) {
      mode = 1;
      min_tlow = 44;
      min_thi = 20;
      raise_fall_time = 58;
    } else {
      mode = 0;
      min_tlow = 157;
      min_thi = 134;
      raise_fall_time = 127;
    }
    if (clock___0 < 648) {
      tlow = 255;
      thi = 1000000 - clock___0 * raise_fall_time;
      thi = thi / (3 * clock___0 - tlow);
    } else {
      tlow = (1000000 - clock___0 * raise_fall_time) * min_tlow;
      tlow = tlow / ((3 * clock___0) * (min_thi + min_tlow));
      thi = (tlow * min_thi) / min_tlow;
    }
    (*(pca_data___0->reset_chip))(pca_data___0->data);
    printk("<6>%s: Clock frequency is %dHz\n", adap->name, clock___0 * 100);
    (*(pca_data___0->write_byte))(pca_data___0->data, 0, 6);
    (*(pca_data___0->write_byte))(pca_data___0->data, 2, mode);
    (*(pca_data___0->write_byte))(pca_data___0->data, 0, 2);
    (*(pca_data___0->write_byte))(pca_data___0->data, 2, tlow);
    (*(pca_data___0->write_byte))(pca_data___0->data, 0, 3);
    (*(pca_data___0->write_byte))(pca_data___0->data, 2, thi);
    (*(pca_data___0->write_byte))(pca_data___0->data, 3, 64);
  }
  if (500 > 20000) {
    __bad_udelay();
  } else {
    __const_udelay(500UL * 4295UL);
  }
  return (0);
}
}
int i2c_pca_add_bus(struct i2c_adapter *adap ) 
{ 
  int rval ;
  int tmp ;

  {
  rval = pca_init(adap);
  if (rval) {
    return (rval);
  } else {

  }
  tmp = i2c_add_adapter(adap);
  return (tmp);
}
}
extern void *__crc_i2c_pca_add_bus  __attribute__((__weak__)) ;
static unsigned long const   __kcrctab_i2c_pca_add_bus  __attribute__((__used__, __unused__,
__section__("__kcrctab")))  =    (unsigned long )(& __crc_i2c_pca_add_bus);
static char const   __kstrtab_i2c_pca_add_bus[16]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
  {      'i',      '2',      'c',      '_', 
        'p',      'c',      'a',      '_', 
        'a',      'd',      'd',      '_', 
        'b',      'u',      's',      '\000'};
static struct kernel_symbol  const  __ksymtab_i2c_pca_add_bus  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& i2c_pca_add_bus), __kstrtab_i2c_pca_add_bus};
int i2c_pca_add_numbered_bus(struct i2c_adapter *adap ) 
{ 
  int rval ;
  int tmp ;

  {
  rval = pca_init(adap);
  if (rval) {
    return (rval);
  } else {

  }
  tmp = i2c_add_numbered_adapter(adap);
  return (tmp);
}
}
extern void *__crc_i2c_pca_add_numbered_bus  __attribute__((__weak__)) ;
static unsigned long const   __kcrctab_i2c_pca_add_numbered_bus  __attribute__((__used__,
__unused__, __section__("__kcrctab")))  =    (unsigned long )(& __crc_i2c_pca_add_numbered_bus);
static char const   __kstrtab_i2c_pca_add_numbered_bus[25]  __attribute__((__section__("__ksymtab_strings"),
__aligned__(1)))  = 
  {      'i',      '2',      'c',      '_', 
        'p',      'c',      'a',      '_', 
        'a',      'd',      'd',      '_', 
        'n',      'u',      'm',      'b', 
        'e',      'r',      'e',      'd', 
        '_',      'b',      'u',      's', 
        '\000'};
static struct kernel_symbol  const  __ksymtab_i2c_pca_add_numbered_bus  __attribute__((__used__,
__unused__, __section__("__ksymtab")))  =    {(unsigned long )(& i2c_pca_add_numbered_bus), __kstrtab_i2c_pca_add_numbered_bus};
static char const   __mod_author551[80]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
  {      'a',      'u',      't',      'h', 
        'o',      'r',      '=',      'I', 
        'a',      'n',      ' ',      'C', 
        'a',      'm',      'p',      'b', 
        'e',      'l',      'l',      ' ', 
        '<',      'i',      'c',      'a', 
        'm',      'p',      'b',      'e', 
        'l',      'l',      '@',      'a', 
        'r',      'c',      'o',      'm', 
        '.',      'c',      'o',      'm', 
        '>',      ',',      ' ',      'W', 
        'o',      'l',      'f',      'r', 
        'a',      'm',      ' ',      'S', 
        'a',      'n',      'g',      ' ', 
        '<',      'w',      '.',      's', 
        'a',      'n',      'g',      '@', 
        'p',      'e',      'n',      'g', 
        'u',      't',      'r',      'o', 
        'n',      'i',      'x',      '.', 
        'd',      'e',      '>',      '\000'};
static char const   __mod_description552[46]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
  {      'd',      'e',      's',      'c', 
        'r',      'i',      'p',      't', 
        'i',      'o',      'n',      '=', 
        'I',      '2',      'C',      '-', 
        'B',      'u',      's',      ' ', 
        'P',      'C',      'A',      '9', 
        '5',      '6',      '4',      '/', 
        'P',      'C',      'A',      '9', 
        '6',      '6',      '5',      ' ', 
        'a',      'l',      'g',      'o', 
        'r',      'i',      't',      'h', 
        'm',      '\000'};
static char const   __mod_license553[12]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
  {      'l',      'i',      'c',      'e', 
        'n',      's',      'e',      '=', 
        'G',      'P',      'L',      '\000'};
static char const   __param_str_i2c_debug[10]  = 
  {      'i',      '2',      'c',      '_', 
        'd',      'e',      'b',      'u', 
        'g',      '\000'};
static struct kernel_param  const  __param_i2c_debug  __attribute__((__used__, __unused__,
__section__("__param"), __aligned__(sizeof(void *))))  =    {__param_str_i2c_debug, 0, & param_set_int, & param_get_int, {& i2c_debug}};
static char const   __mod_i2c_debugtype555[23]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
  {      'p',      'a',      'r',      'm', 
        't',      'y',      'p',      'e', 
        '=',      'i',      '2',      'c', 
        '_',      'd',      'e',      'b', 
        'u',      'g',      ':',      'i', 
        'n',      't',      '\000'};
void ldv_check_final_state(void) ;
extern void ldv_initialize(void) ;
extern void ldv_handler_precall(void) ;
extern int nondet_int(void) ;
int LDV_IN_INTERRUPT  ;
int main(void) 
{ 
  struct i2c_adapter *var_group1 ;
  struct i2c_msg *var_group2 ;
  int var_pca_xfer_8_p2 ;
  int tmp ;
  int tmp___0 ;

  {
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  while (1) {
    tmp___0 = nondet_int();
    if (tmp___0) {

    } else {
      break;
    }
    tmp = nondet_int();
    switch (tmp) {
    case 0: 
    ldv_handler_precall();
    pca_xfer(var_group1, var_group2, var_pca_xfer_8_p2);
    break;
    case 1: 
    ldv_handler_precall();
    pca_func(var_group1);
    break;
    default: 
    break;
    }
  }
  ldv_check_final_state();
  return 0;
}
}
long ldv__builtin_expect(long exp , long c ) ;
void mutex_lock(struct mutex *lock ) ;
int ( __attribute__((__warn_unused_result__)) mutex_lock_interruptible)(struct mutex *lock ) ;
int ( __attribute__((__warn_unused_result__)) mutex_lock_killable)(struct mutex *lock ) ;
int mutex_trylock(struct mutex *lock ) ;
void mutex_unlock(struct mutex *lock ) ;
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: __VERIFIER_error();
}
}
extern int ldv_undef_int(void) ;
long ldv__builtin_expect(long exp , long c ) 
{ 


  {
  return (exp);
}
}
int ldv_mutex  =    1;
int ( __attribute__((__warn_unused_result__)) mutex_lock_interruptible)(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
  if (ldv_mutex == 1) {

  } else {
    ldv_error();
  }
  nondetermined = ldv_undef_int();
  if (nondetermined) {
    ldv_mutex = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
int ( __attribute__((__warn_unused_result__)) mutex_lock_killable)(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
  if (ldv_mutex == 1) {

  } else {
    ldv_error();
  }
  nondetermined = ldv_undef_int();
  if (nondetermined) {
    ldv_mutex = 2;
    return (0);
  } else {
    return (-4);
  }
}
}
int atomic_dec_and_mutex_lock(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
  if (ldv_mutex == 1) {

  } else {
    ldv_error();
  }
  atomic_value_after_dec = ldv_undef_int();
  if (atomic_value_after_dec == 0) {
    ldv_mutex = 2;
    return (1);
  } else {

  }
  return (0);
}
}
void mutex_lock(struct mutex *lock ) 
{ 


  {
  if (ldv_mutex == 1) {

  } else {
    ldv_error();
  }
  ldv_mutex = 2;
  return;
}
}
int mutex_trylock(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
  if (ldv_mutex == 1) {

  } else {
    ldv_error();
  }
  nondetermined = ldv_undef_int();
  if (nondetermined) {
    ldv_mutex = 2;
    return (1);
  } else {
    return (0);
  }
}
}
void mutex_unlock(struct mutex *lock ) 
{ 


  {
  if (ldv_mutex == 2) {

  } else {
    ldv_error();
  }
  ldv_mutex = 1;
  return;
}
}
void ldv_check_final_state(void) 
{ 


  {
  if (ldv_mutex == 1) {

  } else {
    ldv_error();
  }
  return;
}
}
