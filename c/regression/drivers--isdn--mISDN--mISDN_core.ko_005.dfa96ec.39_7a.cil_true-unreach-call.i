extern void __VERIFIER_error() __attribute__ ((__noreturn__));

/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

typedef __builtin_va_list __gnuc_va_list[1U];
typedef __gnuc_va_list va_list[1U];
typedef unsigned int __kernel_mode_t;
typedef unsigned long __kernel_nlink_t;
typedef long __kernel_off_t;
typedef int __kernel_pid_t;
typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;
typedef unsigned long __kernel_size_t;
typedef long __kernel_ssize_t;
typedef long __kernel_time_t;
typedef long __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef long long __kernel_loff_t;
typedef __kernel_uid_t __kernel_uid32_t;
typedef __kernel_gid_t __kernel_gid32_t;
typedef signed char __s8;
typedef unsigned char __u8;
typedef short __s16;
typedef unsigned short __u16;
typedef int __s32;
typedef unsigned int __u32;
typedef long long __s64;
typedef unsigned long long __u64;
typedef signed char s8;
typedef unsigned char u8;
typedef unsigned short u16;
typedef int s32;
typedef unsigned int u32;
typedef long long s64;
typedef unsigned long long u64;
typedef unsigned short umode_t;
typedef u64 dma_addr_t;
typedef __u32 __kernel_dev_t;
typedef __kernel_dev_t dev_t;
typedef __kernel_mode_t mode_t;
typedef __kernel_nlink_t nlink_t;
typedef __kernel_off_t off_t;
typedef __kernel_pid_t pid_t;
typedef __kernel_timer_t timer_t;
typedef __kernel_clockid_t clockid_t;
typedef _Bool bool;
typedef __kernel_uid32_t uid_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_loff_t loff_t;
typedef __kernel_size_t size_t;
typedef __kernel_ssize_t ssize_t;
typedef __kernel_time_t time_t;
typedef __kernel_clock_t clock_t;
typedef unsigned char u_char;
typedef unsigned int u_int;
typedef unsigned long u_long;
typedef __s32 int32_t;
typedef __u32 uint32_t;
typedef unsigned long sector_t;
typedef unsigned long blkcnt_t;
typedef __u16 __be16;
typedef __u32 __wsum;
typedef unsigned int gfp_t;
typedef unsigned int fmode_t;
typedef u64 phys_addr_t;
struct module;
struct bug_entry {
   unsigned long bug_addr ;
   char const   *file ;
   unsigned short line ;
   unsigned short flags ;
};
struct completion;
struct pt_regs;
struct pid;
struct timespec;
struct compat_timespec;
struct __anonstruct_ldv_1569_4 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
struct __anonstruct_futex_5 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
};
struct __anonstruct_nanosleep_6 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
struct pollfd;
struct __anonstruct_poll_7 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
union __anonunion_ldv_1591_3 {
   struct __anonstruct_ldv_1569_4 ldv_1569 ;
   struct __anonstruct_futex_5 futex ;
   struct __anonstruct_nanosleep_6 nanosleep ;
   struct __anonstruct_poll_7 poll ;
};
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_1591_3 ldv_1591 ;
};
typedef unsigned long pgdval_t;
typedef unsigned long pgprotval_t;
struct page;
struct __anonstruct_pgd_t_9 {
   pgdval_t pgd ;
};
typedef struct __anonstruct_pgd_t_9 pgd_t;
struct __anonstruct_pgprot_t_10 {
   pgprotval_t pgprot ;
};
typedef struct __anonstruct_pgprot_t_10 pgprot_t;
struct __anonstruct_ldv_1703_14 {
   unsigned int a ;
   unsigned int b ;
};
struct __anonstruct_ldv_1718_15 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
union __anonunion_ldv_1719_13 {
   struct __anonstruct_ldv_1703_14 ldv_1703 ;
   struct __anonstruct_ldv_1718_15 ldv_1718 ;
};
struct desc_struct {
   union __anonunion_ldv_1719_13 ldv_1719 ;
};
struct cpumask {
   unsigned long bits[1U] ;
};
typedef struct cpumask cpumask_t;
struct thread_struct;
struct mm_struct;
struct raw_spinlock;
struct task_struct;
struct exec_domain;
typedef void (*ds_ovfl_callback_t)(struct task_struct * );
struct ds_context {
   unsigned char *ds ;
   struct task_struct *owner[2U] ;
   ds_ovfl_callback_t callback[2U] ;
   void *buffer[2U] ;
   unsigned int pages[2U] ;
   unsigned long count ;
   struct ds_context **this ;
   struct task_struct *task ;
};
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
struct info {
   long ___orig_eip ;
   long ___ebx ;
   long ___ecx ;
   long ___edx ;
   long ___esi ;
   long ___edi ;
   long ___ebp ;
   long ___eax ;
   long ___ds ;
   long ___es ;
   long ___fs ;
   long ___orig_eax ;
   long ___eip ;
   long ___cs ;
   long ___eflags ;
   long ___esp ;
   long ___ss ;
   long ___vm86_es ;
   long ___vm86_ds ;
   long ___vm86_fs ;
   long ___vm86_gs ;
};
struct map_segment;
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
struct seq_operations;
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
struct __anonstruct_ldv_4659_20 {
   u64 rip ;
   u64 rdp ;
};
struct __anonstruct_ldv_4665_21 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
union __anonunion_ldv_4666_19 {
   struct __anonstruct_ldv_4659_20 ldv_4659 ;
   struct __anonstruct_ldv_4665_21 ldv_4665 ;
};
union __anonunion_ldv_4675_22 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4666_19 ldv_4666 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4675_22 ldv_4675 ;
};
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct info *info ;
   u32 entry_eip ;
};
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
};
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
struct kmem_cache;
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long ip ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   struct ds_context *ds_ctx ;
   unsigned int bts_ovfl_signal ;
};
struct __anonstruct_mm_segment_t_23 {
   unsigned long seg ;
};
typedef struct __anonstruct_mm_segment_t_23 mm_segment_t;
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   unsigned long flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
};
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
struct hlist_node;
struct hlist_head {
   struct hlist_node *first ;
};
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
struct raw_spinlock {
   unsigned int slock ;
};
typedef struct raw_spinlock raw_spinlock_t;
struct __anonstruct_raw_rwlock_t_24 {
   unsigned int lock ;
};
typedef struct __anonstruct_raw_rwlock_t_24 raw_rwlock_t;
struct lockdep_map;
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
struct lockdep_subclass_key {
   char __one_byte ;
};
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[9U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
};
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
};
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
};
struct __anonstruct_spinlock_t_25 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
typedef struct __anonstruct_spinlock_t_25 spinlock_t;
struct __anonstruct_rwlock_t_26 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
typedef struct __anonstruct_rwlock_t_26 rwlock_t;
struct __anonstruct_atomic_t_27 {
   int counter ;
};
typedef struct __anonstruct_atomic_t_27 atomic_t;
struct __anonstruct_atomic64_t_28 {
   long counter ;
};
typedef struct __anonstruct_atomic64_t_28 atomic64_t;
typedef atomic64_t atomic_long_t;
struct __anonstruct_seqlock_t_29 {
   unsigned int sequence ;
   spinlock_t lock ;
};
typedef struct __anonstruct_seqlock_t_29 seqlock_t;
struct timespec {
   time_t tv_sec ;
   long tv_nsec ;
};
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
struct __wait_queue;
typedef struct __wait_queue wait_queue_t;
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
typedef struct __wait_queue_head wait_queue_head_t;
struct __anonstruct_nodemask_t_30 {
   unsigned long bits[1U] ;
};
typedef struct __anonstruct_nodemask_t_30 nodemask_t;
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct mutex *lock ;
   void *magic ;
};
struct rw_semaphore;
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
struct ctl_table;
struct file;
struct device;
struct pm_message {
   int event ;
};
typedef struct pm_message pm_message_t;
struct pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
};
struct pm_ext_ops {
   struct pm_ops base ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
};
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
};
struct __anonstruct_mm_context_t_78 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
typedef struct __anonstruct_mm_context_t_78 mm_context_t;
struct vm_area_struct;
struct key;
struct linux_binprm;
typedef __u64 Elf64_Addr;
typedef __u16 Elf64_Half;
typedef __u32 Elf64_Word;
typedef __u64 Elf64_Xword;
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
typedef struct elf64_sym Elf64_Sym;
struct kobject;
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
struct sysfs_dirent;
struct kref {
   atomic_t refcount ;
};
struct kset;
struct kobj_type;
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
};
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
struct kset_uevent_ops {
   int (*filter)(struct kset * , struct kobject * ) ;
   char const   *(*name)(struct kset * , struct kobject * ) ;
   int (*uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
struct marker;
typedef void marker_probe_func(void * , void * , char const   * , va_list * );
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  * , void *  , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
};
union ktime {
   s64 tv64 ;
};
typedef union ktime ktime_t;
struct tvec_base;
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
};
struct hrtimer;
enum hrtimer_restart;
struct work_struct;
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[18U] ;
};
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   unsigned long min_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
struct kmem_cache_order_objects {
   unsigned long x ;
};
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[64U] ;
   struct kmem_cache_cpu *cpu_slab[8U] ;
};
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
struct tracepoint;
struct tracepoint {
   char const   *name ;
   int state ;
   void **funcs ;
};
struct __anonstruct_local_t_89 {
   atomic_long_t a ;
};
typedef struct __anonstruct_local_t_89 local_t;
struct mod_arch_specific {

};
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
struct module_param_attrs;
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
struct exception_table_entry;
struct module_ref {
   local_t count ;
};
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
struct module_sect_attrs;
struct module_notes_attrs;
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   void *unwind_info ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref ref[8U] ;
};
struct device_driver;
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
struct seq_file;
typedef unsigned short sa_family_t;
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
struct ucred {
   __u32 pid ;
   __u32 uid ;
   __u32 gid ;
};
struct sockaddr_mISDN {
   sa_family_t family ;
   unsigned char dev ;
   unsigned char channel ;
   unsigned char sapi ;
   unsigned char tei ;
};
enum ldv_12007 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
typedef enum ldv_12007 socket_state;
struct poll_table_struct;
struct pipe_inode_info;
struct inode;
struct net;
struct proto_ops;
struct fasync_struct;
struct sock;
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct proto_ops  const  *ops ;
   struct fasync_struct *fasync_list ;
   struct file *file ;
   struct sock *sk ;
   wait_queue_head_t wait ;
};
struct kiocb;
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
};
struct nsproxy;
struct ctl_table_root;
struct ctl_table_set {
   struct list_head list ;
   struct ctl_table_set *parent ;
   int (*is_seen)(struct ctl_table_set * ) ;
};
struct ctl_table_header;
typedef int ctl_handler(struct ctl_table * , void * , size_t * , void * , size_t  );
typedef int proc_handler(struct ctl_table * , int  , struct file * , void * , size_t * ,
                         loff_t * );
struct ctl_table {
   int ctl_name ;
   char const   *procname ;
   void *data ;
   int maxlen ;
   mode_t mode ;
   struct ctl_table *child ;
   struct ctl_table *parent ;
   proc_handler *proc_handler ;
   ctl_handler *strategy ;
   void *extra1 ;
   void *extra2 ;
};
struct ctl_table_root {
   struct list_head root_list ;
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
struct ctl_table_header {
   struct ctl_table *ctl_table ;
   struct list_head ctl_entry ;
   int used ;
   int count ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_table *attached_by ;
   struct ctl_table *attached_to ;
   struct ctl_table_header *parent ;
};
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
struct sk_buff;
struct klist_node;
struct klist {
   spinlock_t k_lock ;
   struct list_head k_list ;
   void (*get)(struct klist_node * ) ;
   void (*put)(struct klist_node * ) ;
};
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
   struct completion n_removed ;
};
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
struct dma_mapping_ops;
struct dev_archdata {
   void *acpi_handle ;
   struct dma_mapping_ops *dma_ops ;
   void *iommu ;
};
struct driver_private;
struct class;
struct class_private;
struct bus_type;
struct bus_type_private;
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
struct device_attribute;
struct driver_attribute;
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*suspend_late)(struct device * , pm_message_t  ) ;
   int (*resume_early)(struct device * ) ;
   int (*resume)(struct device * ) ;
   struct pm_ext_ops *pm ;
   struct bus_type_private *p ;
};
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group **groups ;
   struct pm_ops *pm ;
   struct driver_private *p ;
};
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
struct class_attribute;
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct pm_ops *pm ;
   struct class_private *p ;
};
struct device_type;
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , char * ) ;
   ssize_t (*store)(struct class * , char const   * , size_t  ) ;
};
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct pm_ops *pm ;
};
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
struct dma_coherent_mem;
struct device {
   struct klist klist_children ;
   struct klist_node knode_parent ;
   struct klist_node knode_driver ;
   struct klist_node knode_bus ;
   struct device *parent ;
   struct kobject kobj ;
   char bus_id[20U] ;
   char const   *init_name ;
   struct device_type *type ;
   unsigned char uevent_suppress : 1 ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   dev_t devt ;
   struct attribute_group **groups ;
   void (*release)(struct device * ) ;
};
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
struct rb_root {
   struct rb_node *rb_node ;
};
struct prio_tree_node;
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
struct address_space;
typedef atomic_long_t mm_counter_t;
struct __anonstruct_ldv_12493_91 {
   u16 inuse ;
   u16 objects ;
};
union __anonunion_ldv_12494_90 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_12493_91 ldv_12493 ;
};
struct __anonstruct_ldv_12499_93 {
   unsigned long private ;
   struct address_space *mapping ;
};
union __anonunion_ldv_12503_92 {
   struct __anonstruct_ldv_12499_93 ldv_12499 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
union __anonunion_ldv_12507_94 {
   unsigned long index ;
   void *freelist ;
};
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_12494_90 ldv_12494 ;
   union __anonunion_ldv_12503_92 ldv_12503 ;
   union __anonunion_ldv_12507_94 ldv_12507 ;
   struct list_head lru ;
};
struct __anonstruct_vm_set_96 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
union __anonunion_shared_95 {
   struct __anonstruct_vm_set_96 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
struct anon_vma;
struct vm_operations_struct;
struct mempolicy;
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_95 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
struct kioctx;
struct mmu_notifier_mm;
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[42U] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   rwlock_t ioctx_list_lock ;
   struct kioctx *ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
struct file_ra_state;
struct user_struct;
struct writeback_control;
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct page * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
struct dma_mapping_ops {
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_single)(struct device * , phys_addr_t  , size_t  , int  ) ;
   void (*unmap_single)(struct device * , dma_addr_t  , size_t  , int  ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , int  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , int  ) ;
   void (*sync_single_range_for_cpu)(struct device * , dma_addr_t  , unsigned long  ,
                                     size_t  , int  ) ;
   void (*sync_single_range_for_device)(struct device * , dma_addr_t  , unsigned long  ,
                                        size_t  , int  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , int  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , int  ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , int  ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , int  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int is_phys ;
};
typedef s32 dma_cookie_t;
struct hrtimer_clock_base;
struct hrtimer_cpu_base;
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
enum hrtimer_cb_mode {
    HRTIMER_CB_SOFTIRQ = 0,
    HRTIMER_CB_IRQSAFE_PERCPU = 1,
    HRTIMER_CB_IRQSAFE_UNLOCKED = 2
} ;
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   struct list_head cb_entry ;
   enum hrtimer_cb_mode cb_mode ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   struct list_head cb_pending ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
struct net_device;
struct nf_conntrack {
   atomic_t use ;
};
struct nf_bridge_info {
   atomic_t use ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned int mask ;
   unsigned long data[4U] ;
};
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
typedef unsigned int sk_buff_data_t;
struct dst_entry;
struct rtable;
union __anonunion_ldv_15542_98 {
   struct dst_entry *dst ;
   struct rtable *rtable ;
};
struct sec_path;
struct __anonstruct_ldv_15555_100 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
union __anonunion_ldv_15556_99 {
   __wsum csum ;
   struct __anonstruct_ldv_15555_100 ldv_15555 ;
};
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   struct sock *sk ;
   ktime_t tstamp ;
   struct net_device *dev ;
   union __anonunion_ldv_15542_98 ldv_15542 ;
   struct sec_path *sp ;
   char cb[48U] ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_15556_99 ldv_15556 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int iif ;
   __u16 queue_mapping ;
   __u16 tc_index ;
   __u16 tc_verd ;
   unsigned char ndisc_nodetype : 2 ;
   unsigned char do_not_encrypt : 1 ;
   unsigned char requeue : 1 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   __u32 mark ;
   __u16 vlan_tci ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
struct hlist_nulls_node;
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
struct __anonstruct_sync_serial_settings_101 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
typedef struct __anonstruct_sync_serial_settings_101 sync_serial_settings;
struct __anonstruct_te1_settings_102 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
typedef struct __anonstruct_te1_settings_102 te1_settings;
struct __anonstruct_raw_hdlc_proto_103 {
   unsigned short encoding ;
   unsigned short parity ;
};
typedef struct __anonstruct_raw_hdlc_proto_103 raw_hdlc_proto;
struct __anonstruct_fr_proto_104 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
typedef struct __anonstruct_fr_proto_104 fr_proto;
struct __anonstruct_fr_proto_pvc_105 {
   unsigned int dlci ;
};
typedef struct __anonstruct_fr_proto_pvc_105 fr_proto_pvc;
struct __anonstruct_fr_proto_pvc_info_106 {
   unsigned int dlci ;
   char master[16U] ;
};
typedef struct __anonstruct_fr_proto_pvc_info_106 fr_proto_pvc_info;
struct __anonstruct_cisco_proto_107 {
   unsigned int interval ;
   unsigned int timeout ;
};
typedef struct __anonstruct_cisco_proto_107 cisco_proto;
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
union __anonunion_ifs_ifsu_108 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_108 ifs_ifsu ;
};
union __anonunion_ifr_ifrn_109 {
   char ifrn_name[16U] ;
};
union __anonunion_ifr_ifru_110 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
struct ifreq {
   union __anonunion_ifr_ifrn_109 ifr_ifrn ;
   union __anonunion_ifr_ifru_110 ifr_ifru ;
};
struct prot_inuse;
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
struct ipstats_mib {
   unsigned long mibs[25U] ;
};
struct icmp_mib {
   unsigned long mibs[28U] ;
};
struct icmpmsg_mib {
   unsigned long mibs[512U] ;
};
struct icmpv6_mib {
   unsigned long mibs[4U] ;
};
struct icmpv6msg_mib {
   unsigned long mibs[512U] ;
};
struct tcp_mib {
   unsigned long mibs[15U] ;
};
struct udp_mib {
   unsigned long mibs[7U] ;
};
struct linux_mib {
   unsigned long mibs[75U] ;
};
struct linux_xfrm_mib {
   unsigned long mibs[26U] ;
};
struct proc_dir_entry;
struct netns_mib {
   struct tcp_mib *tcp_statistics[2U] ;
   struct ipstats_mib *ip_statistics[2U] ;
   struct linux_mib *net_statistics[2U] ;
   struct udp_mib *udp_statistics[2U] ;
   struct udp_mib *udplite_statistics[2U] ;
   struct icmp_mib *icmp_statistics[2U] ;
   struct icmpmsg_mib *icmpmsg_statistics[2U] ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[2U] ;
   struct udp_mib *udplite_stats_in6[2U] ;
   struct ipstats_mib *ipv6_statistics[2U] ;
   struct icmpv6_mib *icmpv6_statistics[2U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics[2U] ;
   struct linux_xfrm_mib *xfrm_statistics[2U] ;
};
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
struct netns_packet {
   rwlock_t sklist_lock ;
   struct hlist_head sklist ;
};
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
struct ipv4_devconf;
struct fib_rules_ops;
struct xt_table;
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *tcp_sock ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   int nat_vmalloced ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_rt_cache_rebuild_count ;
   int current_rt_cache_rebuild_count ;
   struct timer_list rt_secret_timer ;
   atomic_t rt_genid ;
};
struct netns_sysctl_ipv6 {
   struct ctl_table_header *table ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
struct ipv6_devconf;
struct rt6_info;
struct rt6_statistics;
struct fib6_table;
struct dst_ops;
struct mfc6_cache;
struct mif_device;
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops *ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mroute6_sk ;
   struct mfc6_cache **mfc6_cache_array ;
   struct mif_device *vif6_table ;
   int maxvif ;
   atomic_t cache_resolve_queue_len ;
   int mroute_do_assert ;
   int mroute_do_pim ;
   int mroute_reg_vif_num ;
};
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
struct nameidata;
struct path;
struct vfsmount;
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
struct dcookie_struct;
union __anonunion_d_u_122 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
struct dentry_operations;
struct super_block;
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_122 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   struct dcookie_struct *d_cookie ;
   int d_mounted ;
   unsigned char d_iname[36U] ;
};
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
struct radix_tree_node;
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
struct pid_namespace;
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
typedef struct kernel_cap_struct kernel_cap_t;
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
struct export_operations;
struct kstatfs;
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
typedef struct fs_qfilestat fs_qfilestat_t;
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
struct v1_mem_dqinfo {

};
struct v2_mem_dqinfo {
   unsigned int dqi_blocks ;
   unsigned int dqi_free_blk ;
   unsigned int dqi_free_entry ;
};
typedef __kernel_uid32_t qid_t;
typedef __u64 qsize_t;
struct mem_dqblk {
   __u32 dqb_bhardlimit ;
   __u32 dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   __u32 dqb_ihardlimit ;
   __u32 dqb_isoftlimit ;
   __u32 dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
struct quota_format_type;
union __anonunion_u_124 {
   struct v1_mem_dqinfo v1_i ;
   struct v2_mem_dqinfo v2_i ;
};
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   union __anonunion_u_124 u ;
};
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , unsigned long  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , unsigned long  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
};
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops *ops[2U] ;
};
union __anonunion_arg_126 {
   char *buf ;
   void *data ;
};
struct __anonstruct_read_descriptor_t_125 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_126 arg ;
   int error ;
};
typedef struct __anonstruct_read_descriptor_t_125 read_descriptor_t;
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
};
struct backing_dev_info;
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
struct hd_struct;
struct gendisk;
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
};
struct inode_operations;
struct file_operations;
struct file_lock;
struct cdev;
union __anonunion_ldv_18421_127 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
struct dnotify_struct;
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_18421_127 ldv_18421 ;
   int i_cindex ;
   __u32 i_generation ;
   unsigned long i_dnotify_mask ;
   struct dnotify_struct *i_dnotify ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
union __anonunion_f_u_128 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
struct file {
   union __anonunion_f_u_128 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   unsigned int f_uid ;
   unsigned int f_gid ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   spinlock_t f_ep_lock ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
struct files_struct;
typedef struct files_struct *fl_owner_t;
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
struct nlm_lockowner;
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
struct nfs4_lock_state;
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
struct __anonstruct_afs_130 {
   struct list_head link ;
   int state ;
};
union __anonunion_fl_u_129 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_130 afs ;
};
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_129 fl_u ;
};
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
struct file_system_type;
struct super_operations;
struct xattr_handler;
struct mtd_info;
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_syncing ;
   int s_need_sync_fs ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
};
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*dir_notify)(struct file * , unsigned long  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   void (*write_super_lockfs)(struct super_block * ) ;
   void (*unlockfs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
};
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
struct bio;
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned short namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct module *owner ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
};
struct ebt_table;
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
struct nf_conntrack_ecache;
struct ip_conntrack_stat;
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct hlist_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_head unconfirmed ;
   struct ip_conntrack_stat *stat ;
   struct nf_conntrack_ecache *ecache ;
   int sysctl_acct ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   int hash_vmalloc ;
   int expect_vmalloc ;
};
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct sock *nlsk ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
};
struct net_generic;
struct net {
   atomic_t count ;
   struct list_head list ;
   struct work_struct work ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct net_device *loopback_dev ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct list_head rules_ops ;
   spinlock_t rules_mod_lock ;
   struct sock *rtnl ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_xfrm xfrm ;
   struct net_generic *gen ;
};
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   void *private ;
};
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
struct dcbnl_rtnl_ops {
   u8 (*getstate)(struct net_device * ) ;
   void (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   u8 (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   u8 (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
};
struct vlan_group;
struct ethtool_ops;
struct netpoll_info;
struct wireless_dev;
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
struct neighbour;
struct neigh_parms;
struct dev_addr_list {
   struct dev_addr_list *next ;
   u8 da_addr[32U] ;
   u8 da_addrlen ;
   u8 da_synced ;
   int da_users ;
   int da_gusers ;
};
struct hh_cache {
   struct hh_cache *hh_next ;
   atomic_t hh_refcnt ;
   __be16 hh_type ;
   u16 hh_len ;
   int (*hh_output)(struct sk_buff * ) ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
struct Qdisc;
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   unsigned long state ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   struct Qdisc *qdisc_sleeping ;
};
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   int (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   void (*ndo_set_multicast_list)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   void (*ndo_vlan_rx_register)(struct net_device * , struct vlan_group * ) ;
   void (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
};
enum ldv_17634 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4
} ;
struct iw_handler_def;
struct iw_public_data;
struct net_bridge_port;
struct macvlan_port;
struct garp_port;
struct rtnl_link_ops;
struct __anonstruct_ldv_21523_132 {
   int (*init)(struct net_device * ) ;
   void (*uninit)(struct net_device * ) ;
   int (*open)(struct net_device * ) ;
   int (*stop)(struct net_device * ) ;
   int (*hard_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*change_rx_flags)(struct net_device * , int  ) ;
   void (*set_rx_mode)(struct net_device * ) ;
   void (*set_multicast_list)(struct net_device * ) ;
   int (*set_mac_address)(struct net_device * , void * ) ;
   int (*validate_addr)(struct net_device * ) ;
   int (*do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*set_config)(struct net_device * , struct ifmap * ) ;
   int (*change_mtu)(struct net_device * , int  ) ;
   int (*neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*tx_timeout)(struct net_device * ) ;
   struct net_device_stats *(*get_stats)(struct net_device * ) ;
   void (*vlan_rx_register)(struct net_device * , struct vlan_group * ) ;
   void (*vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   void (*vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*poll_controller)(struct net_device * ) ;
};
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   unsigned long features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned short gflags ;
   unsigned short priv_flags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   struct net_device *master ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct dev_addr_list *uc_list ;
   int uc_count ;
   int uc_promisc ;
   struct dev_addr_list *mc_list ;
   int mc_count ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   void *dsa_ptr ;
   void *atalk_ptr ;
   void *ip_ptr ;
   void *dn_ptr ;
   void *ip6_ptr ;
   void *ec_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   unsigned char dev_addr[32U] ;
   unsigned char broadcast[32U] ;
   struct netdev_queue rx_queue ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   atomic_t refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct net_device *link_watch_next ;
   enum ldv_17634 reg_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   void *ml_priv ;
   struct net_bridge_port *br_port ;
   struct macvlan_port *macvlan_port ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[3U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned long vlan_features ;
   unsigned int gso_max_size ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   struct __anonstruct_ldv_21523_132 ldv_21523 ;
};
typedef unsigned long cputime_t;
struct sem_undo_list;
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
struct siginfo;
struct __anonstruct_sigset_t_133 {
   unsigned long sig[1U] ;
};
typedef struct __anonstruct_sigset_t_133 sigset_t;
typedef void __signalfn_t(int  );
typedef __signalfn_t *__sighandler_t;
typedef void __restorefn_t(void);
typedef __restorefn_t *__sigrestore_t;
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
struct k_sigaction {
   struct sigaction sa ;
};
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
typedef union sigval sigval_t;
struct __anonstruct__kill_135 {
   pid_t _pid ;
   uid_t _uid ;
};
struct __anonstruct__timer_136 {
   timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
struct __anonstruct__rt_137 {
   pid_t _pid ;
   uid_t _uid ;
   sigval_t _sigval ;
};
struct __anonstruct__sigchld_138 {
   pid_t _pid ;
   uid_t _uid ;
   int _status ;
   clock_t _utime ;
   clock_t _stime ;
};
struct __anonstruct__sigfault_139 {
   void *_addr ;
};
struct __anonstruct__sigpoll_140 {
   long _band ;
   int _fd ;
};
union __anonunion__sifields_134 {
   int _pad[28U] ;
   struct __anonstruct__kill_135 _kill ;
   struct __anonstruct__timer_136 _timer ;
   struct __anonstruct__rt_137 _rt ;
   struct __anonstruct__sigchld_138 _sigchld ;
   struct __anonstruct__sigfault_139 _sigfault ;
   struct __anonstruct__sigpoll_140 _sigpoll ;
};
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_134 _sifields ;
};
typedef struct siginfo siginfo_t;
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
struct fs_struct {
   atomic_t count ;
   rwlock_t lock ;
   int umask ;
   struct path root ;
   struct path pwd ;
};
struct percpu_counter {
   spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
struct __anonstruct_seccomp_t_143 {
   int mode ;
};
typedef struct __anonstruct_seccomp_t_143 seccomp_t;
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
struct rt_mutex_waiter;
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
struct futex_pi_state;
struct robust_list_head;
struct cfs_rq;
struct task_group;
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
union __anonunion_ki_obj_144 {
   void *user ;
   struct task_struct *tsk ;
};
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_144 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct kioctx *next ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
};
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
struct thread_group_cputime {
   struct task_cputime *totals ;
};
union __anonunion_ldv_22536_145 {
   pid_t pgrp ;
   pid_t __pgrp ;
};
union __anonunion_ldv_22541_146 {
   pid_t session ;
   pid_t __session ;
};
struct tty_struct;
struct taskstats;
struct tty_audit_buf;
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   struct thread_group_cputime cputime ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   union __anonunion_ldv_22536_145 ldv_22536 ;
   struct pid *tty_old_pgrp ;
   union __anonunion_ldv_22541_146 ldv_22541 ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   struct task_io_accounting ioac ;
   struct rlimit rlim[16U] ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
};
struct reclaim_state;
struct sched_info {
   unsigned long pcount ;
   unsigned long long cpu_time ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
struct sched_group {
   struct sched_group *next ;
   cpumask_t cpumask ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
};
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   cpumask_t span ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[3U] ;
   unsigned int lb_failed[3U] ;
   unsigned int lb_balanced[3U] ;
   unsigned int lb_imbalance[3U] ;
   unsigned int lb_gained[3U] ;
   unsigned int lb_hot_gained[3U] ;
   unsigned int lb_nobusyg[3U] ;
   unsigned int lb_nobusyq[3U] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
};
struct io_context;
struct group_info {
   int ngroups ;
   atomic_t usage ;
   gid_t small_block[32U] ;
   int nblocks ;
   gid_t *blocks[0U] ;
};
struct audit_context;
struct rq;
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  ) ;
   unsigned long (*load_balance)(struct rq * , int  , struct rq * , unsigned long  ,
                                 struct sched_domain * , enum cpu_idle_type  , int * ,
                                 int * ) ;
   int (*move_one_task)(struct rq * , int  , struct rq * , struct sched_domain * ,
                        enum cpu_idle_type  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_wake_up)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , cpumask_t const   * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_new)(struct rq * , struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*moved_group)(struct task_struct * ) ;
};
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
struct rt_rq;
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
struct linux_binfmt;
struct css_set;
struct compat_robust_list_head;
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   uid_t uid ;
   uid_t euid ;
   uid_t suid ;
   uid_t fsuid ;
   gid_t gid ;
   gid_t egid ;
   gid_t sgid ;
   gid_t fsgid ;
   struct group_info *group_info ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_bset ;
   struct user_struct *user ;
   unsigned int securebits ;
   unsigned char jit_keyring ;
   struct key *request_key_auth ;
   struct key *thread_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_timestamp ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   void *security ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
};
struct linux_binprm {
   char buf[128U] ;
   struct vm_area_struct *vma ;
   struct mm_struct *mm ;
   unsigned long p ;
   unsigned char sh_bang : 1 ;
   unsigned char misc_bang : 1 ;
   unsigned int recursion_depth ;
   struct file *file ;
   int e_uid ;
   int e_gid ;
   kernel_cap_t cap_post_exec_permitted ;
   bool cap_effective ;
   void *security ;
   int argc ;
   int envc ;
   char *filename ;
   char *interp ;
   unsigned int interp_flags ;
   unsigned int interp_data ;
   unsigned long loader ;
   unsigned long exec ;
};
struct linux_binfmt {
   struct list_head lh ;
   struct module *module ;
   int (*load_binary)(struct linux_binprm * , struct pt_regs * ) ;
   int (*load_shlib)(struct file * ) ;
   int (*core_dump)(long  , struct pt_regs * , struct file * , unsigned long  ) ;
   unsigned long min_coredump ;
   int hasvdso ;
};
typedef int32_t key_serial_t;
typedef uint32_t key_perm_t;
struct key_type;
struct keyring_list;
struct key_user;
union __anonunion_type_data_147 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
};
union __anonunion_payload_148 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   time_t expiry ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_147 type_data ;
   union __anonunion_payload_148 payload ;
};
struct xfrm_policy;
struct xfrm_state;
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   struct rcu_head rcu ;
   struct sock_filter insns[0U] ;
};
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
struct nla_policy {
   u16 type ;
   u16 len ;
};
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
};
struct neigh_table;
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct rcu_head rcu_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
struct neigh_ops;
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   struct net_device *dev ;
   unsigned long used ;
   unsigned long confirmed ;
   unsigned long updated ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   atomic_t probes ;
   rwlock_t lock ;
   unsigned char ha[32U] ;
   struct hh_cache *hh ;
   atomic_t refcnt ;
   int (*output)(struct sk_buff * ) ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   struct neigh_ops *ops ;
   u8 primary_key[0U] ;
};
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   int (*connected_output)(struct sk_buff * ) ;
   int (*hh_output)(struct sk_buff * ) ;
   int (*queue_xmit)(struct sk_buff * ) ;
};
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct timer_list gc_timer ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct kmem_cache *kmem_cachep ;
   struct neigh_statistics *stats ;
   struct neighbour **hash_buckets ;
   unsigned int hash_mask ;
   __u32 hash_rnd ;
   unsigned int hash_chain_gc ;
   struct pneigh_entry **phash_buckets ;
};
struct dn_route;
union __anonunion_ldv_27789_152 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
struct dst_entry {
   struct rcu_head rcu_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   short error ;
   short obsolete ;
   int flags ;
   unsigned long expires ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   unsigned int rate_tokens ;
   unsigned long rate_last ;
   struct dst_entry *path ;
   struct neighbour *neighbour ;
   struct hh_cache *hh ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   struct dst_ops *ops ;
   u32 metrics[13U] ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_ldv_27789_152 ldv_27789 ;
};
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , u32  ) ;
   int (*local_out)(struct sk_buff * ) ;
   atomic_t entries ;
   struct kmem_cache *kmem_cachep ;
   struct net *dst_net ;
};
struct __anonstruct_socket_lock_t_153 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
typedef struct __anonstruct_socket_lock_t_153 socket_lock_t;
struct proto;
union __anonunion_ldv_27938_154 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
struct sock_common {
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_27938_154 ldv_27938 ;
   struct hlist_node skc_bind_node ;
   atomic_t skc_refcnt ;
   unsigned int skc_hash ;
   struct proto *skc_prot ;
   struct net *skc_net ;
};
struct __anonstruct_sk_backlog_155 {
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
struct sock {
   struct sock_common __sk_common ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_rcvbuf ;
   socket_lock_t sk_lock ;
   struct __anonstruct_sk_backlog_155 sk_backlog ;
   wait_queue_head_t *sk_sleep ;
   struct dst_entry *sk_dst_cache ;
   struct xfrm_policy *sk_policy[2U] ;
   rwlock_t sk_dst_lock ;
   atomic_t sk_rmem_alloc ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_receive_queue ;
   struct sk_buff_head sk_write_queue ;
   struct sk_buff_head sk_async_wait_queue ;
   int sk_wmem_queued ;
   int sk_forward_alloc ;
   gfp_t sk_allocation ;
   int sk_route_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   int sk_rcvlowat ;
   unsigned long sk_flags ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   atomic_t sk_drops ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   struct ucred sk_peercred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct sk_filter *sk_filter ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page *sk_sndmsg_page ;
   struct sk_buff *sk_send_head ;
   __u32 sk_sndmsg_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
struct request_sock_ops;
struct timewait_sock_ops;
struct inet_hashinfo;
struct raw_hashinfo;
struct udp_table;
union __anonunion_h_156 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   int *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_156 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
};
struct mISDNchannel;
struct mISDNdevice;
struct mISDNstack;
struct channel_req {
   u_int protocol ;
   struct sockaddr_mISDN adr ;
   struct mISDNchannel *ch ;
};
typedef int ctrl_func_t(struct mISDNchannel * , u_int  , void * );
typedef int send_func_t(struct mISDNchannel * , struct sk_buff * );
typedef int create_func_t(struct channel_req * );
struct Bprotocol {
   struct list_head list ;
   char *name ;
   u_int Bprotocols ;
   create_func_t *create ;
};
struct mISDNchannel {
   struct list_head list ;
   u_int protocol ;
   u_int nr ;
   u_long opt ;
   u_int addr ;
   struct mISDNstack *st ;
   struct mISDNchannel *peer ;
   send_func_t *send ;
   send_func_t *recv ;
   ctrl_func_t *ctrl ;
};
struct mISDN_sock_list {
   struct hlist_head head ;
   rwlock_t lock ;
};
struct mISDNdevice {
   struct mISDNchannel D ;
   u_int id ;
   char name[20U] ;
   u_int Dprotocols ;
   u_int Bprotocols ;
   u_int nrbchan ;
   u_char channelmap[16U] ;
   struct list_head bchannels ;
   struct mISDNchannel *teimgr ;
   struct device dev ;
};
struct mISDNstack {
   u_long status ;
   struct mISDNdevice *dev ;
   struct task_struct *thread ;
   struct completion *notify ;
   wait_queue_head_t workq ;
   struct sk_buff_head msgq ;
   struct list_head layer2 ;
   struct mISDNchannel *layer1 ;
   struct mISDNchannel own ;
   struct mutex lmutex ;
   struct mISDN_sock_list l1sock ;
};
typedef int ldv_func_ret_type___1;
typedef int ldv_func_ret_type___19;
struct FsmInst;
typedef void (*FSMFNPTR)(struct FsmInst * , int  , void * );
struct Fsm {
   FSMFNPTR (**jumpmatrix)(struct FsmInst * , int  , void * ) ;
   int state_count ;
   int event_count ;
   char **strEvent ;
   char **strState ;
};
struct FsmInst {
   struct Fsm *fsm ;
   int state ;
   int debug ;
   void *userdata ;
   int userint ;
   void (*printdebug)(struct FsmInst * , char *  , ...) ;
};
struct FsmNode {
   int state ;
   int event ;
   void (*routine)(struct FsmInst * , int  , void * ) ;
};
struct FsmTimer {
   struct FsmInst *fi ;
   struct timer_list tl ;
   int event ;
   void *arg ;
};
typedef long __kernel_suseconds_t;
typedef __kernel_suseconds_t suseconds_t;
struct mISDNhead {
   unsigned int prim ;
   unsigned int id ;
};
struct mISDNversion {
   unsigned char major ;
   unsigned char minor ;
   unsigned short release ;
};
struct mISDN_devinfo {
   u_int id ;
   u_int Dprotocols ;
   u_int Bprotocols ;
   u_int protocol ;
   u_char channelmap[16U] ;
   u_int nrbchan ;
   char name[20U] ;
};
struct mISDN_ctrl_req {
   int op ;
   int channel ;
   int p1 ;
   int p2 ;
};
struct timeval {
   time_t tv_sec ;
   suseconds_t tv_usec ;
};
struct net_proto_family {
   int family ;
   int (*create)(struct net * , struct socket * , int  ) ;
   struct module *owner ;
};
enum hrtimer_restart;
enum sock_flags {
    SOCK_DEAD = 0,
    SOCK_DONE = 1,
    SOCK_URGINLINE = 2,
    SOCK_KEEPOPEN = 3,
    SOCK_LINGER = 4,
    SOCK_DESTROY = 5,
    SOCK_BROADCAST = 6,
    SOCK_TIMESTAMP = 7,
    SOCK_ZAPPED = 8,
    SOCK_USE_WRITE_QUEUE = 9,
    SOCK_DBG = 10,
    SOCK_RCVTSTAMP = 11,
    SOCK_RCVTSTAMPNS = 12,
    SOCK_LOCALROUTE = 13,
    SOCK_QUEUE_SHRUNK = 14
} ;
struct mISDN_sock {
   struct sock sk ;
   struct mISDNchannel ch ;
   u_int cmask ;
   struct mISDNdevice *dev ;
};
enum hrtimer_restart;
struct dchannel {
   struct mISDNdevice dev ;
   u_long Flags ;
   struct work_struct workq ;
   void (*phfunc)(struct dchannel * ) ;
   u_int state ;
   void *l1 ;
   u_char (*read_reg)(void * , u_char  ) ;
   void (*write_reg)(void * , u_char  , u_char  ) ;
   void (*read_fifo)(void * , u_char * , int  ) ;
   void (*write_fifo)(void * , u_char * , int  ) ;
   void *hw ;
   int slot ;
   struct timer_list timer ;
   struct sk_buff *rx_skb ;
   int maxlen ;
   struct sk_buff_head squeue ;
   struct sk_buff_head rqueue ;
   struct sk_buff *tx_skb ;
   int tx_idx ;
   int debug ;
   int err_crc ;
   int err_tx ;
   int err_rx ;
};
struct bchannel {
   struct mISDNchannel ch ;
   int nr ;
   u_long Flags ;
   struct work_struct workq ;
   u_int state ;
   u_char (*read_reg)(void * , u_char  ) ;
   void (*write_reg)(void * , u_char  , u_char  ) ;
   void (*read_fifo)(void * , u_char * , int  ) ;
   void (*write_fifo)(void * , u_char * , int  ) ;
   void *hw ;
   int slot ;
   struct timer_list timer ;
   struct sk_buff *rx_skb ;
   int maxlen ;
   struct sk_buff *next_skb ;
   struct sk_buff *tx_skb ;
   struct sk_buff_head rqueue ;
   int rcount ;
   int tx_idx ;
   int debug ;
   int err_crc ;
   int err_tx ;
   int err_rx ;
};
struct x8664_pda {
   struct task_struct *pcurrent ;
   unsigned long data_offset ;
   unsigned long kernelstack ;
   unsigned long oldrsp ;
   int irqcount ;
   unsigned int cpunumber ;
   char *irqstackptr ;
   short nodenumber ;
   short in_bootmem ;
   unsigned int __softirq_pending ;
   unsigned int __nmi_count ;
   short mmu_state ;
   short isidle ;
   struct mm_struct *active_mm ;
   unsigned int apic_timer_irqs ;
   unsigned int irq0_irqs ;
   unsigned int irq_resched_count ;
   unsigned int irq_call_count ;
   unsigned int irq_tlb_count ;
   unsigned int irq_thermal_count ;
   unsigned int irq_threshold_count ;
   unsigned int irq_spurious_count ;
};
enum hrtimer_restart;
struct __va_list_tag;
typedef struct __va_list_tag __va_list_tag;
enum hrtimer_restart;
typedef int dchannel_l1callback(struct dchannel * , u_int  );
struct layer1;
struct layer1 {
   u_long Flags ;
   struct FsmInst l1m ;
   struct FsmTimer timer ;
   int delay ;
   struct dchannel *dch ;
   dchannel_l1callback *dcb ;
};
enum hrtimer_restart;
struct manager {
   struct mISDNchannel ch ;
   struct mISDNchannel bcast ;
   u_long options ;
   struct list_head layer2 ;
   rwlock_t lock ;
   struct FsmInst deact ;
   struct FsmTimer datimer ;
   struct sk_buff_head sendq ;
   struct mISDNchannel *up ;
   u_int nextid ;
   u_int lastid ;
};
struct layer2;
struct teimgr {
   int ri ;
   int rcnt ;
   struct FsmInst tei_m ;
   struct FsmTimer timer ;
   int tval ;
   int nval ;
   struct layer2 *l2 ;
   struct manager *mgr ;
};
struct laddr {
   u_char A ;
   u_char B ;
};
struct layer2 {
   struct list_head list ;
   struct mISDNchannel ch ;
   u_long flag ;
   int id ;
   struct mISDNchannel *up ;
   signed char sapi ;
   signed char tei ;
   struct laddr addr ;
   u_int maxlen ;
   struct teimgr *tm ;
   u_int vs ;
   u_int va ;
   u_int vr ;
   int rc ;
   u_int window ;
   u_int sow ;
   struct FsmInst l2m ;
   struct FsmTimer t200 ;
   struct FsmTimer t203 ;
   int T200 ;
   int N200 ;
   int T203 ;
   u_int next_id ;
   u_int down_id ;
   struct sk_buff *windowar[8U] ;
   struct sk_buff_head i_queue ;
   struct sk_buff_head ui_queue ;
   struct sk_buff_head down_queue ;
   struct sk_buff_head tmp_queue ;
};
enum hrtimer_restart;
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
enum hrtimer_restart;
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
};
typedef struct poll_table_struct poll_table;
struct miscdevice {
   int minor ;
   char const   *name ;
   struct file_operations  const  *fops ;
   struct list_head list ;
   struct device *parent ;
   struct device *this_device ;
};
struct mISDNtimerdev {
   int next_id ;
   struct list_head pending ;
   struct list_head expired ;
   wait_queue_head_t wait ;
   u_int work ;
   spinlock_t lock ;
};
struct mISDNtimer {
   struct list_head list ;
   struct mISDNtimerdev *dev ;
   struct timer_list tl ;
   int id ;
};
void __builtin_prefetch(void const   *  , ...) ;
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
  return (oldbit);
}
}
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
  return (oldbit);
}
}
extern int sprintf(char * , char const   *  , ...) ;
extern int printk(char const   *  , ...) ;
extern char *strcpy(char * , char const   * ) ;
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
  __list_add(new, head->prev, head);
  return;
}
}
extern void list_del(struct list_head * ) ;
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
extern void _read_lock(rwlock_t * ) ;
extern unsigned long _write_lock_irqsave(rwlock_t * ) ;
extern void _read_unlock(rwlock_t * ) ;
extern void _write_unlock_irqrestore(rwlock_t * , unsigned long  ) ;
extern void __ldv_spin_lock(spinlock_t * ) ;
void ldv___ldv_spin_lock_1(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_4(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_5(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_8(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_10(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_12(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_14(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_16(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_19(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_20(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_24(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_26(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_27(spinlock_t *ldv_func_arg1 ) ;
extern void __ldv_spin_unlock(spinlock_t * ) ;
void ldv___ldv_spin_unlock_2(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_6(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_7(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_9(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_11(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_13(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_15(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_17(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_18(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_22(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_23(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_25(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_28(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_29(spinlock_t *ldv_func_arg1 ) ;
extern int __ldv_spin_trylock(spinlock_t * ) ;
int ldv___ldv_spin_trylock_3(spinlock_t *ldv_func_arg1 ) ;
int ldv___ldv_spin_trylock_21(spinlock_t *ldv_func_arg1 ) ;
void ldv_spin_lock__xmit_lock_of_netdev_queue(void) ;
void ldv_spin_unlock__xmit_lock_of_netdev_queue(void) ;
int ldv_spin_trylock__xmit_lock_of_netdev_queue(void) ;
void ldv_spin_lock_addr_list_lock_of_net_device(void) ;
void ldv_spin_unlock_addr_list_lock_of_net_device(void) ;
void ldv_spin_lock_alloc_lock_of_task_struct(void) ;
void ldv_spin_unlock_alloc_lock_of_task_struct(void) ;
void ldv_spin_lock_d_lock_of_dentry(void) ;
void ldv_spin_unlock_d_lock_of_dentry(void) ;
void ldv_spin_lock_dcache_lock(void) ;
void ldv_spin_unlock_dcache_lock(void) ;
void ldv_spin_lock_i_lock_of_inode(void) ;
void ldv_spin_unlock_i_lock_of_inode(void) ;
void ldv_spin_lock_lock_of_NOT_ARG_SIGN(void) ;
void ldv_spin_unlock_lock_of_NOT_ARG_SIGN(void) ;
int ldv_spin_trylock_lock_of_NOT_ARG_SIGN(void) ;
void ldv_spin_lock_siglock_of_sighand_struct(void) ;
void ldv_spin_unlock_siglock_of_sighand_struct(void) ;
void ldv_spin_lock_tx_global_lock_of_net_device(void) ;
void ldv_spin_unlock_tx_global_lock_of_net_device(void) ;
int mISDN_register_device(struct mISDNdevice *dev , char *name ) ;
void mISDN_unregister_device(struct mISDNdevice *dev ) ;
int mISDN_register_Bprotocol(struct Bprotocol *bp ) ;
void mISDN_unregister_Bprotocol(struct Bprotocol *bp ) ;
struct mISDNdevice *get_mdevice(u_int id ) ;
int get_mdevice_count(void) ;
int create_stack(struct mISDNdevice *dev ) ;
void delete_stack(struct mISDNdevice *dev ) ;
void mISDN_initstack(u_int *dp ) ;
int misdn_sock_init(u_int *deb ) ;
void misdn_sock_cleanup(void) ;
u_int get_all_Bprotocols(void) ;
struct Bprotocol *get_Bprotocol4mask(u_int m ) ;
struct Bprotocol *get_Bprotocol4id(u_int id ) ;
int mISDN_inittimer(u_int *deb ) ;
void mISDN_timer_cleanup(void) ;
int l1_init(u_int *deb ) ;
void l1_cleanup(void) ;
int Isdnl2_Init(u_int *deb ) ;
void Isdnl2_cleanup(void) ;
static u_int debug  ;
static struct list_head devices  =    {& devices, & devices};
rwlock_t device_lock  =    {{16777216U}, 3736018669U, 4294967295U, 0xffffffffffffffffUL, {0, 0, "device_lock",
                                                                  0}};
static u64 device_ids  ;
static struct list_head Bprotocols  =    {& Bprotocols, & Bprotocols};
rwlock_t bp_lock  =    {{16777216U}, 3736018669U, 4294967295U, 0xffffffffffffffffUL, {0, 0, "bp_lock",
                                                                  0}};
struct mISDNdevice *get_mdevice(u_int id ) 
{ 
  struct mISDNdevice *dev ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
  _read_lock(& device_lock);
  __mptr = (struct list_head  const  *)devices.next;
  dev = (struct mISDNdevice *)__mptr;
  goto ldv_28924;
  ldv_28923: ;
  if (dev->id == id) {
    _read_unlock(& device_lock);
    return (dev);
  } else {

  }
  __mptr___0 = (struct list_head  const  *)dev->D.list.next;
  dev = (struct mISDNdevice *)__mptr___0;
  ldv_28924: 
  __builtin_prefetch((void const   *)dev->D.list.next);
  if ((unsigned long )(& dev->D.list) != (unsigned long )(& devices)) {
    goto ldv_28923;
  } else {

  }
  _read_unlock(& device_lock);
  return (0);
}
}
int get_mdevice_count(void) 
{ 
  struct mISDNdevice *dev ;
  int cnt ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
  cnt = 0;
  _read_lock(& device_lock);
  __mptr = (struct list_head  const  *)devices.next;
  dev = (struct mISDNdevice *)__mptr;
  goto ldv_28936;
  ldv_28935: 
  cnt = cnt + 1;
  __mptr___0 = (struct list_head  const  *)dev->D.list.next;
  dev = (struct mISDNdevice *)__mptr___0;
  ldv_28936: 
  __builtin_prefetch((void const   *)dev->D.list.next);
  if ((unsigned long )(& dev->D.list) != (unsigned long )(& devices)) {
    goto ldv_28935;
  } else {

  }
  _read_unlock(& device_lock);
  return (cnt);
}
}
static int get_free_devid(void) 
{ 
  u_int i ;
  int tmp ;

  {
  i = 0U;
  goto ldv_28943;
  ldv_28942: 
  tmp = test_and_set_bit((int )i, (unsigned long volatile   *)(& device_ids));
  if (tmp == 0) {
    return ((int )i);
  } else {

  }
  i = i + (u_int )1;
  ldv_28943: ;
  if (i <= 63U) {
    goto ldv_28942;
  } else {

  }

  return (-1);
}
}
int mISDN_register_device(struct mISDNdevice *dev , char *name ) 
{ 
  u_long flags ;
  int err ;
  int tmp ;

  {
  tmp = get_free_devid();
  dev->id = (u_int )tmp;
  if ((unsigned long )name != (unsigned long )((char *)0) && (int )((signed char )*name) != 0) {
    strcpy((char *)(& dev->name), (char const   *)name);
  } else {
    sprintf((char *)(& dev->name), "mISDN%d", dev->id);
  }
  if ((debug & 255U) != 0U) {
    printk("<7>mISDN_register %s %d\n", (char *)(& dev->name), dev->id);
  } else {

  }
  err = create_stack(dev);
  if (err != 0) {
    return (err);
  } else {

  }
  flags = _write_lock_irqsave(& device_lock);
  list_add_tail(& dev->D.list, & devices);
  _write_unlock_irqrestore(& device_lock, flags);
  return (0);
}
}
void mISDN_unregister_device(struct mISDNdevice *dev ) 
{ 
  u_long flags ;

  {
  if ((debug & 255U) != 0U) {
    printk("<7>mISDN_unregister %s %d\n", (char *)(& dev->name), dev->id);
  } else {

  }
  flags = _write_lock_irqsave(& device_lock);
  list_del(& dev->D.list);
  _write_unlock_irqrestore(& device_lock, flags);
  test_and_clear_bit((int )dev->id, (unsigned long volatile   *)(& device_ids));
  delete_stack(dev);
  return;
}
}
u_int get_all_Bprotocols(void) 
{ 
  struct Bprotocol *bp ;
  u_int m ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
  m = 0U;
  _read_lock(& bp_lock);
  __mptr = (struct list_head  const  *)Bprotocols.next;
  bp = (struct Bprotocol *)__mptr;
  goto ldv_28990;
  ldv_28989: 
  m = bp->Bprotocols | m;
  __mptr___0 = (struct list_head  const  *)bp->list.next;
  bp = (struct Bprotocol *)__mptr___0;
  ldv_28990: 
  __builtin_prefetch((void const   *)bp->list.next);
  if ((unsigned long )(& bp->list) != (unsigned long )(& Bprotocols)) {
    goto ldv_28989;
  } else {

  }
  _read_unlock(& bp_lock);
  return (m);
}
}
struct Bprotocol *get_Bprotocol4mask(u_int m ) 
{ 
  struct Bprotocol *bp ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
  _read_lock(& bp_lock);
  __mptr = (struct list_head  const  *)Bprotocols.next;
  bp = (struct Bprotocol *)__mptr;
  goto ldv_29001;
  ldv_29000: ;
  if ((bp->Bprotocols & m) != 0U) {
    _read_unlock(& bp_lock);
    return (bp);
  } else {

  }
  __mptr___0 = (struct list_head  const  *)bp->list.next;
  bp = (struct Bprotocol *)__mptr___0;
  ldv_29001: 
  __builtin_prefetch((void const   *)bp->list.next);
  if ((unsigned long )(& bp->list) != (unsigned long )(& Bprotocols)) {
    goto ldv_29000;
  } else {

  }
  _read_unlock(& bp_lock);
  return (0);
}
}
struct Bprotocol *get_Bprotocol4id(u_int id ) 
{ 
  u_int m ;
  struct Bprotocol *tmp ;

  {
  if (id <= 31U || id > 63U) {
    printk("<4>%s id not in range  %d\n", "get_Bprotocol4id", id);
    return (0);
  } else {

  }
  m = (u_int )(1 << ((int )id & 31));
  tmp = get_Bprotocol4mask(m);
  return (tmp);
}
}
int mISDN_register_Bprotocol(struct Bprotocol *bp ) 
{ 
  u_long flags ;
  struct Bprotocol *old ;

  {
  if ((debug & 255U) != 0U) {
    printk("<7>%s: %s/%x\n", "mISDN_register_Bprotocol", bp->name, bp->Bprotocols);
  } else {

  }
  old = get_Bprotocol4mask(bp->Bprotocols);
  if ((unsigned long )old != (unsigned long )((struct Bprotocol *)0)) {
    printk("<4>register duplicate protocol old %s/%x new %s/%x\n", old->name, old->Bprotocols,
           bp->name, bp->Bprotocols);
    return (-16);
  } else {

  }
  flags = _write_lock_irqsave(& bp_lock);
  list_add_tail(& bp->list, & Bprotocols);
  _write_unlock_irqrestore(& bp_lock, flags);
  return (0);
}
}
void mISDN_unregister_Bprotocol(struct Bprotocol *bp ) 
{ 
  u_long flags ;

  {
  if ((debug & 255U) != 0U) {
    printk("<7>%s: %s/%x\n", "mISDN_unregister_Bprotocol", bp->name, bp->Bprotocols);
  } else {

  }
  flags = _write_lock_irqsave(& bp_lock);
  list_del(& bp->list);
  _write_unlock_irqrestore(& bp_lock, flags);
  return;
}
}
int mISDNInit(void) 
{ 
  int err ;

  {
  printk("<6>Modular ISDN core version %d.%d.%d\n", 1, 0, 19);
  mISDN_initstack(& debug);
  err = mISDN_inittimer(& debug);
  if (err != 0) {
    goto error;
  } else {

  }
  err = l1_init(& debug);
  if (err != 0) {
    mISDN_timer_cleanup();
    goto error;
  } else {

  }
  err = Isdnl2_Init(& debug);
  if (err != 0) {
    mISDN_timer_cleanup();
    l1_cleanup();
    goto error;
  } else {

  }
  err = misdn_sock_init(& debug);
  if (err != 0) {
    mISDN_timer_cleanup();
    l1_cleanup();
    Isdnl2_cleanup();
  } else {

  }
  error: ;
  return (err);
}
}
void mISDN_cleanup(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  misdn_sock_cleanup();
  mISDN_timer_cleanup();
  l1_cleanup();
  Isdnl2_cleanup();
  tmp = list_empty((struct list_head  const  *)(& devices));
  if (tmp == 0) {
    printk("<3>%s devices still registered\n", "mISDN_cleanup");
  } else {

  }
  tmp___0 = list_empty((struct list_head  const  *)(& Bprotocols));
  if (tmp___0 == 0) {
    printk("<3>%s Bprotocols still registered\n", "mISDN_cleanup");
  } else {

  }
  printk("<7>mISDNcore unloaded\n");
  return;
}
}
void ldv_check_final_state(void) ;
void ldv_initialize(void) ;
extern void ldv_handler_precall(void) ;
extern int nondet_int(void) ;
int LDV_IN_INTERRUPT  ;
int main(void) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  ldv_handler_precall();
  tmp = mISDNInit();
  if (tmp != 0) {
    goto ldv_final;
  } else {

  }
  goto ldv_29082;
  ldv_29081: 
  tmp___0 = nondet_int();
  switch (tmp___0) {
  default: ;
  goto ldv_29080;
  }
  ldv_29080: ;
  ldv_29082: 
  tmp___1 = nondet_int();
  if (tmp___1 != 0) {
    goto ldv_29081;
  } else {

  }

  ldv_handler_precall();
  mISDN_cleanup();
  ldv_final: 
  ldv_check_final_state();
  return 0;
}
}
void ldv___ldv_spin_lock_1(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_2(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
int ldv___ldv_spin_trylock_3(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = __ldv_spin_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv___ldv_spin_lock_4(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_dcache_lock();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_5(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_d_lock_of_dentry();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_6(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_d_lock_of_dentry();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_7(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_dcache_lock();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_8(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_d_lock_of_dentry();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_9(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_d_lock_of_dentry();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_10(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_i_lock_of_inode();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_11(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_i_lock_of_inode();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_12(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_d_lock_of_dentry();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_13(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_d_lock_of_dentry();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_14(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_siglock_of_sighand_struct();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_15(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_siglock_of_sighand_struct();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_16(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_alloc_lock_of_task_struct();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_17(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_alloc_lock_of_task_struct();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_18(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_siglock_of_sighand_struct();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_19(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock__xmit_lock_of_netdev_queue();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_20(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock__xmit_lock_of_netdev_queue();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
int ldv___ldv_spin_trylock_21(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___19 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = __ldv_spin_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_spin_trylock__xmit_lock_of_netdev_queue();
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv___ldv_spin_unlock_22(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock__xmit_lock_of_netdev_queue();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_23(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock__xmit_lock_of_netdev_queue();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_24(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_tx_global_lock_of_net_device();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_25(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_tx_global_lock_of_net_device();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_26(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_addr_list_lock_of_net_device();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_27(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_addr_list_lock_of_net_device();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_28(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_addr_list_lock_of_net_device();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_29(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_addr_list_lock_of_net_device();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
long ldv__builtin_expect(long exp , long c ) ;
void ldv___ldv_spin_lock_59(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_60(spinlock_t *ldv_func_arg1 ) ;
int ldv___ldv_spin_trylock_61(spinlock_t *ldv_func_arg1 ) ;
extern void kfree(void const   * ) ;
extern unsigned long volatile   jiffies ;
extern void init_timer(struct timer_list * ) ;
__inline static int timer_pending(struct timer_list  const  *timer ) 
{ 


  {
  return ((unsigned long )timer->entry.next != (unsigned long )((struct list_head */* const  */)0));
}
}
extern int del_timer(struct timer_list * ) ;
extern int __mod_timer(struct timer_list * , unsigned long  ) ;
__inline static void add_timer(struct timer_list *timer ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
  tmp = timer_pending((struct timer_list  const  *)timer);
  tmp___0 = ldv__builtin_expect(tmp != 0, 0L);
  if (tmp___0 != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/timer.h"),
                         "i" (165), "i" (24UL));
    ldv_8547: ;
    goto ldv_8547;
  } else {

  }
  __mod_timer(timer, timer->expires);
  return;
}
}
extern void *__kmalloc(size_t  , gfp_t  ) ;
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
  tmp___2 = __kmalloc(size, flags);
  return (tmp___2);
}
}
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
  tmp = kmalloc(size, flags | 32768U);
  return (tmp);
}
}
void mISDN_FsmNew(struct Fsm *fsm , struct FsmNode *fnlist , int fncount ) ;
void mISDN_FsmFree(struct Fsm *fsm ) ;
int mISDN_FsmEvent(struct FsmInst *fi , int event , void *arg ) ;
void mISDN_FsmChangeState(struct FsmInst *fi , int newstate ) ;
void mISDN_FsmInitTimer(struct FsmInst *fi , struct FsmTimer *ft ) ;
int mISDN_FsmAddTimer(struct FsmTimer *ft , int millisec , int event , void *arg ,
                      int where ) ;
void mISDN_FsmRestartTimer(struct FsmTimer *ft , int millisec , int event , void *arg ,
                           int where ) ;
void mISDN_FsmDelTimer(struct FsmTimer *ft , int where ) ;
void mISDN_FsmNew(struct Fsm *fsm , struct FsmNode *fnlist , int fncount ) 
{ 
  int i ;
  void *tmp ;

  {
  tmp = kzalloc(((unsigned long )fsm->state_count * (unsigned long )fsm->event_count) * 8UL,
                208U);
  fsm->jumpmatrix = (FSMFNPTR (**)(struct FsmInst * , int  , void * ))tmp;
  i = 0;
  goto ldv_10054;
  ldv_10053: ;
  if ((fnlist + (unsigned long )i)->state >= fsm->state_count || (fnlist + (unsigned long )i)->event >= fsm->event_count) {
    printk("<3>mISDN_FsmNew Error: %d st(%ld/%ld) ev(%ld/%ld)\n", i, (long )(fnlist + (unsigned long )i)->state,
           (long )fsm->state_count, (long )(fnlist + (unsigned long )i)->event, (long )fsm->event_count);
  } else {
    *(fsm->jumpmatrix + (unsigned long )(fsm->state_count * (fnlist + (unsigned long )i)->event + (fnlist + (unsigned long )i)->state)) = (fnlist + (unsigned long )i)->routine;
  }
  i = i + 1;
  ldv_10054: ;
  if (i < fncount) {
    goto ldv_10053;
  } else {

  }

  return;
}
}
void mISDN_FsmFree(struct Fsm *fsm ) 
{ 


  {
  kfree((void const   *)fsm->jumpmatrix);
  return;
}
}
int mISDN_FsmEvent(struct FsmInst *fi , int event , void *arg ) 
{ 
  void (*r)(struct FsmInst * , int  , void * ) ;

  {
  if (fi->state >= (fi->fsm)->state_count || (fi->fsm)->event_count <= event) {
    printk("<3>mISDN_FsmEvent Error st(%ld/%ld) ev(%d/%ld)\n", (long )fi->state, (long )(fi->fsm)->state_count,
           event, (long )(fi->fsm)->event_count);
    return (1);
  } else {

  }
  r = *((fi->fsm)->jumpmatrix + (unsigned long )((fi->fsm)->state_count * event + fi->state));
  if ((unsigned long )r != (unsigned long )((void (*)(struct FsmInst * , int  , void * ))0)) {
    if (fi->debug != 0) {
      (*(fi->printdebug))(fi, (char *)"State %s Event %s", *((fi->fsm)->strState + (unsigned long )fi->state),
                          *((fi->fsm)->strEvent + (unsigned long )event));
    } else {

    }
    (*r)(fi, event, arg);
    return (0);
  } else {
    if (fi->debug != 0) {
      (*(fi->printdebug))(fi, (char *)"State %s Event %s no action", *((fi->fsm)->strState + (unsigned long )fi->state),
                          *((fi->fsm)->strEvent + (unsigned long )event));
    } else {

    }
    return (1);
  }
}
}
void mISDN_FsmChangeState(struct FsmInst *fi , int newstate ) 
{ 


  {
  fi->state = newstate;
  if (fi->debug != 0) {
    (*(fi->printdebug))(fi, (char *)"ChangeState %s", *((fi->fsm)->strState + (unsigned long )newstate));
  } else {

  }
  return;
}
}
static void FsmExpireTimer(struct FsmTimer *ft ) 
{ 


  {
  mISDN_FsmEvent(ft->fi, ft->event, ft->arg);
  return;
}
}
void mISDN_FsmInitTimer(struct FsmInst *fi , struct FsmTimer *ft ) 
{ 


  {
  ft->fi = fi;
  ft->tl.function = (void (*)(unsigned long  ))(& FsmExpireTimer);
  ft->tl.data = (unsigned long )ft;
  init_timer(& ft->tl);
  return;
}
}
void mISDN_FsmDelTimer(struct FsmTimer *ft , int where ) 
{ 


  {
  del_timer(& ft->tl);
  return;
}
}
int mISDN_FsmAddTimer(struct FsmTimer *ft , int millisec , int event , void *arg ,
                      int where ) 
{ 
  int tmp ;

  {
  tmp = timer_pending((struct timer_list  const  *)(& ft->tl));
  if (tmp != 0) {
    if ((ft->fi)->debug != 0) {
      printk("<4>mISDN_FsmAddTimer: timer already active!\n");
      (*((ft->fi)->printdebug))(ft->fi, (char *)"mISDN_FsmAddTimer already active!");
    } else {

    }
    return (-1);
  } else {

  }
  init_timer(& ft->tl);
  ft->event = event;
  ft->arg = arg;
  ft->tl.expires = (unsigned long )((millisec * 250) / 1000) + (unsigned long )jiffies;
  add_timer(& ft->tl);
  return (0);
}
}
void mISDN_FsmRestartTimer(struct FsmTimer *ft , int millisec , int event , void *arg ,
                           int where ) 
{ 
  int tmp ;

  {
  tmp = timer_pending((struct timer_list  const  *)(& ft->tl));
  if (tmp != 0) {
    del_timer(& ft->tl);
  } else {

  }
  init_timer(& ft->tl);
  ft->event = event;
  ft->arg = arg;
  ft->tl.expires = (unsigned long )((millisec * 250) / 1000) + (unsigned long )jiffies;
  add_timer(& ft->tl);
  return;
}
}
void ldv___ldv_spin_lock_59(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_60(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
int ldv___ldv_spin_trylock_61(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = __ldv_spin_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
  return (tmp___0);
  return (ldv_func_res);
}
}
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
__inline static void __set_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
  __asm__  volatile   ("bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
  return;
}
}
__inline static void __clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
  __asm__  volatile   ("btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
  return;
}
}
extern void warn_on_slowpath(char const   * , int const    ) ;
extern void *__memcpy(void * , void const   * , size_t  ) ;
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
  next = n->next;
  pprev = n->pprev;
  *pprev = next;
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
    next->pprev = pprev;
  } else {

  }
  return;
}
}
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
  first = h->first;
  n->next = first;
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
    first->pprev = & n->next;
  } else {

  }
  h->first = n;
  n->pprev = & h->first;
  return;
}
}
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; incl %0": "=m" (v->counter): "m" (v->counter));
  return;
}
}
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; decl %0": "=m" (v->counter): "m" (v->counter));
  return;
}
}
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; decl %0; sete %1": "=m" (v->counter),
                       "=qm" (c): "m" (v->counter): "memory");
  return ((unsigned int )c != 0U);
}
}
extern void _write_lock_bh(rwlock_t * ) ;
extern void _write_unlock_bh(rwlock_t * ) ;
void ldv___ldv_spin_lock_65(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_68(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_69(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_72(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_74(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_76(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_78(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_80(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_83(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_84(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_88(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_90(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_91(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_66(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_70(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_71(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_73(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_75(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_77(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_79(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_81(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_82(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_86(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_87(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_89(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_92(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_93(spinlock_t *ldv_func_arg1 ) ;
int ldv___ldv_spin_trylock_67(spinlock_t *ldv_func_arg1 ) ;
int ldv___ldv_spin_trylock_85(spinlock_t *ldv_func_arg1 ) ;
extern int memcpy_fromiovec(unsigned char * , struct iovec * , int  ) ;
extern int put_cmsg(struct msghdr * , int  , int  , int  , void * ) ;
extern struct timeval ns_to_timeval(s64 const    ) ;
extern int sock_register(struct net_proto_family  const  * ) ;
extern void sock_unregister(int  ) ;
extern struct module __this_module ;
extern unsigned long copy_to_user(void * , void const   * , unsigned int  ) ;
extern unsigned long copy_from_user(void * , void const   * , unsigned int  ) ;
extern ktime_t ktime_get_real(void) ;
extern void kfree_skb(struct sk_buff * ) ;
extern struct sk_buff *__alloc_skb(unsigned int  , gfp_t  , int  , int  ) ;
__inline static struct sk_buff *alloc_skb(unsigned int size , gfp_t priority ) 
{ 
  struct sk_buff *tmp ;

  {
  tmp = __alloc_skb(size, priority, 0, -1);
  return (tmp);
}
}
extern void skb_queue_head(struct sk_buff_head * , struct sk_buff * ) ;
extern unsigned char *skb_put(struct sk_buff * , unsigned int  ) ;
extern unsigned char *skb_push(struct sk_buff * , unsigned int  ) ;
extern unsigned char *skb_pull(struct sk_buff * , unsigned int  ) ;
__inline static void skb_reserve(struct sk_buff *skb , int len ) 
{ 


  {
  skb->data = skb->data + (unsigned long )len;
  skb->tail = skb->tail + (sk_buff_data_t )len;
  return;
}
}
extern void skb_queue_purge(struct sk_buff_head * ) ;
extern struct sk_buff *skb_recv_datagram(struct sock * , unsigned int  , int  , int * ) ;
extern unsigned int datagram_poll(struct file * , struct socket * , struct poll_table_struct * ) ;
extern int skb_copy_datagram_iovec(struct sk_buff  const  * , int  , struct iovec * ,
                                   int  ) ;
extern void skb_free_datagram(struct sock * , struct sk_buff * ) ;
__inline static void skb_get_timestamp(struct sk_buff  const  *skb , struct timeval *stamp ) 
{ 


  {
  *stamp = ns_to_timeval(skb->tstamp.tv64);
  return;
}
}
__inline static void __net_timestamp(struct sk_buff *skb ) 
{ 


  {
  skb->tstamp = ktime_get_real();
  return;
}
}
__inline static int sk_unhashed(struct sock  const  *sk ) 
{ 
  int tmp ;

  {
  tmp = hlist_unhashed(& sk->__sk_common.ldv_27938.skc_node);
  return (tmp);
}
}
__inline static int sk_hashed(struct sock  const  *sk ) 
{ 
  int tmp ;

  {
  tmp = sk_unhashed(sk);
  return (tmp == 0);
}
}
__inline static void sk_node_init(struct hlist_node *node ) 
{ 


  {
  node->pprev = 0;
  return;
}
}
__inline static void __sk_del_node(struct sock *sk ) 
{ 


  {
  __hlist_del(& sk->__sk_common.ldv_27938.skc_node);
  return;
}
}
__inline static int __sk_del_node_init(struct sock *sk ) 
{ 
  int tmp ;

  {
  tmp = sk_hashed((struct sock  const  *)sk);
  if (tmp != 0) {
    __sk_del_node(sk);
    sk_node_init(& sk->__sk_common.ldv_27938.skc_node);
    return (1);
  } else {

  }
  return (0);
}
}
__inline static void sock_hold(struct sock *sk ) 
{ 


  {
  atomic_inc(& sk->__sk_common.skc_refcnt);
  return;
}
}
__inline static void __sock_put(struct sock *sk ) 
{ 


  {
  atomic_dec(& sk->__sk_common.skc_refcnt);
  return;
}
}
__inline static int sk_del_node_init(struct sock *sk ) 
{ 
  int rc ;
  int tmp ;
  int __ret_warn_on ;
  long tmp___0 ;

  {
  tmp = __sk_del_node_init(sk);
  rc = tmp;
  if (rc != 0) {
    __ret_warn_on = sk->__sk_common.skc_refcnt.counter == 1;
    tmp___0 = ldv__builtin_expect(__ret_warn_on != 0, 0L);
    if (tmp___0 != 0L) {
      warn_on_slowpath("include/net/sock.h", 394);
    } else {

    }
    ldv__builtin_expect(__ret_warn_on != 0, 0L);
    __sock_put(sk);
  } else {

  }
  return (rc);
}
}
__inline static void __sk_add_node(struct sock *sk , struct hlist_head *list ) 
{ 


  {
  hlist_add_head(& sk->__sk_common.ldv_27938.skc_node, list);
  return;
}
}
__inline static void sk_add_node(struct sock *sk , struct hlist_head *list ) 
{ 


  {
  sock_hold(sk);
  __sk_add_node(sk, list);
  return;
}
}
__inline static void sock_set_flag(struct sock *sk , enum sock_flags flag ) 
{ 


  {
  __set_bit((int )flag, (unsigned long volatile   *)(& sk->sk_flags));
  return;
}
}
__inline static void sock_reset_flag(struct sock *sk , enum sock_flags flag ) 
{ 


  {
  __clear_bit((int )flag, (unsigned long volatile   *)(& sk->sk_flags));
  return;
}
}
extern void lock_sock_nested(struct sock * , int  ) ;
__inline static void lock_sock(struct sock *sk ) 
{ 


  {
  lock_sock_nested(sk, 0);
  return;
}
}
extern void release_sock(struct sock * ) ;
extern struct sock *sk_alloc(struct net * , int  , gfp_t  , struct proto * ) ;
extern void sk_free(struct sock * ) ;
extern int sock_no_connect(struct socket * , struct sockaddr * , int  , int  ) ;
extern int sock_no_socketpair(struct socket * , struct socket * ) ;
extern int sock_no_accept(struct socket * , struct socket * , int  ) ;
extern int sock_no_getname(struct socket * , struct sockaddr * , int * , int  ) ;
extern unsigned int sock_no_poll(struct file * , struct socket * , struct poll_table_struct * ) ;
extern int sock_no_listen(struct socket * , int  ) ;
extern int sock_no_shutdown(struct socket * , int  ) ;
extern int sock_no_getsockopt(struct socket * , int  , int  , char * , int * ) ;
extern int sock_no_setsockopt(struct socket * , int  , int  , char * , int  ) ;
extern int sock_no_sendmsg(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
extern int sock_no_recvmsg(struct kiocb * , struct socket * , struct msghdr * , size_t  ,
                           int  ) ;
extern int sock_no_mmap(struct file * , struct socket * , struct vm_area_struct * ) ;
extern void sock_init_data(struct socket * , struct sock * ) ;
__inline static void sock_put(struct sock *sk ) 
{ 
  int tmp ;

  {
  tmp = atomic_dec_and_test(& sk->__sk_common.skc_refcnt);
  if (tmp != 0) {
    sk_free(sk);
  } else {

  }
  return;
}
}
__inline static void sk_set_socket(struct sock *sk , struct socket *sock ) 
{ 


  {
  sk->sk_socket = sock;
  return;
}
}
__inline static void sock_orphan(struct sock *sk ) 
{ 


  {
  _write_lock_bh(& sk->sk_callback_lock);
  sock_set_flag(sk, SOCK_DEAD);
  sk_set_socket(sk, 0);
  sk->sk_sleep = 0;
  _write_unlock_bh(& sk->sk_callback_lock);
  return;
}
}
extern int sock_queue_rcv_skb(struct sock * , struct sk_buff * ) ;
int connect_Bstack(struct mISDNdevice *dev , struct mISDNchannel *ch , u_int protocol ,
                   struct sockaddr_mISDN *adr ) ;
int connect_layer1(struct mISDNdevice *dev , struct mISDNchannel *ch , u_int protocol ,
                   struct sockaddr_mISDN *adr ) ;
int create_l2entity(struct mISDNdevice *dev , struct mISDNchannel *ch , u_int protocol ,
                    struct sockaddr_mISDN *adr ) ;
void delete_channel(struct mISDNchannel *ch ) ;
static u_int *debug___0  ;
static struct proto mISDN_proto  = 
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0U, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1144U, 0, 0, 0, 0, {0}, & __this_module, {'m', 'i', 's', 'd', 'n',
                                                          '\000'}, {0, 0}};
static struct mISDN_sock_list data_sockets  =    {{0}, {{16777216U}, 3736018669U, 4294967295U, 0xffffffffffffffffUL, {0, 0, "data_sockets.lock",
                                                                        0}}};
static struct mISDN_sock_list base_sockets  =    {{0}, {{16777216U}, 3736018669U, 4294967295U, 0xffffffffffffffffUL, {0, 0, "base_sockets.lock",
                                                                        0}}};
__inline static struct sk_buff *_l2_alloc_skb(unsigned int len , gfp_t gfp_mask ) 
{ 
  struct sk_buff *skb ;
  long tmp ;

  {
  skb = alloc_skb(len + 4U, gfp_mask);
  tmp = ldv__builtin_expect((unsigned long )skb != (unsigned long )((struct sk_buff *)0),
                         1L);
  if (tmp != 0L) {
    skb_reserve(skb, 4);
  } else {

  }
  return (skb);
}
}
static void mISDN_sock_link(struct mISDN_sock_list *l , struct sock *sk ) 
{ 


  {
  _write_lock_bh(& l->lock);
  sk_add_node(sk, & l->head);
  _write_unlock_bh(& l->lock);
  return;
}
}
static void mISDN_sock_unlink(struct mISDN_sock_list *l , struct sock *sk ) 
{ 


  {
  _write_lock_bh(& l->lock);
  sk_del_node_init(sk);
  _write_unlock_bh(& l->lock);
  return;
}
}
static int mISDN_send(struct mISDNchannel *ch , struct sk_buff *skb ) 
{ 
  struct mISDN_sock *msk ;
  int err ;
  struct mISDNchannel  const  *__mptr ;

  {
  __mptr = (struct mISDNchannel  const  *)ch;
  msk = (struct mISDN_sock *)__mptr + 0xfffffffffffffbe8UL;
  if ((*debug___0 & 4U) != 0U) {
    printk("<7>%s len %d %p\n", "mISDN_send", skb->len, skb);
  } else {

  }
  if ((unsigned int )((unsigned char )msk->sk.__sk_common.skc_state) == 3U) {
    return (-49);
  } else {

  }
  __net_timestamp(skb);
  err = sock_queue_rcv_skb(& msk->sk, skb);
  if (err != 0) {
    printk("<4>%s: error %d\n", "mISDN_send", err);
  } else {

  }
  return (err);
}
}
static int mISDN_ctrl(struct mISDNchannel *ch , u_int cmd , void *arg ) 
{ 
  struct mISDN_sock *msk ;
  struct mISDNchannel  const  *__mptr ;

  {
  __mptr = (struct mISDNchannel  const  *)ch;
  msk = (struct mISDN_sock *)__mptr + 0xfffffffffffffbe8UL;
  if ((*debug___0 & 4U) != 0U) {
    printk("<7>%s(%p, %x, %p)\n", "mISDN_ctrl", ch, cmd, arg);
  } else {

  }
  switch (cmd) {
  case (u_int )512: 
  msk->sk.__sk_common.skc_state = 3U;
  goto ldv_28936;
  }
  ldv_28936: ;
  return (0);
}
}
__inline static void mISDN_sock_cmsg(struct sock *sk , struct msghdr *msg , struct sk_buff *skb ) 
{ 
  struct timeval tv ;

  {
  if ((int )((struct mISDN_sock *)sk)->cmask & 1) {
    skb_get_timestamp((struct sk_buff  const  *)skb, & tv);
    put_cmsg(msg, 0, 1, 16, (void *)(& tv));
  } else {

  }
  return;
}
}
static int mISDN_sock_recvmsg(struct kiocb *iocb , struct socket *sock , struct msghdr *msg ,
                              size_t len , int flags ) 
{ 
  struct sk_buff *skb ;
  struct sock *sk ;
  struct sockaddr_mISDN *maddr ;
  int copied ;
  int err ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp ;
  unsigned char *tmp___0 ;

  {
  sk = sock->sk;
  if ((*debug___0 & 4U) != 0U) {
    printk("<7>%s: len %d, flags %x ch.nr %d, proto %x\n", "mISDN_sock_recvmsg", (int )len,
           flags, ((struct mISDN_sock *)sk)->ch.nr, (int )sk->sk_protocol);
  } else {

  }
  if (flags & 1) {
    return (-95);
  } else {

  }
  if ((unsigned int )((unsigned char )sk->__sk_common.skc_state) == 3U) {
    return (0);
  } else {

  }
  skb = skb_recv_datagram(sk, (unsigned int )flags, flags & 64, & err);
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
    return (err);
  } else {

  }
  if ((unsigned int )msg->msg_namelen > 5U) {
    msg->msg_namelen = 6;
    maddr = (struct sockaddr_mISDN *)msg->msg_name;
    maddr->family = 34U;
    maddr->dev = (unsigned char )(((struct mISDN_sock *)sk)->dev)->id;
    if ((unsigned int )sk->sk_protocol == 16U || (unsigned int )sk->sk_protocol == 17U) {
      maddr->channel = (unsigned char )(((struct mISDNhead *)(& skb->cb))->id >> 16);
      maddr->tei = (unsigned char )(((struct mISDNhead *)(& skb->cb))->id >> 8);
      maddr->sapi = (unsigned char )((struct mISDNhead *)(& skb->cb))->id;
    } else {
      maddr->channel = (unsigned char )((struct mISDN_sock *)sk)->ch.nr;
      maddr->sapi = (unsigned char )((struct mISDN_sock *)sk)->ch.addr;
      maddr->tei = (unsigned char )(((struct mISDN_sock *)sk)->ch.addr >> 8);
    }
  } else {
    if (msg->msg_namelen != 0) {
      printk("<4>%s: too small namelen %d\n", "mISDN_sock_recvmsg", msg->msg_namelen);
    } else {

    }
    msg->msg_namelen = 0;
  }
  copied = (int )(skb->len + 8U);
  if ((size_t )copied > len) {
    if ((flags & 2) != 0) {
      atomic_dec(& skb->users);
    } else {
      skb_queue_head(& sk->sk_receive_queue, skb);
    }
    return (-28);
  } else {

  }
  __len = 8UL;
  if (__len > 63UL) {
    tmp = skb_push(skb, 8U);
    __ret = __memcpy((void *)tmp, (void const   *)(& skb->cb), __len);
  } else {
    tmp___0 = skb_push(skb, 8U);
    __ret = __builtin_memcpy((void *)tmp___0, (void const   *)(& skb->cb), __len);
  }
  err = skb_copy_datagram_iovec((struct sk_buff  const  *)skb, 0, msg->msg_iov, copied);
  mISDN_sock_cmsg(sk, msg, skb);
  skb_free_datagram(sk, skb);
  return (err != 0 ? err : copied);
}
}
static int mISDN_sock_sendmsg(struct kiocb *iocb , struct socket *sock , struct msghdr *msg ,
                              size_t len ) 
{ 
  struct sock *sk ;
  struct sk_buff *skb ;
  int err ;
  struct sockaddr_mISDN *maddr ;
  unsigned char *tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
  sk = sock->sk;
  err = -12;
  if ((*debug___0 & 4U) != 0U) {
    printk("<7>%s: len %d flags %x ch %d proto %x\n", "mISDN_sock_sendmsg", (int )len,
           msg->msg_flags, ((struct mISDN_sock *)sk)->ch.nr, (int )sk->sk_protocol);
  } else {

  }
  if ((int )msg->msg_flags & 1) {
    return (-95);
  } else {

  }
  if ((msg->msg_flags & 4294942655U) != 0U) {
    return (-22);
  } else {

  }
  if (len <= 7UL) {
    return (-22);
  } else {

  }
  if ((unsigned int )((unsigned char )sk->__sk_common.skc_state) != 2U) {
    return (-77);
  } else {

  }
  lock_sock(sk);
  skb = _l2_alloc_skb((unsigned int )len, 208U);
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
    goto done;
  } else {

  }
  tmp = skb_put(skb, (unsigned int )len);
  tmp___0 = memcpy_fromiovec(tmp, msg->msg_iov, (int )len);
  if (tmp___0 != 0) {
    err = -14;
    goto drop;
  } else {

  }
  __len = 8UL;
  if (__len > 63UL) {
    __ret = __memcpy((void *)(& skb->cb), (void const   *)skb->data, __len);
  } else {
    __ret = __builtin_memcpy((void *)(& skb->cb), (void const   *)skb->data, __len);
  }
  skb_pull(skb, 8U);
  if ((unsigned int )msg->msg_namelen > 5U) {
    maddr = (struct sockaddr_mISDN *)msg->msg_name;
    ((struct mISDNhead *)(& skb->cb))->id = (unsigned int )maddr->channel;
  } else
  if ((unsigned int )sk->sk_protocol == 16U || (unsigned int )sk->sk_protocol == 17U) {
    ((struct mISDNhead *)(& skb->cb))->id = ((struct mISDN_sock *)sk)->ch.nr;
  } else {

  }
  if ((*debug___0 & 4U) != 0U) {
    printk("<7>%s: ID:%x\n", "mISDN_sock_sendmsg", ((struct mISDNhead *)(& skb->cb))->id);
  } else {

  }
  err = -19;
  if ((unsigned long )((struct mISDN_sock *)sk)->ch.peer == (unsigned long )((struct mISDNchannel *)0)) {
    goto drop;
  } else {
    err = (*(((struct mISDN_sock *)sk)->ch.recv))(((struct mISDN_sock *)sk)->ch.peer,
                                                  skb);
    if (err != 0) {
      goto drop;
    } else {

    }
  }
  err = (int )len;
  done: 
  release_sock(sk);
  return (err);
  drop: 
  kfree_skb(skb);
  goto done;
}
}
static int data_sock_release(struct socket *sock ) 
{ 
  struct sock *sk ;

  {
  sk = sock->sk;
  if ((*debug___0 & 4U) != 0U) {
    printk("<7>%s(%p) sk=%p\n", "data_sock_release", sock, sk);
  } else {

  }
  if ((unsigned long )sk == (unsigned long )((struct sock *)0)) {
    return (0);
  } else {

  }
  switch ((int )sk->sk_protocol) {
  case 1: ;
  case 2: ;
  case 3: ;
  case 4: ;
  if ((unsigned int )((unsigned char )sk->__sk_common.skc_state) == 2U) {
    delete_channel(& ((struct mISDN_sock *)sk)->ch);
  } else {
    mISDN_sock_unlink(& data_sockets, sk);
  }
  goto ldv_28984;
  case 16: ;
  case 17: ;
  case 33: ;
  case 34: ;
  case 35: ;
  case 36: ;
  case 37: ;
  case 38: 
  delete_channel(& ((struct mISDN_sock *)sk)->ch);
  mISDN_sock_unlink(& data_sockets, sk);
  goto ldv_28984;
  }
  ldv_28984: 
  lock_sock(sk);
  sock_orphan(sk);
  skb_queue_purge(& sk->sk_receive_queue);
  release_sock(sk);
  sock_put(sk);
  return (0);
}
}
static int data_sock_ioctl_bound(struct sock *sk , unsigned int cmd , void *p ) 
{ 
  struct mISDN_ctrl_req cq ;
  int err ;
  int val ;
  struct mISDNchannel *bchan ;
  struct mISDNchannel *next ;
  unsigned long tmp ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  unsigned long tmp___0 ;
  int __ret_gu ;
  unsigned long __val_gu ;

  {
  err = -22;
  lock_sock(sk);
  if ((unsigned long )((struct mISDN_sock *)sk)->dev == (unsigned long )((struct mISDNdevice *)0)) {
    err = -19;
    goto done;
  } else {

  }
  switch (cmd) {
  case 2147764549U: 
  tmp = copy_from_user((void *)(& cq), (void const   *)p, 16U);
  if (tmp != 0UL) {
    err = -14;
    goto ldv_29005;
  } else {

  }
  if (((int )sk->sk_protocol & -32) == 32) {
    __mptr = (struct list_head  const  *)(((struct mISDN_sock *)sk)->dev)->bchannels.next;
    bchan = (struct mISDNchannel *)__mptr;
    __mptr___0 = (struct list_head  const  *)bchan->list.next;
    next = (struct mISDNchannel *)__mptr___0;
    goto ldv_29014;
    ldv_29013: ;
    if (bchan->nr == (u_int )cq.channel) {
      err = (*(bchan->ctrl))(bchan, 768U, (void *)(& cq));
      goto ldv_29012;
    } else {

    }
    bchan = next;
    __mptr___1 = (struct list_head  const  *)next->list.next;
    next = (struct mISDNchannel *)__mptr___1;
    ldv_29014: ;
    if ((unsigned long )(& bchan->list) != (unsigned long )(& (((struct mISDN_sock *)sk)->dev)->bchannels)) {
      goto ldv_29013;
    } else {

    }
    ldv_29012: ;
  } else {
    err = (*((((struct mISDN_sock *)sk)->dev)->D.ctrl))(& (((struct mISDN_sock *)sk)->dev)->D,
                                                        768U, (void *)(& cq));
  }
  if (err != 0) {
    goto ldv_29005;
  } else {

  }
  tmp___0 = copy_to_user(p, (void const   *)(& cq), 16U);
  if (tmp___0 != 0UL) {
    err = -14;
  } else {

  }
  goto ldv_29005;
  case 2147764550U: ;
  if ((unsigned int )sk->sk_protocol != 17U) {
    err = -22;
    goto ldv_29005;
  } else {

  }
  switch (4UL) {
  case 1UL: 
  __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)p));
  goto ldv_29019;
  case 2UL: 
  __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)p));
  goto ldv_29019;
  case 4UL: 
  __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)p));
  goto ldv_29019;
  case 8UL: 
  __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)p));
  goto ldv_29019;
  default: 
  __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)p));
  goto ldv_29019;
  }
  ldv_29019: 
  val = (int )__val_gu;
  if (__ret_gu != 0) {
    err = -14;
    goto ldv_29005;
  } else {

  }
  err = (*(((((struct mISDN_sock *)sk)->dev)->teimgr)->ctrl))((((struct mISDN_sock *)sk)->dev)->teimgr,
                                                              768U, (void *)(& val));
  goto ldv_29005;
  default: 
  err = -22;
  goto ldv_29005;
  }
  ldv_29005: ;
  done: 
  release_sock(sk);
  return (err);
}
}
static int data_sock_ioctl(struct socket *sock , unsigned int cmd , unsigned long arg ) 
{ 
  int err ;
  int id ;
  struct sock *sk ;
  struct mISDNdevice *dev ;
  struct mISDNversion ver ;
  unsigned long tmp ;
  int __ret_pu ;
  int __pu_val ;
  int __ret_gu ;
  unsigned long __val_gu ;
  struct mISDN_devinfo di ;
  u_int tmp___0 ;
  size_t __len ;
  void *__ret ;
  unsigned long tmp___1 ;

  {
  err = 0;
  sk = sock->sk;
  switch (cmd) {
  case 2147764546U: 
  ver.major = 1U;
  ver.minor = 0U;
  ver.release = 19U;
  tmp = copy_to_user((void *)arg, (void const   *)(& ver), 4U);
  if (tmp != 0UL) {
    err = -14;
  } else {

  }
  goto ldv_29037;
  case 2147764547U: 
  id = get_mdevice_count();
  __pu_val = id;
  switch (4UL) {
  case 1UL: 
  __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_29042;
  case 2UL: 
  __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_29042;
  case 4UL: 
  __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_29042;
  case 8UL: 
  __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_29042;
  default: 
  __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_29042;
  }
  ldv_29042: ;
  if (__ret_pu != 0) {
    err = -14;
  } else {

  }
  goto ldv_29037;
  case 2147764548U: ;
  switch (4UL) {
  case 1UL: 
  __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
  goto ldv_29052;
  case 2UL: 
  __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
  goto ldv_29052;
  case 4UL: 
  __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
  goto ldv_29052;
  case 8UL: 
  __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
  goto ldv_29052;
  default: 
  __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
  goto ldv_29052;
  }
  ldv_29052: 
  id = (int )__val_gu;
  if (__ret_gu != 0) {
    err = -14;
    goto ldv_29037;
  } else {

  }
  dev = get_mdevice((u_int )id);
  if ((unsigned long )dev != (unsigned long )((struct mISDNdevice *)0)) {
    di.id = dev->id;
    di.Dprotocols = dev->Dprotocols;
    tmp___0 = get_all_Bprotocols();
    di.Bprotocols = dev->Bprotocols | tmp___0;
    di.protocol = dev->D.protocol;
    __len = 16UL;
    if (__len > 63UL) {
      __ret = __memcpy((void *)(& di.channelmap), (void const   *)(& dev->channelmap),
                       __len);
    } else {
      __ret = __builtin_memcpy((void *)(& di.channelmap), (void const   *)(& dev->channelmap),
                               __len);
    }
    di.nrbchan = dev->nrbchan;
    strcpy((char *)(& di.name), (char const   *)(& dev->name));
    tmp___1 = copy_to_user((void *)arg, (void const   *)(& di), 56U);
    if (tmp___1 != 0UL) {
      err = -14;
    } else {

    }
  } else {
    err = -19;
  }
  goto ldv_29037;
  default: ;
  if ((unsigned int )((unsigned char )sk->__sk_common.skc_state) == 2U) {
    err = data_sock_ioctl_bound(sk, cmd, (void *)arg);
  } else {
    err = -107;
  }
  }
  ldv_29037: ;
  return (err);
}
}
static int data_sock_setsockopt(struct socket *sock , int level , int optname , char *optval ,
                                int len ) 
{ 
  struct sock *sk ;
  int err ;
  int opt ;
  int __ret_gu ;
  unsigned long __val_gu ;

  {
  sk = sock->sk;
  err = 0;
  opt = 0;
  if ((*debug___0 & 4U) != 0U) {
    printk("<7>%s(%p, %d, %x, %p, %d)\n", "data_sock_setsockopt", sock, level, optname,
           optval, len);
  } else {

  }
  lock_sock(sk);
  switch (optname) {
  case 1: ;
  switch (4UL) {
  case 1UL: 
  __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)optval));
  goto ldv_29078;
  case 2UL: 
  __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)optval));
  goto ldv_29078;
  case 4UL: 
  __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)optval));
  goto ldv_29078;
  case 8UL: 
  __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)optval));
  goto ldv_29078;
  default: 
  __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)optval));
  goto ldv_29078;
  }
  ldv_29078: 
  opt = (int )__val_gu;
  if (__ret_gu != 0) {
    err = -14;
    goto ldv_29084;
  } else {

  }
  if (opt != 0) {
    ((struct mISDN_sock *)sk)->cmask = ((struct mISDN_sock *)sk)->cmask | 1U;
  } else {
    ((struct mISDN_sock *)sk)->cmask = ((struct mISDN_sock *)sk)->cmask & 4294967294U;
  }
  goto ldv_29084;
  default: 
  err = -92;
  goto ldv_29084;
  }
  ldv_29084: 
  release_sock(sk);
  return (err);
}
}
static int data_sock_getsockopt(struct socket *sock , int level , int optname , char *optval ,
                                int *optlen ) 
{ 
  struct sock *sk ;
  int len ;
  int opt ;
  int __ret_gu ;
  unsigned long __val_gu ;
  int __ret_pu ;
  char __pu_val ;

  {
  sk = sock->sk;
  switch (4UL) {
  case 1UL: 
  __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" (optlen));
  goto ldv_29099;
  case 2UL: 
  __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" (optlen));
  goto ldv_29099;
  case 4UL: 
  __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" (optlen));
  goto ldv_29099;
  case 8UL: 
  __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" (optlen));
  goto ldv_29099;
  default: 
  __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" (optlen));
  goto ldv_29099;
  }
  ldv_29099: 
  len = (int )__val_gu;
  if (__ret_gu != 0) {
    return (-14);
  } else {

  }
  switch (optname) {
  case 1: ;
  if ((int )((struct mISDN_sock *)sk)->cmask & 1) {
    opt = 1;
  } else {
    opt = 0;
  }
  __pu_val = (char )opt;
  switch (1UL) {
  case 1UL: 
  __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (optval): "ebx");
  goto ldv_29109;
  case 2UL: 
  __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (optval): "ebx");
  goto ldv_29109;
  case 4UL: 
  __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (optval): "ebx");
  goto ldv_29109;
  case 8UL: 
  __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (optval): "ebx");
  goto ldv_29109;
  default: 
  __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (optval): "ebx");
  goto ldv_29109;
  }
  ldv_29109: ;
  if (__ret_pu != 0) {
    return (-14);
  } else {

  }
  goto ldv_29115;
  default: ;
  return (-92);
  }
  ldv_29115: ;
  return (0);
}
}
static int data_sock_bind(struct socket *sock , struct sockaddr *addr , int addr_len ) 
{ 
  struct sockaddr_mISDN *maddr ;
  struct sock *sk ;
  int err ;

  {
  maddr = (struct sockaddr_mISDN *)addr;
  sk = sock->sk;
  err = 0;
  if ((*debug___0 & 4U) != 0U) {
    printk("<7>%s(%p) sk=%p\n", "data_sock_bind", sock, sk);
  } else {

  }
  if (addr_len != 6) {
    return (-22);
  } else {

  }
  if ((unsigned long )maddr == (unsigned long )((struct sockaddr_mISDN *)0) || (unsigned int )maddr->family != 34U) {
    return (-22);
  } else {

  }
  lock_sock(sk);
  if ((unsigned long )((struct mISDN_sock *)sk)->dev != (unsigned long )((struct mISDNdevice *)0)) {
    err = -114;
    goto done;
  } else {

  }
  ((struct mISDN_sock *)sk)->dev = get_mdevice((u_int )maddr->dev);
  if ((unsigned long )((struct mISDN_sock *)sk)->dev == (unsigned long )((struct mISDNdevice *)0)) {
    err = -19;
    goto done;
  } else {

  }
  ((struct mISDN_sock *)sk)->ch.send = & mISDN_send;
  ((struct mISDN_sock *)sk)->ch.ctrl = & mISDN_ctrl;
  switch ((int )sk->sk_protocol) {
  case 1: ;
  case 2: ;
  case 3: ;
  case 4: 
  mISDN_sock_unlink(& data_sockets, sk);
  err = connect_layer1(((struct mISDN_sock *)sk)->dev, & ((struct mISDN_sock *)sk)->ch,
                       (u_int )sk->sk_protocol, maddr);
  if (err != 0) {
    mISDN_sock_link(& data_sockets, sk);
  } else {

  }
  goto ldv_29131;
  case 16: ;
  case 17: 
  err = create_l2entity(((struct mISDN_sock *)sk)->dev, & ((struct mISDN_sock *)sk)->ch,
                        (u_int )sk->sk_protocol, maddr);
  goto ldv_29131;
  case 33: ;
  case 34: ;
  case 35: ;
  case 36: ;
  case 37: ;
  case 38: 
  err = connect_Bstack(((struct mISDN_sock *)sk)->dev, & ((struct mISDN_sock *)sk)->ch,
                       (u_int )sk->sk_protocol, maddr);
  goto ldv_29131;
  default: 
  err = -93;
  }
  ldv_29131: ;
  if (err != 0) {
    goto done;
  } else {

  }
  sk->__sk_common.skc_state = 2U;
  ((struct mISDN_sock *)sk)->ch.protocol = (u_int )sk->sk_protocol;
  done: 
  release_sock(sk);
  return (err);
}
}
static int data_sock_getname(struct socket *sock , struct sockaddr *addr , int *addr_len ,
                             int peer ) 
{ 
  struct sockaddr_mISDN *maddr ;
  struct sock *sk ;

  {
  maddr = (struct sockaddr_mISDN *)addr;
  sk = sock->sk;
  if ((unsigned long )((struct mISDN_sock *)sk)->dev == (unsigned long )((struct mISDNdevice *)0)) {
    return (-77);
  } else {

  }
  lock_sock(sk);
  *addr_len = 6;
  maddr->dev = (unsigned char )(((struct mISDN_sock *)sk)->dev)->id;
  maddr->channel = (unsigned char )((struct mISDN_sock *)sk)->ch.nr;
  maddr->sapi = (unsigned char )((struct mISDN_sock *)sk)->ch.addr;
  maddr->tei = (unsigned char )(((struct mISDN_sock *)sk)->ch.addr >> 8);
  release_sock(sk);
  return (0);
}
}
static struct proto_ops  const  data_sock_ops  = 
     {34, & __this_module, & data_sock_release, & data_sock_bind, & sock_no_connect,
    & sock_no_socketpair, & sock_no_accept, & data_sock_getname, & datagram_poll,
    & data_sock_ioctl, 0, & sock_no_listen, & sock_no_shutdown, & data_sock_setsockopt,
    & data_sock_getsockopt, 0, 0, & mISDN_sock_sendmsg, & mISDN_sock_recvmsg, & sock_no_mmap,
    0, 0};
static int data_sock_create(struct net *net , struct socket *sock , int protocol ) 
{ 
  struct sock *sk ;

  {
  if ((int )sock->type != 2) {
    return (-94);
  } else {

  }
  sk = sk_alloc(net, 34, 208U, & mISDN_proto);
  if ((unsigned long )sk == (unsigned long )((struct sock *)0)) {
    return (-12);
  } else {

  }
  sock_init_data(sock, sk);
  sock->ops = & data_sock_ops;
  sock->state = SS_UNCONNECTED;
  sock_reset_flag(sk, SOCK_ZAPPED);
  sk->sk_protocol = (unsigned char )protocol;
  sk->__sk_common.skc_state = 1U;
  mISDN_sock_link(& data_sockets, sk);
  return (0);
}
}
static int base_sock_release(struct socket *sock ) 
{ 
  struct sock *sk ;

  {
  sk = sock->sk;
  printk("<7>%s(%p) sk=%p\n", "base_sock_release", sock, sk);
  if ((unsigned long )sk == (unsigned long )((struct sock *)0)) {
    return (0);
  } else {

  }
  mISDN_sock_unlink(& base_sockets, sk);
  sock_orphan(sk);
  sock_put(sk);
  return (0);
}
}
static int base_sock_ioctl(struct socket *sock , unsigned int cmd , unsigned long arg ) 
{ 
  int err ;
  int id ;
  struct mISDNdevice *dev ;
  struct mISDNversion ver ;
  unsigned long tmp ;
  int __ret_pu ;
  int __pu_val ;
  int __ret_gu ;
  unsigned long __val_gu ;
  struct mISDN_devinfo di ;
  u_int tmp___0 ;
  size_t __len ;
  void *__ret ;
  unsigned long tmp___1 ;

  {
  err = 0;
  switch (cmd) {
  case 2147764546U: 
  ver.major = 1U;
  ver.minor = 0U;
  ver.release = 19U;
  tmp = copy_to_user((void *)arg, (void const   *)(& ver), 4U);
  if (tmp != 0UL) {
    err = -14;
  } else {

  }
  goto ldv_29171;
  case 2147764547U: 
  id = get_mdevice_count();
  __pu_val = id;
  switch (4UL) {
  case 1UL: 
  __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_29176;
  case 2UL: 
  __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_29176;
  case 4UL: 
  __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_29176;
  case 8UL: 
  __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_29176;
  default: 
  __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_29176;
  }
  ldv_29176: ;
  if (__ret_pu != 0) {
    err = -14;
  } else {

  }
  goto ldv_29171;
  case 2147764548U: ;
  switch (4UL) {
  case 1UL: 
  __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
  goto ldv_29186;
  case 2UL: 
  __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
  goto ldv_29186;
  case 4UL: 
  __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
  goto ldv_29186;
  case 8UL: 
  __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
  goto ldv_29186;
  default: 
  __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
  goto ldv_29186;
  }
  ldv_29186: 
  id = (int )__val_gu;
  if (__ret_gu != 0) {
    err = -14;
    goto ldv_29171;
  } else {

  }
  dev = get_mdevice((u_int )id);
  if ((unsigned long )dev != (unsigned long )((struct mISDNdevice *)0)) {
    di.id = dev->id;
    di.Dprotocols = dev->Dprotocols;
    tmp___0 = get_all_Bprotocols();
    di.Bprotocols = dev->Bprotocols | tmp___0;
    di.protocol = dev->D.protocol;
    __len = 16UL;
    if (__len > 63UL) {
      __ret = __memcpy((void *)(& di.channelmap), (void const   *)(& dev->channelmap),
                       __len);
    } else {
      __ret = __builtin_memcpy((void *)(& di.channelmap), (void const   *)(& dev->channelmap),
                               __len);
    }
    di.nrbchan = dev->nrbchan;
    strcpy((char *)(& di.name), (char const   *)(& dev->name));
    tmp___1 = copy_to_user((void *)arg, (void const   *)(& di), 56U);
    if (tmp___1 != 0UL) {
      err = -14;
    } else {

    }
  } else {
    err = -19;
  }
  goto ldv_29171;
  default: 
  err = -22;
  }
  ldv_29171: ;
  return (err);
}
}
static int base_sock_bind(struct socket *sock , struct sockaddr *addr , int addr_len ) 
{ 
  struct sockaddr_mISDN *maddr ;
  struct sock *sk ;
  int err ;

  {
  maddr = (struct sockaddr_mISDN *)addr;
  sk = sock->sk;
  err = 0;
  if ((unsigned long )maddr == (unsigned long )((struct sockaddr_mISDN *)0) || (unsigned int )maddr->family != 34U) {
    return (-22);
  } else {

  }
  lock_sock(sk);
  if ((unsigned long )((struct mISDN_sock *)sk)->dev != (unsigned long )((struct mISDNdevice *)0)) {
    err = -114;
    goto done;
  } else {

  }
  ((struct mISDN_sock *)sk)->dev = get_mdevice((u_int )maddr->dev);
  if ((unsigned long )((struct mISDN_sock *)sk)->dev == (unsigned long )((struct mISDNdevice *)0)) {
    err = -19;
    goto done;
  } else {

  }
  sk->__sk_common.skc_state = 2U;
  done: 
  release_sock(sk);
  return (err);
}
}
static struct proto_ops  const  base_sock_ops  = 
     {34, & __this_module, & base_sock_release, & base_sock_bind, & sock_no_connect,
    & sock_no_socketpair, & sock_no_accept, & sock_no_getname, & sock_no_poll, & base_sock_ioctl,
    0, & sock_no_listen, & sock_no_shutdown, & sock_no_setsockopt, & sock_no_getsockopt,
    0, 0, & sock_no_sendmsg, & sock_no_recvmsg, & sock_no_mmap, 0, 0};
static int base_sock_create(struct net *net , struct socket *sock , int protocol ) 
{ 
  struct sock *sk ;

  {
  if ((int )sock->type != 3) {
    return (-94);
  } else {

  }
  sk = sk_alloc(net, 34, 208U, & mISDN_proto);
  if ((unsigned long )sk == (unsigned long )((struct sock *)0)) {
    return (-12);
  } else {

  }
  sock_init_data(sock, sk);
  sock->ops = & base_sock_ops;
  sock->state = SS_UNCONNECTED;
  sock_reset_flag(sk, SOCK_ZAPPED);
  sk->sk_protocol = (unsigned char )protocol;
  sk->__sk_common.skc_state = 1U;
  mISDN_sock_link(& base_sockets, sk);
  return (0);
}
}
static int mISDN_sock_create(struct net *net , struct socket *sock , int proto ) 
{ 
  int err ;

  {
  err = -93;
  switch (proto) {
  case 0: 
  err = base_sock_create(net, sock, proto);
  goto ldv_29220;
  case 1: ;
  case 2: ;
  case 3: ;
  case 4: ;
  case 16: ;
  case 17: ;
  case 33: ;
  case 34: ;
  case 35: ;
  case 36: ;
  case 37: ;
  case 38: 
  err = data_sock_create(net, sock, proto);
  goto ldv_29220;
  default: ;
  return (err);
  }
  ldv_29220: ;
  return (err);
}
}
static struct net_proto_family mISDN_sock_family_ops  =    {34, & mISDN_sock_create, & __this_module};
int misdn_sock_init(u_int *deb ) 
{ 
  int err ;

  {
  debug___0 = deb;
  err = sock_register((struct net_proto_family  const  *)(& mISDN_sock_family_ops));
  if (err != 0) {
    printk("<3>%s: error(%d)\n", "misdn_sock_init", err);
  } else {

  }
  return (err);
}
}
void misdn_sock_cleanup(void) 
{ 


  {
  sock_unregister(34);
  return;
}
}
void ldv_main2_sequence_infinite_withcheck_stateful(void) 
{ 
  struct socket *var_group1 ;
  unsigned int var_data_sock_ioctl_10_p1 ;
  unsigned long var_data_sock_ioctl_10_p2 ;
  struct sockaddr *var_group2 ;
  int var_data_sock_bind_13_p2 ;
  int *var_data_sock_getname_14_p2 ;
  int var_data_sock_getname_14_p3 ;
  struct kiocb *var_group3 ;
  struct msghdr *var_mISDN_sock_sendmsg_7_p2 ;
  size_t var_mISDN_sock_sendmsg_7_p3 ;
  struct msghdr *var_mISDN_sock_recvmsg_6_p2 ;
  size_t var_mISDN_sock_recvmsg_6_p3 ;
  int var_mISDN_sock_recvmsg_6_p4 ;
  int var_data_sock_setsockopt_11_p1 ;
  int var_data_sock_setsockopt_11_p2 ;
  char *var_data_sock_setsockopt_11_p3 ;
  int var_data_sock_setsockopt_11_p4 ;
  int var_data_sock_getsockopt_12_p1 ;
  int var_data_sock_getsockopt_12_p2 ;
  char *var_data_sock_getsockopt_12_p3 ;
  int *var_data_sock_getsockopt_12_p4 ;
  unsigned int var_base_sock_ioctl_17_p1 ;
  unsigned long var_base_sock_ioctl_17_p2 ;
  int var_base_sock_bind_18_p2 ;
  struct net *var_group4 ;
  int var_mISDN_sock_create_20_p2 ;
  int ldv_s_data_sock_ops_proto_ops ;
  int ldv_s_base_sock_ops_proto_ops ;
  int tmp ;
  int tmp___0 ;

  {
  ldv_s_data_sock_ops_proto_ops = 0;
  ldv_s_base_sock_ops_proto_ops = 0;
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  goto ldv_29302;
  ldv_29301: 
  tmp = nondet_int();
  switch (tmp) {
  case 0: ;
  if (ldv_s_data_sock_ops_proto_ops == 0) {
    ldv_handler_precall();
    data_sock_release(var_group1);
    ldv_s_data_sock_ops_proto_ops = 0;
  } else {

  }
  goto ldv_29288;
  case 1: 
  ldv_handler_precall();
  data_sock_ioctl(var_group1, var_data_sock_ioctl_10_p1, var_data_sock_ioctl_10_p2);
  goto ldv_29288;
  case 2: 
  ldv_handler_precall();
  data_sock_bind(var_group1, var_group2, var_data_sock_bind_13_p2);
  goto ldv_29288;
  case 3: 
  ldv_handler_precall();
  data_sock_getname(var_group1, var_group2, var_data_sock_getname_14_p2, var_data_sock_getname_14_p3);
  goto ldv_29288;
  case 4: 
  ldv_handler_precall();
  mISDN_sock_sendmsg(var_group3, var_group1, var_mISDN_sock_sendmsg_7_p2, var_mISDN_sock_sendmsg_7_p3);
  goto ldv_29288;
  case 5: 
  ldv_handler_precall();
  mISDN_sock_recvmsg(var_group3, var_group1, var_mISDN_sock_recvmsg_6_p2, var_mISDN_sock_recvmsg_6_p3,
                     var_mISDN_sock_recvmsg_6_p4);
  goto ldv_29288;
  case 6: 
  ldv_handler_precall();
  data_sock_setsockopt(var_group1, var_data_sock_setsockopt_11_p1, var_data_sock_setsockopt_11_p2,
                       var_data_sock_setsockopt_11_p3, var_data_sock_setsockopt_11_p4);
  goto ldv_29288;
  case 7: 
  ldv_handler_precall();
  data_sock_getsockopt(var_group1, var_data_sock_getsockopt_12_p1, var_data_sock_getsockopt_12_p2,
                       var_data_sock_getsockopt_12_p3, var_data_sock_getsockopt_12_p4);
  goto ldv_29288;
  case 8: ;
  if (ldv_s_base_sock_ops_proto_ops == 0) {
    ldv_handler_precall();
    base_sock_release(var_group1);
    ldv_s_base_sock_ops_proto_ops = 0;
  } else {

  }
  goto ldv_29288;
  case 9: 
  ldv_handler_precall();
  base_sock_ioctl(var_group1, var_base_sock_ioctl_17_p1, var_base_sock_ioctl_17_p2);
  goto ldv_29288;
  case 10: 
  ldv_handler_precall();
  base_sock_bind(var_group1, var_group2, var_base_sock_bind_18_p2);
  goto ldv_29288;
  case 11: 
  ldv_handler_precall();
  mISDN_sock_create(var_group4, var_group1, var_mISDN_sock_create_20_p2);
  goto ldv_29288;
  default: ;
  goto ldv_29288;
  }
  ldv_29288: ;
  ldv_29302: 
  tmp___0 = nondet_int();
  if ((tmp___0 != 0 || ldv_s_data_sock_ops_proto_ops != 0) || ldv_s_base_sock_ops_proto_ops != 0) {
    goto ldv_29301;
  } else {

  }


  ldv_check_final_state();
  return;
}
}
void ldv___ldv_spin_lock_65(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_66(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
int ldv___ldv_spin_trylock_67(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = __ldv_spin_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv___ldv_spin_lock_68(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_dcache_lock();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_69(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_d_lock_of_dentry();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_70(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_d_lock_of_dentry();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_71(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_dcache_lock();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_72(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_d_lock_of_dentry();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_73(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_d_lock_of_dentry();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_74(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_i_lock_of_inode();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_75(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_i_lock_of_inode();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_76(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_d_lock_of_dentry();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_77(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_d_lock_of_dentry();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_78(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_siglock_of_sighand_struct();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_79(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_siglock_of_sighand_struct();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_80(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_alloc_lock_of_task_struct();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_81(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_alloc_lock_of_task_struct();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_82(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_siglock_of_sighand_struct();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_83(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock__xmit_lock_of_netdev_queue();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_84(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock__xmit_lock_of_netdev_queue();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
int ldv___ldv_spin_trylock_85(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___19 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = __ldv_spin_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_spin_trylock__xmit_lock_of_netdev_queue();
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv___ldv_spin_unlock_86(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock__xmit_lock_of_netdev_queue();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_87(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock__xmit_lock_of_netdev_queue();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_88(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_tx_global_lock_of_net_device();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_89(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_tx_global_lock_of_net_device();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_90(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_addr_list_lock_of_net_device();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_91(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_addr_list_lock_of_net_device();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_92(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_addr_list_lock_of_net_device();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_93(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_addr_list_lock_of_net_device();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
__inline static int constant_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 


  {
  return ((int )(*((unsigned long *)addr + (unsigned long )(nr / 64)) >> nr % 64) & 1);
}
}
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
  list->next = list;
  list->prev = list;
  return;
}
}
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
extern void __spin_lock_init(spinlock_t * , char const   * , struct lock_class_key * ) ;
void ldv___ldv_spin_lock_123(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_126(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_127(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_130(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_132(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_134(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_136(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_138(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_141(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_142(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_146(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_148(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_149(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_124(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_128(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_129(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_131(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_133(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_135(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_137(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_139(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_140(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_144(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_145(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_147(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_150(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_151(spinlock_t *ldv_func_arg1 ) ;
int ldv___ldv_spin_trylock_125(spinlock_t *ldv_func_arg1 ) ;
int ldv___ldv_spin_trylock_143(spinlock_t *ldv_func_arg1 ) ;
extern void flush_scheduled_work(void) ;
extern int schedule_work(struct work_struct * ) ;
__inline static void __skb_queue_head_init(struct sk_buff_head *list ) 
{ 
  struct sk_buff *tmp ;

  {
  tmp = (struct sk_buff *)list;
  list->next = tmp;
  list->prev = tmp;
  list->qlen = 0U;
  return;
}
}
__inline static void skb_queue_head_init(struct sk_buff_head *list ) 
{ 
  struct lock_class_key __key ;

  {
  __spin_lock_init(& list->lock, "&list->lock", & __key);
  __skb_queue_head_init(list);
  return;
}
}
extern void skb_queue_tail(struct sk_buff_head * , struct sk_buff * ) ;
extern struct sk_buff *skb_dequeue(struct sk_buff_head * ) ;
__inline static struct sk_buff *mI_alloc_skb(unsigned int len , gfp_t gfp_mask ) 
{ 
  struct sk_buff *skb ;
  long tmp ;

  {
  skb = alloc_skb(len + 8U, gfp_mask);
  tmp = ldv__builtin_expect((unsigned long )skb != (unsigned long )((struct sk_buff *)0),
                         1L);
  if (tmp != 0L) {
    skb_reserve(skb, 8);
  } else {

  }
  return (skb);
}
}
__inline static struct sk_buff *_alloc_mISDN_skb(u_int prim , u_int id , u_int len ,
                                                 void *dp , gfp_t gfp_mask ) 
{ 
  struct sk_buff *skb ;
  struct sk_buff *tmp ;
  struct mISDNhead *hh ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___1 ;

  {
  tmp = mI_alloc_skb(len, gfp_mask);
  skb = tmp;
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
    return (0);
  } else {

  }
  if (len != 0U) {
    __len = (size_t )len;
    tmp___1 = skb_put(skb, len);
    __ret = __builtin_memcpy((void *)tmp___1, (void const   *)dp, __len);
  } else {

  }
  hh = (struct mISDNhead *)(& skb->cb);
  hh->prim = prim;
  hh->id = id;
  return (skb);
}
}
__inline static void _queue_data(struct mISDNchannel *ch , u_int prim , u_int id ,
                                 u_int len , void *dp , gfp_t gfp_mask ) 
{ 
  struct sk_buff *skb ;
  int tmp ;

  {
  if ((unsigned long )ch->peer == (unsigned long )((struct mISDNchannel *)0)) {
    return;
  } else {

  }
  skb = _alloc_mISDN_skb(prim, id, len, dp, gfp_mask);
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
    return;
  } else {

  }
  tmp = (*(ch->recv))(ch->peer, skb);
  if (tmp != 0) {
    kfree_skb(skb);
  } else {

  }
  return;
}
}
int mISDN_initdchannel(struct dchannel *ch , int maxlen , void *phf ) ;
int mISDN_initbchannel(struct bchannel *ch , int maxlen ) ;
int mISDN_freedchannel(struct dchannel *ch ) ;
int mISDN_freebchannel(struct bchannel *ch ) ;
void queue_ch_frame(struct mISDNchannel *ch , u_int pr , int id , struct sk_buff *skb ) ;
int dchannel_senddata(struct dchannel *ch , struct sk_buff *skb ) ;
int bchannel_senddata(struct bchannel *ch , struct sk_buff *skb ) ;
void recv_Dchannel(struct dchannel *dch ) ;
void recv_Bchannel(struct bchannel *bch ) ;
void recv_Dchannel_skb(struct dchannel *dch , struct sk_buff *skb ) ;
void recv_Bchannel_skb(struct bchannel *bch , struct sk_buff *skb ) ;
void confirm_Bsend(struct bchannel *bch ) ;
int get_next_bframe(struct bchannel *bch ) ;
int get_next_dframe(struct dchannel *dch ) ;
static void dchannel_bh(struct work_struct *ws ) 
{ 
  struct dchannel *dch ;
  struct work_struct  const  *__mptr ;
  struct sk_buff *skb ;
  int err ;
  long tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  __mptr = (struct work_struct  const  *)ws;
  dch = (struct dchannel *)__mptr + 0xfffffffffffffb80UL;
  tmp___0 = test_and_clear_bit(30, (unsigned long volatile   *)(& dch->Flags));
  if (tmp___0 != 0) {
    goto ldv_28967;
    ldv_28966: 
    tmp = ldv__builtin_expect((unsigned long )dch->dev.D.peer != (unsigned long )((struct mISDNchannel *)0),
                           1L);
    if (tmp != 0L) {
      err = (*(dch->dev.D.recv))(dch->dev.D.peer, skb);
      if (err != 0) {
        kfree_skb(skb);
      } else {

      }
    } else {
      kfree_skb(skb);
    }
    ldv_28967: 
    skb = skb_dequeue(& dch->rqueue);
    if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
      goto ldv_28966;
    } else {

    }

  } else {

  }
  tmp___1 = test_and_clear_bit(31, (unsigned long volatile   *)(& dch->Flags));
  if (tmp___1 != 0) {
    if ((unsigned long )dch->phfunc != (unsigned long )((void (*)(struct dchannel * ))0)) {
      (*(dch->phfunc))(dch);
    } else {

    }
  } else {

  }
  return;
}
}
static void bchannel_bh(struct work_struct *ws ) 
{ 
  struct bchannel *bch ;
  struct work_struct  const  *__mptr ;
  struct sk_buff *skb ;
  int err ;
  long tmp ;
  int tmp___0 ;

  {
  __mptr = (struct work_struct  const  *)ws;
  bch = (struct bchannel *)__mptr + 0xffffffffffffffa0UL;
  tmp___0 = test_and_clear_bit(30, (unsigned long volatile   *)(& bch->Flags));
  if (tmp___0 != 0) {
    goto ldv_28978;
    ldv_28977: ;
    if (bch->rcount > 63) {
      printk("<4>B-channel %p receive queue if full, but empties...\n", bch);
    } else {

    }
    bch->rcount = bch->rcount - 1;
    tmp = ldv__builtin_expect((unsigned long )bch->ch.peer != (unsigned long )((struct mISDNchannel *)0),
                           1L);
    if (tmp != 0L) {
      err = (*(bch->ch.recv))(bch->ch.peer, skb);
      if (err != 0) {
        kfree_skb(skb);
      } else {

      }
    } else {
      kfree_skb(skb);
    }
    ldv_28978: 
    skb = skb_dequeue(& bch->rqueue);
    if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
      goto ldv_28977;
    } else {

    }

  } else {

  }
  return;
}
}
int mISDN_initdchannel(struct dchannel *ch , int maxlen , void *phf ) 
{ 
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;

  {
  test_and_set_bit(13, (unsigned long volatile   *)(& ch->Flags));
  ch->maxlen = maxlen;
  ch->hw = 0;
  ch->rx_skb = 0;
  ch->tx_skb = 0;
  ch->tx_idx = 0;
  ch->phfunc = (void (*)(struct dchannel * ))phf;
  skb_queue_head_init(& ch->squeue);
  skb_queue_head_init(& ch->rqueue);
  INIT_LIST_HEAD(& ch->dev.bchannels);
  __constr_expr_0.counter = 0L;
  ch->workq.data = __constr_expr_0;
  lockdep_init_map(& ch->workq.lockdep_map, "&ch->workq", & __key, 0);
  INIT_LIST_HEAD(& ch->workq.entry);
  ch->workq.func = & dchannel_bh;
  return (0);
}
}
int mISDN_initbchannel(struct bchannel *ch , int maxlen ) 
{ 
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;

  {
  ch->Flags = 0UL;
  ch->maxlen = maxlen;
  ch->hw = 0;
  ch->rx_skb = 0;
  ch->tx_skb = 0;
  ch->tx_idx = 0;
  skb_queue_head_init(& ch->rqueue);
  ch->rcount = 0;
  ch->next_skb = 0;
  __constr_expr_0.counter = 0L;
  ch->workq.data = __constr_expr_0;
  lockdep_init_map(& ch->workq.lockdep_map, "&ch->workq", & __key, 0);
  INIT_LIST_HEAD(& ch->workq.entry);
  ch->workq.func = & bchannel_bh;
  return (0);
}
}
int mISDN_freedchannel(struct dchannel *ch ) 
{ 


  {
  if ((unsigned long )ch->tx_skb != (unsigned long )((struct sk_buff *)0)) {
    kfree_skb(ch->tx_skb);
    ch->tx_skb = 0;
  } else {

  }
  if ((unsigned long )ch->rx_skb != (unsigned long )((struct sk_buff *)0)) {
    kfree_skb(ch->rx_skb);
    ch->rx_skb = 0;
  } else {

  }
  skb_queue_purge(& ch->squeue);
  skb_queue_purge(& ch->rqueue);
  flush_scheduled_work();
  return (0);
}
}
int mISDN_freebchannel(struct bchannel *ch ) 
{ 


  {
  if ((unsigned long )ch->tx_skb != (unsigned long )((struct sk_buff *)0)) {
    kfree_skb(ch->tx_skb);
    ch->tx_skb = 0;
  } else {

  }
  if ((unsigned long )ch->rx_skb != (unsigned long )((struct sk_buff *)0)) {
    kfree_skb(ch->rx_skb);
    ch->rx_skb = 0;
  } else {

  }
  if ((unsigned long )ch->next_skb != (unsigned long )((struct sk_buff *)0)) {
    kfree_skb(ch->next_skb);
    ch->next_skb = 0;
  } else {

  }
  skb_queue_purge(& ch->rqueue);
  ch->rcount = 0;
  flush_scheduled_work();
  return (0);
}
}
__inline static u_int get_sapi_tei(u_char *p ) 
{ 
  u_int sapi ;
  u_int tei ;

  {
  sapi = (u_int )((int )*p >> 2);
  tei = (u_int )((int )*(p + 1UL) >> 1);
  return ((tei << 8) | sapi);
}
}
void recv_Dchannel(struct dchannel *dch ) 
{ 
  struct mISDNhead *hh ;

  {
  if ((dch->rx_skb)->len <= 1U) {
    kfree_skb(dch->rx_skb);
    dch->rx_skb = 0;
    return;
  } else {

  }
  hh = (struct mISDNhead *)(& (dch->rx_skb)->cb);
  hh->prim = 8194U;
  hh->id = get_sapi_tei((dch->rx_skb)->data);
  skb_queue_tail(& dch->rqueue, dch->rx_skb);
  dch->rx_skb = 0;
  test_and_set_bit(30, (unsigned long volatile   *)(& dch->Flags));
  schedule_work(& dch->workq);
  return;
}
}
void recv_Bchannel(struct bchannel *bch ) 
{ 
  struct mISDNhead *hh ;

  {
  hh = (struct mISDNhead *)(& (bch->rx_skb)->cb);
  hh->prim = 8194U;
  hh->id = 65535U;
  if (bch->rcount > 63) {
    kfree_skb(bch->rx_skb);
    bch->rx_skb = 0;
    return;
  } else {

  }
  bch->rcount = bch->rcount + 1;
  skb_queue_tail(& bch->rqueue, bch->rx_skb);
  bch->rx_skb = 0;
  test_and_set_bit(30, (unsigned long volatile   *)(& bch->Flags));
  schedule_work(& bch->workq);
  return;
}
}
void recv_Dchannel_skb(struct dchannel *dch , struct sk_buff *skb ) 
{ 


  {
  skb_queue_tail(& dch->rqueue, skb);
  test_and_set_bit(30, (unsigned long volatile   *)(& dch->Flags));
  schedule_work(& dch->workq);
  return;
}
}
void recv_Bchannel_skb(struct bchannel *bch , struct sk_buff *skb ) 
{ 


  {
  if (bch->rcount > 63) {
    kfree_skb(skb);
    return;
  } else {

  }
  bch->rcount = bch->rcount + 1;
  skb_queue_tail(& bch->rqueue, skb);
  test_and_set_bit(30, (unsigned long volatile   *)(& bch->Flags));
  schedule_work(& bch->workq);
  return;
}
}
static void confirm_Dsend(struct dchannel *dch ) 
{ 
  struct sk_buff *skb ;

  {
  skb = _alloc_mISDN_skb(24578U, ((struct mISDNhead *)(& (dch->tx_skb)->cb))->id,
                         0U, 0, 32U);
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
    printk("<3>%s: no skb id %x\n", "confirm_Dsend", ((struct mISDNhead *)(& (dch->tx_skb)->cb))->id);
    return;
  } else {

  }
  skb_queue_tail(& dch->rqueue, skb);
  test_and_set_bit(30, (unsigned long volatile   *)(& dch->Flags));
  schedule_work(& dch->workq);
  return;
}
}
int get_next_dframe(struct dchannel *dch ) 
{ 


  {
  dch->tx_idx = 0;
  dch->tx_skb = skb_dequeue(& dch->squeue);
  if ((unsigned long )dch->tx_skb != (unsigned long )((struct sk_buff *)0)) {
    confirm_Dsend(dch);
    return (1);
  } else {

  }
  dch->tx_skb = 0;
  test_and_clear_bit(0, (unsigned long volatile   *)(& dch->Flags));
  return (0);
}
}
void confirm_Bsend(struct bchannel *bch ) 
{ 
  struct sk_buff *skb ;

  {
  if (bch->rcount > 63) {
    return;
  } else {

  }
  skb = _alloc_mISDN_skb(24578U, ((struct mISDNhead *)(& (bch->tx_skb)->cb))->id,
                         0U, 0, 32U);
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
    printk("<3>%s: no skb id %x\n", "confirm_Bsend", ((struct mISDNhead *)(& (bch->tx_skb)->cb))->id);
    return;
  } else {

  }
  bch->rcount = bch->rcount + 1;
  skb_queue_tail(& bch->rqueue, skb);
  test_and_set_bit(30, (unsigned long volatile   *)(& bch->Flags));
  schedule_work(& bch->workq);
  return;
}
}
int get_next_bframe(struct bchannel *bch ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  bch->tx_idx = 0;
  tmp___0 = constant_test_bit(1, (unsigned long const volatile   *)(& bch->Flags));
  if (tmp___0 != 0) {
    bch->tx_skb = bch->next_skb;
    if ((unsigned long )bch->tx_skb != (unsigned long )((struct sk_buff *)0)) {
      bch->next_skb = 0;
      test_and_clear_bit(1, (unsigned long volatile   *)(& bch->Flags));
      tmp = constant_test_bit(12, (unsigned long const volatile   *)(& bch->Flags));
      if (tmp == 0) {
        confirm_Bsend(bch);
      } else {

      }
      return (1);
    } else {
      test_and_clear_bit(1, (unsigned long volatile   *)(& bch->Flags));
      printk("<4>B TX_NEXT without skb\n");
    }
  } else {

  }
  bch->tx_skb = 0;
  test_and_clear_bit(0, (unsigned long volatile   *)(& bch->Flags));
  return (0);
}
}
void queue_ch_frame(struct mISDNchannel *ch , u_int pr , int id , struct sk_buff *skb ) 
{ 
  struct mISDNhead *hh ;
  int tmp ;

  {
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
    _queue_data(ch, pr, (u_int )id, 0U, 0, 32U);
  } else {
    if ((unsigned long )ch->peer != (unsigned long )((struct mISDNchannel *)0)) {
      hh = (struct mISDNhead *)(& skb->cb);
      hh->prim = pr;
      hh->id = (unsigned int )id;
      tmp = (*(ch->recv))(ch->peer, skb);
      if (tmp == 0) {
        return;
      } else {

      }
    } else {

    }
    kfree_skb(skb);
  }
  return;
}
}
int dchannel_senddata(struct dchannel *ch , struct sk_buff *skb ) 
{ 
  int tmp ;

  {
  if (skb->len == 0U) {
    printk("<4>%s: skb too small\n", "dchannel_senddata");
    return (-22);
  } else {

  }
  if (skb->len > (unsigned int )ch->maxlen) {
    printk("<4>%s: skb too large(%d/%d)\n", "dchannel_senddata", skb->len, ch->maxlen);
    return (-22);
  } else {

  }
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& ch->Flags));
  if (tmp != 0) {
    skb_queue_tail(& ch->squeue, skb);
    return (0);
  } else {
    ch->tx_skb = skb;
    ch->tx_idx = 0;
    return (1);
  }
}
}
int bchannel_senddata(struct bchannel *ch , struct sk_buff *skb ) 
{ 
  int tmp ;

  {
  if (skb->len == 0U) {
    printk("<4>%s: skb too small\n", "bchannel_senddata");
    return (-22);
  } else {

  }
  if (skb->len > (unsigned int )ch->maxlen) {
    printk("<4>%s: skb too large(%d/%d)\n", "bchannel_senddata", skb->len, ch->maxlen);
    return (-22);
  } else {

  }
  if ((unsigned long )ch->next_skb != (unsigned long )((struct sk_buff *)0)) {
    printk("<4>%s: next_skb exist ERROR (skb->len=%d next_skb->len=%d)\n", "bchannel_senddata",
           skb->len, (ch->next_skb)->len);
    return (-16);
  } else {

  }
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& ch->Flags));
  if (tmp != 0) {
    test_and_set_bit(1, (unsigned long volatile   *)(& ch->Flags));
    ch->next_skb = skb;
    return (0);
  } else {
    ch->tx_skb = skb;
    ch->tx_idx = 0;
    return (1);
  }
}
}
void ldv___ldv_spin_lock_123(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_124(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
int ldv___ldv_spin_trylock_125(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = __ldv_spin_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv___ldv_spin_lock_126(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_dcache_lock();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_127(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_d_lock_of_dentry();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_128(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_d_lock_of_dentry();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_129(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_dcache_lock();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_130(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_d_lock_of_dentry();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_131(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_d_lock_of_dentry();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_132(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_i_lock_of_inode();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_133(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_i_lock_of_inode();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_134(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_d_lock_of_dentry();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_135(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_d_lock_of_dentry();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_136(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_siglock_of_sighand_struct();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_137(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_siglock_of_sighand_struct();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_138(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_alloc_lock_of_task_struct();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_139(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_alloc_lock_of_task_struct();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_140(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_siglock_of_sighand_struct();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_141(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock__xmit_lock_of_netdev_queue();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_142(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock__xmit_lock_of_netdev_queue();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
int ldv___ldv_spin_trylock_143(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___19 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = __ldv_spin_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_spin_trylock__xmit_lock_of_netdev_queue();
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv___ldv_spin_unlock_144(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock__xmit_lock_of_netdev_queue();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_145(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock__xmit_lock_of_netdev_queue();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_146(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_tx_global_lock_of_net_device();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_147(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_tx_global_lock_of_net_device();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_148(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_addr_list_lock_of_net_device();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_149(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_addr_list_lock_of_net_device();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_150(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_addr_list_lock_of_net_device();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_151(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_addr_list_lock_of_net_device();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
  return (oldbit);
}
}
extern void *memset(void * , int  , size_t  ) ;
extern void __bad_pda_field(void) ;
extern struct x8664_pda _proxy_pda ;
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *ret__ ;

  {
  switch (8UL) {
  case 2UL: 
  __asm__  ("movw %%gs:%c1,%0": "=r" (ret__): "i" (0UL), "m" (_proxy_pda.pcurrent));
  goto ldv_4269;
  case 4UL: 
  __asm__  ("movl %%gs:%c1,%0": "=r" (ret__): "i" (0UL), "m" (_proxy_pda.pcurrent));
  goto ldv_4269;
  case 8UL: 
  __asm__  ("movq %%gs:%c1,%0": "=r" (ret__): "i" (0UL), "m" (_proxy_pda.pcurrent));
  goto ldv_4269;
  default: 
  __bad_pda_field();
  }
  ldv_4269: ;
  return (ret__);
}
}
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
  return (tmp);
}
}
__inline static int list_is_last(struct list_head  const  *list , struct list_head  const  *head ) 
{ 


  {
  return ((unsigned long )((struct list_head  const  *)list->next) == (unsigned long )head);
}
}
__inline static int hlist_empty(struct hlist_head  const  *h ) 
{ 


  {
  return ((unsigned long )h->first == (unsigned long )((struct hlist_node */* const  */)0));
}
}
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
void ldv___ldv_spin_lock_181(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_184(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_185(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_188(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_190(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_192(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_194(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_196(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_199(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_200(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_204(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_206(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_207(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_182(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_186(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_187(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_189(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_191(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_193(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_195(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_197(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_198(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_202(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_203(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_205(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_208(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_209(spinlock_t *ldv_func_arg1 ) ;
int ldv___ldv_spin_trylock_183(spinlock_t *ldv_func_arg1 ) ;
int ldv___ldv_spin_trylock_201(spinlock_t *ldv_func_arg1 ) ;
extern void init_waitqueue_head(wait_queue_head_t * ) ;
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
extern void mutex_lock_nested(struct mutex * , unsigned int  ) ;
extern void mutex_unlock(struct mutex * ) ;
__inline static void init_completion(struct completion *x ) 
{ 


  {
  x->done = 0U;
  init_waitqueue_head(& x->wait);
  return;
}
}
extern void wait_for_completion(struct completion * ) ;
extern void complete(struct completion * ) ;
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
  return ((long )ptr);
}
}
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
  tmp = ldv__builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
  return (tmp);
}
}
extern struct sk_buff *skb_copy(struct sk_buff  const  * , gfp_t  ) ;
__inline static int skb_queue_empty(struct sk_buff_head  const  *list ) 
{ 


  {
  return ((unsigned long )((struct sk_buff *)list->next) == (unsigned long )((struct sk_buff *)list));
}
}
__inline static void sigfillset(sigset_t *set ) 
{ 


  {
  switch (1) {
  default: 
  memset((void *)set, -1, 8UL);
  goto ldv_21916;
  case 2: 
  set->sig[1] = 0xffffffffffffffffUL;
  case 1: 
  set->sig[0] = 0xffffffffffffffffUL;
  goto ldv_21916;
  }
  ldv_21916: ;
  return;
}
}
extern void schedule(void) ;
extern int wake_up_process(struct task_struct * ) ;
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
  return (tmp);
}
}
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
  tmp = test_tsk_thread_flag(p, 2);
  tmp___0 = ldv__builtin_expect(tmp != 0, 0L);
  return ((int )tmp___0);
}
}
extern void lock_kernel(void) ;
extern void unlock_kernel(void) ;
void set_channel_address(struct mISDNchannel *ch , u_int sapi , u_int tei ) ;
extern struct task_struct *kthread_create(int (*)(void * ) , void * , char const   * 
                                          , ...) ;
int create_teimanager(struct mISDNdevice *dev ) ;
void delete_teimanager(struct mISDNchannel *ch ) ;
void add_layer2(struct mISDNchannel *ch , struct mISDNstack *st ) ;
void __add_layer2(struct mISDNchannel *ch , struct mISDNstack *st ) ;
static u_int *debug___1  ;
__inline static void _queue_message(struct mISDNstack *st , struct sk_buff *skb ) 
{ 
  struct mISDNhead *hh ;
  int tmp ;
  long tmp___0 ;

  {
  hh = (struct mISDNhead *)(& skb->cb);
  if ((*debug___1 & 64U) != 0U) {
    printk("<7>%s prim(%x) id(%x) %p\n", "_queue_message", hh->prim, hh->id, skb);
  } else {

  }
  skb_queue_tail(& st->msgq, skb);
  tmp = constant_test_bit(16, (unsigned long const volatile   *)(& st->status));
  tmp___0 = ldv__builtin_expect(tmp == 0, 1L);
  if (tmp___0 != 0L) {
    test_and_set_bit(0, (unsigned long volatile   *)(& st->status));
    __wake_up(& st->workq, 1U, 1, 0);
  } else {

  }
  return;
}
}
int mISDN_queue_message(struct mISDNchannel *ch , struct sk_buff *skb ) 
{ 


  {
  _queue_message(ch->st, skb);
  return (0);
}
}
static struct mISDNchannel *get_channel4id(struct mISDNstack *st , u_int id ) 
{ 
  struct mISDNchannel *ch ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
  mutex_lock_nested(& st->lmutex, 0U);
  __mptr = (struct list_head  const  *)st->layer2.next;
  ch = (struct mISDNchannel *)__mptr;
  goto ldv_28935;
  ldv_28934: ;
  if (ch->nr == id) {
    goto unlock;
  } else {

  }
  __mptr___0 = (struct list_head  const  *)ch->list.next;
  ch = (struct mISDNchannel *)__mptr___0;
  ldv_28935: 
  __builtin_prefetch((void const   *)ch->list.next);
  if ((unsigned long )(& ch->list) != (unsigned long )(& st->layer2)) {
    goto ldv_28934;
  } else {

  }
  ch = 0;
  unlock: 
  mutex_unlock(& st->lmutex);
  return (ch);
}
}
static void send_socklist(struct mISDN_sock_list *sl , struct sk_buff *skb ) 
{ 
  struct hlist_node *node ;
  struct sock *sk ;
  struct sk_buff *cskb ;
  int tmp ;
  struct hlist_node  const  *__mptr ;

  {
  cskb = 0;
  _read_lock(& sl->lock);
  node = sl->head.first;
  goto ldv_28952;
  ldv_28951: ;
  if ((unsigned int )((unsigned char )sk->__sk_common.skc_state) != 2U) {
    goto ldv_28948;
  } else {

  }
  if ((unsigned long )cskb == (unsigned long )((struct sk_buff *)0)) {
    cskb = skb_copy((struct sk_buff  const  *)skb, 208U);
  } else {

  }
  if ((unsigned long )cskb == (unsigned long )((struct sk_buff *)0)) {
    printk("<4>%s no skb\n", "send_socklist");
    goto ldv_28950;
  } else {

  }
  tmp = sock_queue_rcv_skb(sk, cskb);
  if (tmp == 0) {
    cskb = 0;
  } else {

  }
  ldv_28948: 
  node = node->next;
  ldv_28952: ;
  if ((unsigned long )node != (unsigned long )((struct hlist_node *)0)) {
    __builtin_prefetch((void const   *)node->next);
    if (1 != 0) {
      __mptr = (struct hlist_node  const  *)node;
      sk = (struct sock *)__mptr + 0xfffffffffffffff8UL;
      if (1 != 0) {
        goto ldv_28951;
      } else {
        goto ldv_28950;
      }
    } else {
      goto ldv_28950;
    }
  } else {

  }
  ldv_28950: 
  _read_unlock(& sl->lock);
  if ((unsigned long )cskb != (unsigned long )((struct sk_buff *)0)) {
    kfree_skb(cskb);
  } else {

  }
  return;
}
}
static void send_layer2(struct mISDNstack *st , struct sk_buff *skb ) 
{ 
  struct sk_buff *cskb ;
  struct mISDNhead *hh ;
  struct mISDNchannel *ch ;
  int ret ;
  struct list_head  const  *__mptr ;
  int tmp ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;

  {
  hh = (struct mISDNhead *)(& skb->cb);
  if ((unsigned long )st == (unsigned long )((struct mISDNstack *)0)) {
    return;
  } else {

  }
  mutex_lock_nested(& st->lmutex, 0U);
  if ((hh->id & 65535U) == 65535U) {
    __mptr = (struct list_head  const  *)st->layer2.next;
    ch = (struct mISDNchannel *)__mptr;
    goto ldv_28968;
    ldv_28967: 
    tmp = list_is_last((struct list_head  const  *)(& ch->list), (struct list_head  const  *)(& st->layer2));
    if (tmp != 0) {
      cskb = skb;
      skb = 0;
    } else {
      cskb = skb_copy((struct sk_buff  const  *)skb, 208U);
    }
    if ((unsigned long )cskb != (unsigned long )((struct sk_buff *)0)) {
      ret = (*(ch->send))(ch, cskb);
      if (ret != 0) {
        if ((*debug___1 & 16U) != 0U) {
          printk("<7>%s ch%d prim(%x) addr(%x) err %d\n", "send_layer2", ch->nr, hh->prim,
                 ch->addr, ret);
        } else {

        }
        kfree_skb(cskb);
      } else {

      }
    } else {
      printk("<4>%s ch%d addr %x no mem\n", "send_layer2", ch->nr, ch->addr);
      goto out;
    }
    __mptr___0 = (struct list_head  const  *)ch->list.next;
    ch = (struct mISDNchannel *)__mptr___0;
    ldv_28968: 
    __builtin_prefetch((void const   *)ch->list.next);
    if ((unsigned long )(& ch->list) != (unsigned long )(& st->layer2)) {
      goto ldv_28967;
    } else {

    }

  } else {
    __mptr___1 = (struct list_head  const  *)st->layer2.next;
    ch = (struct mISDNchannel *)__mptr___1;
    goto ldv_28975;
    ldv_28974: ;
    if ((hh->id & 65535U) == ch->addr) {
      ret = (*(ch->send))(ch, skb);
      if (ret == 0) {
        skb = 0;
      } else {

      }
      goto out;
    } else {

    }
    __mptr___2 = (struct list_head  const  *)ch->list.next;
    ch = (struct mISDNchannel *)__mptr___2;
    ldv_28975: 
    __builtin_prefetch((void const   *)ch->list.next);
    if ((unsigned long )(& ch->list) != (unsigned long )(& st->layer2)) {
      goto ldv_28974;
    } else {

    }
    ret = (*(((st->dev)->teimgr)->ctrl))((st->dev)->teimgr, 1024U, (void *)skb);
    if (ret == 0) {
      skb = 0;
    } else
    if ((*debug___1 & 16U) != 0U) {
      printk("<7>%s ch%d mgr prim(%x) addr(%x) err %d\n", "send_layer2", ch->nr, hh->prim,
             ch->addr, ret);
    } else {

    }
  }
  out: 
  mutex_unlock(& st->lmutex);
  if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
    kfree_skb(skb);
  } else {

  }
  return;
}
}
__inline static int send_msg_to_layer(struct mISDNstack *st , struct sk_buff *skb ) 
{ 
  struct mISDNhead *hh ;
  struct mISDNchannel *ch ;
  int lm ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret_warn_on ;
  long tmp___3 ;
  int tmp___4 ;

  {
  hh = (struct mISDNhead *)(& skb->cb);
  lm = (int )hh->prim & 255;
  if ((*debug___1 & 64U) != 0U) {
    printk("<7>%s prim(%x) id(%x) %p\n", "send_msg_to_layer", hh->prim, hh->id, skb);
  } else {

  }
  if (lm == 1) {
    tmp = hlist_empty((struct hlist_head  const  *)(& st->l1sock.head));
    if (tmp == 0) {
      __net_timestamp(skb);
      send_socklist(& st->l1sock, skb);
    } else {

    }
    tmp___0 = (*((st->layer1)->send))(st->layer1, skb);
    return (tmp___0);
  } else
  if (lm == 2) {
    tmp___1 = hlist_empty((struct hlist_head  const  *)(& st->l1sock.head));
    if (tmp___1 == 0) {
      send_socklist(& st->l1sock, skb);
    } else {

    }
    send_layer2(st, skb);
    return (0);
  } else
  if (lm == 4) {
    ch = get_channel4id(st, hh->id);
    if ((unsigned long )ch != (unsigned long )((struct mISDNchannel *)0)) {
      tmp___2 = (*(ch->send))(ch, skb);
      return (tmp___2);
    } else {
      printk("<4>%s: dev(%s) prim(%x) id(%x) no channel\n", "send_msg_to_layer", (char *)(& (st->dev)->name),
             hh->prim, hh->id);
    }
  } else
  if (lm == 8) {
    __ret_warn_on = lm == 8;
    tmp___3 = ldv__builtin_expect(__ret_warn_on != 0, 0L);
    if (tmp___3 != 0L) {
      warn_on_slowpath("/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/29/dscv_tempdir/dscv/ri/39_7a/drivers/isdn/mISDN/stack.c.prepared",
                       268);
    } else {

    }
    ldv__builtin_expect(__ret_warn_on != 0, 0L);
    ch = get_channel4id(st, hh->id);
    if ((unsigned long )ch != (unsigned long )((struct mISDNchannel *)0)) {
      tmp___4 = (*(ch->send))(ch, skb);
      return (tmp___4);
    } else {
      printk("<4>%s: dev(%s) prim(%x) id(%x) no channel\n", "send_msg_to_layer", (char *)(& (st->dev)->name),
             hh->prim, hh->id);
    }
  } else {
    printk("<4>%s: dev(%s) prim %x not delivered\n", "send_msg_to_layer", (char *)(& (st->dev)->name),
           hh->prim);
  }
  return (-3);
}
}
static void do_clear_stack(struct mISDNstack *st ) 
{ 


  {
  return;
}
}
static int mISDNStackd(void *data ) 
{ 
  struct mISDNstack *st ;
  int err ;
  struct task_struct *tmp ;
  struct sk_buff *skb ;
  int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___10 ;
  struct task_struct *tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;

  {
  st = (struct mISDNstack *)data;
  err = 0;
  lock_kernel();
  tmp = get_current();
  sigfillset(& tmp->blocked);
  unlock_kernel();
  if ((*debug___1 & 32U) != 0U) {
    printk("<7>mISDNStackd %s started\n", (char *)(& (st->dev)->name));
  } else {

  }
  if ((unsigned long )st->notify != (unsigned long )((struct completion *)0)) {
    complete(st->notify);
    st->notify = 0;
  } else {

  }
  ldv_29007: 
  tmp___0 = constant_test_bit(16, (unsigned long const volatile   *)(& st->status));
  tmp___1 = ldv__builtin_expect(tmp___0 != 0, 0L);
  if (tmp___1 != 0L) {
    test_and_clear_bit(0, (unsigned long volatile   *)(& st->status));
    test_and_clear_bit(30, (unsigned long volatile   *)(& st->status));
  } else {
    test_and_set_bit(30, (unsigned long volatile   *)(& st->status));
  }
  goto ldv_28996;
  ldv_28999: 
  skb = skb_dequeue(& st->msgq);
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
    test_and_clear_bit(0, (unsigned long volatile   *)(& st->status));
    skb = skb_dequeue(& st->msgq);
    if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
      goto ldv_28996;
    } else {

    }
    test_and_set_bit(0, (unsigned long volatile   *)(& st->status));
  } else {

  }
  err = send_msg_to_layer(st, skb);
  tmp___2 = ldv__builtin_expect(err != 0, 0L);
  if (tmp___2 != 0L) {
    if ((*debug___1 & 16U) != 0U) {
      printk("<7>%s: %s prim(%x) id(%x) send call(%d)\n", "mISDNStackd", (char *)(& (st->dev)->name),
             ((struct mISDNhead *)(& skb->cb))->prim, ((struct mISDNhead *)(& skb->cb))->id,
             err);
    } else {

    }
    kfree_skb(skb);
    goto ldv_28996;
  } else {

  }
  tmp___3 = constant_test_bit(16, (unsigned long const volatile   *)(& st->status));
  tmp___4 = ldv__builtin_expect(tmp___3 != 0, 0L);
  if (tmp___4 != 0L) {
    test_and_clear_bit(0, (unsigned long volatile   *)(& st->status));
    test_and_clear_bit(30, (unsigned long volatile   *)(& st->status));
    goto ldv_28998;
  } else {

  }
  ldv_28996: 
  tmp___5 = constant_test_bit(0, (unsigned long const volatile   *)(& st->status));
  if (tmp___5 != 0) {
    goto ldv_28999;
  } else {

  }
  ldv_28998: 
  tmp___6 = constant_test_bit(2, (unsigned long const volatile   *)(& st->status));
  if (tmp___6 != 0) {
    test_and_set_bit(16, (unsigned long volatile   *)(& st->status));
    test_and_clear_bit(30, (unsigned long volatile   *)(& st->status));
    do_clear_stack(st);
    test_and_clear_bit(2, (unsigned long volatile   *)(& st->status));
    test_and_set_bit(3, (unsigned long volatile   *)(& st->status));
  } else {

  }
  tmp___8 = test_and_clear_bit(3, (unsigned long volatile   *)(& st->status));
  if (tmp___8 != 0) {
    test_and_clear_bit(16, (unsigned long volatile   *)(& st->status));
    test_and_set_bit(30, (unsigned long volatile   *)(& st->status));
    tmp___7 = skb_queue_empty((struct sk_buff_head  const  *)(& st->msgq));
    if (tmp___7 == 0) {
      test_and_set_bit(0, (unsigned long volatile   *)(& st->status));
    } else {

    }
  } else {

  }
  tmp___9 = constant_test_bit(15, (unsigned long const volatile   *)(& st->status));
  if (tmp___9 != 0) {
    goto ldv_29000;
  } else {

  }
  if ((unsigned long )st->notify != (unsigned long )((struct completion *)0)) {
    complete(st->notify);
    st->notify = 0;
  } else {

  }
  test_and_clear_bit(29, (unsigned long volatile   *)(& st->status));
  __ret = 0;
  if ((st->status & 65535UL) == 0UL) {
    tmp___10 = get_current();
    __wait.flags = 0U;
    __wait.private = (void *)tmp___10;
    __wait.func = & autoremove_wake_function;
    __wait.task_list.next = & __wait.task_list;
    __wait.task_list.prev = & __wait.task_list;
    ldv_29005: 
    prepare_to_wait(& st->workq, & __wait, 1);
    if ((st->status & 65535UL) != 0UL) {
      goto ldv_29003;
    } else {

    }
    tmp___11 = get_current();
    tmp___12 = signal_pending(tmp___11);
    if (tmp___12 == 0) {
      schedule();
      goto ldv_29004;
    } else {

    }
    __ret = -512;
    goto ldv_29003;
    ldv_29004: ;
    goto ldv_29005;
    ldv_29003: 
    finish_wait(& st->workq, & __wait);
  } else {

  }
  if ((*debug___1 & 32U) != 0U) {
    printk("<7>%s: %s wake status %08lx\n", "mISDNStackd", (char *)(& (st->dev)->name),
           st->status);
  } else {

  }
  test_and_set_bit(29, (unsigned long volatile   *)(& st->status));
  test_and_clear_bit(4, (unsigned long volatile   *)(& st->status));
  tmp___13 = constant_test_bit(16, (unsigned long const volatile   *)(& st->status));
  if (tmp___13 != 0) {
    test_and_clear_bit(30, (unsigned long volatile   *)(& st->status));
  } else {

  }
  goto ldv_29007;
  ldv_29000: 
  test_and_set_bit(31, (unsigned long volatile   *)(& st->status));
  test_and_clear_bit(30, (unsigned long volatile   *)(& st->status));
  test_and_clear_bit(29, (unsigned long volatile   *)(& st->status));
  test_and_clear_bit(15, (unsigned long volatile   *)(& st->status));
  skb_queue_purge(& st->msgq);
  st->thread = 0;
  if ((unsigned long )st->notify != (unsigned long )((struct completion *)0)) {
    complete(st->notify);
    st->notify = 0;
  } else {

  }
  return (0);
}
}
static int l1_receive(struct mISDNchannel *ch , struct sk_buff *skb ) 
{ 


  {
  if ((unsigned long )ch->st == (unsigned long )((struct mISDNstack *)0)) {
    return (-19);
  } else {

  }
  __net_timestamp(skb);
  _queue_message(ch->st, skb);
  return (0);
}
}
void set_channel_address(struct mISDNchannel *ch , u_int sapi , u_int tei ) 
{ 


  {
  ch->addr = (tei << 8) | sapi;
  return;
}
}
void __add_layer2(struct mISDNchannel *ch , struct mISDNstack *st ) 
{ 


  {
  list_add_tail(& ch->list, & st->layer2);
  return;
}
}
void add_layer2(struct mISDNchannel *ch , struct mISDNstack *st ) 
{ 


  {
  mutex_lock_nested(& st->lmutex, 0U);
  __add_layer2(ch, st);
  mutex_unlock(& st->lmutex);
  return;
}
}
static int st_own_ctrl(struct mISDNchannel *ch , u_int cmd , void *arg ) 
{ 
  int tmp ;

  {
  if ((unsigned long )ch->st == (unsigned long )((struct mISDNstack *)0) || (unsigned long )(ch->st)->layer1 != (unsigned long )((struct mISDNchannel *)0)) {
    return (-22);
  } else {

  }
  tmp = (*(((ch->st)->layer1)->ctrl))((ch->st)->layer1, cmd, arg);
  return (tmp);
}
}
int create_stack(struct mISDNdevice *dev ) 
{ 
  struct mISDNstack *newst ;
  int err ;
  struct completion done ;
  void *tmp ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct task_struct *__k ;
  struct task_struct *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;

  {
  init_completion(& done);
  done = done;
  tmp = kzalloc(488UL, 208U);
  newst = (struct mISDNstack *)tmp;
  if ((unsigned long )newst == (unsigned long )((struct mISDNstack *)0)) {
    printk("<3>kmalloc mISDN_stack failed\n");
    return (-12);
  } else {

  }
  newst->dev = dev;
  INIT_LIST_HEAD(& newst->layer2);
  newst->l1sock.head.first = 0;
  __rwlock_init(& newst->l1sock.lock, "&newst->l1sock.lock", & __key);
  init_waitqueue_head(& newst->workq);
  skb_queue_head_init(& newst->msgq);
  __mutex_init(& newst->lmutex, "&newst->lmutex", & __key___0);
  dev->D.st = newst;
  err = create_teimanager(dev);
  if (err != 0) {
    printk("<3>kmalloc teimanager failed\n");
    kfree((void const   *)newst);
    return (err);
  } else {

  }
  (dev->teimgr)->peer = & newst->own;
  (dev->teimgr)->recv = & mISDN_queue_message;
  (dev->teimgr)->st = newst;
  newst->layer1 = & dev->D;
  dev->D.recv = & l1_receive;
  dev->D.peer = & newst->own;
  newst->own.st = newst;
  newst->own.ctrl = & st_own_ctrl;
  newst->own.send = & mISDN_queue_message;
  newst->own.recv = & mISDN_queue_message;
  if ((*debug___1 & 2U) != 0U) {
    printk("<7>%s: st(%s)\n", "create_stack", (char *)(& (newst->dev)->name));
  } else {

  }
  newst->notify = & done;
  tmp___0 = kthread_create(& mISDNStackd, (void *)newst, "mISDN_%s", (char *)(& (newst->dev)->name));
  __k = tmp___0;
  tmp___1 = IS_ERR((void const   *)__k);
  if (tmp___1 == 0L) {
    wake_up_process(__k);
  } else {

  }
  newst->thread = __k;
  tmp___3 = IS_ERR((void const   *)newst->thread);
  if (tmp___3 != 0L) {
    tmp___2 = PTR_ERR((void const   *)newst->thread);
    err = (int )tmp___2;
    printk("<3>mISDN:cannot create kernel thread for %s (%d)\n", (char *)(& (newst->dev)->name),
           err);
    delete_teimanager(dev->teimgr);
    kfree((void const   *)newst);
  } else {
    wait_for_completion(& done);
  }
  return (err);
}
}
int connect_layer1(struct mISDNdevice *dev , struct mISDNchannel *ch , u_int protocol ,
                   struct sockaddr_mISDN *adr ) 
{ 
  struct mISDN_sock *msk ;
  struct mISDNchannel  const  *__mptr ;
  struct channel_req rq ;
  int err ;

  {
  __mptr = (struct mISDNchannel  const  *)ch;
  msk = (struct mISDN_sock *)__mptr + 0xfffffffffffffbe8UL;
  if ((*debug___1 & 2U) != 0U) {
    printk("<7>%s: %s proto(%x) adr(%d %d %d %d)\n", "connect_layer1", (char *)(& dev->name),
           protocol, (int )adr->dev, (int )adr->channel, (int )adr->sapi, (int )adr->tei);
  } else {

  }
  switch (protocol) {
  case (u_int )2: ;
  case (u_int )4: ;
  case (u_int )1: ;
  case (u_int )3: 
  ch->recv = & mISDN_queue_message;
  ch->peer = & (dev->D.st)->own;
  ch->st = dev->D.st;
  rq.protocol = protocol;
  rq.adr.channel = 0U;
  err = (*(dev->D.ctrl))(& dev->D, 256U, (void *)(& rq));
  printk("<7>%s: ret 1 %d\n", "connect_layer1", err);
  if (err != 0) {
    return (err);
  } else {

  }
  _write_lock_bh(& (dev->D.st)->l1sock.lock);
  sk_add_node(& msk->sk, & (dev->D.st)->l1sock.head);
  _write_unlock_bh(& (dev->D.st)->l1sock.lock);
  goto ldv_29058;
  default: ;
  return (-92);
  }
  ldv_29058: ;
  return (0);
}
}
int connect_Bstack(struct mISDNdevice *dev , struct mISDNchannel *ch , u_int protocol ,
                   struct sockaddr_mISDN *adr ) 
{ 
  struct channel_req rq ;
  struct channel_req rq2 ;
  int pmask ;
  int err ;
  struct Bprotocol *bp ;

  {
  if ((*debug___1 & 2U) != 0U) {
    printk("<7>%s: %s proto(%x) adr(%d %d %d %d)\n", "connect_Bstack", (char *)(& dev->name),
           protocol, (int )adr->dev, (int )adr->channel, (int )adr->sapi, (int )adr->tei);
  } else {

  }
  ch->st = dev->D.st;
  pmask = 1 << ((int )protocol & 31);
  if ((dev->Bprotocols & (u_int )pmask) != 0U) {
    rq.protocol = protocol;
    rq.adr = *adr;
    err = (*(dev->D.ctrl))(& dev->D, 256U, (void *)(& rq));
    if (err != 0) {
      return (err);
    } else {

    }
    ch->recv = (rq.ch)->send;
    ch->peer = rq.ch;
    (rq.ch)->recv = ch->send;
    (rq.ch)->peer = ch;
    (rq.ch)->st = dev->D.st;
  } else {
    bp = get_Bprotocol4mask((u_int )pmask);
    if ((unsigned long )bp == (unsigned long )((struct Bprotocol *)0)) {
      return (-92);
    } else {

    }
    rq2.protocol = protocol;
    rq2.adr = *adr;
    rq2.ch = ch;
    err = (*(bp->create))(& rq2);
    if (err != 0) {
      return (err);
    } else {

    }
    ch->recv = (rq2.ch)->send;
    ch->peer = rq2.ch;
    (rq2.ch)->st = dev->D.st;
    rq.protocol = rq2.protocol;
    rq.adr = *adr;
    err = (*(dev->D.ctrl))(& dev->D, 256U, (void *)(& rq));
    if (err != 0) {
      (*((rq2.ch)->ctrl))(rq2.ch, 512U, 0);
      return (err);
    } else {

    }
    (rq2.ch)->recv = (rq.ch)->send;
    (rq2.ch)->peer = rq.ch;
    (rq.ch)->recv = (rq2.ch)->send;
    (rq.ch)->peer = rq2.ch;
    (rq.ch)->st = dev->D.st;
  }
  ch->protocol = protocol;
  ch->nr = (rq.ch)->nr;
  return (0);
}
}
int create_l2entity(struct mISDNdevice *dev , struct mISDNchannel *ch , u_int protocol ,
                    struct sockaddr_mISDN *adr ) 
{ 
  struct channel_req rq ;
  int err ;

  {
  if ((*debug___1 & 2U) != 0U) {
    printk("<7>%s: %s proto(%x) adr(%d %d %d %d)\n", "create_l2entity", (char *)(& dev->name),
           protocol, (int )adr->dev, (int )adr->channel, (int )adr->sapi, (int )adr->tei);
  } else {

  }
  rq.protocol = 1U;
  if ((dev->Dprotocols & 8U) != 0U) {
    rq.protocol = 3U;
  } else {

  }
  switch (protocol) {
  case (u_int )17: 
  rq.protocol = 2U;
  if ((dev->Dprotocols & 16U) != 0U) {
    rq.protocol = 4U;
  } else {

  }
  case (u_int )16: 
  ch->recv = & mISDN_queue_message;
  ch->peer = & (dev->D.st)->own;
  ch->st = dev->D.st;
  rq.adr.channel = 0U;
  err = (*(dev->D.ctrl))(& dev->D, 256U, (void *)(& rq));
  printk("<7>%s: ret 1 %d\n", "create_l2entity", err);
  if (err != 0) {
    goto ldv_29083;
  } else {

  }
  rq.protocol = protocol;
  rq.adr = *adr;
  rq.ch = ch;
  err = (*((dev->teimgr)->ctrl))(dev->teimgr, 256U, (void *)(& rq));
  printk("<7>%s: ret 2 %d\n", "create_l2entity", err);
  if (err == 0) {
    if (protocol == 17U && (unsigned long )rq.ch == (unsigned long )((struct mISDNchannel *)0)) {
      goto ldv_29083;
    } else {

    }
    add_layer2(rq.ch, dev->D.st);
    (rq.ch)->recv = & mISDN_queue_message;
    (rq.ch)->peer = & (dev->D.st)->own;
    (*((rq.ch)->ctrl))(rq.ch, 256U, 0);
  } else {

  }
  goto ldv_29083;
  default: 
  err = -93;
  }
  ldv_29083: ;
  return (err);
}
}
void delete_channel(struct mISDNchannel *ch ) 
{ 
  struct mISDN_sock *msk ;
  struct mISDNchannel  const  *__mptr ;
  struct mISDNchannel *pch ;

  {
  __mptr = (struct mISDNchannel  const  *)ch;
  msk = (struct mISDN_sock *)__mptr + 0xfffffffffffffbe8UL;
  if ((unsigned long )ch->st == (unsigned long )((struct mISDNstack *)0)) {
    printk("<4>%s: no stack\n", "delete_channel");
    return;
  } else {

  }
  if ((*debug___1 & 2U) != 0U) {
    printk("<7>%s: st(%s) protocol(%x)\n", "delete_channel", (char *)(& ((ch->st)->dev)->name),
           ch->protocol);
  } else {

  }
  if (ch->protocol > 31U) {
    if ((unsigned long )ch->peer != (unsigned long )((struct mISDNchannel *)0)) {
      (*((ch->peer)->ctrl))(ch->peer, 512U, 0);
      ch->peer = 0;
    } else {

    }
    return;
  } else {

  }
  switch (ch->protocol) {
  case (u_int )2: ;
  case (u_int )1: ;
  case (u_int )4: ;
  case (u_int )3: 
  _write_lock_bh(& (ch->st)->l1sock.lock);
  sk_del_node_init(& msk->sk);
  _write_unlock_bh(& (ch->st)->l1sock.lock);
  (*(((ch->st)->dev)->D.ctrl))(& ((ch->st)->dev)->D, 512U, 0);
  goto ldv_29097;
  case (u_int )16: 
  pch = get_channel4id(ch->st, ch->nr);
  if ((unsigned long )pch != (unsigned long )((struct mISDNchannel *)0)) {
    mutex_lock_nested(& (ch->st)->lmutex, 0U);
    list_del(& pch->list);
    mutex_unlock(& (ch->st)->lmutex);
    (*(pch->ctrl))(pch, 512U, 0);
    pch = ((ch->st)->dev)->teimgr;
    (*(pch->ctrl))(pch, 512U, 0);
  } else {
    printk("<4>%s: no l2 channel\n", "delete_channel");
  }
  goto ldv_29097;
  case (u_int )17: 
  pch = ((ch->st)->dev)->teimgr;
  if ((unsigned long )pch != (unsigned long )((struct mISDNchannel *)0)) {
    (*(pch->ctrl))(pch, 512U, 0);
  } else {
    printk("<4>%s: no l2 channel\n", "delete_channel");
  }
  goto ldv_29097;
  default: ;
  goto ldv_29097;
  }
  ldv_29097: ;
  return;
}
}
void delete_stack(struct mISDNdevice *dev ) 
{ 
  struct mISDNstack *st ;
  struct completion done ;
  int tmp ;
  int tmp___0 ;

  {
  st = dev->D.st;
  init_completion(& done);
  done = done;
  if ((*debug___1 & 2U) != 0U) {
    printk("<7>%s: st(%s)\n", "delete_stack", (char *)(& (st->dev)->name));
  } else {

  }
  if ((unsigned long )dev->teimgr != (unsigned long )((struct mISDNchannel *)0)) {
    delete_teimanager(dev->teimgr);
  } else {

  }
  if ((unsigned long )st->thread != (unsigned long )((struct task_struct *)0)) {
    if ((unsigned long )st->notify != (unsigned long )((struct completion *)0)) {
      printk("<4>%s: notifier in use\n", "delete_stack");
      complete(st->notify);
    } else {

    }
    st->notify = & done;
    test_and_set_bit(15, (unsigned long volatile   *)(& st->status));
    test_and_set_bit(4, (unsigned long volatile   *)(& st->status));
    __wake_up(& st->workq, 1U, 1, 0);
    wait_for_completion(& done);
  } else {

  }
  tmp = list_empty((struct list_head  const  *)(& st->layer2));
  if (tmp == 0) {
    printk("<4>%s: layer2 list not empty\n", "delete_stack");
  } else {

  }
  tmp___0 = hlist_empty((struct hlist_head  const  *)(& st->l1sock.head));
  if (tmp___0 == 0) {
    printk("<4>%s: layer1 list not empty\n", "delete_stack");
  } else {

  }
  kfree((void const   *)st);
  return;
}
}
void mISDN_initstack(u_int *dp ) 
{ 


  {
  debug___1 = dp;
  return;
}
}
void ldv___ldv_spin_lock_181(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_182(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
int ldv___ldv_spin_trylock_183(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = __ldv_spin_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv___ldv_spin_lock_184(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_dcache_lock();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_185(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_d_lock_of_dentry();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_186(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_d_lock_of_dentry();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_187(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_dcache_lock();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_188(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_d_lock_of_dentry();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_189(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_d_lock_of_dentry();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_190(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_i_lock_of_inode();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_191(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_i_lock_of_inode();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_192(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_d_lock_of_dentry();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_193(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_d_lock_of_dentry();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_194(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_siglock_of_sighand_struct();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_195(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_siglock_of_sighand_struct();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_196(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_alloc_lock_of_task_struct();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_197(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_alloc_lock_of_task_struct();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_198(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_siglock_of_sighand_struct();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_199(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock__xmit_lock_of_netdev_queue();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_200(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock__xmit_lock_of_netdev_queue();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
int ldv___ldv_spin_trylock_201(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___19 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = __ldv_spin_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_spin_trylock__xmit_lock_of_netdev_queue();
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv___ldv_spin_unlock_202(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock__xmit_lock_of_netdev_queue();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_203(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock__xmit_lock_of_netdev_queue();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_204(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_tx_global_lock_of_net_device();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_205(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_tx_global_lock_of_net_device();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_206(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_addr_list_lock_of_net_device();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_207(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_addr_list_lock_of_net_device();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_208(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_addr_list_lock_of_net_device();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_209(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_addr_list_lock_of_net_device();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv__builtin_va_end(__builtin_va_list  ) ;
void ldv__builtin_va_start(__builtin_va_list  ) ;
extern int vprintk(char const   * , __va_list_tag * ) ;
void ldv___ldv_spin_lock_239(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_242(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_243(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_246(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_248(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_250(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_252(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_254(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_257(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_258(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_262(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_264(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_265(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_240(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_244(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_245(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_247(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_249(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_251(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_253(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_255(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_256(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_260(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_261(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_263(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_266(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_267(spinlock_t *ldv_func_arg1 ) ;
int ldv___ldv_spin_trylock_241(spinlock_t *ldv_func_arg1 ) ;
int ldv___ldv_spin_trylock_259(spinlock_t *ldv_func_arg1 ) ;
__inline static void local_inc(local_t *l ) 
{ 


  {
  __asm__  volatile   (" incq %0": "+m" (l->a.counter));
  return;
}
}
extern unsigned int module_refcount(struct module * ) ;
__inline static void __module_get(struct module *module ) 
{ 
  unsigned int tmp ;
  long tmp___0 ;
  unsigned int ret__ ;

  {
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
    tmp = module_refcount(module);
    tmp___0 = ldv__builtin_expect(tmp == 0U, 0L);
    if (tmp___0 != 0L) {
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/module.h"),
                           "i" (394), "i" (24UL));
      ldv_10022: ;
      goto ldv_10022;
    } else {

    }
    switch (4UL) {
    case 2UL: 
    __asm__  ("movw %%gs:%c1,%0": "=r" (ret__): "i" (36UL), "m" (_proxy_pda.cpunumber));
    goto ldv_10025;
    case 4UL: 
    __asm__  ("movl %%gs:%c1,%0": "=r" (ret__): "i" (36UL), "m" (_proxy_pda.cpunumber));
    goto ldv_10025;
    case 8UL: 
    __asm__  ("movq %%gs:%c1,%0": "=r" (ret__): "i" (36UL), "m" (_proxy_pda.cpunumber));
    goto ldv_10025;
    default: 
    __bad_pda_field();
    }
    ldv_10025: 
    local_inc(& module->ref[ret__].count);
  } else {

  }
  return;
}
}
extern void module_put(struct module * ) ;
int create_l1(struct dchannel *dch , dchannel_l1callback *dcb ) ;
int l1_event(struct layer1 *l1 , u_int event ) ;
static u_int *debug___2  ;
static struct Fsm l1fsm_s  =    {0, 0, 0, 0, 0};
static char *strL1SState[7U]  = {      (char *)"ST_L1_F2",      (char *)"ST_L1_F3",      (char *)"ST_L1_F4",      (char *)"ST_L1_F5", 
        (char *)"ST_L1_F6",      (char *)"ST_L1_F7",      (char *)"ST_L1_F8"};
static char *strL1Event[12U]  = 
  {      (char *)"EV_PH_ACTIVATE",      (char *)"EV_PH_DEACTIVATE",      (char *)"EV_RESET_IND",      (char *)"EV_DEACT_CNF", 
        (char *)"EV_DEACT_IND",      (char *)"EV_POWER_UP",      (char *)"EV_ANYSIG_IND",      (char *)"EV_INFO2_IND", 
        (char *)"EV_INFO4_IND",      (char *)"EV_TIMER_DEACT",      (char *)"EV_TIMER_ACT",      (char *)"EV_TIMER3"};
static void l1m_debug(struct FsmInst *fi , char *fmt  , ...) 
{ 
  struct layer1 *l1 ;
  va_list va ;

  {
  l1 = (struct layer1 *)fi->userdata;
  ldv__builtin_va_start((__va_list_tag *)(& va));
  printk("<7>%s: ", (char *)(& (l1->dch)->dev.name));
  vprintk((char const   *)fmt, (__va_list_tag *)(& va));
  printk("\n");
  ldv__builtin_va_end((__va_list_tag *)(& va));
  return;
}
}
static void l1_reset(struct FsmInst *fi , int event , void *arg ) 
{ 


  {
  mISDN_FsmChangeState(fi, 1);
  return;
}
}
static void l1_deact_cnf(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;
  int tmp ;

  {
  l1 = (struct layer1 *)fi->userdata;
  mISDN_FsmChangeState(fi, 1);
  tmp = constant_test_bit(1, (unsigned long const volatile   *)(& l1->Flags));
  if (tmp != 0) {
    (*(l1->dcb))(l1->dch, 35586U);
  } else {

  }
  return;
}
}
static void l1_deact_req_s(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;

  {
  l1 = (struct layer1 *)fi->userdata;
  mISDN_FsmChangeState(fi, 1);
  mISDN_FsmRestartTimer(& l1->timer, 550, 9, 0, 2);
  test_and_set_bit(3, (unsigned long volatile   *)(& l1->Flags));
  return;
}
}
static void l1_power_up_s(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;
  int tmp ;

  {
  l1 = (struct layer1 *)fi->userdata;
  tmp = constant_test_bit(1, (unsigned long const volatile   *)(& l1->Flags));
  if (tmp != 0) {
    mISDN_FsmChangeState(fi, 2);
    (*(l1->dcb))(l1->dch, 33538U);
  } else {
    mISDN_FsmChangeState(fi, 1);
  }
  return;
}
}
static void l1_go_F5(struct FsmInst *fi , int event , void *arg ) 
{ 


  {
  mISDN_FsmChangeState(fi, 3);
  return;
}
}
static void l1_go_F8(struct FsmInst *fi , int event , void *arg ) 
{ 


  {
  mISDN_FsmChangeState(fi, 6);
  return;
}
}
static void l1_info2_ind(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;

  {
  l1 = (struct layer1 *)fi->userdata;
  mISDN_FsmChangeState(fi, 4);
  (*(l1->dcb))(l1->dch, 33538U);
  return;
}
}
static void l1_info4_ind(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  l1 = (struct layer1 *)fi->userdata;
  mISDN_FsmChangeState(fi, 5);
  (*(l1->dcb))(l1->dch, 33538U);
  tmp = test_and_clear_bit(3, (unsigned long volatile   *)(& l1->Flags));
  if (tmp != 0) {
    mISDN_FsmDelTimer(& l1->timer, 4);
  } else {

  }
  tmp___1 = constant_test_bit(2, (unsigned long const volatile   *)(& l1->Flags));
  if (tmp___1 == 0) {
    tmp___0 = test_and_clear_bit(5, (unsigned long volatile   *)(& l1->Flags));
    if (tmp___0 != 0) {
      mISDN_FsmDelTimer(& l1->timer, 3);
    } else {

    }
    mISDN_FsmRestartTimer(& l1->timer, 110, 10, 0, 2);
    test_and_set_bit(4, (unsigned long volatile   *)(& l1->Flags));
  } else {

  }
  return;
}
}
static void l1_timer3(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;
  int tmp ;
  int tmp___0 ;

  {
  l1 = (struct layer1 *)fi->userdata;
  test_and_clear_bit(5, (unsigned long volatile   *)(& l1->Flags));
  tmp___0 = test_and_clear_bit(1, (unsigned long volatile   *)(& l1->Flags));
  if (tmp___0 != 0) {
    tmp = test_and_clear_bit(8, (unsigned long volatile   *)(& l1->Flags));
    if (tmp != 0) {
      (*(l1->dcb))(l1->dch, 36610U);
    } else {

    }
    (*(l1->dcb))(l1->dch, 514U);
  } else {

  }
  if (l1->l1m.state != 4) {
    mISDN_FsmChangeState(fi, 1);
    (*(l1->dcb))(l1->dch, 35586U);
  } else {

  }
  return;
}
}
static void l1_timer_act(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;

  {
  l1 = (struct layer1 *)fi->userdata;
  test_and_clear_bit(4, (unsigned long volatile   *)(& l1->Flags));
  test_and_set_bit(2, (unsigned long volatile   *)(& l1->Flags));
  (*(l1->dcb))(l1->dch, 258U);
  return;
}
}
static void l1_timer_deact(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;
  int tmp ;

  {
  l1 = (struct layer1 *)fi->userdata;
  test_and_clear_bit(3, (unsigned long volatile   *)(& l1->Flags));
  test_and_clear_bit(2, (unsigned long volatile   *)(& l1->Flags));
  tmp = test_and_clear_bit(8, (unsigned long volatile   *)(& l1->Flags));
  if (tmp != 0) {
    (*(l1->dcb))(l1->dch, 36610U);
  } else {

  }
  (*(l1->dcb))(l1->dch, 514U);
  (*(l1->dcb))(l1->dch, 35842U);
  return;
}
}
static void l1_activate_s(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;

  {
  l1 = (struct layer1 *)fi->userdata;
  mISDN_FsmRestartTimer(& l1->timer, 7000, 11, 0, 2);
  test_and_set_bit(5, (unsigned long volatile   *)(& l1->Flags));
  (*(l1->dcb))(l1->dch, 35330U);
  return;
}
}
static void l1_activate_no(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  l1 = (struct layer1 *)fi->userdata;
  tmp___0 = constant_test_bit(3, (unsigned long const volatile   *)(& l1->Flags));
  if (tmp___0 == 0) {
    tmp___1 = constant_test_bit(5, (unsigned long const volatile   *)(& l1->Flags));
    if (tmp___1 == 0) {
      test_and_clear_bit(1, (unsigned long volatile   *)(& l1->Flags));
      tmp = test_and_clear_bit(8, (unsigned long volatile   *)(& l1->Flags));
      if (tmp != 0) {
        (*(l1->dcb))(l1->dch, 36610U);
      } else {

      }
      (*(l1->dcb))(l1->dch, 514U);
    } else {

    }
  } else {

  }
  return;
}
}
static struct FsmNode L1SFnList[44U]  = 
  {      {1, 0, & l1_activate_s}, 
        {4, 0, & l1_activate_no}, 
        {6, 0, & l1_activate_no}, 
        {1, 2, & l1_reset}, 
        {2, 2, & l1_reset}, 
        {3, 2, & l1_reset}, 
        {4, 2, & l1_reset}, 
        {5, 2, & l1_reset}, 
        {6, 2, & l1_reset}, 
        {1, 3, & l1_deact_cnf}, 
        {2, 3, & l1_deact_cnf}, 
        {3, 3, & l1_deact_cnf}, 
        {4, 3, & l1_deact_cnf}, 
        {5, 3, & l1_deact_cnf}, 
        {6, 3, & l1_deact_cnf}, 
        {4, 4, & l1_deact_req_s}, 
        {5, 4, & l1_deact_req_s}, 
        {6, 4, & l1_deact_req_s}, 
        {1, 5, & l1_power_up_s}, 
        {2, 6, & l1_go_F5}, 
        {4, 6, & l1_go_F8}, 
        {5, 6, & l1_go_F8}, 
        {1, 7, & l1_info2_ind}, 
        {2, 7, & l1_info2_ind}, 
        {3, 7, & l1_info2_ind}, 
        {5, 7, & l1_info2_ind}, 
        {6, 7, & l1_info2_ind}, 
        {1, 8, & l1_info4_ind}, 
        {2, 8, & l1_info4_ind}, 
        {3, 8, & l1_info4_ind}, 
        {4, 8, & l1_info4_ind}, 
        {6, 8, & l1_info4_ind}, 
        {1, 11, & l1_timer3}, 
        {2, 11, & l1_timer3}, 
        {3, 11, & l1_timer3}, 
        {4, 11, & l1_timer3}, 
        {6, 11, & l1_timer3}, 
        {5, 10, & l1_timer_act}, 
        {1, 9, & l1_timer_deact}, 
        {2, 9, & l1_timer_deact}, 
        {3, 9, & l1_timer_deact}, 
        {4, 9, & l1_timer_deact}, 
        {5, 9, & l1_timer_deact}, 
        {6, 9, & l1_timer_deact}};
static void release_l1(struct layer1 *l1 ) 
{ 


  {
  mISDN_FsmDelTimer(& l1->timer, 0);
  if ((unsigned long )l1->dch != (unsigned long )((struct dchannel *)0)) {
    (l1->dch)->l1 = 0;
  } else {

  }
  module_put(& __this_module);
  kfree((void const   *)l1);
  return;
}
}
int l1_event(struct layer1 *l1 , u_int event ) 
{ 
  int err ;
  int tmp ;

  {
  err = 0;
  if ((unsigned long )l1 == (unsigned long )((struct layer1 *)0)) {
    return (-22);
  } else {

  }
  switch (event) {
  case (u_int )36866: 
  mISDN_FsmEvent(& l1->l1m, 2, 0);
  goto ldv_29142;
  case (u_int )37378: 
  mISDN_FsmEvent(& l1->l1m, 4, 0);
  goto ldv_29142;
  case (u_int )37122: 
  mISDN_FsmEvent(& l1->l1m, 5, 0);
  goto ldv_29142;
  case (u_int )37890: 
  mISDN_FsmEvent(& l1->l1m, 3, 0);
  goto ldv_29142;
  case (u_int )34818: 
  mISDN_FsmEvent(& l1->l1m, 6, 0);
  goto ldv_29142;
  case (u_int )34562: 
  mISDN_FsmEvent(& l1->l1m, 6, 0);
  goto ldv_29142;
  case (u_int )33282: 
  mISDN_FsmEvent(& l1->l1m, 7, 0);
  goto ldv_29142;
  case (u_int )34050: 
  mISDN_FsmEvent(& l1->l1m, 8, 0);
  goto ldv_29142;
  case (u_int )34306: 
  mISDN_FsmEvent(& l1->l1m, 8, 0);
  goto ldv_29142;
  case (u_int )257: 
  tmp = constant_test_bit(2, (unsigned long const volatile   *)(& l1->Flags));
  if (tmp != 0) {
    (*(l1->dcb))(l1->dch, 258U);
  } else {
    test_and_set_bit(1, (unsigned long volatile   *)(& l1->Flags));
    mISDN_FsmEvent(& l1->l1m, 0, 0);
  }
  goto ldv_29142;
  case (u_int )512: 
  release_l1(l1);
  goto ldv_29142;
  default: ;
  if ((*debug___2 & 65280U) != 0U) {
    printk("<7>%s %x unhandled\n", "l1_event", event);
  } else {

  }
  err = -22;
  }
  ldv_29142: ;
  return (err);
}
}
int create_l1(struct dchannel *dch , dchannel_l1callback *dcb ) 
{ 
  struct layer1 *nl1 ;
  void *tmp ;

  {
  tmp = kzalloc(176UL, 32U);
  nl1 = (struct layer1 *)tmp;
  if ((unsigned long )nl1 == (unsigned long )((struct layer1 *)0)) {
    printk("<3>kmalloc struct layer1 failed\n");
    return (-12);
  } else {

  }
  nl1->l1m.fsm = & l1fsm_s;
  nl1->l1m.state = 1;
  nl1->Flags = 0UL;
  nl1->l1m.debug = (int )*debug___2 & 512;
  nl1->l1m.userdata = (void *)nl1;
  nl1->l1m.userint = 0;
  nl1->l1m.printdebug = & l1m_debug;
  nl1->dch = dch;
  nl1->dcb = dcb;
  mISDN_FsmInitTimer(& nl1->l1m, & nl1->timer);
  __module_get(& __this_module);
  dch->l1 = (void *)nl1;
  return (0);
}
}
int l1_init(u_int *deb ) 
{ 


  {
  debug___2 = deb;
  l1fsm_s.state_count = 7;
  l1fsm_s.event_count = 12;
  l1fsm_s.strEvent = (char **)(& strL1Event);
  l1fsm_s.strState = (char **)(& strL1SState);
  mISDN_FsmNew(& l1fsm_s, (struct FsmNode *)(& L1SFnList), 44);
  return (0);
}
}
void l1_cleanup(void) 
{ 


  {
  mISDN_FsmFree(& l1fsm_s);
  return;
}
}
void ldv___ldv_spin_lock_239(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_240(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
int ldv___ldv_spin_trylock_241(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = __ldv_spin_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv___ldv_spin_lock_242(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_dcache_lock();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_243(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_d_lock_of_dentry();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_244(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_d_lock_of_dentry();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_245(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_dcache_lock();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_246(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_d_lock_of_dentry();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_247(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_d_lock_of_dentry();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_248(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_i_lock_of_inode();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_249(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_i_lock_of_inode();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_250(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_d_lock_of_dentry();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_251(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_d_lock_of_dentry();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_252(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_siglock_of_sighand_struct();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_253(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_siglock_of_sighand_struct();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_254(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_alloc_lock_of_task_struct();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_255(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_alloc_lock_of_task_struct();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_256(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_siglock_of_sighand_struct();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_257(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock__xmit_lock_of_netdev_queue();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_258(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock__xmit_lock_of_netdev_queue();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
int ldv___ldv_spin_trylock_259(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___19 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = __ldv_spin_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_spin_trylock__xmit_lock_of_netdev_queue();
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv___ldv_spin_unlock_260(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock__xmit_lock_of_netdev_queue();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_261(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock__xmit_lock_of_netdev_queue();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_262(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_tx_global_lock_of_net_device();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_263(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_tx_global_lock_of_net_device();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_264(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_addr_list_lock_of_net_device();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_265(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_addr_list_lock_of_net_device();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_266(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_addr_list_lock_of_net_device();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_267(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_addr_list_lock_of_net_device();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_297(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_300(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_301(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_304(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_306(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_308(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_310(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_312(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_315(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_316(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_320(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_322(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_323(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_298(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_302(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_303(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_305(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_307(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_309(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_311(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_313(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_314(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_318(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_319(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_321(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_324(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_325(spinlock_t *ldv_func_arg1 ) ;
int ldv___ldv_spin_trylock_299(spinlock_t *ldv_func_arg1 ) ;
int ldv___ldv_spin_trylock_317(spinlock_t *ldv_func_arg1 ) ;
extern struct sk_buff *skb_clone(struct sk_buff * , gfp_t  ) ;
__inline static __u32 skb_queue_len(struct sk_buff_head  const  *list_ ) 
{ 


  {
  return ((__u32 )list_->qlen);
}
}
__inline static unsigned int skb_headroom(struct sk_buff  const  *skb ) 
{ 


  {
  return ((unsigned int )((long )skb->data) - (unsigned int )((long )skb->head));
}
}
extern void skb_trim(struct sk_buff * , unsigned int  ) ;
struct layer2 *create_l2(struct mISDNchannel *ch , u_int protocol , u_long options ,
                         u_long arg ) ;
int tei_l2(struct layer2 *l2 , u_int cmd , u_long arg ) ;
int l2_tei(struct layer2 *l2 , u_int cmd , u_long arg ) ;
void TEIrelease(struct layer2 *l2 ) ;
int TEIInit(u_int *deb ) ;
void TEIFree(void) ;
static u_int *debug___3  ;
static struct Fsm l2fsm  =    {0, 0, 0, 0, 0};
static char *strL2State[8U]  = 
  {      (char *)"ST_L2_1",      (char *)"ST_L2_2",      (char *)"ST_L2_3",      (char *)"ST_L2_4", 
        (char *)"ST_L2_5",      (char *)"ST_L2_6",      (char *)"ST_L2_7",      (char *)"ST_L2_8"};
static char *strL2Event[22U]  = 
  {      (char *)"EV_L2_UI",      (char *)"EV_L2_SABME",      (char *)"EV_L2_DISC",      (char *)"EV_L2_DM", 
        (char *)"EV_L2_UA",      (char *)"EV_L2_FRMR",      (char *)"EV_L2_SUPER",      (char *)"EV_L2_I", 
        (char *)"EV_L2_DL_DATA",      (char *)"EV_L2_ACK_PULL",      (char *)"EV_L2_DL_UNITDATA",      (char *)"EV_L2_DL_ESTABLISH_REQ", 
        (char *)"EV_L2_DL_RELEASE_REQ",      (char *)"EV_L2_MDL_ASSIGN",      (char *)"EV_L2_MDL_REMOVE",      (char *)"EV_L2_MDL_ERROR", 
        (char *)"EV_L1_DEACTIVATE",      (char *)"EV_L2_T200",      (char *)"EV_L2_T203",      (char *)"EV_L2_SET_OWN_BUSY", 
        (char *)"EV_L2_CLEAR_OWN_BUSY",      (char *)"EV_L2_FRAME_ERROR"};
static void l2m_debug(struct FsmInst *fi , char *fmt  , ...) 
{ 
  struct layer2 *l2 ;
  va_list va ;

  {
  l2 = (struct layer2 *)fi->userdata;
  if ((*debug___3 & 131072U) == 0U) {
    return;
  } else {

  }
  ldv__builtin_va_start((__va_list_tag *)(& va));
  printk("<7>l2 (tei %d): ", (int )l2->tei);
  vprintk((char const   *)fmt, (__va_list_tag *)(& va));
  printk("\n");
  ldv__builtin_va_end((__va_list_tag *)(& va));
  return;
}
}
__inline u_int l2headersize(struct layer2 *l2 , int ui ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  tmp = constant_test_bit(3, (unsigned long const volatile   *)(& l2->flag));
  tmp___0 = constant_test_bit(1, (unsigned long const volatile   *)(& l2->flag));
  return ((u_int )((tmp != 0 && ui == 0 ? 2 : 1) + (tmp___0 != 0 ? 2 : 1)));
}
}
__inline u_int l2addrsize(struct layer2 *l2 ) 
{ 
  int tmp ;

  {
  tmp = constant_test_bit(1, (unsigned long const volatile   *)(& l2->flag));
  return (tmp != 0 ? 2U : 1U);
}
}
static u_int l2_newid(struct layer2 *l2 ) 
{ 
  u_int id ;
  u_int tmp ;

  {
  tmp = l2->next_id;
  l2->next_id = l2->next_id + (u_int )1;
  id = tmp;
  if (id == 32767U) {
    l2->next_id = 1U;
  } else {

  }
  id = id << 16;
  id = (u_int )((int )l2->tei << 8) | id;
  id = (u_int )l2->sapi | id;
  return (id);
}
}
static void l2up(struct layer2 *l2 , u_int prim , struct sk_buff *skb ) 
{ 
  int err ;

  {
  if ((unsigned long )l2->up == (unsigned long )((struct mISDNchannel *)0)) {
    return;
  } else {

  }
  ((struct mISDNhead *)(& skb->cb))->prim = prim;
  ((struct mISDNhead *)(& skb->cb))->id = (l2->ch.nr << 16) | l2->ch.addr;
  err = (*((l2->up)->send))(l2->up, skb);
  if (err != 0) {
    printk("<4>%s: err=%d\n", "l2up", err);
    kfree_skb(skb);
  } else {

  }
  return;
}
}
static void l2up_create(struct layer2 *l2 , u_int prim , int len , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct mISDNhead *hh ;
  int err ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___0 ;

  {
  if ((unsigned long )l2->up == (unsigned long )((struct mISDNchannel *)0)) {
    return;
  } else {

  }
  skb = mI_alloc_skb((unsigned int )len, 32U);
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
    return;
  } else {

  }
  hh = (struct mISDNhead *)(& skb->cb);
  hh->prim = prim;
  hh->id = (l2->ch.nr << 16) | l2->ch.addr;
  if (len != 0) {
    __len = (size_t )len;
    tmp___0 = skb_put(skb, (unsigned int )len);
    __ret = __builtin_memcpy((void *)tmp___0, (void const   *)arg, __len);
  } else {

  }
  err = (*((l2->up)->send))(l2->up, skb);
  if (err != 0) {
    printk("<4>%s: err=%d\n", "l2up_create", err);
    kfree_skb(skb);
  } else {

  }
  return;
}
}
static int l2down_skb(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  int ret ;

  {
  ret = (*(l2->ch.recv))(l2->ch.peer, skb);
  if (ret != 0 && (*debug___3 & 524288U) != 0U) {
    printk("<7>l2down_skb: ret(%d)\n", ret);
  } else {

  }
  return (ret);
}
}
static int l2down_raw(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  struct mISDNhead *hh ;
  int tmp ;
  int tmp___0 ;

  {
  hh = (struct mISDNhead *)(& skb->cb);
  if (hh->prim == 8193U) {
    tmp = test_and_set_bit(17, (unsigned long volatile   *)(& l2->flag));
    if (tmp != 0) {
      skb_queue_tail(& l2->down_queue, skb);
      return (0);
    } else {

    }
    l2->down_id = ((struct mISDNhead *)(& skb->cb))->id;
  } else {

  }
  tmp___0 = l2down_skb(l2, skb);
  return (tmp___0);
}
}
static int l2down(struct layer2 *l2 , u_int prim , u_int id , struct sk_buff *skb ) 
{ 
  struct mISDNhead *hh ;
  int tmp ;

  {
  hh = (struct mISDNhead *)(& skb->cb);
  hh->prim = prim;
  hh->id = id;
  tmp = l2down_raw(l2, skb);
  return (tmp);
}
}
static int l2down_create(struct layer2 *l2 , u_int prim , u_int id , int len , void *arg ) 
{ 
  struct sk_buff *skb ;
  int err ;
  struct mISDNhead *hh ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___0 ;

  {
  skb = mI_alloc_skb((unsigned int )len, 32U);
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
    return (-12);
  } else {

  }
  hh = (struct mISDNhead *)(& skb->cb);
  hh->prim = prim;
  hh->id = id;
  if (len != 0) {
    __len = (size_t )len;
    tmp___0 = skb_put(skb, (unsigned int )len);
    __ret = __builtin_memcpy((void *)tmp___0, (void const   *)arg, __len);
  } else {

  }
  err = l2down_raw(l2, skb);
  if (err != 0) {
    kfree_skb(skb);
  } else {

  }
  return (err);
}
}
static int ph_data_confirm(struct layer2 *l2 , struct mISDNhead *hh , struct sk_buff *skb ) 
{ 
  struct sk_buff *nskb ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  nskb = skb;
  ret = -11;
  tmp___0 = constant_test_bit(17, (unsigned long const volatile   *)(& l2->flag));
  if (tmp___0 != 0) {
    if (hh->id == l2->down_id) {
      nskb = skb_dequeue(& l2->down_queue);
      if ((unsigned long )nskb != (unsigned long )((struct sk_buff *)0)) {
        l2->down_id = ((struct mISDNhead *)(& nskb->cb))->id;
        tmp = l2down_skb(l2, nskb);
        if (tmp != 0) {
          kfree_skb(nskb);
          l2->down_id = 65534U;
        } else {

        }
      } else {
        l2->down_id = 65534U;
      }
      if (ret != 0) {
        kfree_skb(skb);
        ret = 0;
      } else {

      }
      if (l2->down_id == 65534U) {
        test_and_clear_bit(17, (unsigned long volatile   *)(& l2->flag));
        mISDN_FsmEvent(& l2->l2m, 9, 0);
      } else {

      }
    } else {

    }
  } else {

  }
  tmp___2 = test_and_set_bit(17, (unsigned long volatile   *)(& l2->flag));
  if (tmp___2 == 0) {
    nskb = skb_dequeue(& l2->down_queue);
    if ((unsigned long )nskb != (unsigned long )((struct sk_buff *)0)) {
      l2->down_id = ((struct mISDNhead *)(& nskb->cb))->id;
      tmp___1 = l2down_skb(l2, nskb);
      if (tmp___1 != 0) {
        kfree_skb(nskb);
        l2->down_id = 65534U;
        test_and_clear_bit(17, (unsigned long volatile   *)(& l2->flag));
      } else {

      }
    } else {
      test_and_clear_bit(17, (unsigned long volatile   *)(& l2->flag));
    }
  } else {

  }
  return (ret);
}
}
static int l2mgr(struct layer2 *l2 , u_int prim , void *arg ) 
{ 
  long c ;
  int tmp ;
  int tmp___0 ;

  {
  c = (long )arg;
  printk("<4>l2mgr: addr:%x prim %x %c\n", l2->id, prim, (int )((char )c));
  tmp = constant_test_bit(1, (unsigned long const volatile   *)(& l2->flag));
  if (tmp != 0) {
    tmp___0 = constant_test_bit(15, (unsigned long const volatile   *)(& l2->flag));
    if (tmp___0 == 0) {
      switch (c) {
      case 67L: ;
      case 68L: ;
      case 71L: ;
      case 72L: 
      l2_tei(l2, prim, (unsigned long )arg);
      goto ldv_29094;
      }
      ldv_29094: ;
    } else {

    }
  } else {

  }
  return (0);
}
}
static void set_peer_busy(struct layer2 *l2 ) 
{ 
  __u32 tmp ;
  __u32 tmp___0 ;

  {
  test_and_set_bit(10, (unsigned long volatile   *)(& l2->flag));
  tmp = skb_queue_len((struct sk_buff_head  const  *)(& l2->i_queue));
  if (tmp != 0U) {
    test_and_set_bit(16, (unsigned long volatile   *)(& l2->flag));
  } else {
    tmp___0 = skb_queue_len((struct sk_buff_head  const  *)(& l2->ui_queue));
    if (tmp___0 != 0U) {
      test_and_set_bit(16, (unsigned long volatile   *)(& l2->flag));
    } else {

    }
  }
  return;
}
}
static void clear_peer_busy(struct layer2 *l2 ) 
{ 
  int tmp ;

  {
  tmp = test_and_clear_bit(10, (unsigned long volatile   *)(& l2->flag));
  if (tmp != 0) {
    test_and_clear_bit(16, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
  return;
}
}
static void InitWin(struct layer2 *l2 ) 
{ 
  int i ;

  {
  i = 0;
  goto ldv_29106;
  ldv_29105: 
  l2->windowar[i] = 0;
  i = i + 1;
  ldv_29106: ;
  if (i <= 7) {
    goto ldv_29105;
  } else {

  }

  return;
}
}
static int freewin(struct layer2 *l2 ) 
{ 
  int i ;
  int cnt ;

  {
  cnt = 0;
  i = 0;
  goto ldv_29114;
  ldv_29113: ;
  if ((unsigned long )l2->windowar[i] != (unsigned long )((struct sk_buff *)0)) {
    cnt = cnt + 1;
    kfree_skb(l2->windowar[i]);
    l2->windowar[i] = 0;
  } else {

  }
  i = i + 1;
  ldv_29114: ;
  if (i <= 7) {
    goto ldv_29113;
  } else {

  }

  return (cnt);
}
}
static void ReleaseWin(struct layer2 *l2 ) 
{ 
  int cnt ;
  int tmp ;

  {
  tmp = freewin(l2);
  cnt = tmp;
  if (cnt != 0) {
    printk("<4>isdnl2 freed %d skbuffs in release\n", cnt);
  } else {

  }
  return;
}
}
__inline unsigned int cansend(struct layer2 *l2 ) 
{ 
  unsigned int p1 ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  tmp = constant_test_bit(3, (unsigned long const volatile   *)(& l2->flag));
  if (tmp != 0) {
    p1 = (l2->vs - l2->va) & 127U;
  } else {
    p1 = (l2->vs - l2->va) & 7U;
  }
  if (l2->window > p1) {
    tmp___0 = constant_test_bit(10, (unsigned long const volatile   *)(& l2->flag));
    if (tmp___0 == 0) {
      tmp___1 = 1;
    } else {
      tmp___1 = 0;
    }
  } else {
    tmp___1 = 0;
  }
  return ((unsigned int )tmp___1);
}
}
__inline void clear_exception(struct layer2 *l2 ) 
{ 


  {
  test_and_clear_bit(7, (unsigned long volatile   *)(& l2->flag));
  test_and_clear_bit(8, (unsigned long volatile   *)(& l2->flag));
  test_and_clear_bit(9, (unsigned long volatile   *)(& l2->flag));
  clear_peer_busy(l2);
  return;
}
}
static int sethdraddr(struct layer2 *l2 , u_char *header , int rsp ) 
{ 
  u_char *ptr ;
  int crbit ;
  int tmp ;
  u_char *tmp___0 ;
  u_char *tmp___1 ;
  int tmp___2 ;
  u_char *tmp___3 ;
  u_char *tmp___4 ;
  int tmp___5 ;

  {
  ptr = header;
  crbit = rsp;
  tmp___5 = constant_test_bit(1, (unsigned long const volatile   *)(& l2->flag));
  if (tmp___5 != 0) {
    tmp = constant_test_bit(18, (unsigned long const volatile   *)(& l2->flag));
    if (tmp != 0) {
      crbit = crbit == 0;
    } else {

    }
    tmp___0 = ptr;
    ptr = ptr + 1;
    *tmp___0 = (u_char )((int )((signed char )((int )l2->sapi << 2)) | (crbit != 0 ? 2 : 0));
    tmp___1 = ptr;
    ptr = ptr + 1;
    *tmp___1 = (u_char )((int )((signed char )((int )l2->tei << 1)) | 1);
    return (2);
  } else {
    tmp___2 = constant_test_bit(2, (unsigned long const volatile   *)(& l2->flag));
    if (tmp___2 != 0) {
      crbit = crbit == 0;
    } else {

    }
    if (crbit != 0) {
      tmp___3 = ptr;
      ptr = ptr + 1;
      *tmp___3 = l2->addr.B;
    } else {
      tmp___4 = ptr;
      ptr = ptr + 1;
      *tmp___4 = l2->addr.A;
    }
    return (1);
  }
}
}
__inline static void enqueue_super(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  u_int tmp ;
  int tmp___0 ;

  {
  tmp = l2_newid(l2);
  tmp___0 = l2down(l2, 8193U, tmp, skb);
  if (tmp___0 != 0) {
    kfree_skb(skb);
  } else {

  }
  return;
}
}
__inline static void enqueue_ui(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  u_int tmp ;
  int tmp___0 ;

  {
  if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
    l2_tei(l2, 7684U, 0UL);
  } else {

  }
  tmp = l2_newid(l2);
  tmp___0 = l2down(l2, 8193U, tmp, skb);
  if (tmp___0 != 0) {
    kfree_skb(skb);
  } else {

  }
  return;
}
}
__inline int IsUI(u_char *data ) 
{ 


  {
  return (((int )*data & 239) == 3);
}
}
__inline int IsUA(u_char *data ) 
{ 


  {
  return (((int )*data & 239) == 99);
}
}
__inline int IsDM(u_char *data ) 
{ 


  {
  return (((int )*data & 239) == 15);
}
}
__inline int IsDISC(u_char *data ) 
{ 


  {
  return (((int )*data & 239) == 67);
}
}
__inline int IsSFrame(u_char *data , struct layer2 *l2 ) 
{ 
  register u_char d ;
  int tmp ;

  {
  d = *data;
  tmp = constant_test_bit(3, (unsigned long const volatile   *)(& l2->flag));
  if (tmp == 0) {
    d = (unsigned int )d & 15U;
  } else {

  }
  return (((int )d & 243) == 1 && ((int )d & 12) != 12);
}
}
__inline int IsSABME(u_char *data , struct layer2 *l2 ) 
{ 
  u_char d ;
  int tmp ;

  {
  d = (unsigned int )*data & 239U;
  tmp = constant_test_bit(3, (unsigned long const volatile   *)(& l2->flag));
  return (tmp != 0 ? (unsigned int )d == 111U : (unsigned int )d == 47U);
}
}
__inline int IsREJ(u_char *data , struct layer2 *l2 ) 
{ 
  int tmp ;

  {
  tmp = constant_test_bit(3, (unsigned long const volatile   *)(& l2->flag));
  return (tmp != 0 ? (unsigned int )*data == 9U : ((int )*data & 15) == 9);
}
}
__inline int IsFRMR(u_char *data ) 
{ 


  {
  return (((int )*data & 239) == 135);
}
}
__inline int IsRNR(u_char *data , struct layer2 *l2 ) 
{ 
  int tmp ;

  {
  tmp = constant_test_bit(3, (unsigned long const volatile   *)(& l2->flag));
  return (tmp != 0 ? (unsigned int )*data == 5U : ((int )*data & 15) == 5);
}
}
int iframe_error(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  u_int i ;
  int rsp ;
  u_int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  rsp = (int )*(skb->data) & 2;
  tmp = l2addrsize(l2);
  tmp___0 = constant_test_bit(3, (unsigned long const volatile   *)(& l2->flag));
  i = tmp + (tmp___0 != 0 ? 2U : 1U);
  tmp___1 = constant_test_bit(2, (unsigned long const volatile   *)(& l2->flag));
  if (tmp___1 != 0) {
    rsp = rsp == 0;
  } else {

  }
  if (rsp != 0) {
    return (76);
  } else {

  }
  if (skb->len < i) {
    return (78);
  } else {

  }
  if (skb->len - i > l2->maxlen) {
    return (79);
  } else {

  }
  return (0);
}
}
int super_error(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  u_int tmp ;
  int tmp___0 ;

  {
  tmp = l2addrsize(l2);
  tmp___0 = constant_test_bit(3, (unsigned long const volatile   *)(& l2->flag));
  if (skb->len != tmp + (tmp___0 != 0 ? 2U : 1U)) {
    return (78);
  } else {

  }
  return (0);
}
}
int unnum_error(struct layer2 *l2 , struct sk_buff *skb , int wantrsp ) 
{ 
  int rsp ;
  int tmp ;
  u_int tmp___0 ;

  {
  rsp = ((int )*(skb->data) & 2) >> 1;
  tmp = constant_test_bit(2, (unsigned long const volatile   *)(& l2->flag));
  if (tmp != 0) {
    rsp = rsp == 0;
  } else {

  }
  if (rsp != wantrsp) {
    return (76);
  } else {

  }
  tmp___0 = l2addrsize(l2);
  if (skb->len != tmp___0 + 1U) {
    return (78);
  } else {

  }
  return (0);
}
}
int UI_error(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  int rsp ;
  int tmp ;
  u_int tmp___0 ;

  {
  rsp = (int )*(skb->data) & 2;
  tmp = constant_test_bit(2, (unsigned long const volatile   *)(& l2->flag));
  if (tmp != 0) {
    rsp = rsp == 0;
  } else {

  }
  if (rsp != 0) {
    return (76);
  } else {

  }
  tmp___0 = l2addrsize(l2);
  if (skb->len > (l2->maxlen + tmp___0) + 1U) {
    return (79);
  } else {

  }
  return (0);
}
}
int FRMR_error(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  u_int headers ;
  u_int tmp ;
  u_char *datap ;
  int rsp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  tmp = l2addrsize(l2);
  headers = tmp + 1U;
  datap = skb->data + (unsigned long )headers;
  rsp = (int )*(skb->data) & 2;
  tmp___0 = constant_test_bit(2, (unsigned long const volatile   *)(& l2->flag));
  if (tmp___0 != 0) {
    rsp = rsp == 0;
  } else {

  }
  if (rsp == 0) {
    return (76);
  } else {

  }
  tmp___1 = constant_test_bit(3, (unsigned long const volatile   *)(& l2->flag));
  if (tmp___1 != 0) {
    if (skb->len < headers + 5U) {
      return (78);
    } else
    if ((*debug___3 & 16711680U) != 0U) {
      l2m_debug(& l2->l2m, (char *)"FRMR information %2x %2x %2x %2x %2x", (int )*datap,
                (int )*(datap + 1UL), (int )*(datap + 2UL), (int )*(datap + 3UL),
                (int )*(datap + 4UL));
    } else
    if (skb->len < headers + 3U) {
      return (78);
    } else
    if ((*debug___3 & 16711680U) != 0U) {
      l2m_debug(& l2->l2m, (char *)"FRMR information %2x %2x %2x", (int )*datap, (int )*(datap + 1UL),
                (int )*(datap + 2UL));
    } else {

    }
  } else {

  }
  return (0);
}
}
static unsigned int legalnr(struct layer2 *l2 , unsigned int nr ) 
{ 
  int tmp ;

  {
  tmp = constant_test_bit(3, (unsigned long const volatile   *)(& l2->flag));
  if (tmp != 0) {
    return (((nr - l2->va) & 127U) <= ((l2->vs - l2->va) & 127U));
  } else {
    return (((nr - l2->va) & 7U) <= ((l2->vs - l2->va) & 7U));
  }
}
}
static void setva(struct layer2 *l2 , unsigned int nr ) 
{ 
  struct sk_buff *skb ;
  int tmp ;

  {
  goto ldv_29217;
  ldv_29216: 
  l2->va = l2->va + (u_int )1;
  tmp = constant_test_bit(3, (unsigned long const volatile   *)(& l2->flag));
  if (tmp != 0) {
    l2->va = l2->va & 127U;
  } else {
    l2->va = l2->va & 7U;
  }
  if ((unsigned long )l2->windowar[l2->sow] != (unsigned long )((struct sk_buff *)0)) {
    skb_trim(l2->windowar[l2->sow], 0U);
    skb_queue_tail(& l2->tmp_queue, l2->windowar[l2->sow]);
    l2->windowar[l2->sow] = 0;
  } else {

  }
  l2->sow = (l2->sow + 1U) % l2->window;
  ldv_29217: ;
  if (l2->va != nr) {
    goto ldv_29216;
  } else {

  }
  skb = skb_dequeue(& l2->tmp_queue);
  goto ldv_29220;
  ldv_29219: 
  kfree_skb(skb);
  skb = skb_dequeue(& l2->tmp_queue);
  ldv_29220: ;
  if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
    goto ldv_29219;
  } else {

  }

  return;
}
}
static void send_uframe(struct layer2 *l2 , struct sk_buff *skb , u_char cmd , u_char cr ) 
{ 
  u_char tmp[4U] ;
  int i ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___2 ;

  {
  i = sethdraddr(l2, (u_char *)(& tmp), (int )cr);
  tmp___0 = i;
  i = i + 1;
  tmp[tmp___0] = cmd;
  if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
    skb_trim(skb, 0U);
  } else {
    skb = mI_alloc_skb((unsigned int )i, 32U);
    if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
      printk("<4>%s: can\'t alloc skbuff\n", "send_uframe");
      return;
    } else {

    }
  }
  __len = (size_t )i;
  tmp___2 = skb_put(skb, (unsigned int )i);
  __ret = __builtin_memcpy((void *)tmp___2, (void const   *)(& tmp), __len);
  enqueue_super(l2, skb);
  return;
}
}
__inline u_char get_PollFlag(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  u_int tmp ;

  {
  tmp = l2addrsize(l2);
  return ((unsigned int )*(skb->data + (unsigned long )tmp) & 16U);
}
}
__inline u_char get_PollFlagFree(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  u_char PF ;

  {
  PF = get_PollFlag(l2, skb);
  kfree_skb(skb);
  return (PF);
}
}
__inline void start_t200(struct layer2 *l2 , int i ) 
{ 


  {
  mISDN_FsmAddTimer(& l2->t200, l2->T200, 17, 0, i);
  test_and_set_bit(6, (unsigned long volatile   *)(& l2->flag));
  return;
}
}
__inline void restart_t200(struct layer2 *l2 , int i ) 
{ 


  {
  mISDN_FsmRestartTimer(& l2->t200, l2->T200, 17, 0, i);
  test_and_set_bit(6, (unsigned long volatile   *)(& l2->flag));
  return;
}
}
__inline void stop_t200(struct layer2 *l2 , int i ) 
{ 
  int tmp ;

  {
  tmp = test_and_clear_bit(6, (unsigned long volatile   *)(& l2->flag));
  if (tmp != 0) {
    mISDN_FsmDelTimer(& l2->t200, i);
  } else {

  }
  return;
}
}
__inline void st5_dl_release_l2l3(struct layer2 *l2 ) 
{ 
  int pr ;
  int tmp ;

  {
  tmp = test_and_clear_bit(4, (unsigned long volatile   *)(& l2->flag));
  if (tmp != 0) {
    pr = 20744;
  } else {
    pr = 4360;
  }
  l2up_create(l2, (u_int )pr, 0, 0);
  return;
}
}
__inline void lapb_dl_release_l2l3(struct layer2 *l2 , int f ) 
{ 
  u_int tmp ;
  int tmp___0 ;

  {
  tmp___0 = constant_test_bit(0, (unsigned long const volatile   *)(& l2->flag));
  if (tmp___0 != 0) {
    tmp = l2_newid(l2);
    l2down_create(l2, 513U, tmp, 0, 0);
  } else {

  }
  l2up_create(l2, (u_int )f, 0, 0);
  return;
}
}
static void establishlink(struct FsmInst *fi ) 
{ 
  struct layer2 *l2 ;
  u_char cmd ;
  int tmp ;

  {
  l2 = (struct layer2 *)fi->userdata;
  clear_exception(l2);
  l2->rc = 0;
  tmp = constant_test_bit(3, (unsigned long const volatile   *)(& l2->flag));
  cmd = tmp != 0 ? 127U : 63U;
  send_uframe(l2, 0, (int )cmd, 0);
  mISDN_FsmDelTimer(& l2->t203, 1);
  restart_t200(l2, 1);
  test_and_clear_bit(4, (unsigned long volatile   *)(& l2->flag));
  freewin(l2);
  mISDN_FsmChangeState(fi, 4);
  return;
}
}
static void l2_mdl_error_ua(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;
  u_char tmp ;

  {
  skb = (struct sk_buff *)arg;
  l2 = (struct layer2 *)fi->userdata;
  tmp = get_PollFlagFree(l2, skb);
  if ((unsigned int )tmp != 0U) {
    l2mgr(l2, 7940U, 67);
  } else {
    l2mgr(l2, 7940U, 68);
  }
  return;
}
}
static void l2_mdl_error_dm(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;
  u_char tmp ;

  {
  skb = (struct sk_buff *)arg;
  l2 = (struct layer2 *)fi->userdata;
  tmp = get_PollFlagFree(l2, skb);
  if ((unsigned int )tmp != 0U) {
    l2mgr(l2, 7940U, 66);
  } else {
    l2mgr(l2, 7940U, 69);
    establishlink(fi);
    test_and_clear_bit(5, (unsigned long volatile   *)(& l2->flag));
  }
  return;
}
}
static void l2_st8_mdl_error_dm(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;
  u_char tmp ;

  {
  skb = (struct sk_buff *)arg;
  l2 = (struct layer2 *)fi->userdata;
  tmp = get_PollFlagFree(l2, skb);
  if ((unsigned int )tmp != 0U) {
    l2mgr(l2, 7940U, 66);
  } else {
    l2mgr(l2, 7940U, 69);
  }
  establishlink(fi);
  test_and_clear_bit(5, (unsigned long volatile   *)(& l2->flag));
  return;
}
}
static void l2_go_st3(struct FsmInst *fi , int event , void *arg ) 
{ 


  {
  kfree_skb((struct sk_buff *)arg);
  mISDN_FsmChangeState(fi, 2);
  return;
}
}
static void l2_mdl_assign(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
  l2 = (struct layer2 *)fi->userdata;
  mISDN_FsmChangeState(fi, 2);
  kfree_skb((struct sk_buff *)arg);
  l2_tei(l2, 6404U, 0UL);
  return;
}
}
static void l2_queue_ui_assign(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  skb_queue_tail(& l2->ui_queue, skb);
  mISDN_FsmChangeState(fi, 1);
  l2_tei(l2, 6404U, 0UL);
  return;
}
}
static void l2_queue_ui(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  skb_queue_tail(& l2->ui_queue, skb);
  return;
}
}
static void tx_ui(struct layer2 *l2 ) 
{ 
  struct sk_buff *skb ;
  u_char header[4U] ;
  int i ;
  int tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___2 ;

  {
  i = sethdraddr(l2, (u_char *)(& header), 0);
  tmp = constant_test_bit(18, (unsigned long const volatile   *)(& l2->flag));
  if (tmp != 0) {
    header[1] = 255U;
  } else {

  }
  tmp___0 = i;
  i = i + 1;
  header[tmp___0] = 3U;
  goto ldv_29324;
  ldv_29323: 
  __len = (size_t )i;
  tmp___2 = skb_push(skb, (unsigned int )i);
  __ret = __builtin_memcpy((void *)tmp___2, (void const   *)(& header), __len);
  enqueue_ui(l2, skb);
  ldv_29324: 
  skb = skb_dequeue(& l2->ui_queue);
  if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
    goto ldv_29323;
  } else {

  }

  return;
}
}
static void l2_send_ui(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  skb_queue_tail(& l2->ui_queue, skb);
  tx_ui(l2);
  return;
}
}
static void l2_got_ui(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_int tmp ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  tmp = l2headersize(l2, 1);
  skb_pull(skb, tmp);
  if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
    l2_tei(l2, 7684U, 0UL);
  } else {

  }
  l2up(l2, 12552U, skb);
  return;
}
}
static void l2_establish(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;

  {
  skb = (struct sk_buff *)arg;
  l2 = (struct layer2 *)fi->userdata;
  establishlink(fi);
  test_and_set_bit(5, (unsigned long volatile   *)(& l2->flag));
  kfree_skb(skb);
  return;
}
}
static void l2_discard_i_setl3(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;

  {
  skb = (struct sk_buff *)arg;
  l2 = (struct layer2 *)fi->userdata;
  skb_queue_purge(& l2->i_queue);
  test_and_set_bit(5, (unsigned long volatile   *)(& l2->flag));
  test_and_clear_bit(4, (unsigned long volatile   *)(& l2->flag));
  kfree_skb(skb);
  return;
}
}
static void l2_l3_reestablish(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;

  {
  skb = (struct sk_buff *)arg;
  l2 = (struct layer2 *)fi->userdata;
  skb_queue_purge(& l2->i_queue);
  establishlink(fi);
  test_and_set_bit(5, (unsigned long volatile   *)(& l2->flag));
  kfree_skb(skb);
  return;
}
}
static void l2_release(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  skb_trim(skb, 0U);
  l2up(l2, 20744U, skb);
  return;
}
}
static void l2_pend_rel(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;

  {
  skb = (struct sk_buff *)arg;
  l2 = (struct layer2 *)fi->userdata;
  test_and_set_bit(4, (unsigned long volatile   *)(& l2->flag));
  kfree_skb(skb);
  return;
}
}
static void l2_disconnect(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  skb_queue_purge(& l2->i_queue);
  freewin(l2);
  mISDN_FsmChangeState(fi, 5);
  l2->rc = 0;
  send_uframe(l2, 0, 83, 0);
  mISDN_FsmDelTimer(& l2->t203, 1);
  restart_t200(l2, 2);
  if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
    kfree_skb(skb);
  } else {

  }
  return;
}
}
static void l2_start_multi(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_char tmp ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  l2->vs = 0U;
  l2->va = 0U;
  l2->vr = 0U;
  l2->sow = 0U;
  clear_exception(l2);
  tmp = get_PollFlag(l2, skb);
  send_uframe(l2, 0, (int )((unsigned int )tmp | 99U), 1);
  mISDN_FsmChangeState(fi, 6);
  mISDN_FsmAddTimer(& l2->t203, l2->T203, 18, 0, 3);
  skb_trim(skb, 0U);
  l2up(l2, 4104U, skb);
  if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
    l2_tei(l2, 7172U, 0UL);
  } else {

  }
  return;
}
}
static void l2_send_UA(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_char tmp ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  tmp = get_PollFlag(l2, skb);
  send_uframe(l2, skb, (int )((unsigned int )tmp | 99U), 1);
  return;
}
}
static void l2_send_DM(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_char tmp ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  tmp = get_PollFlag(l2, skb);
  send_uframe(l2, skb, (int )((unsigned int )tmp | 15U), 1);
  return;
}
}
static void l2_restart_multi(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int est ;
  u_char tmp ;
  __u32 tmp___0 ;
  unsigned int tmp___1 ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  est = 0;
  tmp = get_PollFlag(l2, skb);
  send_uframe(l2, skb, (int )((unsigned int )tmp | 99U), 1);
  l2mgr(l2, 7940U, 70);
  if (l2->vs != l2->va) {
    skb_queue_purge(& l2->i_queue);
    est = 1;
  } else {

  }
  clear_exception(l2);
  l2->vs = 0U;
  l2->va = 0U;
  l2->vr = 0U;
  l2->sow = 0U;
  mISDN_FsmChangeState(fi, 6);
  stop_t200(l2, 3);
  mISDN_FsmRestartTimer(& l2->t203, l2->T203, 18, 0, 3);
  if (est != 0) {
    l2up_create(l2, 4104U, 0, 0);
  } else {

  }
  tmp___0 = skb_queue_len((struct sk_buff_head  const  *)(& l2->i_queue));
  if (tmp___0 != 0U) {
    tmp___1 = cansend(l2);
    if (tmp___1 != 0U) {
      mISDN_FsmEvent(fi, 9, 0);
    } else {

    }
  } else {

  }
  return;
}
}
static void l2_stop_multi(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_char tmp ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  mISDN_FsmChangeState(fi, 3);
  mISDN_FsmDelTimer(& l2->t203, 3);
  stop_t200(l2, 4);
  tmp = get_PollFlag(l2, skb);
  send_uframe(l2, skb, (int )((unsigned int )tmp | 99U), 1);
  skb_queue_purge(& l2->i_queue);
  freewin(l2);
  lapb_dl_release_l2l3(l2, 4360);
  if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
    l2_tei(l2, 7428U, 0UL);
  } else {

  }
  return;
}
}
static void l2_connected(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int pr ;
  u_char tmp ;
  int tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  unsigned int tmp___3 ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  pr = -1;
  tmp = get_PollFlag(l2, skb);
  if ((unsigned int )tmp == 0U) {
    l2_mdl_error_ua(fi, event, arg);
    return;
  } else {

  }
  kfree_skb(skb);
  tmp___0 = test_and_clear_bit(4, (unsigned long volatile   *)(& l2->flag));
  if (tmp___0 != 0) {
    l2_disconnect(fi, event, 0);
  } else {

  }
  tmp___1 = test_and_clear_bit(5, (unsigned long volatile   *)(& l2->flag));
  if (tmp___1 != 0) {
    pr = 20488;
  } else
  if (l2->vs != l2->va) {
    skb_queue_purge(& l2->i_queue);
    pr = 4104;
  } else {

  }
  stop_t200(l2, 5);
  l2->vr = 0U;
  l2->vs = 0U;
  l2->va = 0U;
  l2->sow = 0U;
  mISDN_FsmChangeState(fi, 6);
  mISDN_FsmAddTimer(& l2->t203, l2->T203, 18, 0, 4);
  if (pr != -1) {
    l2up_create(l2, (u_int )pr, 0, 0);
  } else {

  }
  tmp___2 = skb_queue_len((struct sk_buff_head  const  *)(& l2->i_queue));
  if (tmp___2 != 0U) {
    tmp___3 = cansend(l2);
    if (tmp___3 != 0U) {
      mISDN_FsmEvent(fi, 9, 0);
    } else {

    }
  } else {

  }
  if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
    l2_tei(l2, 7172U, 0UL);
  } else {

  }
  return;
}
}
static void l2_released(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_char tmp ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  tmp = get_PollFlag(l2, skb);
  if ((unsigned int )tmp == 0U) {
    l2_mdl_error_ua(fi, event, arg);
    return;
  } else {

  }
  kfree_skb(skb);
  stop_t200(l2, 6);
  lapb_dl_release_l2l3(l2, 20744);
  mISDN_FsmChangeState(fi, 3);
  if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
    l2_tei(l2, 7428U, 0UL);
  } else {

  }
  return;
}
}
static void l2_reestablish(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_char tmp ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  tmp = get_PollFlagFree(l2, skb);
  if ((unsigned int )tmp == 0U) {
    establishlink(fi);
    test_and_set_bit(5, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
  return;
}
}
static void l2_st5_dm_release(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int tmp ;
  u_int tmp___0 ;
  int tmp___1 ;
  u_char tmp___2 ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  tmp___2 = get_PollFlagFree(l2, skb);
  if ((unsigned int )tmp___2 != 0U) {
    stop_t200(l2, 7);
    tmp = constant_test_bit(5, (unsigned long const volatile   *)(& l2->flag));
    if (tmp == 0) {
      skb_queue_purge(& l2->i_queue);
    } else {

    }
    tmp___1 = constant_test_bit(0, (unsigned long const volatile   *)(& l2->flag));
    if (tmp___1 != 0) {
      tmp___0 = l2_newid(l2);
      l2down_create(l2, 513U, tmp___0, 0, 0);
    } else {

    }
    st5_dl_release_l2l3(l2);
    mISDN_FsmChangeState(fi, 3);
    if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
      l2_tei(l2, 7428U, 0UL);
    } else {

    }
  } else {

  }
  return;
}
}
static void l2_st6_dm_release(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_char tmp ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  tmp = get_PollFlagFree(l2, skb);
  if ((unsigned int )tmp != 0U) {
    stop_t200(l2, 8);
    lapb_dl_release_l2l3(l2, 20744);
    mISDN_FsmChangeState(fi, 3);
    if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
      l2_tei(l2, 7428U, 0UL);
    } else {

    }
  } else {

  }
  return;
}
}
void enquiry_cr(struct layer2 *l2 , u_char typ , u_char cr , u_char pf ) 
{ 
  struct sk_buff *skb ;
  u_char tmp[4U] ;
  int i ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___5 ;

  {
  i = sethdraddr(l2, (u_char *)(& tmp), (int )cr);
  tmp___3 = constant_test_bit(3, (unsigned long const volatile   *)(& l2->flag));
  if (tmp___3 != 0) {
    tmp___0 = i;
    i = i + 1;
    tmp[tmp___0] = typ;
    tmp___1 = i;
    i = i + 1;
    tmp[tmp___1] = (unsigned int )((int )((u_char )l2->vr) << 1U) | ((unsigned int )pf != 0U ? 1U : 0U);
  } else {
    tmp___2 = i;
    i = i + 1;
    tmp[tmp___2] = (unsigned int )(((int )((u_char )l2->vr) << 5U) | (int )typ) | ((unsigned int )pf != 0U ? 16U : 0U);
  }
  skb = mI_alloc_skb((unsigned int )i, 32U);
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
    printk("<4>isdnl2 can\'t alloc sbbuff for enquiry_cr\n");
    return;
  } else {

  }
  __len = (size_t )i;
  tmp___5 = skb_put(skb, (unsigned int )i);
  __ret = __builtin_memcpy((void *)tmp___5, (void const   *)(& tmp), __len);
  enqueue_super(l2, skb);
  return;
}
}
__inline void enquiry_response(struct layer2 *l2 ) 
{ 
  int tmp ;

  {
  tmp = constant_test_bit(9, (unsigned long const volatile   *)(& l2->flag));
  if (tmp != 0) {
    enquiry_cr(l2, 5, 1, 1);
  } else {
    enquiry_cr(l2, 1, 1, 1);
  }
  test_and_clear_bit(7, (unsigned long volatile   *)(& l2->flag));
  return;
}
}
__inline void transmit_enquiry(struct layer2 *l2 ) 
{ 
  int tmp ;

  {
  tmp = constant_test_bit(9, (unsigned long const volatile   *)(& l2->flag));
  if (tmp != 0) {
    enquiry_cr(l2, 5, 0, 1);
  } else {
    enquiry_cr(l2, 1, 0, 1);
  }
  test_and_clear_bit(7, (unsigned long volatile   *)(& l2->flag));
  start_t200(l2, 9);
  return;
}
}
static void nrerrorrecovery(struct FsmInst *fi ) 
{ 
  struct layer2 *l2 ;

  {
  l2 = (struct layer2 *)fi->userdata;
  l2mgr(l2, 7940U, 74);
  establishlink(fi);
  test_and_clear_bit(5, (unsigned long volatile   *)(& l2->flag));
  return;
}
}
static void invoke_retransmission(struct layer2 *l2 , unsigned int nr ) 
{ 
  u_int p1 ;
  int tmp ;

  {
  if (l2->vs != nr) {
    goto ldv_29483;
    ldv_29482: 
    l2->vs = l2->vs - (u_int )1;
    tmp = constant_test_bit(3, (unsigned long const volatile   *)(& l2->flag));
    if (tmp != 0) {
      l2->vs = l2->vs & 127U;
      p1 = (l2->vs - l2->va) & 127U;
    } else {
      l2->vs = l2->vs & 7U;
      p1 = (l2->vs - l2->va) & 7U;
    }
    p1 = (l2->sow + p1) % l2->window;
    if ((unsigned long )l2->windowar[p1] != (unsigned long )((struct sk_buff *)0)) {
      skb_queue_head(& l2->i_queue, l2->windowar[p1]);
    } else {
      printk("<4>%s: windowar[%d] is NULL\n", "invoke_retransmission", p1);
    }
    l2->windowar[p1] = 0;
    ldv_29483: ;
    if (l2->vs != nr) {
      goto ldv_29482;
    } else {

    }
    mISDN_FsmEvent(& l2->l2m, 9, 0);
  } else {

  }
  return;
}
}
static void l2_st7_got_super(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int PollFlag ;
  int rsp ;
  int typ ;
  unsigned int nr ;
  int tmp ;
  u_int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  __u32 tmp___5 ;
  unsigned int tmp___6 ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  typ = 1;
  rsp = (int )*(skb->data) & 2;
  tmp = constant_test_bit(2, (unsigned long const volatile   *)(& l2->flag));
  if (tmp != 0) {
    rsp = rsp == 0;
  } else {

  }
  tmp___0 = l2addrsize(l2);
  skb_pull(skb, tmp___0);
  tmp___1 = IsRNR(skb->data, l2);
  if (tmp___1 != 0) {
    set_peer_busy(l2);
    typ = 5;
  } else {
    clear_peer_busy(l2);
  }
  tmp___2 = IsREJ(skb->data, l2);
  if (tmp___2 != 0) {
    typ = 9;
  } else {

  }
  tmp___3 = constant_test_bit(3, (unsigned long const volatile   *)(& l2->flag));
  if (tmp___3 != 0) {
    PollFlag = (int )*(skb->data + 1UL) & 1;
    nr = (unsigned int )((int )*(skb->data + 1UL) >> 1);
  } else {
    PollFlag = (int )*(skb->data) & 16;
    nr = (unsigned int )((int )*(skb->data) >> 5) & 7U;
  }
  kfree_skb(skb);
  if (PollFlag != 0) {
    if (rsp != 0) {
      l2mgr(l2, 7940U, 65);
    } else {
      enquiry_response(l2);
    }
  } else {

  }
  tmp___6 = legalnr(l2, nr);
  if (tmp___6 != 0U) {
    if (typ == 9) {
      setva(l2, nr);
      invoke_retransmission(l2, nr);
      stop_t200(l2, 10);
      tmp___4 = mISDN_FsmAddTimer(& l2->t203, l2->T203, 18, 0, 6);
      if (tmp___4 != 0) {
        l2m_debug(& l2->l2m, (char *)"Restart T203 ST7 REJ");
      } else {

      }
    } else
    if (l2->vs == nr && typ == 1) {
      setva(l2, nr);
      stop_t200(l2, 11);
      mISDN_FsmRestartTimer(& l2->t203, l2->T203, 18, 0, 7);
    } else
    if (l2->va != nr || typ == 5) {
      setva(l2, nr);
      if (typ != 1) {
        mISDN_FsmDelTimer(& l2->t203, 9);
      } else {

      }
      restart_t200(l2, 12);
    } else {

    }
    tmp___5 = skb_queue_len((struct sk_buff_head  const  *)(& l2->i_queue));
    if (tmp___5 != 0U && typ == 1) {
      mISDN_FsmEvent(fi, 9, 0);
    } else {

    }
  } else {
    nrerrorrecovery(fi);
  }
  return;
}
}
static void l2_feed_i_if_reest(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int tmp ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  tmp = constant_test_bit(5, (unsigned long const volatile   *)(& l2->flag));
  if (tmp == 0) {
    skb_queue_tail(& l2->i_queue, skb);
  } else {
    kfree_skb(skb);
  }
  return;
}
}
static void l2_feed_i_pull(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  skb_queue_tail(& l2->i_queue, skb);
  mISDN_FsmEvent(fi, 9, 0);
  return;
}
}
static void l2_feed_iqueue(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  skb_queue_tail(& l2->i_queue, skb);
  return;
}
}
static void l2_got_iframe(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int PollFlag ;
  int i ;
  u_int ns ;
  u_int nr ;
  u_int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  u_int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  unsigned int tmp___6 ;
  __u32 tmp___7 ;
  int tmp___8 ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  tmp = l2addrsize(l2);
  i = (int )tmp;
  tmp___0 = constant_test_bit(3, (unsigned long const volatile   *)(& l2->flag));
  if (tmp___0 != 0) {
    PollFlag = (int )*(skb->data + ((unsigned long )i + 1UL)) & 1;
    ns = (u_int )((int )*(skb->data + (unsigned long )i) >> 1);
    nr = (u_int )((int )*(skb->data + ((unsigned long )i + 1UL)) >> 1) & 127U;
  } else {
    PollFlag = (int )*(skb->data + (unsigned long )i) & 16;
    ns = (u_int )((int )*(skb->data + (unsigned long )i) >> 1) & 7U;
    nr = (u_int )((int )*(skb->data + (unsigned long )i) >> 5) & 7U;
  }
  tmp___4 = constant_test_bit(9, (unsigned long const volatile   *)(& l2->flag));
  if (tmp___4 != 0) {
    kfree_skb(skb);
    if (PollFlag != 0) {
      enquiry_response(l2);
    } else {

    }
  } else
  if (l2->vr == ns) {
    l2->vr = l2->vr + (u_int )1;
    tmp___1 = constant_test_bit(3, (unsigned long const volatile   *)(& l2->flag));
    if (tmp___1 != 0) {
      l2->vr = l2->vr & 127U;
    } else {
      l2->vr = l2->vr & 7U;
    }
    test_and_clear_bit(8, (unsigned long volatile   *)(& l2->flag));
    if (PollFlag != 0) {
      enquiry_response(l2);
    } else {
      test_and_set_bit(7, (unsigned long volatile   *)(& l2->flag));
    }
    tmp___2 = l2headersize(l2, 0);
    skb_pull(skb, tmp___2);
    l2up(l2, 12296U, skb);
  } else {
    kfree_skb(skb);
    tmp___3 = test_and_set_bit(8, (unsigned long volatile   *)(& l2->flag));
    if (tmp___3 != 0) {
      if (PollFlag != 0) {
        enquiry_response(l2);
      } else {
        enquiry_cr(l2, 9, 1, (int )((u_char )PollFlag));
        test_and_clear_bit(7, (unsigned long volatile   *)(& l2->flag));
      }
    } else {

    }
  }
  tmp___6 = legalnr(l2, nr);
  if (tmp___6 != 0U) {
    tmp___5 = constant_test_bit(10, (unsigned long const volatile   *)(& l2->flag));
    if (tmp___5 == 0 && fi->state == 6) {
      if (l2->vs == nr) {
        stop_t200(l2, 13);
        mISDN_FsmRestartTimer(& l2->t203, l2->T203, 18, 0, 7);
      } else
      if (l2->va != nr) {
        restart_t200(l2, 14);
      } else {

      }
    } else {

    }
    setva(l2, nr);
  } else {
    nrerrorrecovery(fi);
    return;
  }
  tmp___7 = skb_queue_len((struct sk_buff_head  const  *)(& l2->i_queue));
  if (tmp___7 != 0U && fi->state == 6) {
    mISDN_FsmEvent(fi, 9, 0);
  } else {

  }
  tmp___8 = test_and_clear_bit(7, (unsigned long volatile   *)(& l2->flag));
  if (tmp___8 != 0) {
    enquiry_cr(l2, 1, 1, 0);
  } else {

  }
  return;
}
}
static void l2_got_tei(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  u_int info ;
  __u32 tmp ;

  {
  l2 = (struct layer2 *)fi->userdata;
  l2->tei = (signed char )((long )arg);
  set_channel_address(& l2->ch, (u_int )l2->sapi, (u_int )l2->tei);
  info = 1U;
  l2up_create(l2, 8U, 4, (void *)(& info));
  if (fi->state == 2) {
    establishlink(fi);
    test_and_set_bit(5, (unsigned long volatile   *)(& l2->flag));
  } else {
    mISDN_FsmChangeState(fi, 3);
  }
  tmp = skb_queue_len((struct sk_buff_head  const  *)(& l2->ui_queue));
  if (tmp != 0U) {
    tx_ui(l2);
  } else {

  }
  return;
}
}
static void l2_st5_tout_200(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  u_int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  l2 = (struct layer2 *)fi->userdata;
  tmp___2 = constant_test_bit(1, (unsigned long const volatile   *)(& l2->flag));
  if (tmp___2 != 0) {
    tmp___3 = constant_test_bit(11, (unsigned long const volatile   *)(& l2->flag));
    if (tmp___3 != 0) {
      mISDN_FsmAddTimer(& l2->t200, l2->T200, 17, 0, 9);
    } else {
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
  if (l2->rc == l2->N200) {
    mISDN_FsmChangeState(fi, 3);
    test_and_clear_bit(6, (unsigned long volatile   *)(& l2->flag));
    skb_queue_purge(& l2->i_queue);
    l2mgr(l2, 7940U, 71);
    tmp___0 = constant_test_bit(0, (unsigned long const volatile   *)(& l2->flag));
    if (tmp___0 != 0) {
      tmp = l2_newid(l2);
      l2down_create(l2, 513U, tmp, 0, 0);
    } else {

    }
    st5_dl_release_l2l3(l2);
    if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
      l2_tei(l2, 7428U, 0UL);
    } else {

    }
  } else {
    l2->rc = l2->rc + 1;
    mISDN_FsmAddTimer(& l2->t200, l2->T200, 17, 0, 9);
    tmp___1 = constant_test_bit(3, (unsigned long const volatile   *)(& l2->flag));
    send_uframe(l2, 0, tmp___1 != 0 ? 127 : 63, 0);
  }
  return;
}
}
static void l2_st6_tout_200(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  int tmp ;
  int tmp___0 ;

  {
  l2 = (struct layer2 *)fi->userdata;
  tmp = constant_test_bit(1, (unsigned long const volatile   *)(& l2->flag));
  if (tmp != 0) {
    tmp___0 = constant_test_bit(11, (unsigned long const volatile   *)(& l2->flag));
    if (tmp___0 != 0) {
      mISDN_FsmAddTimer(& l2->t200, l2->T200, 17, 0, 9);
    } else {
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
  if (l2->rc == l2->N200) {
    mISDN_FsmChangeState(fi, 3);
    test_and_clear_bit(6, (unsigned long volatile   *)(& l2->flag));
    l2mgr(l2, 7940U, 72);
    lapb_dl_release_l2l3(l2, 20744);
    if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
      l2_tei(l2, 7428U, 0UL);
    } else {

    }
  } else {
    l2->rc = l2->rc + 1;
    mISDN_FsmAddTimer(& l2->t200, l2->T200, 17, 0, 9);
    send_uframe(l2, 0, 83, 0);
  }
  return;
}
}
static void l2_st7_tout_200(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  int tmp ;
  int tmp___0 ;

  {
  l2 = (struct layer2 *)fi->userdata;
  tmp = constant_test_bit(1, (unsigned long const volatile   *)(& l2->flag));
  if (tmp != 0) {
    tmp___0 = constant_test_bit(11, (unsigned long const volatile   *)(& l2->flag));
    if (tmp___0 != 0) {
      mISDN_FsmAddTimer(& l2->t200, l2->T200, 17, 0, 9);
      return;
    } else {

    }
  } else {

  }
  test_and_clear_bit(6, (unsigned long volatile   *)(& l2->flag));
  l2->rc = 0;
  mISDN_FsmChangeState(fi, 7);
  transmit_enquiry(l2);
  l2->rc = l2->rc + 1;
  return;
}
}
static void l2_st8_tout_200(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  int tmp ;
  int tmp___0 ;

  {
  l2 = (struct layer2 *)fi->userdata;
  tmp = constant_test_bit(1, (unsigned long const volatile   *)(& l2->flag));
  if (tmp != 0) {
    tmp___0 = constant_test_bit(11, (unsigned long const volatile   *)(& l2->flag));
    if (tmp___0 != 0) {
      mISDN_FsmAddTimer(& l2->t200, l2->T200, 17, 0, 9);
      return;
    } else {

    }
  } else {

  }
  test_and_clear_bit(6, (unsigned long volatile   *)(& l2->flag));
  if (l2->rc == l2->N200) {
    l2mgr(l2, 7940U, 73);
    establishlink(fi);
    test_and_clear_bit(5, (unsigned long volatile   *)(& l2->flag));
  } else {
    transmit_enquiry(l2);
    l2->rc = l2->rc + 1;
  }
  return;
}
}
static void l2_st7_tout_203(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  int tmp ;
  int tmp___0 ;

  {
  l2 = (struct layer2 *)fi->userdata;
  tmp = constant_test_bit(1, (unsigned long const volatile   *)(& l2->flag));
  if (tmp != 0) {
    tmp___0 = constant_test_bit(11, (unsigned long const volatile   *)(& l2->flag));
    if (tmp___0 != 0) {
      mISDN_FsmAddTimer(& l2->t203, l2->T203, 18, 0, 9);
      return;
    } else {

    }
  } else {

  }
  mISDN_FsmChangeState(fi, 7);
  transmit_enquiry(l2);
  l2->rc = 0;
  return;
}
}
static void l2_pull_iqueue(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  struct sk_buff *nskb ;
  struct sk_buff *oskb ;
  u_char header[4U] ;
  u_int i ;
  u_int p1 ;
  unsigned int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  u_int tmp___2 ;
  u_int tmp___3 ;
  u_int tmp___4 ;
  int tmp___5 ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___7 ;
  size_t __len___0 ;
  void *__ret___0 ;
  unsigned char *tmp___9 ;
  size_t __len___1 ;
  void *__ret___1 ;
  unsigned char *tmp___11 ;
  u_int tmp___12 ;
  int tmp___13 ;

  {
  l2 = (struct layer2 *)fi->userdata;
  tmp = cansend(l2);
  if (tmp == 0U) {
    return;
  } else {

  }
  skb = skb_dequeue(& l2->i_queue);
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
    return;
  } else {

  }
  tmp___0 = constant_test_bit(3, (unsigned long const volatile   *)(& l2->flag));
  if (tmp___0 != 0) {
    p1 = (l2->vs - l2->va) & 127U;
  } else {
    p1 = (l2->vs - l2->va) & 7U;
  }
  p1 = (l2->sow + p1) % l2->window;
  if ((unsigned long )l2->windowar[p1] != (unsigned long )((struct sk_buff *)0)) {
    printk("<4>isdnl2 try overwrite ack queue entry %d\n", p1);
    kfree_skb(l2->windowar[p1]);
  } else {

  }
  l2->windowar[p1] = skb;
  tmp___1 = sethdraddr(l2, (u_char *)(& header), 0);
  i = (u_int )tmp___1;
  tmp___5 = constant_test_bit(3, (unsigned long const volatile   *)(& l2->flag));
  if (tmp___5 != 0) {
    tmp___2 = i;
    i = i + (u_int )1;
    header[tmp___2] = (int )((u_char )l2->vs) << 1U;
    tmp___3 = i;
    i = i + (u_int )1;
    header[tmp___3] = (int )((u_char )l2->vr) << 1U;
    l2->vs = (l2->vs + 1U) & 127U;
  } else {
    tmp___4 = i;
    i = i + (u_int )1;
    header[tmp___4] = ((int )((u_char )l2->vr) << 5U) | ((int )((u_char )l2->vs) << 1U);
    l2->vs = (l2->vs + 1U) & 7U;
  }
  nskb = skb_clone(skb, 32U);
  p1 = skb_headroom((struct sk_buff  const  *)nskb);
  if (p1 >= i) {
    __len = (size_t )i;
    tmp___7 = skb_push(nskb, i);
    __ret = __builtin_memcpy((void *)tmp___7, (void const   *)(& header), __len);
  } else {
    printk("<4>isdnl2 pull_iqueue skb header(%d/%d) too short\n", i, p1);
    oskb = nskb;
    nskb = mI_alloc_skb(oskb->len + i, 32U);
    if ((unsigned long )nskb == (unsigned long )((struct sk_buff *)0)) {
      kfree_skb(oskb);
      printk("<4>%s: no skb mem\n", "l2_pull_iqueue");
      return;
    } else {

    }
    __len___0 = (size_t )i;
    tmp___9 = skb_put(nskb, i);
    __ret___0 = __builtin_memcpy((void *)tmp___9, (void const   *)(& header), __len___0);
    __len___1 = (size_t )oskb->len;
    tmp___11 = skb_put(nskb, oskb->len);
    __ret___1 = __builtin_memcpy((void *)tmp___11, (void const   *)oskb->data, __len___1);
    kfree_skb(oskb);
  }
  tmp___12 = l2_newid(l2);
  l2down(l2, 8193U, tmp___12, nskb);
  test_and_clear_bit(7, (unsigned long volatile   *)(& l2->flag));
  tmp___13 = test_and_set_bit(6, (unsigned long volatile   *)(& l2->flag));
  if (tmp___13 == 0) {
    mISDN_FsmDelTimer(& l2->t203, 13);
    mISDN_FsmAddTimer(& l2->t200, l2->T200, 17, 0, 11);
  } else {

  }
  return;
}
}
static void l2_st8_got_super(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int PollFlag ;
  int rsp ;
  int rnr ;
  unsigned int nr ;
  int tmp ;
  u_int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  __u32 tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  unsigned int tmp___6 ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  rnr = 0;
  rsp = (int )*(skb->data) & 2;
  tmp = constant_test_bit(2, (unsigned long const volatile   *)(& l2->flag));
  if (tmp != 0) {
    rsp = rsp == 0;
  } else {

  }
  tmp___0 = l2addrsize(l2);
  skb_pull(skb, tmp___0);
  tmp___1 = IsRNR(skb->data, l2);
  if (tmp___1 != 0) {
    set_peer_busy(l2);
    rnr = 1;
  } else {
    clear_peer_busy(l2);
  }
  tmp___2 = constant_test_bit(3, (unsigned long const volatile   *)(& l2->flag));
  if (tmp___2 != 0) {
    PollFlag = (int )*(skb->data + 1UL) & 1;
    nr = (unsigned int )((int )*(skb->data + 1UL) >> 1);
  } else {
    PollFlag = (int )*(skb->data) & 16;
    nr = (unsigned int )((int )*(skb->data) >> 5) & 7U;
  }
  kfree_skb(skb);
  if (rsp != 0 && PollFlag != 0) {
    tmp___5 = legalnr(l2, nr);
    if (tmp___5 != 0U) {
      if (rnr != 0) {
        restart_t200(l2, 15);
      } else {
        stop_t200(l2, 16);
        mISDN_FsmAddTimer(& l2->t203, l2->T203, 18, 0, 5);
        setva(l2, nr);
      }
      invoke_retransmission(l2, nr);
      mISDN_FsmChangeState(fi, 6);
      tmp___3 = skb_queue_len((struct sk_buff_head  const  *)(& l2->i_queue));
      if (tmp___3 != 0U) {
        tmp___4 = cansend(l2);
        if (tmp___4 != 0U) {
          mISDN_FsmEvent(fi, 9, 0);
        } else {

        }
      } else {

      }
    } else {
      nrerrorrecovery(fi);
    }
  } else {
    if (rsp == 0 && PollFlag != 0) {
      enquiry_response(l2);
    } else {

    }
    tmp___6 = legalnr(l2, nr);
    if (tmp___6 != 0U) {
      setva(l2, nr);
    } else {
      nrerrorrecovery(fi);
    }
  }
  return;
}
}
static void l2_got_FRMR(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_int tmp ;
  int tmp___0 ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  tmp = l2addrsize(l2);
  skb_pull(skb, tmp + 1U);
  if (((int )*(skb->data) & 1) == 0 || ((int )*(skb->data) & 3) == 1) {
    l2mgr(l2, 7940U, 75);
    establishlink(fi);
    test_and_clear_bit(5, (unsigned long volatile   *)(& l2->flag));
  } else {
    tmp___0 = IsUA(skb->data);
    if (tmp___0 != 0 && fi->state == 6) {
      l2mgr(l2, 7940U, 75);
      establishlink(fi);
      test_and_clear_bit(5, (unsigned long volatile   *)(& l2->flag));
    } else {

    }
  }
  kfree_skb(skb);
  return;
}
}
static void l2_st24_tei_remove(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb_queue_purge(& l2->ui_queue);
  l2->tei = 127;
  mISDN_FsmChangeState(fi, 0);
  return;
}
}
static void l2_st3_tei_remove(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb_queue_purge(& l2->ui_queue);
  l2->tei = 127;
  l2up_create(l2, 4360U, 0, 0);
  mISDN_FsmChangeState(fi, 0);
  return;
}
}
static void l2_st5_tei_remove(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb_queue_purge(& l2->i_queue);
  skb_queue_purge(& l2->ui_queue);
  freewin(l2);
  l2->tei = 127;
  stop_t200(l2, 17);
  st5_dl_release_l2l3(l2);
  mISDN_FsmChangeState(fi, 0);
  return;
}
}
static void l2_st6_tei_remove(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb_queue_purge(& l2->ui_queue);
  l2->tei = 127;
  stop_t200(l2, 18);
  l2up_create(l2, 4360U, 0, 0);
  mISDN_FsmChangeState(fi, 0);
  return;
}
}
static void l2_tei_remove(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb_queue_purge(& l2->i_queue);
  skb_queue_purge(& l2->ui_queue);
  freewin(l2);
  l2->tei = 127;
  stop_t200(l2, 17);
  mISDN_FsmDelTimer(& l2->t203, 19);
  l2up_create(l2, 4360U, 0, 0);
  mISDN_FsmChangeState(fi, 0);
  return;
}
}
static void l2_st14_persistant_da(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int tmp ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  skb_queue_purge(& l2->i_queue);
  skb_queue_purge(& l2->ui_queue);
  tmp = test_and_clear_bit(13, (unsigned long volatile   *)(& l2->flag));
  if (tmp != 0) {
    l2up(l2, 4360U, skb);
  } else {
    kfree_skb(skb);
  }
  return;
}
}
static void l2_st5_persistant_da(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  skb_queue_purge(& l2->i_queue);
  skb_queue_purge(& l2->ui_queue);
  freewin(l2);
  stop_t200(l2, 19);
  st5_dl_release_l2l3(l2);
  mISDN_FsmChangeState(fi, 3);
  if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
    l2_tei(l2, 7428U, 0UL);
  } else {

  }
  kfree_skb(skb);
  return;
}
}
static void l2_st6_persistant_da(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  skb_queue_purge(& l2->ui_queue);
  stop_t200(l2, 20);
  l2up(l2, 20744U, skb);
  mISDN_FsmChangeState(fi, 3);
  if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
    l2_tei(l2, 7428U, 0UL);
  } else {

  }
  return;
}
}
static void l2_persistant_da(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  skb_queue_purge(& l2->i_queue);
  skb_queue_purge(& l2->ui_queue);
  freewin(l2);
  stop_t200(l2, 19);
  mISDN_FsmDelTimer(& l2->t203, 19);
  l2up(l2, 4360U, skb);
  mISDN_FsmChangeState(fi, 3);
  if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
    l2_tei(l2, 7428U, 0UL);
  } else {

  }
  return;
}
}
static void l2_set_own_busy(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int tmp ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  tmp = test_and_set_bit(9, (unsigned long volatile   *)(& l2->flag));
  if (tmp == 0) {
    enquiry_cr(l2, 5, 1, 0);
    test_and_clear_bit(7, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
  if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
    kfree_skb(skb);
  } else {

  }
  return;
}
}
static void l2_clear_own_busy(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int tmp ;

  {
  l2 = (struct layer2 *)fi->userdata;
  skb = (struct sk_buff *)arg;
  tmp = test_and_clear_bit(9, (unsigned long volatile   *)(& l2->flag));
  if (tmp == 0) {
    enquiry_cr(l2, 1, 1, 0);
    test_and_clear_bit(7, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
  if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
    kfree_skb(skb);
  } else {

  }
  return;
}
}
static void l2_frame_error(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
  l2 = (struct layer2 *)fi->userdata;
  l2mgr(l2, 7940U, arg);
  return;
}
}
static void l2_frame_error_reest(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
  l2 = (struct layer2 *)fi->userdata;
  l2mgr(l2, 7940U, arg);
  establishlink(fi);
  test_and_clear_bit(5, (unsigned long volatile   *)(& l2->flag));
  return;
}
}
static struct FsmNode L2FnList[88U]  = 
  {      {0, 11, & l2_mdl_assign}, 
        {1, 11, & l2_go_st3}, 
        {3, 11, & l2_establish}, 
        {4, 11, & l2_discard_i_setl3}, 
        {6, 11, & l2_l3_reestablish}, 
        {7, 11, & l2_l3_reestablish}, 
        {3, 12, & l2_release}, 
        {4, 12, & l2_pend_rel}, 
        {6, 12, & l2_disconnect}, 
        {7, 12, & l2_disconnect}, 
        {4, 8, & l2_feed_i_if_reest}, 
        {6, 8, & l2_feed_i_pull}, 
        {7, 8, & l2_feed_iqueue}, 
        {0, 10, & l2_queue_ui_assign}, 
        {1, 10, & l2_queue_ui}, 
        {2, 10, & l2_queue_ui}, 
        {3, 10, & l2_send_ui}, 
        {4, 10, & l2_send_ui}, 
        {5, 10, & l2_send_ui}, 
        {6, 10, & l2_send_ui}, 
        {7, 10, & l2_send_ui}, 
        {0, 13, & l2_got_tei}, 
        {1, 13, & l2_got_tei}, 
        {2, 13, & l2_got_tei}, 
        {1, 15, & l2_st24_tei_remove}, 
        {2, 15, & l2_st3_tei_remove}, 
        {3, 14, & l2_st24_tei_remove}, 
        {4, 14, & l2_st5_tei_remove}, 
        {5, 14, & l2_st6_tei_remove}, 
        {6, 14, & l2_tei_remove}, 
        {7, 14, & l2_tei_remove}, 
        {3, 1, & l2_start_multi}, 
        {4, 1, & l2_send_UA}, 
        {5, 1, & l2_send_DM}, 
        {6, 1, & l2_restart_multi}, 
        {7, 1, & l2_restart_multi}, 
        {3, 2, & l2_send_DM}, 
        {4, 2, & l2_send_DM}, 
        {5, 2, & l2_send_UA}, 
        {6, 2, & l2_stop_multi}, 
        {7, 2, & l2_stop_multi}, 
        {3, 4, & l2_mdl_error_ua}, 
        {4, 4, & l2_connected}, 
        {5, 4, & l2_released}, 
        {6, 4, & l2_mdl_error_ua}, 
        {7, 4, & l2_mdl_error_ua}, 
        {3, 3, & l2_reestablish}, 
        {4, 3, & l2_st5_dm_release}, 
        {5, 3, & l2_st6_dm_release}, 
        {6, 3, & l2_mdl_error_dm}, 
        {7, 3, & l2_st8_mdl_error_dm}, 
        {0, 0, & l2_got_ui}, 
        {1, 0, & l2_got_ui}, 
        {2, 0, & l2_got_ui}, 
        {3, 0, & l2_got_ui}, 
        {4, 0, & l2_got_ui}, 
        {5, 0, & l2_got_ui}, 
        {6, 0, & l2_got_ui}, 
        {7, 0, & l2_got_ui}, 
        {6, 5, & l2_got_FRMR}, 
        {7, 5, & l2_got_FRMR}, 
        {6, 6, & l2_st7_got_super}, 
        {7, 6, & l2_st8_got_super}, 
        {6, 7, & l2_got_iframe}, 
        {7, 7, & l2_got_iframe}, 
        {4, 17, & l2_st5_tout_200}, 
        {5, 17, & l2_st6_tout_200}, 
        {6, 17, & l2_st7_tout_200}, 
        {7, 17, & l2_st8_tout_200}, 
        {6, 18, & l2_st7_tout_203}, 
        {6, 9, & l2_pull_iqueue}, 
        {6, 19, & l2_set_own_busy}, 
        {7, 19, & l2_set_own_busy}, 
        {6, 20, & l2_clear_own_busy}, 
        {7, 20, & l2_clear_own_busy}, 
        {3, 21, & l2_frame_error}, 
        {4, 21, & l2_frame_error}, 
        {5, 21, & l2_frame_error}, 
        {6, 21, & l2_frame_error_reest}, 
        {7, 21, & l2_frame_error_reest}, 
        {0, 16, & l2_st14_persistant_da}, 
        {1, 16, & l2_st24_tei_remove}, 
        {2, 16, & l2_st3_tei_remove}, 
        {3, 16, & l2_st14_persistant_da}, 
        {4, 16, & l2_st5_persistant_da}, 
        {5, 16, & l2_st6_persistant_da}, 
        {6, 16, & l2_persistant_da}, 
        {7, 16, & l2_persistant_da}};
static int ph_data_indication(struct layer2 *l2 , struct mISDNhead *hh , struct sk_buff *skb ) 
{ 
  u_char *datap ;
  int ret ;
  int psapi ;
  int ptei ;
  u_int l ;
  int c ;
  u_char *tmp ;
  u_char *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
  datap = skb->data;
  ret = -22;
  c = 0;
  l = l2addrsize(l2);
  if (skb->len <= l) {
    mISDN_FsmEvent(& l2->l2m, 21, 78);
    return (ret);
  } else {

  }
  tmp___1 = constant_test_bit(1, (unsigned long const volatile   *)(& l2->flag));
  if (tmp___1 != 0) {
    tmp = datap;
    datap = datap + 1;
    psapi = (int )*tmp;
    tmp___0 = datap;
    datap = datap + 1;
    ptei = (int )*tmp___0;
    if (psapi & 1 || (ptei & 1) == 0) {
      printk("<4>l2 D-channel frame wrong EA0/EA1\n");
      return (ret);
    } else {

    }
    psapi = psapi >> 2;
    ptei = ptei >> 1;
    if ((int )l2->sapi != psapi) {
      kfree_skb(skb);
      return (0);
    } else {

    }
    if ((int )l2->tei != ptei && ptei != 127) {
      kfree_skb(skb);
      return (0);
    } else {

    }
  } else {
    datap = datap + (unsigned long )l;
  }
  if (((int )*datap & 1) == 0) {
    c = iframe_error(l2, skb);
    if (c == 0) {
      ret = mISDN_FsmEvent(& l2->l2m, 7, (void *)skb);
    } else {

    }
  } else {
    tmp___8 = IsSFrame(datap, l2);
    if (tmp___8 != 0) {
      c = super_error(l2, skb);
      if (c == 0) {
        ret = mISDN_FsmEvent(& l2->l2m, 6, (void *)skb);
      } else {

      }
    } else {
      tmp___7 = IsUI(datap);
      if (tmp___7 != 0) {
        c = UI_error(l2, skb);
        if (c == 0) {
          ret = mISDN_FsmEvent(& l2->l2m, 0, (void *)skb);
        } else {

        }
      } else {
        tmp___6 = IsSABME(datap, l2);
        if (tmp___6 != 0) {
          c = unnum_error(l2, skb, 0);
          if (c == 0) {
            ret = mISDN_FsmEvent(& l2->l2m, 1, (void *)skb);
          } else {

          }
        } else {
          tmp___5 = IsUA(datap);
          if (tmp___5 != 0) {
            c = unnum_error(l2, skb, 1);
            if (c == 0) {
              ret = mISDN_FsmEvent(& l2->l2m, 4, (void *)skb);
            } else {

            }
          } else {
            tmp___4 = IsDISC(datap);
            if (tmp___4 != 0) {
              c = unnum_error(l2, skb, 0);
              if (c == 0) {
                ret = mISDN_FsmEvent(& l2->l2m, 2, (void *)skb);
              } else {

              }
            } else {
              tmp___3 = IsDM(datap);
              if (tmp___3 != 0) {
                c = unnum_error(l2, skb, 1);
                if (c == 0) {
                  ret = mISDN_FsmEvent(& l2->l2m, 3, (void *)skb);
                } else {

                }
              } else {
                tmp___2 = IsFRMR(datap);
                if (tmp___2 != 0) {
                  c = FRMR_error(l2, skb);
                  if (c == 0) {
                    ret = mISDN_FsmEvent(& l2->l2m, 5, (void *)skb);
                  } else {

                  }
                } else {
                  c = 76;
                }
              }
            }
          }
        }
      }
    }
  }
  if (c != 0) {
    printk("<4>l2 D-channel frame error %c\n", c);
    mISDN_FsmEvent(& l2->l2m, 21, (void *)((long )c));
  } else {

  }
  return (ret);
}
}
static int l2_send(struct mISDNchannel *ch , struct sk_buff *skb ) 
{ 
  struct layer2 *l2 ;
  struct mISDNchannel  const  *__mptr ;
  struct mISDNhead *hh ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  u_int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  u_int tmp___7 ;
  int tmp___8 ;

  {
  __mptr = (struct mISDNchannel  const  *)ch;
  l2 = (struct layer2 *)__mptr + 0xfffffffffffffff0UL;
  hh = (struct mISDNhead *)(& skb->cb);
  ret = -22;
  if ((*debug___3 & 524288U) != 0U) {
    printk("<7>%s: prim(%x) id(%x) tei(%d)\n", "l2_send", hh->prim, hh->id, (int )l2->tei);
  } else {

  }
  switch (hh->prim) {
  case 8194U: 
  ret = ph_data_indication(l2, hh, skb);
  goto ldv_29712;
  case 24578U: 
  ret = ph_data_confirm(l2, hh, skb);
  goto ldv_29712;
  case 258U: 
  test_and_set_bit(12, (unsigned long volatile   *)(& l2->flag));
  l2up_create(l2, 1282U, 0, 0);
  tmp = test_and_clear_bit(13, (unsigned long volatile   *)(& l2->flag));
  if (tmp != 0) {
    ret = mISDN_FsmEvent(& l2->l2m, 11, (void *)skb);
  } else {

  }
  goto ldv_29712;
  case 514U: 
  test_and_clear_bit(12, (unsigned long volatile   *)(& l2->flag));
  l2up_create(l2, 1538U, 0, 0);
  ret = mISDN_FsmEvent(& l2->l2m, 16, (void *)skb);
  goto ldv_29712;
  case 1794U: ;
  if ((unsigned long )l2->up == (unsigned long )((struct mISDNchannel *)0)) {
    goto ldv_29712;
  } else {

  }
  ret = (*((l2->up)->send))(l2->up, skb);
  goto ldv_29712;
  case 12292U: 
  ret = mISDN_FsmEvent(& l2->l2m, 8, (void *)skb);
  goto ldv_29712;
  case 12548U: 
  ret = mISDN_FsmEvent(& l2->l2m, 10, (void *)skb);
  goto ldv_29712;
  case 4100U: 
  tmp___0 = constant_test_bit(0, (unsigned long const volatile   *)(& l2->flag));
  if (tmp___0 != 0) {
    test_and_set_bit(2, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
  tmp___6 = constant_test_bit(12, (unsigned long const volatile   *)(& l2->flag));
  if (tmp___6 != 0) {
    tmp___4 = constant_test_bit(1, (unsigned long const volatile   *)(& l2->flag));
    if (tmp___4 != 0) {
      ret = mISDN_FsmEvent(& l2->l2m, 11, (void *)skb);
    } else {
      tmp___5 = constant_test_bit(2, (unsigned long const volatile   *)(& l2->flag));
      if (tmp___5 != 0) {
        ret = mISDN_FsmEvent(& l2->l2m, 11, (void *)skb);
      } else {
        tmp___1 = constant_test_bit(1, (unsigned long const volatile   *)(& l2->flag));
        if (tmp___1 != 0) {
          test_and_set_bit(13, (unsigned long volatile   *)(& l2->flag));
        } else {
          tmp___2 = constant_test_bit(2, (unsigned long const volatile   *)(& l2->flag));
          if (tmp___2 != 0) {
            test_and_set_bit(13, (unsigned long volatile   *)(& l2->flag));
          } else {

          }
        }
        tmp___3 = l2_newid(l2);
        ret = l2down(l2, 257U, tmp___3, skb);
      }
    }
  } else {

  }
  goto ldv_29712;
  case 4356U: 
  tmp___8 = constant_test_bit(0, (unsigned long const volatile   *)(& l2->flag));
  if (tmp___8 != 0) {
    tmp___7 = l2_newid(l2);
    l2down_create(l2, 513U, tmp___7, 0, 0);
  } else {

  }
  ret = mISDN_FsmEvent(& l2->l2m, 12, (void *)skb);
  goto ldv_29712;
  default: ;
  if ((*debug___3 & 16711680U) != 0U) {
    l2m_debug(& l2->l2m, (char *)"l2 unknown pr %04x", hh->prim);
  } else {

  }
  }
  ldv_29712: ;
  if (ret != 0) {
    kfree_skb(skb);
    ret = 0;
  } else {

  }
  return (ret);
}
}
int tei_l2(struct layer2 *l2 , u_int cmd , u_long arg ) 
{ 
  int ret ;

  {
  ret = -22;
  if ((*debug___3 & 1048576U) != 0U) {
    printk("<7>%s: cmd(%x)\n", "tei_l2", cmd);
  } else {

  }
  switch (cmd) {
  case (u_int )6148: 
  ret = mISDN_FsmEvent(& l2->l2m, 13, (void *)arg);
  goto ldv_29730;
  case (u_int )6660: 
  ret = mISDN_FsmEvent(& l2->l2m, 14, 0);
  goto ldv_29730;
  case (u_int )7940: 
  ret = mISDN_FsmEvent(& l2->l2m, 15, 0);
  goto ldv_29730;
  case (u_int )24324: 
  printk("<5>MDL_ERROR|REQ (tei_l2)\n");
  ret = mISDN_FsmEvent(& l2->l2m, 15, 0);
  goto ldv_29730;
  }
  ldv_29730: ;
  return (ret);
}
}
static void release_l2(struct layer2 *l2 ) 
{ 
  int tmp ;

  {
  mISDN_FsmDelTimer(& l2->t200, 21);
  mISDN_FsmDelTimer(& l2->t203, 16);
  skb_queue_purge(& l2->i_queue);
  skb_queue_purge(& l2->ui_queue);
  skb_queue_purge(& l2->down_queue);
  ReleaseWin(l2);
  tmp = constant_test_bit(1, (unsigned long const volatile   *)(& l2->flag));
  if (tmp != 0) {
    TEIrelease(l2);
    if ((unsigned long )l2->ch.st != (unsigned long )((struct mISDNstack *)0)) {
      (*(((l2->ch.st)->dev)->D.ctrl))(& ((l2->ch.st)->dev)->D, 512U, 0);
    } else {

    }
  } else {

  }
  kfree((void const   *)l2);
  return;
}
}
static int l2_ctrl(struct mISDNchannel *ch , u_int cmd , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct mISDNchannel  const  *__mptr ;
  u_int info ;
  int tmp ;

  {
  __mptr = (struct mISDNchannel  const  *)ch;
  l2 = (struct layer2 *)__mptr + 0xfffffffffffffff0UL;
  if ((*debug___3 & 262144U) != 0U) {
    printk("<7>%s:(%x)\n", "l2_ctrl", cmd);
  } else {

  }
  switch (cmd) {
  case (u_int )256: 
  tmp = constant_test_bit(1, (unsigned long const volatile   *)(& l2->flag));
  if (tmp != 0) {
    set_channel_address(& l2->ch, (u_int )l2->sapi, (u_int )l2->tei);
    info = 1U;
    l2up_create(l2, 8U, 4, (void *)(& info));
  } else {

  }
  goto ldv_29748;
  case (u_int )512: ;
  if ((unsigned long )l2->ch.peer != (unsigned long )((struct mISDNchannel *)0)) {
    (*((l2->ch.peer)->ctrl))(l2->ch.peer, 512U, 0);
  } else {

  }
  release_l2(l2);
  goto ldv_29748;
  }
  ldv_29748: ;
  return (0);
}
}
struct layer2 *create_l2(struct mISDNchannel *ch , u_int protocol , u_long options ,
                         u_long arg ) 
{ 
  struct layer2 *l2 ;
  struct channel_req rq ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;

  {
  tmp = kzalloc(816UL, 208U);
  l2 = (struct layer2 *)tmp;
  if ((unsigned long )l2 == (unsigned long )((struct layer2 *)0)) {
    printk("<3>kzalloc layer2 failed\n");
    return (0);
  } else {

  }
  l2->next_id = 1U;
  l2->down_id = 65534U;
  l2->up = ch;
  l2->ch.st = ch->st;
  l2->ch.send = & l2_send;
  l2->ch.ctrl = & l2_ctrl;
  switch (protocol) {
  case (u_int )17: 
  test_and_set_bit(1, (unsigned long volatile   *)(& l2->flag));
  test_and_set_bit(18, (unsigned long volatile   *)(& l2->flag));
  test_and_set_bit(3, (unsigned long volatile   *)(& l2->flag));
  l2->sapi = 0;
  l2->maxlen = 260U;
  tmp___0 = constant_test_bit(1, (unsigned long const volatile   *)(& options));
  if (tmp___0 != 0) {
    l2->window = 7U;
  } else {
    l2->window = 1U;
  }
  tmp___1 = constant_test_bit(2, (unsigned long const volatile   *)(& options));
  if (tmp___1 != 0) {
    test_and_set_bit(14, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
  tmp___2 = constant_test_bit(3, (unsigned long const volatile   *)(& options));
  if (tmp___2 != 0) {
    test_and_set_bit(15, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
  l2->tei = (signed char )arg;
  l2->T200 = 1000;
  l2->N200 = 3;
  l2->T203 = 10000;
  tmp___3 = constant_test_bit(1, (unsigned long const volatile   *)(& options));
  if (tmp___3 != 0) {
    rq.protocol = 4U;
  } else {
    rq.protocol = 2U;
  }
  rq.adr.channel = 0U;
  (*(((l2->ch.st)->dev)->D.ctrl))(& ((l2->ch.st)->dev)->D, 256U, (void *)(& rq));
  goto ldv_29759;
  case (u_int )16: 
  test_and_set_bit(1, (unsigned long volatile   *)(& l2->flag));
  test_and_set_bit(3, (unsigned long volatile   *)(& l2->flag));
  test_and_set_bit(2, (unsigned long volatile   *)(& l2->flag));
  l2->sapi = 0;
  l2->maxlen = 260U;
  tmp___4 = constant_test_bit(1, (unsigned long const volatile   *)(& options));
  if (tmp___4 != 0) {
    l2->window = 7U;
  } else {
    l2->window = 1U;
  }
  tmp___5 = constant_test_bit(2, (unsigned long const volatile   *)(& options));
  if (tmp___5 != 0) {
    test_and_set_bit(14, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
  tmp___6 = constant_test_bit(3, (unsigned long const volatile   *)(& options));
  if (tmp___6 != 0) {
    test_and_set_bit(15, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
  l2->tei = (signed char )arg;
  l2->T200 = 1000;
  l2->N200 = 3;
  l2->T203 = 10000;
  tmp___7 = constant_test_bit(1, (unsigned long const volatile   *)(& options));
  if (tmp___7 != 0) {
    rq.protocol = 3U;
  } else {
    rq.protocol = 1U;
  }
  rq.adr.channel = 0U;
  (*(((l2->ch.st)->dev)->D.ctrl))(& ((l2->ch.st)->dev)->D, 256U, (void *)(& rq));
  goto ldv_29759;
  case (u_int )35: 
  test_and_set_bit(0, (unsigned long volatile   *)(& l2->flag));
  l2->window = 7U;
  l2->maxlen = 2048U;
  l2->T200 = 1000;
  l2->N200 = 4;
  l2->T203 = 5000;
  l2->addr.A = 3U;
  l2->addr.B = 1U;
  goto ldv_29759;
  default: 
  printk("<3>layer2 create failed prt %x\n", protocol);
  kfree((void const   *)l2);
  return (0);
  }
  ldv_29759: 
  skb_queue_head_init(& l2->i_queue);
  skb_queue_head_init(& l2->ui_queue);
  skb_queue_head_init(& l2->down_queue);
  skb_queue_head_init(& l2->tmp_queue);
  InitWin(l2);
  l2->l2m.fsm = & l2fsm;
  tmp___8 = constant_test_bit(0, (unsigned long const volatile   *)(& l2->flag));
  if (tmp___8 != 0) {
    l2->l2m.state = 3;
  } else {
    tmp___9 = constant_test_bit(14, (unsigned long const volatile   *)(& l2->flag));
    if (tmp___9 != 0) {
      l2->l2m.state = 3;
    } else {
      tmp___10 = constant_test_bit(18, (unsigned long const volatile   *)(& l2->flag));
      if (tmp___10 != 0) {
        l2->l2m.state = 3;
      } else {
        l2->l2m.state = 0;
      }
    }
  }
  l2->l2m.debug = (int )*debug___3;
  l2->l2m.userdata = (void *)l2;
  l2->l2m.userint = 0;
  l2->l2m.printdebug = & l2m_debug;
  mISDN_FsmInitTimer(& l2->l2m, & l2->t200);
  mISDN_FsmInitTimer(& l2->l2m, & l2->t203);
  return (l2);
}
}
static int x75create(struct channel_req *crq ) 
{ 
  struct layer2 *l2 ;

  {
  if (crq->protocol != 35U) {
    return (-93);
  } else {

  }
  l2 = create_l2(crq->ch, crq->protocol, 0UL, 0UL);
  if ((unsigned long )l2 == (unsigned long )((struct layer2 *)0)) {
    return (-12);
  } else {

  }
  crq->ch = & l2->ch;
  crq->protocol = 34U;
  return (0);
}
}
static struct Bprotocol X75SLP  =    {{0, 0}, (char *)"X75SLP", 8U, & x75create};
int Isdnl2_Init(u_int *deb ) 
{ 


  {
  debug___3 = deb;
  mISDN_register_Bprotocol(& X75SLP);
  l2fsm.state_count = 8;
  l2fsm.event_count = 22;
  l2fsm.strEvent = (char **)(& strL2Event);
  l2fsm.strState = (char **)(& strL2State);
  mISDN_FsmNew(& l2fsm, (struct FsmNode *)(& L2FnList), 88);
  TEIInit(deb);
  return (0);
}
}
void Isdnl2_cleanup(void) 
{ 


  {
  mISDN_unregister_Bprotocol(& X75SLP);
  TEIFree();
  mISDN_FsmFree(& l2fsm);
  return;
}
}
void ldv_main6_sequence_infinite_withcheck_stateful(void) 
{ 
  struct channel_req *var_group1 ;
  int tmp ;
  int tmp___0 ;

  {
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  goto ldv_29795;
  ldv_29794: 
  tmp = nondet_int();
  switch (tmp) {
  case 0: 
  ldv_handler_precall();
  x75create(var_group1);
  goto ldv_29792;
  default: ;
  goto ldv_29792;
  }
  ldv_29792: ;
  ldv_29795: 
  tmp___0 = nondet_int();
  if (tmp___0 != 0) {
    goto ldv_29794;
  } else {

  }


  ldv_check_final_state();
  return;
}
}
void ldv___ldv_spin_lock_297(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_298(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
int ldv___ldv_spin_trylock_299(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = __ldv_spin_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv___ldv_spin_lock_300(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_dcache_lock();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_301(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_d_lock_of_dentry();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_302(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_d_lock_of_dentry();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_303(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_dcache_lock();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_304(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_d_lock_of_dentry();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_305(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_d_lock_of_dentry();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_306(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_i_lock_of_inode();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_307(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_i_lock_of_inode();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_308(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_d_lock_of_dentry();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_309(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_d_lock_of_dentry();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_310(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_siglock_of_sighand_struct();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_311(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_siglock_of_sighand_struct();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_312(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_alloc_lock_of_task_struct();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_313(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_alloc_lock_of_task_struct();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_314(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_siglock_of_sighand_struct();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_315(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock__xmit_lock_of_netdev_queue();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_316(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock__xmit_lock_of_netdev_queue();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
int ldv___ldv_spin_trylock_317(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___19 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = __ldv_spin_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_spin_trylock__xmit_lock_of_netdev_queue();
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv___ldv_spin_unlock_318(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock__xmit_lock_of_netdev_queue();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_319(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock__xmit_lock_of_netdev_queue();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_320(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_tx_global_lock_of_net_device();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_321(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_tx_global_lock_of_net_device();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_322(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_addr_list_lock_of_net_device();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_323(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_addr_list_lock_of_net_device();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_324(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_addr_list_lock_of_net_device();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_325(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_addr_list_lock_of_net_device();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
extern unsigned long _read_lock_irqsave(rwlock_t * ) ;
extern void _read_unlock_irqrestore(rwlock_t * , unsigned long  ) ;
void ldv___ldv_spin_lock_355(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_358(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_359(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_362(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_364(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_366(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_368(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_370(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_373(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_374(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_378(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_380(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_381(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_356(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_360(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_361(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_363(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_365(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_367(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_369(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_371(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_372(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_376(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_377(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_379(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_382(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_383(spinlock_t *ldv_func_arg1 ) ;
int ldv___ldv_spin_trylock_357(spinlock_t *ldv_func_arg1 ) ;
int ldv___ldv_spin_trylock_375(spinlock_t *ldv_func_arg1 ) ;
extern void get_random_bytes(void * , int  ) ;
static u_int *debug___4  ;
static struct Fsm deactfsm  =    {0, 0, 0, 0, 0};
static struct Fsm teifsmu  =    {0, 0, 0, 0, 0};
static struct Fsm teifsmn  =    {0, 0, 0, 0, 0};
static char *strDeactState[3U]  = {      (char *)"ST_L1_DEACT",      (char *)"ST_L1_DEACT_PENDING",      (char *)"ST_L1_ACTIV"};
static char *strDeactEvent[6U]  = {      (char *)"EV_ACTIVATE",      (char *)"EV_ACTIVATE_IND",      (char *)"EV_DEACTIVATE",      (char *)"EV_DEACTIVATE_IND", 
        (char *)"EV_UI",      (char *)"EV_DATIMER"};
static void da_debug(struct FsmInst *fi , char *fmt  , ...) 
{ 
  struct manager *mgr ;
  va_list va ;

  {
  mgr = (struct manager *)fi->userdata;
  if ((*debug___4 & 2097152U) == 0U) {
    return;
  } else {

  }
  ldv__builtin_va_start((__va_list_tag *)(& va));
  printk("<7>mgr(%d): ", ((mgr->ch.st)->dev)->id);
  vprintk((char const   *)fmt, (__va_list_tag *)(& va));
  printk("\n");
  ldv__builtin_va_end((__va_list_tag *)(& va));
  return;
}
}
static void da_activate(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct manager *mgr ;

  {
  mgr = (struct manager *)fi->userdata;
  if (fi->state == 1) {
    mISDN_FsmDelTimer(& mgr->datimer, 1);
  } else {

  }
  mISDN_FsmChangeState(fi, 2);
  return;
}
}
static void da_deactivate_ind(struct FsmInst *fi , int event , void *arg ) 
{ 


  {
  mISDN_FsmChangeState(fi, 0);
  return;
}
}
static void da_deactivate(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct manager *mgr ;
  struct layer2 *l2 ;
  u_long flags ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
  mgr = (struct manager *)fi->userdata;
  flags = _read_lock_irqsave(& mgr->lock);
  __mptr = (struct list_head  const  *)mgr->layer2.next;
  l2 = (struct layer2 *)__mptr;
  goto ldv_29095;
  ldv_29094: ;
  if (l2->l2m.state > 3) {
    _read_unlock_irqrestore(& mgr->lock, flags);
    return;
  } else {

  }
  __mptr___0 = (struct list_head  const  *)l2->list.next;
  l2 = (struct layer2 *)__mptr___0;
  ldv_29095: 
  __builtin_prefetch((void const   *)l2->list.next);
  if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
    goto ldv_29094;
  } else {

  }
  _read_unlock_irqrestore(& mgr->lock, flags);
  mISDN_FsmAddTimer(& mgr->datimer, 10000, 5, 0, 1);
  mISDN_FsmChangeState(fi, 1);
  return;
}
}
static void da_ui(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct manager *mgr ;

  {
  mgr = (struct manager *)fi->userdata;
  mISDN_FsmDelTimer(& mgr->datimer, 2);
  mISDN_FsmAddTimer(& mgr->datimer, 10000, 5, 0, 2);
  return;
}
}
static void da_timer(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct manager *mgr ;
  struct layer2 *l2 ;
  u_long flags ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
  mgr = (struct manager *)fi->userdata;
  flags = _read_lock_irqsave(& mgr->lock);
  __mptr = (struct list_head  const  *)mgr->layer2.next;
  l2 = (struct layer2 *)__mptr;
  goto ldv_29125;
  ldv_29124: ;
  if (l2->l2m.state > 3) {
    _read_unlock_irqrestore(& mgr->lock, flags);
    mISDN_FsmChangeState(fi, 2);
    return;
  } else {

  }
  __mptr___0 = (struct list_head  const  *)l2->list.next;
  l2 = (struct layer2 *)__mptr___0;
  ldv_29125: 
  __builtin_prefetch((void const   *)l2->list.next);
  if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
    goto ldv_29124;
  } else {

  }
  _read_unlock_irqrestore(& mgr->lock, flags);
  mISDN_FsmChangeState(fi, 0);
  _queue_data(& mgr->ch, 513U, 65535U, 0U, 0, 32U);
  return;
}
}
static struct FsmNode DeactFnList[6U]  = {      {0, 1, & da_activate}, 
        {2, 3, & da_deactivate_ind}, 
        {2, 2, & da_deactivate}, 
        {1, 0, & da_activate}, 
        {1, 4, & da_ui}, 
        {1, 5, & da_timer}};
static char *strTeiState[3U]  = {      (char *)"ST_TEI_NOP",      (char *)"ST_TEI_IDREQ",      (char *)"ST_TEI_IDVERIFY"};
static char *strTeiEvent[9U]  = 
  {      (char *)"EV_IDREQ",      (char *)"EV_ASSIGN",      (char *)"EV_ASSIGN_REQ",      (char *)"EV_DENIED", 
        (char *)"EV_CHKREQ",      (char *)"EV_CHKRESP",      (char *)"EV_REMOVE",      (char *)"EV_VERIFY", 
        (char *)"EV_TIMER"};
static void tei_debug(struct FsmInst *fi , char *fmt  , ...) 
{ 
  struct teimgr *tm ;
  va_list va ;

  {
  tm = (struct teimgr *)fi->userdata;
  if ((*debug___4 & 2097152U) == 0U) {
    return;
  } else {

  }
  ldv__builtin_va_start((__va_list_tag *)(& va));
  printk("<7>tei(%d): ", (int )(tm->l2)->tei);
  vprintk((char const   *)fmt, (__va_list_tag *)(& va));
  printk("\n");
  ldv__builtin_va_end((__va_list_tag *)(& va));
  return;
}
}
static int get_free_id(struct manager *mgr ) 
{ 
  u64 ids ;
  int i ;
  struct layer2 *l2 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int tmp ;

  {
  ids = 0ULL;
  __mptr = (struct list_head  const  *)mgr->layer2.next;
  l2 = (struct layer2 *)__mptr;
  goto ldv_29165;
  ldv_29164: ;
  if (l2->ch.nr > 63U) {
    printk("<4>%s: more as 63 layer2 for one device\n", "get_free_id");
    return (-16);
  } else {

  }
  test_and_set_bit((int )l2->ch.nr, (unsigned long volatile   *)(& ids));
  __mptr___0 = (struct list_head  const  *)l2->list.next;
  l2 = (struct layer2 *)__mptr___0;
  ldv_29165: 
  __builtin_prefetch((void const   *)l2->list.next);
  if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
    goto ldv_29164;
  } else {

  }
  i = 1;
  goto ldv_29168;
  ldv_29167: 
  tmp = variable_test_bit(i, (unsigned long const volatile   *)(& ids));
  if (tmp == 0) {
    return (i);
  } else {

  }
  i = i + 1;
  ldv_29168: ;
  if (i <= 63) {
    goto ldv_29167;
  } else {

  }
  printk("<4>%s: more as 63 layer2 for one device\n", "get_free_id");
  return (-16);
}
}
static int get_free_tei(struct manager *mgr ) 
{ 
  u64 ids ;
  int i ;
  struct layer2 *l2 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int tmp ;

  {
  ids = 0ULL;
  __mptr = (struct list_head  const  *)mgr->layer2.next;
  l2 = (struct layer2 *)__mptr;
  goto ldv_29182;
  ldv_29181: ;
  if (l2->ch.nr == 0U) {
    goto ldv_29180;
  } else {

  }
  if ((l2->ch.addr & 255U) != 0U) {
    goto ldv_29180;
  } else {

  }
  i = (int )(l2->ch.addr >> 8);
  if (i <= 63) {
    goto ldv_29180;
  } else {

  }
  i = i + -64;
  test_and_set_bit(i, (unsigned long volatile   *)(& ids));
  ldv_29180: 
  __mptr___0 = (struct list_head  const  *)l2->list.next;
  l2 = (struct layer2 *)__mptr___0;
  ldv_29182: 
  __builtin_prefetch((void const   *)l2->list.next);
  if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
    goto ldv_29181;
  } else {

  }
  i = 0;
  goto ldv_29185;
  ldv_29184: 
  tmp = variable_test_bit(i, (unsigned long const volatile   *)(& ids));
  if (tmp == 0) {
    return (i + 64);
  } else {

  }
  i = i + 1;
  ldv_29185: ;
  if (i <= 63) {
    goto ldv_29184;
  } else {

  }
  printk("<4>%s: more as 63 dynamic tei for one device\n", "get_free_tei");
  return (-1);
}
}
static void teiup_create(struct manager *mgr , u_int prim , int len , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct mISDNhead *hh ;
  int err ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___0 ;

  {
  skb = mI_alloc_skb((unsigned int )len, 32U);
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
    return;
  } else {

  }
  hh = (struct mISDNhead *)(& skb->cb);
  hh->prim = prim;
  hh->id = (mgr->ch.nr << 16) | mgr->ch.addr;
  if (len != 0) {
    __len = (size_t )len;
    tmp___0 = skb_put(skb, (unsigned int )len);
    __ret = __builtin_memcpy((void *)tmp___0, (void const   *)arg, __len);
  } else {

  }
  err = (*((mgr->up)->send))(mgr->up, skb);
  if (err != 0) {
    printk("<4>%s: err=%d\n", "teiup_create", err);
    kfree_skb(skb);
  } else {

  }
  return;
}
}
static u_int new_id(struct manager *mgr ) 
{ 
  u_int id ;
  u_int tmp ;

  {
  tmp = mgr->nextid;
  mgr->nextid = mgr->nextid + (u_int )1;
  id = tmp;
  if (id == 32767U) {
    mgr->nextid = 1U;
  } else {

  }
  id = id << 16;
  id = id | 32512U;
  id = id | 63U;
  return (id);
}
}
static void do_send(struct manager *mgr ) 
{ 
  int tmp ;
  struct sk_buff *skb ;
  struct sk_buff *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  tmp = constant_test_bit(16, (unsigned long const volatile   *)(& mgr->options));
  if (tmp == 0) {
    return;
  } else {

  }
  tmp___2 = test_and_set_bit(17, (unsigned long volatile   *)(& mgr->options));
  if (tmp___2 == 0) {
    tmp___0 = skb_dequeue(& mgr->sendq);
    skb = tmp___0;
    if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
      test_and_clear_bit(17, (unsigned long volatile   *)(& mgr->options));
      return;
    } else {

    }
    mgr->lastid = ((struct mISDNhead *)(& skb->cb))->id;
    mISDN_FsmEvent(& mgr->deact, 4, 0);
    tmp___1 = (*(mgr->ch.recv))(mgr->ch.peer, skb);
    if (tmp___1 != 0) {
      kfree_skb(skb);
      test_and_clear_bit(17, (unsigned long volatile   *)(& mgr->options));
      mgr->lastid = 65534U;
    } else {

    }
  } else {

  }
  return;
}
}
static void do_ack(struct manager *mgr , u_int id ) 
{ 
  struct sk_buff *skb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  tmp___1 = constant_test_bit(17, (unsigned long const volatile   *)(& mgr->options));
  if (tmp___1 != 0) {
    if (mgr->lastid == id) {
      tmp___0 = constant_test_bit(16, (unsigned long const volatile   *)(& mgr->options));
      if (tmp___0 != 0) {
        skb = skb_dequeue(& mgr->sendq);
        if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
          mgr->lastid = ((struct mISDNhead *)(& skb->cb))->id;
          tmp = (*(mgr->ch.recv))(mgr->ch.peer, skb);
          if (tmp == 0) {
            return;
          } else {

          }
          kfree_skb(skb);
        } else {

        }
      } else {

      }
      mgr->lastid = 65534U;
      test_and_clear_bit(17, (unsigned long volatile   *)(& mgr->options));
    } else {

    }
  } else {

  }
  return;
}
}
static void mgr_send_down(struct manager *mgr , struct sk_buff *skb ) 
{ 
  int tmp ;

  {
  skb_queue_tail(& mgr->sendq, skb);
  tmp = constant_test_bit(16, (unsigned long const volatile   *)(& mgr->options));
  if (tmp == 0) {
    _queue_data(& mgr->ch, 257U, 65535U, 0U, 0, 208U);
  } else {
    do_send(mgr);
  }
  return;
}
}
static int dl_unit_data(struct manager *mgr , struct sk_buff *skb ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  tmp = constant_test_bit(25, (unsigned long const volatile   *)(& mgr->options));
  if (tmp == 0) {
    return (-22);
  } else {

  }
  tmp___0 = constant_test_bit(16, (unsigned long const volatile   *)(& mgr->options));
  if (tmp___0 == 0) {
    _queue_data(& mgr->ch, 257U, 65535U, 0U, 0, 208U);
  } else {

  }
  skb_push(skb, 3U);
  *(skb->data) = 2U;
  *(skb->data + 1UL) = 255U;
  *(skb->data + 2UL) = 3U;
  ((struct mISDNhead *)(& skb->cb))->prim = 8193U;
  ((struct mISDNhead *)(& skb->cb))->id = new_id(mgr);
  skb_queue_tail(& mgr->sendq, skb);
  do_send(mgr);
  return (0);
}
}
unsigned int random_ri(void) 
{ 
  u16 x ;

  {
  get_random_bytes((void *)(& x), 2);
  return ((unsigned int )x);
}
}
static struct layer2 *findtei(struct manager *mgr , int tei ) 
{ 
  struct layer2 *l2 ;
  u_long flags ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
  flags = _read_lock_irqsave(& mgr->lock);
  __mptr = (struct list_head  const  *)mgr->layer2.next;
  l2 = (struct layer2 *)__mptr;
  goto ldv_29241;
  ldv_29240: ;
  if ((((int )l2->sapi == 0 && (int )l2->tei > 0) && (int )l2->tei != 127) && (int )l2->tei == tei) {
    goto done;
  } else {

  }
  __mptr___0 = (struct list_head  const  *)l2->list.next;
  l2 = (struct layer2 *)__mptr___0;
  ldv_29241: 
  __builtin_prefetch((void const   *)l2->list.next);
  if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
    goto ldv_29240;
  } else {

  }
  l2 = 0;
  done: 
  _read_unlock_irqrestore(& mgr->lock, flags);
  return (l2);
}
}
static void put_tei_msg(struct manager *mgr , u_char m_id , unsigned int ri , u_char tei ) 
{ 
  struct sk_buff *skb ;
  u_char bp[8U] ;
  int tmp ;
  u_int tmp___0 ;

  {
  bp[0] = 252U;
  tmp = constant_test_bit(25, (unsigned long const volatile   *)(& mgr->options));
  if (tmp != 0) {
    bp[0] = (u_char )((unsigned int )bp[0] | 2U);
  } else {

  }
  bp[1] = 255U;
  bp[2] = 3U;
  bp[3] = 15U;
  bp[4] = (u_char )(ri >> 8);
  bp[5] = (u_char )ri;
  bp[6] = m_id;
  bp[7] = (u_char )((int )((signed char )((int )tei << 1)) | 1);
  tmp___0 = new_id(mgr);
  skb = _alloc_mISDN_skb(8193U, tmp___0, 8U, (void *)(& bp), 32U);
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
    printk("<4>%s: no skb for tei msg\n", "put_tei_msg");
    return;
  } else {

  }
  mgr_send_down(mgr, skb);
  return;
}
}
static void tei_id_request(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  unsigned int tmp ;

  {
  tm = (struct teimgr *)fi->userdata;
  if ((int )(tm->l2)->tei != 127) {
    (*(tm->tei_m.printdebug))(& tm->tei_m, (char *)"assign request for allready assigned tei %d",
                              (int )(tm->l2)->tei);
    return;
  } else {

  }
  tmp = random_ri();
  tm->ri = (int )tmp;
  if ((*debug___4 & 1048576U) != 0U) {
    (*(tm->tei_m.printdebug))(& tm->tei_m, (char *)"assign request ri %d", tm->ri);
  } else {

  }
  put_tei_msg(tm->mgr, 1, (unsigned int )tm->ri, 127);
  mISDN_FsmChangeState(fi, 1);
  mISDN_FsmAddTimer(& tm->timer, tm->tval, 8, 0, 1);
  tm->nval = 3;
  return;
}
}
static void tei_id_assign(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  struct layer2 *l2 ;
  u_char *dp ;
  int ri ;
  int tei ;
  u_char *tmp ;
  u_char *tmp___0 ;

  {
  tm = (struct teimgr *)fi->userdata;
  dp = (u_char *)arg;
  tmp = dp;
  dp = dp + 1;
  ri = (int )((unsigned int )*tmp << 8);
  tmp___0 = dp;
  dp = dp + 1;
  ri = (int )*tmp___0 + ri;
  dp = dp + 1;
  tei = (int )*dp >> 1;
  if ((*debug___4 & 1048576U) != 0U) {
    (*(tm->tei_m.printdebug))(fi, (char *)"identity assign ri %d tei %d", ri, tei);
  } else {

  }
  l2 = findtei(tm->mgr, tei);
  if ((unsigned long )l2 != (unsigned long )((struct layer2 *)0)) {
    if ((l2->tm)->ri != ri) {
      (*(tm->tei_m.printdebug))(fi, (char *)"possible duplicate assignment tei %d",
                                tei);
      tei_l2(l2, 24324U, 0UL);
    } else
    if (tm->ri == ri) {
      mISDN_FsmDelTimer(& tm->timer, 1);
      mISDN_FsmChangeState(fi, 0);
      tei_l2(tm->l2, 6148U, (u_long )tei);
    } else {

    }
  } else {

  }
  return;
}
}
static void tei_id_test_dup(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  struct layer2 *l2 ;
  u_char *dp ;
  int tei ;
  int ri ;
  u_char *tmp ;
  u_char *tmp___0 ;

  {
  tm = (struct teimgr *)fi->userdata;
  dp = (u_char *)arg;
  tmp = dp;
  dp = dp + 1;
  ri = (int )((unsigned int )*tmp << 8);
  tmp___0 = dp;
  dp = dp + 1;
  ri = (int )*tmp___0 + ri;
  dp = dp + 1;
  tei = (int )*dp >> 1;
  if ((*debug___4 & 1048576U) != 0U) {
    (*(tm->tei_m.printdebug))(fi, (char *)"foreign identity assign ri %d tei %d",
                              ri, tei);
  } else {

  }
  l2 = findtei(tm->mgr, tei);
  if ((unsigned long )l2 != (unsigned long )((struct layer2 *)0)) {
    if ((l2->tm)->ri != ri) {
      (*(tm->tei_m.printdebug))(fi, (char *)"possible duplicate assignment tei %d",
                                tei);
      mISDN_FsmEvent(& (l2->tm)->tei_m, 7, 0);
    } else {

    }
  } else {

  }
  return;
}
}
static void tei_id_denied(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  u_char *dp ;
  int ri ;
  int tei ;
  u_char *tmp ;
  u_char *tmp___0 ;

  {
  tm = (struct teimgr *)fi->userdata;
  dp = (u_char *)arg;
  tmp = dp;
  dp = dp + 1;
  ri = (int )((unsigned int )*tmp << 8);
  tmp___0 = dp;
  dp = dp + 1;
  ri = (int )*tmp___0 + ri;
  dp = dp + 1;
  tei = (int )*dp >> 1;
  if ((*debug___4 & 1048576U) != 0U) {
    (*(tm->tei_m.printdebug))(fi, (char *)"identity denied ri %d tei %d", ri, tei);
  } else {

  }
  return;
}
}
static void tei_id_chk_req(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  u_char *dp ;
  int tei ;
  unsigned int tmp ;

  {
  tm = (struct teimgr *)fi->userdata;
  dp = (u_char *)arg;
  tei = (int )*(dp + 3UL) >> 1;
  if ((*debug___4 & 1048576U) != 0U) {
    (*(tm->tei_m.printdebug))(fi, (char *)"identity check req tei %d", tei);
  } else {

  }
  if ((int )(tm->l2)->tei != 127 && (tei == 127 || (int )(tm->l2)->tei == tei)) {
    mISDN_FsmDelTimer(& tm->timer, 4);
    mISDN_FsmChangeState(& tm->tei_m, 0);
    tmp = random_ri();
    put_tei_msg(tm->mgr, 5, tmp, (int )((u_char )(tm->l2)->tei));
  } else {

  }
  return;
}
}
static void tei_id_remove(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  u_char *dp ;
  int tei ;

  {
  tm = (struct teimgr *)fi->userdata;
  dp = (u_char *)arg;
  tei = (int )*(dp + 3UL) >> 1;
  if ((*debug___4 & 1048576U) != 0U) {
    (*(tm->tei_m.printdebug))(fi, (char *)"identity remove tei %d", tei);
  } else {

  }
  if ((int )(tm->l2)->tei != 127 && (tei == 127 || (int )(tm->l2)->tei == tei)) {
    mISDN_FsmDelTimer(& tm->timer, 5);
    mISDN_FsmChangeState(& tm->tei_m, 0);
    tei_l2(tm->l2, 6660U, 0UL);
  } else {

  }
  return;
}
}
static void tei_id_verify(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;

  {
  tm = (struct teimgr *)fi->userdata;
  if ((*debug___4 & 1048576U) != 0U) {
    (*(tm->tei_m.printdebug))(fi, (char *)"id verify request for tei %d", (int )(tm->l2)->tei);
  } else {

  }
  put_tei_msg(tm->mgr, 7, 0U, (int )((u_char )(tm->l2)->tei));
  mISDN_FsmChangeState(& tm->tei_m, 2);
  mISDN_FsmAddTimer(& tm->timer, tm->tval, 8, 0, 2);
  tm->nval = 2;
  return;
}
}
static void tei_id_req_tout(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  unsigned int tmp ;

  {
  tm = (struct teimgr *)fi->userdata;
  tm->nval = tm->nval - 1;
  if (tm->nval != 0) {
    tmp = random_ri();
    tm->ri = (int )tmp;
    if ((*debug___4 & 1048576U) != 0U) {
      (*(tm->tei_m.printdebug))(fi, (char *)"assign req(%d) ri %d", 4 - tm->nval,
                                tm->ri);
    } else {

    }
    put_tei_msg(tm->mgr, 1, (unsigned int )tm->ri, 127);
    mISDN_FsmAddTimer(& tm->timer, tm->tval, 8, 0, 3);
  } else {
    (*(tm->tei_m.printdebug))(fi, (char *)"assign req failed");
    tei_l2(tm->l2, 24324U, 0UL);
    mISDN_FsmChangeState(fi, 0);
  }
  return;
}
}
static void tei_id_ver_tout(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;

  {
  tm = (struct teimgr *)fi->userdata;
  tm->nval = tm->nval - 1;
  if (tm->nval != 0) {
    if ((*debug___4 & 1048576U) != 0U) {
      (*(tm->tei_m.printdebug))(fi, (char *)"id verify req(%d) for tei %d", 3 - tm->nval,
                                (int )(tm->l2)->tei);
    } else {

    }
    put_tei_msg(tm->mgr, 7, 0U, (int )((u_char )(tm->l2)->tei));
    mISDN_FsmAddTimer(& tm->timer, tm->tval, 8, 0, 4);
  } else {
    (*(tm->tei_m.printdebug))(fi, (char *)"verify req for tei %d failed", (int )(tm->l2)->tei);
    tei_l2(tm->l2, 6660U, 0UL);
    mISDN_FsmChangeState(fi, 0);
  }
  return;
}
}
static struct FsmNode TeiFnListUser[11U]  = 
  {      {0, 0, & tei_id_request}, 
        {0, 1, & tei_id_test_dup}, 
        {0, 7, & tei_id_verify}, 
        {0, 6, & tei_id_remove}, 
        {0, 4, & tei_id_chk_req}, 
        {1, 8, & tei_id_req_tout}, 
        {1, 1, & tei_id_assign}, 
        {1, 3, & tei_id_denied}, 
        {2, 8, & tei_id_ver_tout}, 
        {2, 6, & tei_id_remove}, 
        {2, 4, & tei_id_chk_req}};
static void tei_l2remove(struct layer2 *l2 ) 
{ 


  {
  put_tei_msg((l2->tm)->mgr, 6, 0U, (int )((u_char )l2->tei));
  tei_l2(l2, 6660U, 0UL);
  list_del(& l2->ch.list);
  (*(l2->ch.ctrl))(& l2->ch, 512U, 0);
  return;
}
}
static void tei_assign_req(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  u_char *dp ;
  u_char *tmp ;
  u_char *tmp___0 ;

  {
  tm = (struct teimgr *)fi->userdata;
  dp = (u_char *)arg;
  if ((int )(tm->l2)->tei == 127) {
    (*(tm->tei_m.printdebug))(& tm->tei_m, (char *)"net tei assign request without tei");
    return;
  } else {

  }
  tmp = dp;
  dp = dp + 1;
  tm->ri = (int )((unsigned int )*tmp << 8);
  tmp___0 = dp;
  dp = dp + 1;
  tm->ri = tm->ri + (int )*tmp___0;
  if ((*debug___4 & 1048576U) != 0U) {
    (*(tm->tei_m.printdebug))(& tm->tei_m, (char *)"net assign request ri %d teim %d",
                              tm->ri, (int )*dp);
  } else {

  }
  put_tei_msg(tm->mgr, 2, (unsigned int )tm->ri, (int )((u_char )(tm->l2)->tei));
  mISDN_FsmChangeState(fi, 0);
  return;
}
}
static void tei_id_chk_req_net(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;

  {
  tm = (struct teimgr *)fi->userdata;
  if ((*debug___4 & 1048576U) != 0U) {
    (*(tm->tei_m.printdebug))(fi, (char *)"id check request for tei %d", (int )(tm->l2)->tei);
  } else {

  }
  tm->rcnt = 0;
  put_tei_msg(tm->mgr, 4, 0U, (int )((u_char )(tm->l2)->tei));
  mISDN_FsmChangeState(& tm->tei_m, 2);
  mISDN_FsmAddTimer(& tm->timer, tm->tval, 8, 0, 2);
  tm->nval = 2;
  return;
}
}
static void tei_id_chk_resp(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  u_char *dp ;
  int tei ;

  {
  tm = (struct teimgr *)fi->userdata;
  dp = (u_char *)arg;
  tei = (int )*(dp + 3UL) >> 1;
  if ((*debug___4 & 1048576U) != 0U) {
    (*(tm->tei_m.printdebug))(fi, (char *)"identity check resp tei %d", tei);
  } else {

  }
  if ((int )(tm->l2)->tei == tei) {
    tm->rcnt = tm->rcnt + 1;
  } else {

  }
  return;
}
}
static void tei_id_verify_net(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  u_char *dp ;
  int tei ;

  {
  tm = (struct teimgr *)fi->userdata;
  dp = (u_char *)arg;
  tei = (int )*(dp + 3UL) >> 1;
  if ((*debug___4 & 1048576U) != 0U) {
    (*(tm->tei_m.printdebug))(fi, (char *)"identity verify req tei %d/%d", tei, (int )(tm->l2)->tei);
  } else {

  }
  if ((int )(tm->l2)->tei == tei) {
    tei_id_chk_req_net(fi, event, arg);
  } else {

  }
  return;
}
}
static void tei_id_ver_tout_net(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;

  {
  tm = (struct teimgr *)fi->userdata;
  if (tm->rcnt == 1) {
    if ((*debug___4 & 1048576U) != 0U) {
      (*(tm->tei_m.printdebug))(fi, (char *)"check req for tei %d sucessful\n", (int )(tm->l2)->tei);
    } else {

    }
    mISDN_FsmChangeState(fi, 0);
  } else
  if (tm->rcnt > 1) {
    tei_l2remove(tm->l2);
  } else {
    tm->nval = tm->nval - 1;
    if (tm->nval != 0) {
      if ((*debug___4 & 1048576U) != 0U) {
        (*(tm->tei_m.printdebug))(fi, (char *)"id check req(%d) for tei %d", 3 - tm->nval,
                                  (int )(tm->l2)->tei);
      } else {

      }
      put_tei_msg(tm->mgr, 4, 0U, (int )((u_char )(tm->l2)->tei));
      mISDN_FsmAddTimer(& tm->timer, tm->tval, 8, 0, 4);
    } else {
      (*(tm->tei_m.printdebug))(fi, (char *)"check req for tei %d failed", (int )(tm->l2)->tei);
      mISDN_FsmChangeState(fi, 0);
      tei_l2remove(tm->l2);
    }
  }
  return;
}
}
static struct FsmNode TeiFnListNet[5U]  = {      {0, 2, & tei_assign_req}, 
        {0, 7, & tei_id_verify_net}, 
        {0, 4, & tei_id_chk_req_net}, 
        {2, 8, & tei_id_ver_tout_net}, 
        {2, 5, & tei_id_chk_resp}};
static void tei_ph_data_ind(struct teimgr *tm , u_int mt , u_char *dp , int len ) 
{ 
  int tmp ;

  {
  tmp = constant_test_bit(15, (unsigned long const volatile   *)(& (tm->l2)->flag));
  if (tmp != 0) {
    return;
  } else {

  }
  if ((*debug___4 & 1048576U) != 0U) {
    (*(tm->tei_m.printdebug))(& tm->tei_m, (char *)"tei handler mt %x", mt);
  } else {

  }
  if (mt == 2U) {
    mISDN_FsmEvent(& tm->tei_m, 1, (void *)dp);
  } else
  if (mt == 3U) {
    mISDN_FsmEvent(& tm->tei_m, 3, (void *)dp);
  } else
  if (mt == 4U) {
    mISDN_FsmEvent(& tm->tei_m, 4, (void *)dp);
  } else
  if (mt == 6U) {
    mISDN_FsmEvent(& tm->tei_m, 6, (void *)dp);
  } else
  if (mt == 7U) {
    mISDN_FsmEvent(& tm->tei_m, 7, (void *)dp);
  } else
  if (mt == 5U) {
    mISDN_FsmEvent(& tm->tei_m, 5, (void *)dp);
  } else {

  }
  return;
}
}
static struct layer2 *create_new_tei(struct manager *mgr , int tei ) 
{ 
  u_long opt ;
  u_long flags ;
  int id ;
  struct layer2 *l2 ;
  void *tmp ;

  {
  opt = 0UL;
  if ((unsigned long )mgr->up == (unsigned long )((struct mISDNchannel *)0)) {
    return (0);
  } else {

  }
  if (tei <= 63) {
    test_and_set_bit(3, (unsigned long volatile   *)(& opt));
  } else {

  }
  if ((((mgr->ch.st)->dev)->Dprotocols & 24U) != 0U) {
    test_and_set_bit(1, (unsigned long volatile   *)(& opt));
  } else {

  }
  l2 = create_l2(mgr->up, 17U, (u_long )((unsigned int )opt), (unsigned long )tei);
  if ((unsigned long )l2 == (unsigned long )((struct layer2 *)0)) {
    printk("<4>%s:no memory for layer2\n", "create_new_tei");
    return (0);
  } else {

  }
  tmp = kzalloc(176UL, 208U);
  l2->tm = (struct teimgr *)tmp;
  if ((unsigned long )l2->tm == (unsigned long )((struct teimgr *)0)) {
    kfree((void const   *)l2);
    printk("<4>%s:no memory for teimgr\n", "create_new_tei");
    return (0);
  } else {

  }
  (l2->tm)->mgr = mgr;
  (l2->tm)->l2 = l2;
  (l2->tm)->tei_m.debug = (int )*debug___4 & 2097152;
  (l2->tm)->tei_m.userdata = (void *)l2->tm;
  (l2->tm)->tei_m.printdebug = & tei_debug;
  (l2->tm)->tei_m.fsm = & teifsmn;
  (l2->tm)->tei_m.state = 0;
  (l2->tm)->tval = 2000;
  mISDN_FsmInitTimer(& (l2->tm)->tei_m, & (l2->tm)->timer);
  flags = _write_lock_irqsave(& mgr->lock);
  id = get_free_id(mgr);
  list_add_tail(& l2->list, & mgr->layer2);
  _write_unlock_irqrestore(& mgr->lock, flags);
  if (id < 0) {
    (*(l2->ch.ctrl))(& l2->ch, 512U, 0);
    printk("<4>%s:no free id\n", "create_new_tei");
    return (0);
  } else {
    l2->ch.nr = (u_int )id;
    __add_layer2(& l2->ch, mgr->ch.st);
    l2->ch.recv = mgr->ch.recv;
    l2->ch.peer = mgr->ch.peer;
    (*(l2->ch.ctrl))(& l2->ch, 256U, 0);
  }
  return (l2);
}
}
static void new_tei_req(struct manager *mgr , u_char *dp ) 
{ 
  int tei ;
  int ri ;
  struct layer2 *l2 ;

  {
  ri = (int )*dp << 8;
  ri = (int )*(dp + 1UL) + ri;
  if ((unsigned long )mgr->up == (unsigned long )((struct mISDNchannel *)0)) {
    goto denied;
  } else {

  }
  tei = get_free_tei(mgr);
  if (tei < 0) {
    printk("<4>%s:No free tei\n", "new_tei_req");
    goto denied;
  } else {

  }
  l2 = create_new_tei(mgr, tei);
  if ((unsigned long )l2 == (unsigned long )((struct layer2 *)0)) {
    goto denied;
  } else {
    mISDN_FsmEvent(& (l2->tm)->tei_m, 2, (void *)dp);
  }
  return;
  denied: 
  put_tei_msg(mgr, 3, (unsigned int )ri, 127);
  return;
}
}
static int ph_data_ind(struct manager *mgr , struct sk_buff *skb ) 
{ 
  int ret ;
  struct layer2 *l2 ;
  u_long flags ;
  u_char mt ;
  int tmp ;
  int tmp___0 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
  ret = -22;
  if (skb->len <= 7U) {
    if ((*debug___4 & 1048576U) != 0U) {
      printk("<7>%s: short mgr frame %d/8\n", "ph_data_ind", skb->len);
    } else {

    }
    goto done;
  } else {

  }
  if ((*debug___4 & 1048576U) != 0U) {
    if ((unsigned int )((int )*(skb->data) >> 2) != 63U) {
      goto done;
    } else {

    }
  } else {

  }
  if ((int )*(skb->data) & 1) {
    goto done;
  } else {

  }
  if (((int )*(skb->data + 1UL) & 1) == 0) {
    goto done;
  } else {

  }
  if ((unsigned int )((int )*(skb->data + 1UL) >> 1) != 127U) {
    goto done;
  } else {

  }
  if (((int )*(skb->data + 2UL) & 239) != 3) {
    goto done;
  } else {

  }
  if ((unsigned int )*(skb->data + 3UL) != 15U) {
    goto done;
  } else {

  }
  mt = *(skb->data + 6UL);
  switch ((int )mt) {
  case 1: ;
  case 5: ;
  case 7: 
  tmp = constant_test_bit(25, (unsigned long const volatile   *)(& mgr->options));
  if (tmp == 0) {
    goto done;
  } else {

  }
  goto ldv_29407;
  case 2: ;
  case 3: ;
  case 4: ;
  case 6: 
  tmp___0 = constant_test_bit(25, (unsigned long const volatile   *)(& mgr->options));
  if (tmp___0 != 0) {
    goto done;
  } else {

  }
  goto ldv_29407;
  default: ;
  goto done;
  }
  ldv_29407: 
  ret = 0;
  if ((unsigned int )mt == 1U) {
    new_tei_req(mgr, skb->data + 4U);
    goto done;
  } else {

  }
  flags = _read_lock_irqsave(& mgr->lock);
  __mptr = (struct list_head  const  *)mgr->layer2.next;
  l2 = (struct layer2 *)__mptr;
  goto ldv_29421;
  ldv_29420: 
  tei_ph_data_ind(l2->tm, (u_int )mt, skb->data + 4U, (int )(skb->len - 4U));
  __mptr___0 = (struct list_head  const  *)l2->list.next;
  l2 = (struct layer2 *)__mptr___0;
  ldv_29421: 
  __builtin_prefetch((void const   *)l2->list.next);
  if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
    goto ldv_29420;
  } else {

  }
  _read_unlock_irqrestore(& mgr->lock, flags);
  done: ;
  return (ret);
}
}
int l2_tei(struct layer2 *l2 , u_int cmd , u_long arg ) 
{ 
  struct teimgr *tm ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
  tm = l2->tm;
  tmp = constant_test_bit(15, (unsigned long const volatile   *)(& l2->flag));
  if (tmp != 0) {
    return (0);
  } else {

  }
  if ((*debug___4 & 1048576U) != 0U) {
    printk("<7>%s: cmd(%x)\n", "l2_tei", cmd);
  } else {

  }
  switch (cmd) {
  case (u_int )6404: 
  mISDN_FsmEvent(& tm->tei_m, 0, 0);
  goto ldv_29434;
  case (u_int )7940: 
  tmp___0 = constant_test_bit(25, (unsigned long const volatile   *)(& (tm->mgr)->options));
  if (tmp___0 != 0) {
    mISDN_FsmEvent(& tm->tei_m, 4, (void *)(& l2->tei));
  } else {

  }
  tmp___1 = constant_test_bit(24, (unsigned long const volatile   *)(& (tm->mgr)->options));
  if (tmp___1 != 0) {
    mISDN_FsmEvent(& tm->tei_m, 7, 0);
  } else {

  }
  goto ldv_29434;
  case (u_int )7172: 
  tmp___2 = constant_test_bit(25, (unsigned long const volatile   *)(& (tm->mgr)->options));
  if (tmp___2 != 0) {
    mISDN_FsmEvent(& (tm->mgr)->deact, 0, 0);
  } else {

  }
  goto ldv_29434;
  case (u_int )7428: 
  tmp___3 = constant_test_bit(25, (unsigned long const volatile   *)(& (tm->mgr)->options));
  if (tmp___3 != 0) {
    mISDN_FsmEvent(& (tm->mgr)->deact, 2, 0);
  } else {

  }
  goto ldv_29434;
  case (u_int )7684: 
  tmp___4 = constant_test_bit(25, (unsigned long const volatile   *)(& (tm->mgr)->options));
  if (tmp___4 != 0) {
    mISDN_FsmEvent(& (tm->mgr)->deact, 4, 0);
  } else {

  }
  goto ldv_29434;
  }
  ldv_29434: ;
  return (0);
}
}
void TEIrelease(struct layer2 *l2 ) 
{ 
  struct teimgr *tm ;
  u_long flags ;

  {
  tm = l2->tm;
  mISDN_FsmDelTimer(& tm->timer, 1);
  flags = _write_lock_irqsave(& (tm->mgr)->lock);
  list_del(& l2->list);
  _write_unlock_irqrestore(& (tm->mgr)->lock, flags);
  l2->tm = 0;
  kfree((void const   *)tm);
  return;
}
}
static int create_teimgr(struct manager *mgr , struct channel_req *crq ) 
{ 
  struct layer2 *l2 ;
  u_long opt ;
  u_long flags ;
  int id ;
  int tmp ;
  int tmp___0 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int tmp___1 ;
  void *tmp___2 ;

  {
  opt = 0UL;
  if ((*debug___4 & 1048576U) != 0U) {
    printk("<7>%s: %s proto(%x) adr(%d %d %d %d)\n", "create_teimgr", (char *)(& ((mgr->ch.st)->dev)->name),
           crq->protocol, (int )crq->adr.dev, (int )crq->adr.channel, (int )crq->adr.sapi,
           (int )crq->adr.tei);
  } else {

  }
  if ((unsigned int )crq->adr.sapi != 0U) {
    return (-22);
  } else {

  }
  if ((int )((signed char )crq->adr.tei) < 0) {
    return (-22);
  } else {

  }
  if ((unsigned int )crq->adr.tei <= 63U) {
    test_and_set_bit(3, (unsigned long volatile   *)(& opt));
  } else {

  }
  if ((unsigned int )crq->adr.tei == 0U) {
    test_and_set_bit(2, (unsigned long volatile   *)(& opt));
  } else {

  }
  tmp___0 = constant_test_bit(25, (unsigned long const volatile   *)(& mgr->options));
  if (tmp___0 != 0) {
    if (crq->protocol == 16U) {
      return (-93);
    } else {

    }
    if ((unsigned int )crq->adr.tei != 0U && (unsigned int )crq->adr.tei != 127U) {
      return (-22);
    } else {

    }
    if ((unsigned long )mgr->up != (unsigned long )((struct mISDNchannel *)0)) {
      printk("<4>%s: only one network manager is allowed\n", "create_teimgr");
      return (-16);
    } else {

    }
  } else {
    tmp = constant_test_bit(24, (unsigned long const volatile   *)(& mgr->options));
    if (tmp != 0) {
      if (crq->protocol == 17U) {
        return (-93);
      } else {

      }
      if ((unsigned int )crq->adr.tei > 63U && (unsigned int )crq->adr.tei <= 126U) {
        return (-22);
      } else {

      }
    } else {
      if (crq->protocol == 17U) {
        test_and_set_bit(25, (unsigned long volatile   *)(& mgr->options));
      } else {

      }
      if (crq->protocol == 16U) {
        test_and_set_bit(24, (unsigned long volatile   *)(& mgr->options));
      } else {

      }
    }
  }
  if ((((mgr->ch.st)->dev)->Dprotocols & 24U) != 0U) {
    test_and_set_bit(1, (unsigned long volatile   *)(& opt));
  } else {

  }
  if (crq->protocol == 17U && (unsigned int )crq->adr.tei == 127U) {
    mgr->up = crq->ch;
    id = 1;
    teiup_create(mgr, 8U, 4, (void *)(& id));
    crq->ch = 0;
    tmp___1 = list_empty((struct list_head  const  *)(& mgr->layer2));
    if (tmp___1 == 0) {
      flags = _read_lock_irqsave(& mgr->lock);
      __mptr = (struct list_head  const  *)mgr->layer2.next;
      l2 = (struct layer2 *)__mptr;
      goto ldv_29467;
      ldv_29466: 
      l2->up = mgr->up;
      (*(l2->ch.ctrl))(& l2->ch, 256U, 0);
      __mptr___0 = (struct list_head  const  *)l2->list.next;
      l2 = (struct layer2 *)__mptr___0;
      ldv_29467: 
      __builtin_prefetch((void const   *)l2->list.next);
      if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
        goto ldv_29466;
      } else {

      }
      _read_unlock_irqrestore(& mgr->lock, flags);
    } else {

    }
    return (0);
  } else {

  }
  l2 = create_l2(crq->ch, crq->protocol, (u_long )((unsigned int )opt), (unsigned long )crq->adr.tei);
  if ((unsigned long )l2 == (unsigned long )((struct layer2 *)0)) {
    return (-12);
  } else {

  }
  tmp___2 = kzalloc(176UL, 208U);
  l2->tm = (struct teimgr *)tmp___2;
  if ((unsigned long )l2->tm == (unsigned long )((struct teimgr *)0)) {
    kfree((void const   *)l2);
    printk("<3>kmalloc teimgr failed\n");
    return (-12);
  } else {

  }
  (l2->tm)->mgr = mgr;
  (l2->tm)->l2 = l2;
  (l2->tm)->tei_m.debug = (int )*debug___4 & 2097152;
  (l2->tm)->tei_m.userdata = (void *)l2->tm;
  (l2->tm)->tei_m.printdebug = & tei_debug;
  if (crq->protocol == 16U) {
    (l2->tm)->tei_m.fsm = & teifsmu;
    (l2->tm)->tei_m.state = 0;
    (l2->tm)->tval = 1000;
  } else {
    (l2->tm)->tei_m.fsm = & teifsmn;
    (l2->tm)->tei_m.state = 0;
    (l2->tm)->tval = 2000;
  }
  mISDN_FsmInitTimer(& (l2->tm)->tei_m, & (l2->tm)->timer);
  flags = _write_lock_irqsave(& mgr->lock);
  id = get_free_id(mgr);
  list_add_tail(& l2->list, & mgr->layer2);
  _write_unlock_irqrestore(& mgr->lock, flags);
  if (id < 0) {
    (*(l2->ch.ctrl))(& l2->ch, 512U, 0);
  } else {
    l2->ch.nr = (u_int )id;
    (l2->up)->nr = (u_int )id;
    crq->ch = & l2->ch;
    id = 0;
  }
  return (id);
}
}
static int mgr_send(struct mISDNchannel *ch , struct sk_buff *skb ) 
{ 
  struct manager *mgr ;
  struct mISDNhead *hh ;
  int ret ;
  struct mISDNchannel  const  *__mptr ;
  int tmp ;

  {
  hh = (struct mISDNhead *)(& skb->cb);
  ret = -22;
  __mptr = (struct mISDNchannel  const  *)ch;
  mgr = (struct manager *)__mptr;
  if ((*debug___4 & 524288U) != 0U) {
    printk("<7>%s: prim(%x) id(%x)\n", "mgr_send", hh->prim, hh->id);
  } else {

  }
  switch (hh->prim) {
  case 8194U: 
  mISDN_FsmEvent(& mgr->deact, 4, 0);
  ret = ph_data_ind(mgr, skb);
  goto ldv_29489;
  case 24578U: 
  do_ack(mgr, hh->id);
  ret = 0;
  goto ldv_29489;
  case 258U: 
  test_and_set_bit(16, (unsigned long volatile   *)(& mgr->options));
  mISDN_FsmEvent(& mgr->deact, 1, 0);
  do_send(mgr);
  ret = 0;
  goto ldv_29489;
  case 514U: 
  test_and_clear_bit(16, (unsigned long volatile   *)(& mgr->options));
  mISDN_FsmEvent(& mgr->deact, 3, 0);
  ret = 0;
  goto ldv_29489;
  case 12548U: 
  tmp = dl_unit_data(mgr, skb);
  return (tmp);
  }
  ldv_29489: ;
  if (ret == 0) {
    kfree_skb(skb);
  } else {

  }
  return (ret);
}
}
static int free_teimanager(struct manager *mgr ) 
{ 
  struct layer2 *l2 ;
  struct layer2 *nl2 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  struct list_head  const  *__mptr___4 ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  tmp___0 = constant_test_bit(25, (unsigned long const volatile   *)(& mgr->options));
  if (tmp___0 != 0) {
    mgr->up = 0;
    tmp = constant_test_bit(4, (unsigned long const volatile   *)(& mgr->options));
    if (tmp != 0) {
      __mptr = (struct list_head  const  *)mgr->layer2.next;
      l2 = (struct layer2 *)__mptr;
      __mptr___0 = (struct list_head  const  *)l2->list.next;
      nl2 = (struct layer2 *)__mptr___0;
      goto ldv_29506;
      ldv_29505: 
      put_tei_msg(mgr, 6, 0U, (int )((u_char )l2->tei));
      mutex_lock_nested(& (mgr->ch.st)->lmutex, 0U);
      list_del(& l2->ch.list);
      mutex_unlock(& (mgr->ch.st)->lmutex);
      (*(l2->ch.ctrl))(& l2->ch, 512U, 0);
      l2 = nl2;
      __mptr___1 = (struct list_head  const  *)nl2->list.next;
      nl2 = (struct layer2 *)__mptr___1;
      ldv_29506: ;
      if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
        goto ldv_29505;
      } else {

      }
      test_and_clear_bit(25, (unsigned long volatile   *)(& mgr->options));
    } else {
      __mptr___2 = (struct list_head  const  *)mgr->layer2.next;
      l2 = (struct layer2 *)__mptr___2;
      __mptr___3 = (struct list_head  const  *)l2->list.next;
      nl2 = (struct layer2 *)__mptr___3;
      goto ldv_29515;
      ldv_29514: 
      l2->up = 0;
      l2 = nl2;
      __mptr___4 = (struct list_head  const  *)nl2->list.next;
      nl2 = (struct layer2 *)__mptr___4;
      ldv_29515: ;
      if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
        goto ldv_29514;
      } else {

      }

    }
  } else {

  }
  tmp___2 = constant_test_bit(24, (unsigned long const volatile   *)(& mgr->options));
  if (tmp___2 != 0) {
    tmp___1 = list_empty((struct list_head  const  *)(& mgr->layer2));
    if (tmp___1 != 0) {
      test_and_clear_bit(24, (unsigned long volatile   *)(& mgr->options));
    } else {

    }
  } else {

  }
  (*(((mgr->ch.st)->dev)->D.ctrl))(& ((mgr->ch.st)->dev)->D, 512U, 0);
  return (0);
}
}
static int ctrl_teimanager(struct manager *mgr , void *arg ) 
{ 
  int clean ;

  {
  clean = *((int *)arg);
  if (clean != 0) {
    test_and_set_bit(4, (unsigned long volatile   *)(& mgr->options));
  } else {
    test_and_clear_bit(4, (unsigned long volatile   *)(& mgr->options));
  }
  return (0);
}
}
static int check_data(struct manager *mgr , struct sk_buff *skb ) 
{ 
  struct mISDNhead *hh ;
  int ret ;
  int tei ;
  struct layer2 *l2 ;
  int tmp ;

  {
  hh = (struct mISDNhead *)(& skb->cb);
  if ((*debug___4 & 262144U) != 0U) {
    printk("<7>%s: prim(%x) id(%x)\n", "check_data", hh->prim, hh->id);
  } else {

  }
  tmp = constant_test_bit(24, (unsigned long const volatile   *)(& mgr->options));
  if (tmp != 0) {
    return (-107);
  } else {

  }
  if (hh->prim != 8194U) {
    return (-107);
  } else {

  }
  if (skb->len != 3U) {
    return (-107);
  } else {

  }
  if ((unsigned int )*(skb->data) != 0U) {
    return (-107);
  } else {

  }
  if (((int )*(skb->data + 1UL) & 1) == 0) {
    return (-22);
  } else {

  }
  tei = (int )*(skb->data + 1UL);
  if (tei > 63) {
    return (-107);
  } else {

  }
  if (((int )*(skb->data + 2UL) & -17) != 111) {
    return (-107);
  } else {

  }
  l2 = create_new_tei(mgr, tei);
  if ((unsigned long )l2 == (unsigned long )((struct layer2 *)0)) {
    return (-12);
  } else {

  }
  ret = (*(l2->ch.send))(& l2->ch, skb);
  return (ret);
}
}
void delete_teimanager(struct mISDNchannel *ch ) 
{ 
  struct manager *mgr ;
  struct layer2 *l2 ;
  struct layer2 *nl2 ;
  struct mISDNchannel  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;

  {
  __mptr = (struct mISDNchannel  const  *)ch;
  mgr = (struct manager *)__mptr;
  __mptr___0 = (struct list_head  const  *)mgr->layer2.next;
  l2 = (struct layer2 *)__mptr___0;
  __mptr___1 = (struct list_head  const  *)l2->list.next;
  nl2 = (struct layer2 *)__mptr___1;
  goto ldv_29546;
  ldv_29545: 
  mutex_lock_nested(& (mgr->ch.st)->lmutex, 0U);
  list_del(& l2->ch.list);
  mutex_unlock(& (mgr->ch.st)->lmutex);
  (*(l2->ch.ctrl))(& l2->ch, 512U, 0);
  l2 = nl2;
  __mptr___2 = (struct list_head  const  *)nl2->list.next;
  nl2 = (struct layer2 *)__mptr___2;
  ldv_29546: ;
  if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
    goto ldv_29545;
  } else {

  }
  list_del(& mgr->ch.list);
  list_del(& mgr->bcast.list);
  skb_queue_purge(& mgr->sendq);
  kfree((void const   *)mgr);
  return;
}
}
static int mgr_ctrl(struct mISDNchannel *ch , u_int cmd , void *arg ) 
{ 
  struct manager *mgr ;
  int ret ;
  struct mISDNchannel  const  *__mptr ;

  {
  ret = -22;
  __mptr = (struct mISDNchannel  const  *)ch;
  mgr = (struct manager *)__mptr;
  if ((*debug___4 & 262144U) != 0U) {
    printk("<7>%s(%x, %p)\n", "mgr_ctrl", cmd, arg);
  } else {

  }
  switch (cmd) {
  case (u_int )256: 
  ret = create_teimgr(mgr, (struct channel_req *)arg);
  goto ldv_29559;
  case (u_int )512: 
  ret = free_teimanager(mgr);
  goto ldv_29559;
  case (u_int )768: 
  ret = ctrl_teimanager(mgr, arg);
  goto ldv_29559;
  case (u_int )1024: 
  ret = check_data(mgr, (struct sk_buff *)arg);
  goto ldv_29559;
  }
  ldv_29559: ;
  return (ret);
}
}
static int mgr_bcast(struct mISDNchannel *ch , struct sk_buff *skb ) 
{ 
  struct manager *mgr ;
  struct mISDNchannel  const  *__mptr ;
  struct mISDNhead *hh ;
  struct sk_buff *cskb ;
  struct layer2 *l2 ;
  u_long flags ;
  int ret ;
  struct list_head  const  *__mptr___0 ;
  int tmp ;
  struct list_head  const  *__mptr___1 ;

  {
  __mptr = (struct mISDNchannel  const  *)ch;
  mgr = (struct manager *)__mptr + 0xffffffffffffffb0UL;
  hh = (struct mISDNhead *)(& skb->cb);
  cskb = 0;
  flags = _read_lock_irqsave(& mgr->lock);
  __mptr___0 = (struct list_head  const  *)mgr->layer2.next;
  l2 = (struct layer2 *)__mptr___0;
  goto ldv_29585;
  ldv_29584: ;
  if (((hh->id ^ l2->ch.addr) & 255U) == 0U) {
    tmp = list_is_last((struct list_head  const  *)(& l2->list), (struct list_head  const  *)(& mgr->layer2));
    if (tmp != 0) {
      cskb = skb;
      skb = 0;
    } else
    if ((unsigned long )cskb == (unsigned long )((struct sk_buff *)0)) {
      cskb = skb_copy((struct sk_buff  const  *)skb, 208U);
    } else {

    }
    if ((unsigned long )cskb != (unsigned long )((struct sk_buff *)0)) {
      ret = (*(l2->ch.send))(& l2->ch, cskb);
      if (ret != 0) {
        if ((*debug___4 & 16U) != 0U) {
          printk("<7>%s ch%d prim(%x) addr(%x) err %d\n", "mgr_bcast", l2->ch.nr,
                 hh->prim, l2->ch.addr, ret);
        } else {
          cskb = 0;
        }
      } else {

      }
    } else {
      printk("<4>%s ch%d addr %x no mem\n", "mgr_bcast", ch->nr, ch->addr);
      goto out;
    }
  } else {

  }
  __mptr___1 = (struct list_head  const  *)l2->list.next;
  l2 = (struct layer2 *)__mptr___1;
  ldv_29585: 
  __builtin_prefetch((void const   *)l2->list.next);
  if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
    goto ldv_29584;
  } else {

  }

  out: 
  _read_unlock_irqrestore(& mgr->lock, flags);
  if ((unsigned long )cskb != (unsigned long )((struct sk_buff *)0)) {
    kfree_skb(cskb);
  } else {

  }
  if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
    kfree_skb(skb);
  } else {

  }
  return (0);
}
}
static int mgr_bcast_ctrl(struct mISDNchannel *ch , u_int cmd , void *arg ) 
{ 


  {
  return (-22);
}
}
int create_teimanager(struct mISDNdevice *dev ) 
{ 
  struct manager *mgr ;
  void *tmp ;
  rwlock_t __constr_expr_0 ;

  {
  tmp = kzalloc(480UL, 208U);
  mgr = (struct manager *)tmp;
  if ((unsigned long )mgr == (unsigned long )((struct manager *)0)) {
    return (-12);
  } else {

  }
  INIT_LIST_HEAD(& mgr->layer2);
  __constr_expr_0.raw_lock.lock = 16777216U;
  __constr_expr_0.magic = 3736018669U;
  __constr_expr_0.owner_cpu = 4294967295U;
  __constr_expr_0.owner = 0xffffffffffffffffUL;
  __constr_expr_0.dep_map.key = 0;
  __constr_expr_0.dep_map.class_cache = 0;
  __constr_expr_0.dep_map.name = "mgr->lock";
  __constr_expr_0.dep_map.cpu = 0;
  mgr->lock = __constr_expr_0;
  skb_queue_head_init(& mgr->sendq);
  mgr->nextid = 1U;
  mgr->lastid = 65534U;
  mgr->ch.send = & mgr_send;
  mgr->ch.ctrl = & mgr_ctrl;
  mgr->ch.st = dev->D.st;
  set_channel_address(& mgr->ch, 63U, 127U);
  add_layer2(& mgr->ch, dev->D.st);
  mgr->bcast.send = & mgr_bcast;
  mgr->bcast.ctrl = & mgr_bcast_ctrl;
  mgr->bcast.st = dev->D.st;
  set_channel_address(& mgr->bcast, 0U, 127U);
  add_layer2(& mgr->bcast, dev->D.st);
  mgr->deact.debug = (int )*debug___4 & 8;
  mgr->deact.userdata = (void *)mgr;
  mgr->deact.printdebug = & da_debug;
  mgr->deact.fsm = & deactfsm;
  mgr->deact.state = 0;
  mISDN_FsmInitTimer(& mgr->deact, & mgr->datimer);
  dev->teimgr = & mgr->ch;
  return (0);
}
}
int TEIInit(u_int *deb ) 
{ 


  {
  debug___4 = deb;
  teifsmu.state_count = 3;
  teifsmu.event_count = 9;
  teifsmu.strEvent = (char **)(& strTeiEvent);
  teifsmu.strState = (char **)(& strTeiState);
  mISDN_FsmNew(& teifsmu, (struct FsmNode *)(& TeiFnListUser), 11);
  teifsmn.state_count = 3;
  teifsmn.event_count = 9;
  teifsmn.strEvent = (char **)(& strTeiEvent);
  teifsmn.strState = (char **)(& strTeiState);
  mISDN_FsmNew(& teifsmn, (struct FsmNode *)(& TeiFnListNet), 5);
  deactfsm.state_count = 3;
  deactfsm.event_count = 6;
  deactfsm.strEvent = (char **)(& strDeactEvent);
  deactfsm.strState = (char **)(& strDeactState);
  mISDN_FsmNew(& deactfsm, (struct FsmNode *)(& DeactFnList), 6);
  return (0);
}
}
void TEIFree(void) 
{ 


  {
  mISDN_FsmFree(& teifsmu);
  mISDN_FsmFree(& teifsmn);
  mISDN_FsmFree(& deactfsm);
  return;
}
}
void ldv___ldv_spin_lock_355(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_356(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
int ldv___ldv_spin_trylock_357(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = __ldv_spin_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv___ldv_spin_lock_358(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_dcache_lock();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_359(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_d_lock_of_dentry();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_360(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_d_lock_of_dentry();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_361(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_dcache_lock();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_362(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_d_lock_of_dentry();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_363(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_d_lock_of_dentry();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_364(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_i_lock_of_inode();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_365(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_i_lock_of_inode();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_366(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_d_lock_of_dentry();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_367(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_d_lock_of_dentry();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_368(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_siglock_of_sighand_struct();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_369(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_siglock_of_sighand_struct();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_370(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_alloc_lock_of_task_struct();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_371(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_alloc_lock_of_task_struct();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_372(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_siglock_of_sighand_struct();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_373(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock__xmit_lock_of_netdev_queue();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_374(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock__xmit_lock_of_netdev_queue();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
int ldv___ldv_spin_trylock_375(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___19 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = __ldv_spin_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_spin_trylock__xmit_lock_of_netdev_queue();
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv___ldv_spin_unlock_376(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock__xmit_lock_of_netdev_queue();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_377(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock__xmit_lock_of_netdev_queue();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_378(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_tx_global_lock_of_net_device();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_379(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_tx_global_lock_of_net_device();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_380(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_addr_list_lock_of_net_device();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_381(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_addr_list_lock_of_net_device();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_382(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_addr_list_lock_of_net_device();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_383(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_addr_list_lock_of_net_device();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
__inline static void __list_del(struct list_head *prev , struct list_head *next ) 
{ 


  {
  next->prev = prev;
  prev->next = next;
  return;
}
}
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
  __list_del(entry->prev, entry->next);
  INIT_LIST_HEAD(entry);
  return;
}
}
void ldv___ldv_spin_lock_413(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_416(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_417(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_420(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_422(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_424(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_426(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_428(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_431(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_432(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_436(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_438(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_439(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_442(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_444(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_446(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_lock_448(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_414(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_418(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_419(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_421(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_423(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_425(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_427(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_429(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_430(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_434(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_435(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_437(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_440(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_441(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_443(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_445(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_447(spinlock_t *ldv_func_arg1 ) ;
void ldv___ldv_spin_unlock_449(spinlock_t *ldv_func_arg1 ) ;
int ldv___ldv_spin_trylock_415(spinlock_t *ldv_func_arg1 ) ;
int ldv___ldv_spin_trylock_433(spinlock_t *ldv_func_arg1 ) ;
void ldv_spin_lock_lock_of_mISDNtimerdev(void) ;
void ldv_spin_unlock_lock_of_mISDNtimerdev(void) ;
__inline static void add_timer___0(struct timer_list *timer ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
  tmp = timer_pending((struct timer_list  const  *)timer);
  tmp___0 = ldv__builtin_expect(tmp != 0, 0L);
  if (tmp___0 != 0L) {
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/timer.h"),
                         "i" (165), "i" (24UL));
    ldv_8746: ;
    goto ldv_8746;
  } else {

  }
  __mod_timer(timer, timer->expires);
  return;
}
}
extern int nonseekable_open(struct inode * , struct file * ) ;
__inline static void poll_wait(struct file *filp , wait_queue_head_t *wait_address ,
                               poll_table *p ) 
{ 


  {
  if ((unsigned long )p != (unsigned long )((poll_table *)0) && (unsigned long )wait_address != (unsigned long )((wait_queue_head_t *)0)) {
    (*(p->qproc))(filp, wait_address, p);
  } else {

  }
  return;
}
}
__inline static void __module_get___0(struct module *module ) 
{ 
  unsigned int tmp ;
  long tmp___0 ;
  unsigned int ret__ ;

  {
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
    tmp = module_refcount(module);
    tmp___0 = ldv__builtin_expect(tmp == 0U, 0L);
    if (tmp___0 != 0L) {
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/module.h"),
                           "i" (394), "i" (24UL));
      ldv_15836: ;
      goto ldv_15836;
    } else {

    }
    switch (4UL) {
    case 2UL: 
    __asm__  ("movw %%gs:%c1,%0": "=r" (ret__): "i" (36UL), "m" (_proxy_pda.cpunumber));
    goto ldv_15839;
    case 4UL: 
    __asm__  ("movl %%gs:%c1,%0": "=r" (ret__): "i" (36UL), "m" (_proxy_pda.cpunumber));
    goto ldv_15839;
    case 8UL: 
    __asm__  ("movq %%gs:%c1,%0": "=r" (ret__): "i" (36UL), "m" (_proxy_pda.cpunumber));
    goto ldv_15839;
    default: 
    __bad_pda_field();
    }
    ldv_15839: 
    local_inc(& module->ref[ret__].count);
  } else {

  }
  return;
}
}
extern int misc_register(struct miscdevice * ) ;
extern int misc_deregister(struct miscdevice * ) ;
static u_int *debug___5  ;
static int mISDN_open(struct inode *ino , struct file *filep ) 
{ 
  struct mISDNtimerdev *dev ;
  void *tmp ;
  struct lock_class_key __key ;
  int tmp___0 ;

  {
  if ((*debug___5 & 16777216U) != 0U) {
    printk("<7>%s(%p,%p)\n", "mISDN_open", ino, filep);
  } else {

  }
  tmp = kmalloc(176UL, 208U);
  dev = (struct mISDNtimerdev *)tmp;
  if ((unsigned long )dev == (unsigned long )((struct mISDNtimerdev *)0)) {
    return (-12);
  } else {

  }
  dev->next_id = 1;
  INIT_LIST_HEAD(& dev->pending);
  INIT_LIST_HEAD(& dev->expired);
  __spin_lock_init(& dev->lock, "&dev->lock", & __key);
  dev->work = 0U;
  init_waitqueue_head(& dev->wait);
  filep->private_data = (void *)dev;
  __module_get___0(& __this_module);
  tmp___0 = nonseekable_open(ino, filep);
  return (tmp___0);
}
}
static int mISDN_close(struct inode *ino , struct file *filep ) 
{ 
  struct mISDNtimerdev *dev ;
  struct mISDNtimer *timer ;
  struct mISDNtimer *next ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  struct list_head  const  *__mptr___4 ;

  {
  dev = (struct mISDNtimerdev *)filep->private_data;
  if ((*debug___5 & 16777216U) != 0U) {
    printk("<7>%s(%p,%p)\n", "mISDN_close", ino, filep);
  } else {

  }
  __mptr = (struct list_head  const  *)dev->pending.next;
  timer = (struct mISDNtimer *)__mptr;
  __mptr___0 = (struct list_head  const  *)timer->list.next;
  next = (struct mISDNtimer *)__mptr___0;
  goto ldv_28990;
  ldv_28989: 
  del_timer(& timer->tl);
  kfree((void const   *)timer);
  timer = next;
  __mptr___1 = (struct list_head  const  *)next->list.next;
  next = (struct mISDNtimer *)__mptr___1;
  ldv_28990: ;
  if ((unsigned long )(& timer->list) != (unsigned long )(& dev->pending)) {
    goto ldv_28989;
  } else {

  }
  __mptr___2 = (struct list_head  const  *)dev->expired.next;
  timer = (struct mISDNtimer *)__mptr___2;
  __mptr___3 = (struct list_head  const  *)timer->list.next;
  next = (struct mISDNtimer *)__mptr___3;
  goto ldv_28999;
  ldv_28998: 
  kfree((void const   *)timer);
  timer = next;
  __mptr___4 = (struct list_head  const  *)next->list.next;
  next = (struct mISDNtimer *)__mptr___4;
  ldv_28999: ;
  if ((unsigned long )(& timer->list) != (unsigned long )(& dev->expired)) {
    goto ldv_28998;
  } else {

  }
  kfree((void const   *)dev);
  module_put(& __this_module);
  return (0);
}
}
static ssize_t mISDN_read(struct file *filep , char *buf , size_t count , loff_t *off ) 
{ 
  struct mISDNtimerdev *dev ;
  struct mISDNtimer *timer ;
  int ret ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int __ret_pu ;
  int __pu_val ;
  int tmp___7 ;

  {
  dev = (struct mISDNtimerdev *)filep->private_data;
  ret = 0;
  if ((*debug___5 & 16777216U) != 0U) {
    printk("<7>%s(%p, %p, %d, %p)\n", "mISDN_read", filep, buf, (int )count, off);
  } else {

  }
  if (*off != filep->f_pos) {
    return (-29L);
  } else {

  }
  tmp___6 = list_empty((struct list_head  const  *)(& dev->expired));
  if (tmp___6 != 0 && dev->work == 0U) {
    if ((filep->f_flags & 2048U) != 0U) {
      return (-11L);
    } else {

    }
    __ret = 0;
    if (dev->work == 0U) {
      tmp___3 = list_empty((struct list_head  const  *)(& dev->expired));
      if (tmp___3 != 0) {
        tmp = get_current();
        __wait.flags = 0U;
        __wait.private = (void *)tmp;
        __wait.func = & autoremove_wake_function;
        __wait.task_list.next = & __wait.task_list;
        __wait.task_list.prev = & __wait.task_list;
        ldv_29016: 
        prepare_to_wait(& dev->wait, & __wait, 1);
        if (dev->work != 0U) {
          goto ldv_29014;
        } else {
          tmp___0 = list_empty((struct list_head  const  *)(& dev->expired));
          if (tmp___0 == 0) {
            goto ldv_29014;
          } else {

          }
        }
        tmp___1 = get_current();
        tmp___2 = signal_pending(tmp___1);
        if (tmp___2 == 0) {
          schedule();
          goto ldv_29015;
        } else {

        }
        __ret = -512;
        goto ldv_29014;
        ldv_29015: ;
        goto ldv_29016;
        ldv_29014: 
        finish_wait(& dev->wait, & __wait);
      } else {

      }
    } else {

    }
    tmp___4 = get_current();
    tmp___5 = signal_pending(tmp___4);
    if (tmp___5 != 0) {
      return (-512L);
    } else {

    }
  } else {

  }
  if (count <= 3UL) {
    return (-28L);
  } else {

  }
  if (dev->work != 0U) {
    dev->work = 0U;
  } else {

  }
  tmp___7 = list_empty((struct list_head  const  *)(& dev->expired));
  if (tmp___7 == 0) {
    ldv___ldv_spin_lock_442(& dev->lock);
    timer = (struct mISDNtimer *)dev->expired.next;
    list_del(& timer->list);
    ldv___ldv_spin_unlock_443(& dev->lock);
    __pu_val = timer->id;
    switch (4UL) {
    case 1UL: 
    __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)buf): "ebx");
    goto ldv_29021;
    case 2UL: 
    __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)buf): "ebx");
    goto ldv_29021;
    case 4UL: 
    __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)buf): "ebx");
    goto ldv_29021;
    case 8UL: 
    __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)buf): "ebx");
    goto ldv_29021;
    default: 
    __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)buf): "ebx");
    goto ldv_29021;
    }
    ldv_29021: ;
    if (__ret_pu != 0) {
      ret = -14;
    } else {
      ret = 4;
    }
    kfree((void const   *)timer);
  } else {

  }
  return ((ssize_t )ret);
}
}
static unsigned int mISDN_poll(struct file *filep , poll_table *wait ) 
{ 
  struct mISDNtimerdev *dev ;
  unsigned int mask ;
  int tmp ;
  int tmp___0 ;

  {
  dev = (struct mISDNtimerdev *)filep->private_data;
  mask = 8U;
  if ((*debug___5 & 16777216U) != 0U) {
    printk("<7>%s(%p, %p)\n", "mISDN_poll", filep, wait);
  } else {

  }
  if ((unsigned long )dev != (unsigned long )((struct mISDNtimerdev *)0)) {
    poll_wait(filep, & dev->wait, wait);
    mask = 0U;
    if (dev->work != 0U) {
      mask = mask | 65U;
    } else {
      tmp = list_empty((struct list_head  const  *)(& dev->expired));
      if (tmp == 0) {
        mask = mask | 65U;
      } else {

      }
    }
    if ((*debug___5 & 16777216U) != 0U) {
      tmp___0 = list_empty((struct list_head  const  *)(& dev->expired));
      printk("<7>%s work(%d) empty(%d)\n", "mISDN_poll", dev->work, tmp___0);
    } else {

    }
  } else {

  }
  return (mask);
}
}
static void dev_expire_timer(unsigned long data ) 
{ 
  struct mISDNtimer *timer ;

  {
  timer = (struct mISDNtimer *)data;
  ldv___ldv_spin_lock_444(& (timer->dev)->lock);
  list_del(& timer->list);
  list_add_tail(& timer->list, & (timer->dev)->expired);
  ldv___ldv_spin_unlock_445(& (timer->dev)->lock);
  __wake_up(& (timer->dev)->wait, 1U, 1, 0);
  return;
}
}
static int misdn_add_timer(struct mISDNtimerdev *dev , int timeout ) 
{ 
  int id ;
  struct mISDNtimer *timer ;
  void *tmp ;
  int tmp___0 ;

  {
  if (timeout == 0) {
    dev->work = 1U;
    __wake_up(& dev->wait, 1U, 1, 0);
    id = 0;
  } else {
    tmp = kzalloc(112UL, 208U);
    timer = (struct mISDNtimer *)tmp;
    if ((unsigned long )timer == (unsigned long )((struct mISDNtimer *)0)) {
      return (-12);
    } else {

    }
    ldv___ldv_spin_lock_446(& dev->lock);
    tmp___0 = dev->next_id;
    dev->next_id = dev->next_id + 1;
    timer->id = tmp___0;
    if (dev->next_id < 0) {
      dev->next_id = 1;
    } else {

    }
    list_add_tail(& timer->list, & dev->pending);
    ldv___ldv_spin_unlock_447(& dev->lock);
    timer->dev = dev;
    timer->tl.data = (unsigned long )timer;
    timer->tl.function = & dev_expire_timer;
    init_timer(& timer->tl);
    timer->tl.expires = ((unsigned long )timeout * 250UL) / 1000UL + (unsigned long )jiffies;
    add_timer___0(& timer->tl);
    id = timer->id;
  }
  return (id);
}
}
static int misdn_del_timer(struct mISDNtimerdev *dev , int id ) 
{ 
  struct mISDNtimer *timer ;
  int ret ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
  ret = 0;
  ldv___ldv_spin_lock_448(& dev->lock);
  __mptr = (struct list_head  const  *)dev->pending.next;
  timer = (struct mISDNtimer *)__mptr;
  goto ldv_29059;
  ldv_29058: ;
  if (timer->id == id) {
    list_del_init(& timer->list);
    del_timer(& timer->tl);
    ret = timer->id;
    kfree((void const   *)timer);
    goto unlock;
  } else {

  }
  __mptr___0 = (struct list_head  const  *)timer->list.next;
  timer = (struct mISDNtimer *)__mptr___0;
  ldv_29059: 
  __builtin_prefetch((void const   *)timer->list.next);
  if ((unsigned long )(& timer->list) != (unsigned long )(& dev->pending)) {
    goto ldv_29058;
  } else {

  }

  unlock: 
  ldv___ldv_spin_unlock_449(& dev->lock);
  return (ret);
}
}
static int mISDN_ioctl(struct inode *inode , struct file *filep , unsigned int cmd ,
                       unsigned long arg ) 
{ 
  struct mISDNtimerdev *dev ;
  int id ;
  int tout ;
  int ret ;
  int __ret_gu ;
  unsigned long __val_gu ;
  int __ret_pu ;
  int __pu_val ;
  int __ret_gu___0 ;
  unsigned long __val_gu___0 ;
  int __ret_pu___0 ;
  int __pu_val___0 ;

  {
  dev = (struct mISDNtimerdev *)filep->private_data;
  ret = 0;
  if ((*debug___5 & 16777216U) != 0U) {
    printk("<7>%s(%p, %x, %lx)\n", "mISDN_ioctl", filep, cmd, arg);
  } else {

  }
  switch (cmd) {
  case 2147764544U: ;
  switch (4UL) {
  case 1UL: 
  __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
  goto ldv_29076;
  case 2UL: 
  __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
  goto ldv_29076;
  case 4UL: 
  __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
  goto ldv_29076;
  case 8UL: 
  __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
  goto ldv_29076;
  default: 
  __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
  goto ldv_29076;
  }
  ldv_29076: 
  tout = (int )__val_gu;
  if (__ret_gu != 0) {
    ret = -14;
    goto ldv_29082;
  } else {

  }
  id = misdn_add_timer(dev, tout);
  if ((*debug___5 & 16777216U) != 0U) {
    printk("<7>%s add %d id %d\n", "mISDN_ioctl", tout, id);
  } else {

  }
  if (id < 0) {
    ret = id;
    goto ldv_29082;
  } else {

  }
  __pu_val = id;
  switch (4UL) {
  case 1UL: 
  __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_29086;
  case 2UL: 
  __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_29086;
  case 4UL: 
  __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_29086;
  case 8UL: 
  __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_29086;
  default: 
  __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_29086;
  }
  ldv_29086: ;
  if (__ret_pu != 0) {
    ret = -14;
  } else {

  }
  goto ldv_29082;
  case 2147764545U: ;
  switch (4UL) {
  case 1UL: 
  __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
  goto ldv_29096;
  case 2UL: 
  __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
  goto ldv_29096;
  case 4UL: 
  __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
  goto ldv_29096;
  case 8UL: 
  __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
  goto ldv_29096;
  default: 
  __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
  goto ldv_29096;
  }
  ldv_29096: 
  id = (int )__val_gu___0;
  if (__ret_gu___0 != 0) {
    ret = -14;
    goto ldv_29082;
  } else {

  }
  if ((*debug___5 & 16777216U) != 0U) {
    printk("<7>%s del id %d\n", "mISDN_ioctl", id);
  } else {

  }
  id = misdn_del_timer(dev, id);
  __pu_val___0 = id;
  switch (4UL) {
  case 1UL: 
  __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx");
  goto ldv_29105;
  case 2UL: 
  __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx");
  goto ldv_29105;
  case 4UL: 
  __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx");
  goto ldv_29105;
  case 8UL: 
  __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx");
  goto ldv_29105;
  default: 
  __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx");
  goto ldv_29105;
  }
  ldv_29105: ;
  if (__ret_pu___0 != 0) {
    ret = -14;
  } else {

  }
  goto ldv_29082;
  default: 
  ret = -22;
  }
  ldv_29082: ;
  return (ret);
}
}
static struct file_operations mISDN_fops  = 
     {0, 0, & mISDN_read, 0, 0, 0, 0, & mISDN_poll, & mISDN_ioctl, 0, 0, 0, & mISDN_open,
    0, & mISDN_close, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
static struct miscdevice mISDNtimer  =    {255, "mISDNtimer", (struct file_operations  const  *)(& mISDN_fops), {0, 0}, 0,
    0};
int mISDN_inittimer(u_int *deb ) 
{ 
  int err ;

  {
  debug___5 = deb;
  err = misc_register(& mISDNtimer);
  if (err != 0) {
    printk("<4>mISDN: Could not register timer device\n");
  } else {

  }
  return (err);
}
}
void mISDN_timer_cleanup(void) 
{ 


  {
  misc_deregister(& mISDNtimer);
  return;
}
}
extern void ldv_check_return_value(int  ) ;
void ldv_main8_sequence_infinite_withcheck_stateful(void) 
{ 
  struct file *var_group1 ;
  char *var_mISDN_read_2_p1 ;
  size_t var_mISDN_read_2_p2 ;
  loff_t *var_mISDN_read_2_p3 ;
  ssize_t res_mISDN_read_2 ;
  poll_table *var_mISDN_poll_3_p1 ;
  struct inode *var_group2 ;
  unsigned int var_mISDN_ioctl_7_p2 ;
  unsigned long var_mISDN_ioctl_7_p3 ;
  int res_mISDN_open_0 ;
  unsigned long var_dev_expire_timer_4_p0 ;
  int ldv_s_mISDN_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
  ldv_s_mISDN_fops_file_operations = 0;
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  goto ldv_29159;
  ldv_29158: 
  tmp = nondet_int();
  switch (tmp) {
  case 0: ;
  if (ldv_s_mISDN_fops_file_operations == 0) {
    ldv_handler_precall();
    res_mISDN_open_0 = mISDN_open(var_group2, var_group1);
    ldv_check_return_value(res_mISDN_open_0);
    if (res_mISDN_open_0 != 0) {
      goto ldv_module_exit;
    } else {

    }
    ldv_s_mISDN_fops_file_operations = ldv_s_mISDN_fops_file_operations + 1;
  } else {

  }
  goto ldv_29151;
  case 1: ;
  if (ldv_s_mISDN_fops_file_operations == 1) {
    ldv_handler_precall();
    res_mISDN_read_2 = mISDN_read(var_group1, var_mISDN_read_2_p1, var_mISDN_read_2_p2,
                                  var_mISDN_read_2_p3);
    ldv_check_return_value((int )res_mISDN_read_2);
    if (res_mISDN_read_2 < 0L) {
      goto ldv_module_exit;
    } else {

    }
    ldv_s_mISDN_fops_file_operations = ldv_s_mISDN_fops_file_operations + 1;
  } else {

  }
  goto ldv_29151;
  case 2: ;
  if (ldv_s_mISDN_fops_file_operations == 2) {
    ldv_handler_precall();
    mISDN_close(var_group2, var_group1);
    ldv_s_mISDN_fops_file_operations = 0;
  } else {

  }
  goto ldv_29151;
  case 3: 
  ldv_handler_precall();
  mISDN_poll(var_group1, var_mISDN_poll_3_p1);
  goto ldv_29151;
  case 4: 
  ldv_handler_precall();
  mISDN_ioctl(var_group2, var_group1, var_mISDN_ioctl_7_p2, var_mISDN_ioctl_7_p3);
  goto ldv_29151;
  case 5: 
  ldv_handler_precall();
  dev_expire_timer(var_dev_expire_timer_4_p0);
  goto ldv_29151;
  default: ;
  goto ldv_29151;
  }
  ldv_29151: ;
  ldv_29159: 
  tmp___0 = nondet_int();
  if (tmp___0 != 0 || ldv_s_mISDN_fops_file_operations != 0) {
    goto ldv_29158;
  } else {

  }

  ldv_module_exit: ;
  ldv_check_final_state();
  return;
}
}
void ldv___ldv_spin_lock_413(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_414(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
int ldv___ldv_spin_trylock_415(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = __ldv_spin_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv___ldv_spin_lock_416(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_dcache_lock();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_417(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_d_lock_of_dentry();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_418(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_d_lock_of_dentry();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_419(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_dcache_lock();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_420(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_d_lock_of_dentry();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_421(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_d_lock_of_dentry();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_422(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_i_lock_of_inode();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_423(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_i_lock_of_inode();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_424(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_d_lock_of_dentry();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_425(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_d_lock_of_dentry();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_426(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_siglock_of_sighand_struct();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_427(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_siglock_of_sighand_struct();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_428(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_alloc_lock_of_task_struct();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_429(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_alloc_lock_of_task_struct();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_430(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_siglock_of_sighand_struct();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_431(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock__xmit_lock_of_netdev_queue();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_432(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock__xmit_lock_of_netdev_queue();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
int ldv___ldv_spin_trylock_433(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___19 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  tmp = __ldv_spin_trylock(ldv_func_arg1);
  ldv_func_res = tmp;
  tmp___0 = ldv_spin_trylock__xmit_lock_of_netdev_queue();
  return (tmp___0);
  return (ldv_func_res);
}
}
void ldv___ldv_spin_unlock_434(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock__xmit_lock_of_netdev_queue();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_435(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock__xmit_lock_of_netdev_queue();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_436(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_tx_global_lock_of_net_device();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_437(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_tx_global_lock_of_net_device();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_438(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_addr_list_lock_of_net_device();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_439(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_addr_list_lock_of_net_device();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_440(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_addr_list_lock_of_net_device();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_441(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_addr_list_lock_of_net_device();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_442(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_lock_of_mISDNtimerdev();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_443(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_lock_of_mISDNtimerdev();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_444(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_lock_of_mISDNtimerdev();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_445(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_lock_of_mISDNtimerdev();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_446(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_lock_of_mISDNtimerdev();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_447(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_lock_of_mISDNtimerdev();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_lock_448(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_lock_lock_of_mISDNtimerdev();
  __ldv_spin_lock(ldv_func_arg1);
  return;
}
}
void ldv___ldv_spin_unlock_449(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  ldv_spin_unlock_lock_of_mISDNtimerdev();
  __ldv_spin_unlock(ldv_func_arg1);
  return;
}
}
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: __VERIFIER_error();
}
}
extern int ldv_undef_int(void) ;
long ldv__builtin_expect(long exp , long c ) 
{ 


  {
  return (exp);
}
}
static int ldv_spin__xmit_lock_of_netdev_queue  ;
void ldv_spin_lock__xmit_lock_of_netdev_queue(void) 
{ 


  {
  if (ldv_spin__xmit_lock_of_netdev_queue == 1) {

  } else {
    ldv_error();
  }
  ldv_spin__xmit_lock_of_netdev_queue = 2;
  return;
}
}
void ldv_spin_unlock__xmit_lock_of_netdev_queue(void) 
{ 


  {
  if (ldv_spin__xmit_lock_of_netdev_queue == 2) {

  } else {
    ldv_error();
  }
  ldv_spin__xmit_lock_of_netdev_queue = 1;
  return;
}
}
int ldv_spin_trylock__xmit_lock_of_netdev_queue(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  if (ldv_spin__xmit_lock_of_netdev_queue == 1) {

  } else {
    ldv_error();
  }
  is_spin_held_by_another_thread = ldv_undef_int();
  if (is_spin_held_by_another_thread) {
    return (0);
  } else {
    ldv_spin__xmit_lock_of_netdev_queue = 2;
    return (1);
  }
}
}
void ldv_spin_unlock_wait__xmit_lock_of_netdev_queue(void) 
{ 


  {
  if (ldv_spin__xmit_lock_of_netdev_queue == 1) {

  } else {
    ldv_error();
  }
  return;
}
}
int ldv_spin_is_locked__xmit_lock_of_netdev_queue(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  is_spin_held_by_another_thread = ldv_undef_int();
  if (ldv_spin__xmit_lock_of_netdev_queue == 1 && ! is_spin_held_by_another_thread) {
    return (0);
  } else {
    return (1);
  }
}
}
int ldv_spin_can_lock__xmit_lock_of_netdev_queue(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  tmp = ldv_spin_is_locked__xmit_lock_of_netdev_queue();
  if (tmp) {
    tmp___0 = 0;
  } else {
    tmp___0 = 1;
  }
  return (tmp___0);
}
}
int ldv_spin_is_contended__xmit_lock_of_netdev_queue(void) 
{ 
  int is_spin_contended ;

  {
  is_spin_contended = ldv_undef_int();
  if (is_spin_contended) {
    return (0);
  } else {
    return (1);
  }
}
}
int ldv_atomic_dec_and_lock__xmit_lock_of_netdev_queue(void) 
{ 
  int atomic_value_after_dec ;

  {
  if (ldv_spin__xmit_lock_of_netdev_queue == 1) {

  } else {
    ldv_error();
  }
  atomic_value_after_dec = ldv_undef_int();
  if (atomic_value_after_dec == 0) {
    ldv_spin__xmit_lock_of_netdev_queue = 2;
    return (1);
  } else {

  }
  return (0);
}
}
static int ldv_spin_addr_list_lock_of_net_device  ;
void ldv_spin_lock_addr_list_lock_of_net_device(void) 
{ 


  {
  if (ldv_spin_addr_list_lock_of_net_device == 1) {

  } else {
    ldv_error();
  }
  ldv_spin_addr_list_lock_of_net_device = 2;
  return;
}
}
void ldv_spin_unlock_addr_list_lock_of_net_device(void) 
{ 


  {
  if (ldv_spin_addr_list_lock_of_net_device == 2) {

  } else {
    ldv_error();
  }
  ldv_spin_addr_list_lock_of_net_device = 1;
  return;
}
}
int ldv_spin_trylock_addr_list_lock_of_net_device(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  if (ldv_spin_addr_list_lock_of_net_device == 1) {

  } else {
    ldv_error();
  }
  is_spin_held_by_another_thread = ldv_undef_int();
  if (is_spin_held_by_another_thread) {
    return (0);
  } else {
    ldv_spin_addr_list_lock_of_net_device = 2;
    return (1);
  }
}
}
void ldv_spin_unlock_wait_addr_list_lock_of_net_device(void) 
{ 


  {
  if (ldv_spin_addr_list_lock_of_net_device == 1) {

  } else {
    ldv_error();
  }
  return;
}
}
int ldv_spin_is_locked_addr_list_lock_of_net_device(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  is_spin_held_by_another_thread = ldv_undef_int();
  if (ldv_spin_addr_list_lock_of_net_device == 1 && ! is_spin_held_by_another_thread) {
    return (0);
  } else {
    return (1);
  }
}
}
int ldv_spin_can_lock_addr_list_lock_of_net_device(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  tmp = ldv_spin_is_locked_addr_list_lock_of_net_device();
  if (tmp) {
    tmp___0 = 0;
  } else {
    tmp___0 = 1;
  }
  return (tmp___0);
}
}
int ldv_spin_is_contended_addr_list_lock_of_net_device(void) 
{ 
  int is_spin_contended ;

  {
  is_spin_contended = ldv_undef_int();
  if (is_spin_contended) {
    return (0);
  } else {
    return (1);
  }
}
}
int ldv_atomic_dec_and_lock_addr_list_lock_of_net_device(void) 
{ 
  int atomic_value_after_dec ;

  {
  if (ldv_spin_addr_list_lock_of_net_device == 1) {

  } else {
    ldv_error();
  }
  atomic_value_after_dec = ldv_undef_int();
  if (atomic_value_after_dec == 0) {
    ldv_spin_addr_list_lock_of_net_device = 2;
    return (1);
  } else {

  }
  return (0);
}
}
static int ldv_spin_alloc_lock_of_task_struct  ;
void ldv_spin_lock_alloc_lock_of_task_struct(void) 
{ 


  {
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
    ldv_error();
  }
  ldv_spin_alloc_lock_of_task_struct = 2;
  return;
}
}
void ldv_spin_unlock_alloc_lock_of_task_struct(void) 
{ 


  {
  if (ldv_spin_alloc_lock_of_task_struct == 2) {

  } else {
    ldv_error();
  }
  ldv_spin_alloc_lock_of_task_struct = 1;
  return;
}
}
int ldv_spin_trylock_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
    ldv_error();
  }
  is_spin_held_by_another_thread = ldv_undef_int();
  if (is_spin_held_by_another_thread) {
    return (0);
  } else {
    ldv_spin_alloc_lock_of_task_struct = 2;
    return (1);
  }
}
}
void ldv_spin_unlock_wait_alloc_lock_of_task_struct(void) 
{ 


  {
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
    ldv_error();
  }
  return;
}
}
int ldv_spin_is_locked_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  is_spin_held_by_another_thread = ldv_undef_int();
  if (ldv_spin_alloc_lock_of_task_struct == 1 && ! is_spin_held_by_another_thread) {
    return (0);
  } else {
    return (1);
  }
}
}
int ldv_spin_can_lock_alloc_lock_of_task_struct(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  tmp = ldv_spin_is_locked_alloc_lock_of_task_struct();
  if (tmp) {
    tmp___0 = 0;
  } else {
    tmp___0 = 1;
  }
  return (tmp___0);
}
}
int ldv_spin_is_contended_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_contended ;

  {
  is_spin_contended = ldv_undef_int();
  if (is_spin_contended) {
    return (0);
  } else {
    return (1);
  }
}
}
int ldv_atomic_dec_and_lock_alloc_lock_of_task_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
    ldv_error();
  }
  atomic_value_after_dec = ldv_undef_int();
  if (atomic_value_after_dec == 0) {
    ldv_spin_alloc_lock_of_task_struct = 2;
    return (1);
  } else {

  }
  return (0);
}
}
static int ldv_spin_d_lock_of_dentry  ;
void ldv_spin_lock_d_lock_of_dentry(void) 
{ 


  {
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
    ldv_error();
  }
  ldv_spin_d_lock_of_dentry = 2;
  return;
}
}
void ldv_spin_unlock_d_lock_of_dentry(void) 
{ 


  {
  if (ldv_spin_d_lock_of_dentry == 2) {

  } else {
    ldv_error();
  }
  ldv_spin_d_lock_of_dentry = 1;
  return;
}
}
int ldv_spin_trylock_d_lock_of_dentry(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
    ldv_error();
  }
  is_spin_held_by_another_thread = ldv_undef_int();
  if (is_spin_held_by_another_thread) {
    return (0);
  } else {
    ldv_spin_d_lock_of_dentry = 2;
    return (1);
  }
}
}
void ldv_spin_unlock_wait_d_lock_of_dentry(void) 
{ 


  {
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
    ldv_error();
  }
  return;
}
}
int ldv_spin_is_locked_d_lock_of_dentry(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  is_spin_held_by_another_thread = ldv_undef_int();
  if (ldv_spin_d_lock_of_dentry == 1 && ! is_spin_held_by_another_thread) {
    return (0);
  } else {
    return (1);
  }
}
}
int ldv_spin_can_lock_d_lock_of_dentry(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  tmp = ldv_spin_is_locked_d_lock_of_dentry();
  if (tmp) {
    tmp___0 = 0;
  } else {
    tmp___0 = 1;
  }
  return (tmp___0);
}
}
int ldv_spin_is_contended_d_lock_of_dentry(void) 
{ 
  int is_spin_contended ;

  {
  is_spin_contended = ldv_undef_int();
  if (is_spin_contended) {
    return (0);
  } else {
    return (1);
  }
}
}
int ldv_atomic_dec_and_lock_d_lock_of_dentry(void) 
{ 
  int atomic_value_after_dec ;

  {
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
    ldv_error();
  }
  atomic_value_after_dec = ldv_undef_int();
  if (atomic_value_after_dec == 0) {
    ldv_spin_d_lock_of_dentry = 2;
    return (1);
  } else {

  }
  return (0);
}
}
static int ldv_spin_dcache_lock  ;
void ldv_spin_lock_dcache_lock(void) 
{ 


  {
  if (ldv_spin_dcache_lock == 1) {

  } else {
    ldv_error();
  }
  ldv_spin_dcache_lock = 2;
  return;
}
}
void ldv_spin_unlock_dcache_lock(void) 
{ 


  {
  if (ldv_spin_dcache_lock == 2) {

  } else {
    ldv_error();
  }
  ldv_spin_dcache_lock = 1;
  return;
}
}
int ldv_spin_trylock_dcache_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  if (ldv_spin_dcache_lock == 1) {

  } else {
    ldv_error();
  }
  is_spin_held_by_another_thread = ldv_undef_int();
  if (is_spin_held_by_another_thread) {
    return (0);
  } else {
    ldv_spin_dcache_lock = 2;
    return (1);
  }
}
}
void ldv_spin_unlock_wait_dcache_lock(void) 
{ 


  {
  if (ldv_spin_dcache_lock == 1) {

  } else {
    ldv_error();
  }
  return;
}
}
int ldv_spin_is_locked_dcache_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  is_spin_held_by_another_thread = ldv_undef_int();
  if (ldv_spin_dcache_lock == 1 && ! is_spin_held_by_another_thread) {
    return (0);
  } else {
    return (1);
  }
}
}
int ldv_spin_can_lock_dcache_lock(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  tmp = ldv_spin_is_locked_dcache_lock();
  if (tmp) {
    tmp___0 = 0;
  } else {
    tmp___0 = 1;
  }
  return (tmp___0);
}
}
int ldv_spin_is_contended_dcache_lock(void) 
{ 
  int is_spin_contended ;

  {
  is_spin_contended = ldv_undef_int();
  if (is_spin_contended) {
    return (0);
  } else {
    return (1);
  }
}
}
int ldv_atomic_dec_and_lock_dcache_lock(void) 
{ 
  int atomic_value_after_dec ;

  {
  if (ldv_spin_dcache_lock == 1) {

  } else {
    ldv_error();
  }
  atomic_value_after_dec = ldv_undef_int();
  if (atomic_value_after_dec == 0) {
    ldv_spin_dcache_lock = 2;
    return (1);
  } else {

  }
  return (0);
}
}
static int ldv_spin_i_lock_of_inode  ;
void ldv_spin_lock_i_lock_of_inode(void) 
{ 


  {
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
    ldv_error();
  }
  ldv_spin_i_lock_of_inode = 2;
  return;
}
}
void ldv_spin_unlock_i_lock_of_inode(void) 
{ 


  {
  if (ldv_spin_i_lock_of_inode == 2) {

  } else {
    ldv_error();
  }
  ldv_spin_i_lock_of_inode = 1;
  return;
}
}
int ldv_spin_trylock_i_lock_of_inode(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
    ldv_error();
  }
  is_spin_held_by_another_thread = ldv_undef_int();
  if (is_spin_held_by_another_thread) {
    return (0);
  } else {
    ldv_spin_i_lock_of_inode = 2;
    return (1);
  }
}
}
void ldv_spin_unlock_wait_i_lock_of_inode(void) 
{ 


  {
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
    ldv_error();
  }
  return;
}
}
int ldv_spin_is_locked_i_lock_of_inode(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  is_spin_held_by_another_thread = ldv_undef_int();
  if (ldv_spin_i_lock_of_inode == 1 && ! is_spin_held_by_another_thread) {
    return (0);
  } else {
    return (1);
  }
}
}
int ldv_spin_can_lock_i_lock_of_inode(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  tmp = ldv_spin_is_locked_i_lock_of_inode();
  if (tmp) {
    tmp___0 = 0;
  } else {
    tmp___0 = 1;
  }
  return (tmp___0);
}
}
int ldv_spin_is_contended_i_lock_of_inode(void) 
{ 
  int is_spin_contended ;

  {
  is_spin_contended = ldv_undef_int();
  if (is_spin_contended) {
    return (0);
  } else {
    return (1);
  }
}
}
int ldv_atomic_dec_and_lock_i_lock_of_inode(void) 
{ 
  int atomic_value_after_dec ;

  {
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
    ldv_error();
  }
  atomic_value_after_dec = ldv_undef_int();
  if (atomic_value_after_dec == 0) {
    ldv_spin_i_lock_of_inode = 2;
    return (1);
  } else {

  }
  return (0);
}
}
static int ldv_spin_lock_of_NOT_ARG_SIGN  ;
void ldv_spin_lock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
    ldv_error();
  }
  ldv_spin_lock_of_NOT_ARG_SIGN = 2;
  return;
}
}
void ldv_spin_unlock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 2) {

  } else {
    ldv_error();
  }
  ldv_spin_lock_of_NOT_ARG_SIGN = 1;
  return;
}
}
int ldv_spin_trylock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
    ldv_error();
  }
  is_spin_held_by_another_thread = ldv_undef_int();
  if (is_spin_held_by_another_thread) {
    return (0);
  } else {
    ldv_spin_lock_of_NOT_ARG_SIGN = 2;
    return (1);
  }
}
}
void ldv_spin_unlock_wait_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
    ldv_error();
  }
  return;
}
}
int ldv_spin_is_locked_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  is_spin_held_by_another_thread = ldv_undef_int();
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1 && ! is_spin_held_by_another_thread) {
    return (0);
  } else {
    return (1);
  }
}
}
int ldv_spin_can_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  tmp = ldv_spin_is_locked_lock_of_NOT_ARG_SIGN();
  if (tmp) {
    tmp___0 = 0;
  } else {
    tmp___0 = 1;
  }
  return (tmp___0);
}
}
int ldv_spin_is_contended_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_contended ;

  {
  is_spin_contended = ldv_undef_int();
  if (is_spin_contended) {
    return (0);
  } else {
    return (1);
  }
}
}
int ldv_atomic_dec_and_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int atomic_value_after_dec ;

  {
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
    ldv_error();
  }
  atomic_value_after_dec = ldv_undef_int();
  if (atomic_value_after_dec == 0) {
    ldv_spin_lock_of_NOT_ARG_SIGN = 2;
    return (1);
  } else {

  }
  return (0);
}
}
static int ldv_spin_lock_of_mISDNtimerdev  ;
void ldv_spin_lock_lock_of_mISDNtimerdev(void) 
{ 


  {
  if (ldv_spin_lock_of_mISDNtimerdev == 1) {

  } else {
    ldv_error();
  }
  ldv_spin_lock_of_mISDNtimerdev = 2;
  return;
}
}
void ldv_spin_unlock_lock_of_mISDNtimerdev(void) 
{ 


  {
  if (ldv_spin_lock_of_mISDNtimerdev == 2) {

  } else {
    ldv_error();
  }
  ldv_spin_lock_of_mISDNtimerdev = 1;
  return;
}
}
int ldv_spin_trylock_lock_of_mISDNtimerdev(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  if (ldv_spin_lock_of_mISDNtimerdev == 1) {

  } else {
    ldv_error();
  }
  is_spin_held_by_another_thread = ldv_undef_int();
  if (is_spin_held_by_another_thread) {
    return (0);
  } else {
    ldv_spin_lock_of_mISDNtimerdev = 2;
    return (1);
  }
}
}
void ldv_spin_unlock_wait_lock_of_mISDNtimerdev(void) 
{ 


  {
  if (ldv_spin_lock_of_mISDNtimerdev == 1) {

  } else {
    ldv_error();
  }
  return;
}
}
int ldv_spin_is_locked_lock_of_mISDNtimerdev(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  is_spin_held_by_another_thread = ldv_undef_int();
  if (ldv_spin_lock_of_mISDNtimerdev == 1 && ! is_spin_held_by_another_thread) {
    return (0);
  } else {
    return (1);
  }
}
}
int ldv_spin_can_lock_lock_of_mISDNtimerdev(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  tmp = ldv_spin_is_locked_lock_of_mISDNtimerdev();
  if (tmp) {
    tmp___0 = 0;
  } else {
    tmp___0 = 1;
  }
  return (tmp___0);
}
}
int ldv_spin_is_contended_lock_of_mISDNtimerdev(void) 
{ 
  int is_spin_contended ;

  {
  is_spin_contended = ldv_undef_int();
  if (is_spin_contended) {
    return (0);
  } else {
    return (1);
  }
}
}
int ldv_atomic_dec_and_lock_lock_of_mISDNtimerdev(void) 
{ 
  int atomic_value_after_dec ;

  {
  if (ldv_spin_lock_of_mISDNtimerdev == 1) {

  } else {
    ldv_error();
  }
  atomic_value_after_dec = ldv_undef_int();
  if (atomic_value_after_dec == 0) {
    ldv_spin_lock_of_mISDNtimerdev = 2;
    return (1);
  } else {

  }
  return (0);
}
}
static int ldv_spin_siglock_of_sighand_struct  ;
void ldv_spin_lock_siglock_of_sighand_struct(void) 
{ 


  {
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
    ldv_error();
  }
  ldv_spin_siglock_of_sighand_struct = 2;
  return;
}
}
void ldv_spin_unlock_siglock_of_sighand_struct(void) 
{ 


  {
  if (ldv_spin_siglock_of_sighand_struct == 2) {

  } else {
    ldv_error();
  }
  ldv_spin_siglock_of_sighand_struct = 1;
  return;
}
}
int ldv_spin_trylock_siglock_of_sighand_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
    ldv_error();
  }
  is_spin_held_by_another_thread = ldv_undef_int();
  if (is_spin_held_by_another_thread) {
    return (0);
  } else {
    ldv_spin_siglock_of_sighand_struct = 2;
    return (1);
  }
}
}
void ldv_spin_unlock_wait_siglock_of_sighand_struct(void) 
{ 


  {
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
    ldv_error();
  }
  return;
}
}
int ldv_spin_is_locked_siglock_of_sighand_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  is_spin_held_by_another_thread = ldv_undef_int();
  if (ldv_spin_siglock_of_sighand_struct == 1 && ! is_spin_held_by_another_thread) {
    return (0);
  } else {
    return (1);
  }
}
}
int ldv_spin_can_lock_siglock_of_sighand_struct(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  tmp = ldv_spin_is_locked_siglock_of_sighand_struct();
  if (tmp) {
    tmp___0 = 0;
  } else {
    tmp___0 = 1;
  }
  return (tmp___0);
}
}
int ldv_spin_is_contended_siglock_of_sighand_struct(void) 
{ 
  int is_spin_contended ;

  {
  is_spin_contended = ldv_undef_int();
  if (is_spin_contended) {
    return (0);
  } else {
    return (1);
  }
}
}
int ldv_atomic_dec_and_lock_siglock_of_sighand_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
    ldv_error();
  }
  atomic_value_after_dec = ldv_undef_int();
  if (atomic_value_after_dec == 0) {
    ldv_spin_siglock_of_sighand_struct = 2;
    return (1);
  } else {

  }
  return (0);
}
}
static int ldv_spin_tx_global_lock_of_net_device  ;
void ldv_spin_lock_tx_global_lock_of_net_device(void) 
{ 


  {
  if (ldv_spin_tx_global_lock_of_net_device == 1) {

  } else {
    ldv_error();
  }
  ldv_spin_tx_global_lock_of_net_device = 2;
  return;
}
}
void ldv_spin_unlock_tx_global_lock_of_net_device(void) 
{ 


  {
  if (ldv_spin_tx_global_lock_of_net_device == 2) {

  } else {
    ldv_error();
  }
  ldv_spin_tx_global_lock_of_net_device = 1;
  return;
}
}
int ldv_spin_trylock_tx_global_lock_of_net_device(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  if (ldv_spin_tx_global_lock_of_net_device == 1) {

  } else {
    ldv_error();
  }
  is_spin_held_by_another_thread = ldv_undef_int();
  if (is_spin_held_by_another_thread) {
    return (0);
  } else {
    ldv_spin_tx_global_lock_of_net_device = 2;
    return (1);
  }
}
}
void ldv_spin_unlock_wait_tx_global_lock_of_net_device(void) 
{ 


  {
  if (ldv_spin_tx_global_lock_of_net_device == 1) {

  } else {
    ldv_error();
  }
  return;
}
}
int ldv_spin_is_locked_tx_global_lock_of_net_device(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  is_spin_held_by_another_thread = ldv_undef_int();
  if (ldv_spin_tx_global_lock_of_net_device == 1 && ! is_spin_held_by_another_thread) {
    return (0);
  } else {
    return (1);
  }
}
}
int ldv_spin_can_lock_tx_global_lock_of_net_device(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  tmp = ldv_spin_is_locked_tx_global_lock_of_net_device();
  if (tmp) {
    tmp___0 = 0;
  } else {
    tmp___0 = 1;
  }
  return (tmp___0);
}
}
int ldv_spin_is_contended_tx_global_lock_of_net_device(void) 
{ 
  int is_spin_contended ;

  {
  is_spin_contended = ldv_undef_int();
  if (is_spin_contended) {
    return (0);
  } else {
    return (1);
  }
}
}
int ldv_atomic_dec_and_lock_tx_global_lock_of_net_device(void) 
{ 
  int atomic_value_after_dec ;

  {
  if (ldv_spin_tx_global_lock_of_net_device == 1) {

  } else {
    ldv_error();
  }
  atomic_value_after_dec = ldv_undef_int();
  if (atomic_value_after_dec == 0) {
    ldv_spin_tx_global_lock_of_net_device = 2;
    return (1);
  } else {

  }
  return (0);
}
}
void ldv_initialize(void) 
{ 


  {
  ldv_spin__xmit_lock_of_netdev_queue = 1;
  ldv_spin_addr_list_lock_of_net_device = 1;
  ldv_spin_alloc_lock_of_task_struct = 1;
  ldv_spin_d_lock_of_dentry = 1;
  ldv_spin_dcache_lock = 1;
  ldv_spin_i_lock_of_inode = 1;
  ldv_spin_lock_of_NOT_ARG_SIGN = 1;
  ldv_spin_lock_of_mISDNtimerdev = 1;
  ldv_spin_siglock_of_sighand_struct = 1;
  ldv_spin_tx_global_lock_of_net_device = 1;
  return;
}
}
void ldv_check_final_state(void) 
{ 


  {
  if (ldv_spin__xmit_lock_of_netdev_queue == 1) {

  } else {
    ldv_error();
  }
  if (ldv_spin_addr_list_lock_of_net_device == 1) {

  } else {
    ldv_error();
  }
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
    ldv_error();
  }
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
    ldv_error();
  }
  if (ldv_spin_dcache_lock == 1) {

  } else {
    ldv_error();
  }
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
    ldv_error();
  }
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
    ldv_error();
  }
  if (ldv_spin_lock_of_mISDNtimerdev == 1) {

  } else {
    ldv_error();
  }
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
    ldv_error();
  }
  if (ldv_spin_tx_global_lock_of_net_device == 1) {

  } else {
    ldv_error();
  }
  return;
}
}
