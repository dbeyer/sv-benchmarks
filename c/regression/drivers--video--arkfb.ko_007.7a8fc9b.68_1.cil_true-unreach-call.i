extern void __VERIFIER_error() __attribute__ ((__noreturn__));

/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

typedef unsigned int __kernel_mode_t;
typedef long __kernel_off_t;
typedef int __kernel_pid_t;
typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;
typedef unsigned long __kernel_size_t;
typedef long __kernel_ssize_t;
typedef long __kernel_time_t;
typedef long __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef long long __kernel_loff_t;
typedef __kernel_uid_t __kernel_uid32_t;
typedef __kernel_gid_t __kernel_gid32_t;
typedef signed char __s8;
typedef unsigned char __u8;
typedef short __s16;
typedef unsigned short __u16;
typedef int __s32;
typedef unsigned int __u32;
typedef long long __s64;
typedef unsigned long long __u64;
typedef signed char s8;
typedef unsigned char u8;
typedef unsigned short u16;
typedef int s32;
typedef unsigned int u32;
typedef long long s64;
typedef unsigned long long u64;
typedef unsigned short umode_t;
typedef u64 dma_addr_t;
typedef __u32 __kernel_dev_t;
typedef __kernel_dev_t dev_t;
typedef __kernel_mode_t mode_t;
typedef __kernel_off_t off_t;
typedef __kernel_pid_t pid_t;
typedef __kernel_timer_t timer_t;
typedef __kernel_clockid_t clockid_t;
typedef _Bool bool;
typedef __kernel_uid32_t uid_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_loff_t loff_t;
typedef __kernel_size_t size_t;
typedef __kernel_ssize_t ssize_t;
typedef __kernel_time_t time_t;
typedef __kernel_clock_t clock_t;
typedef unsigned int u_int;
typedef unsigned long sector_t;
typedef unsigned long blkcnt_t;
typedef unsigned int gfp_t;
typedef u64 resource_size_t;
struct task_struct;
struct mm_struct;
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
struct info {
   long ___orig_eip ;
   long ___ebx ;
   long ___ecx ;
   long ___edx ;
   long ___esi ;
   long ___edi ;
   long ___ebp ;
   long ___eax ;
   long ___ds ;
   long ___es ;
   long ___fs ;
   long ___orig_eax ;
   long ___eip ;
   long ___cs ;
   long ___eflags ;
   long ___esp ;
   long ___ss ;
   long ___vm86_es ;
   long ___vm86_ds ;
   long ___vm86_fs ;
   long ___vm86_gs ;
};
typedef __builtin_va_list __gnuc_va_list;
typedef __gnuc_va_list va_list;
struct module;
struct bug_entry {
   unsigned long bug_addr ;
   char const   *file ;
   unsigned short line ;
   unsigned short flags ;
};
struct completion;
struct pid;
typedef unsigned long pgdval_t;
typedef unsigned long pgprotval_t;
typedef unsigned long phys_addr_t;
struct page;
struct __anonstruct_pgd_t_8 {
   pgdval_t pgd ;
};
typedef struct __anonstruct_pgd_t_8 pgd_t;
struct __anonstruct_pgprot_t_9 {
   pgprotval_t pgprot ;
};
typedef struct __anonstruct_pgprot_t_9 pgprot_t;
struct __anonstruct____missing_field_name_13 {
   unsigned int a ;
   unsigned int b ;
};
struct __anonstruct____missing_field_name_14 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int base1 : 8 ;
   unsigned int type : 4 ;
   unsigned int s : 1 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   unsigned int limit : 4 ;
   unsigned int avl : 1 ;
   unsigned int l : 1 ;
   unsigned int d : 1 ;
   unsigned int g : 1 ;
   unsigned int base2 : 8 ;
};
union __anonunion____missing_field_name_12 {
   struct __anonstruct____missing_field_name_13 __annonCompField1 ;
   struct __anonstruct____missing_field_name_14 __annonCompField2 ;
};
struct desc_struct {
   union __anonunion____missing_field_name_12 __annonCompField3 ;
} __attribute__((__packed__)) ;
struct gate_struct64 {
   u16 offset_low ;
   u16 segment ;
   unsigned int ist : 3 ;
   unsigned int zero0 : 5 ;
   unsigned int type : 5 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   u16 offset_middle ;
   u32 offset_high ;
   u32 zero1 ;
} __attribute__((__packed__)) ;
typedef struct gate_struct64 gate_desc;
struct desc_ptr {
   unsigned short size ;
   unsigned long address ;
} __attribute__((__packed__)) ;
struct __anonstruct_cpumask_t_17 {
   unsigned long bits[((4096UL + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
typedef struct __anonstruct_cpumask_t_17 cpumask_t;
struct thread_struct;
struct tss_struct;
struct pv_lazy_ops {
   void (*enter)(void) ;
   void (*leave)(void) ;
};
struct pv_cpu_ops {
   unsigned long (*get_debugreg)(int regno ) ;
   void (*set_debugreg)(int regno , unsigned long value ) ;
   void (*clts)(void) ;
   unsigned long (*read_cr0)(void) ;
   void (*write_cr0)(unsigned long  ) ;
   unsigned long (*read_cr4_safe)(void) ;
   unsigned long (*read_cr4)(void) ;
   void (*write_cr4)(unsigned long  ) ;
   unsigned long (*read_cr8)(void) ;
   void (*write_cr8)(unsigned long  ) ;
   void (*load_tr_desc)(void) ;
   void (*load_gdt)(struct desc_ptr  const  * ) ;
   void (*load_idt)(struct desc_ptr  const  * ) ;
   void (*store_gdt)(struct desc_ptr * ) ;
   void (*store_idt)(struct desc_ptr * ) ;
   void (*set_ldt)(void const   *desc , unsigned int entries ) ;
   unsigned long (*store_tr)(void) ;
   void (*load_tls)(struct thread_struct *t , unsigned int cpu ) ;
   void (*load_gs_index)(unsigned int idx ) ;
   void (*write_ldt_entry)(struct desc_struct *ldt , int entrynum , void const   *desc ) ;
   void (*write_gdt_entry)(struct desc_struct * , int entrynum , void const   *desc ,
                           int size ) ;
   void (*write_idt_entry)(gate_desc * , int entrynum , gate_desc const   *gate ) ;
   void (*load_sp0)(struct tss_struct *tss , struct thread_struct *t ) ;
   void (*set_iopl_mask)(unsigned int mask ) ;
   void (*wbinvd)(void) ;
   void (*io_delay)(void) ;
   void (*cpuid)(unsigned int *eax , unsigned int *ebx , unsigned int *ecx , unsigned int *edx ) ;
   u64 (*read_msr)(unsigned int msr , int *err ) ;
   int (*write_msr)(unsigned int msr , unsigned int low , unsigned int high ) ;
   u64 (*read_tsc)(void) ;
   u64 (*read_pmc)(int counter ) ;
   unsigned long long (*read_tscp)(unsigned int *aux ) ;
   void (*irq_enable_sysexit)(void) ;
   void (*usergs_sysret64)(void) ;
   void (*usergs_sysret32)(void) ;
   void (*iret)(void) ;
   void (*swapgs)(void) ;
   struct pv_lazy_ops lazy_mode ;
};
struct raw_spinlock;
struct exec_domain;
struct map_segment;
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
struct x86_hw_tss {
   u32 reserved1 ;
   u64 sp0 ;
   u64 sp1 ;
   u64 sp2 ;
   u64 reserved2 ;
   u64 ist[7] ;
   u32 reserved3 ;
   u32 reserved4 ;
   u16 reserved5 ;
   u16 io_bitmap_base ;
} __attribute__((__packed__, __aligned__((1) <<  (7) ))) ;
struct tss_struct {
   struct x86_hw_tss x86_tss ;
   unsigned long io_bitmap[(unsigned long )(65536 / 8) / sizeof(long ) + 1UL] ;
   unsigned long io_bitmap_max ;
   struct thread_struct *io_bitmap_owner ;
   unsigned long stack[64] ;
} __attribute__((__aligned__((1) <<  (7) ))) ;
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u32 status ;
};
struct __anonstruct____missing_field_name_21 {
   u64 rip ;
   u64 rdp ;
};
struct __anonstruct____missing_field_name_22 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
union __anonunion____missing_field_name_20 {
   struct __anonstruct____missing_field_name_21 __annonCompField4 ;
   struct __anonstruct____missing_field_name_22 __annonCompField5 ;
};
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion____missing_field_name_20 __annonCompField6 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32] ;
   u32 xmm_space[64] ;
   u32 padding[24] ;
} __attribute__((__aligned__(16))) ;
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct info *info ;
   u32 entry_eip ;
};
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
};
struct kmem_cache;
struct thread_struct {
   struct desc_struct tls_array[3] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long ip ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   unsigned long ds_area_msr ;
};
struct __anonstruct_mm_segment_t_23 {
   unsigned long seg ;
};
typedef struct __anonstruct_mm_segment_t_23 mm_segment_t;
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
struct hlist_node;
struct hlist_head {
   struct hlist_node *first ;
};
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
struct timespec;
struct compat_timespec;
struct __anonstruct____missing_field_name_25 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
struct __anonstruct_futex_26 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
};
struct __anonstruct_nanosleep_27 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
union __anonunion____missing_field_name_24 {
   struct __anonstruct____missing_field_name_25 __annonCompField7 ;
   struct __anonstruct_futex_26 futex ;
   struct __anonstruct_nanosleep_27 nanosleep ;
};
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion____missing_field_name_24 __annonCompField8 ;
};
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   unsigned long flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
};
struct raw_spinlock {
   unsigned int slock ;
};
typedef struct raw_spinlock raw_spinlock_t;
struct __anonstruct_raw_rwlock_t_28 {
   unsigned int lock ;
};
typedef struct __anonstruct_raw_rwlock_t_28 raw_rwlock_t;
struct lockdep_map;
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
enum lock_usage_bit {
    LOCK_USED = 0,
    LOCK_USED_IN_HARDIRQ = 1,
    LOCK_USED_IN_SOFTIRQ = 2,
    LOCK_ENABLED_SOFTIRQS = 3,
    LOCK_ENABLED_HARDIRQS = 4,
    LOCK_USED_IN_HARDIRQ_READ = 5,
    LOCK_USED_IN_SOFTIRQ_READ = 6,
    LOCK_ENABLED_SOFTIRQS_READ = 7,
    LOCK_ENABLED_HARDIRQS_READ = 8,
    LOCK_USAGE_STATES = 9
} ;
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8UL] ;
};
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[LOCK_USAGE_STATES] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4] ;
};
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
};
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 2 ;
   unsigned int hardirqs_off : 1 ;
};
struct __anonstruct_spinlock_t_29 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
typedef struct __anonstruct_spinlock_t_29 spinlock_t;
struct __anonstruct_rwlock_t_30 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
typedef struct __anonstruct_rwlock_t_30 rwlock_t;
struct __anonstruct_atomic_t_31 {
   int counter ;
};
typedef struct __anonstruct_atomic_t_31 atomic_t;
struct __anonstruct_atomic64_t_32 {
   long counter ;
};
typedef struct __anonstruct_atomic64_t_32 atomic64_t;
typedef atomic64_t atomic_long_t;
struct timespec {
   time_t tv_sec ;
   long tv_nsec ;
};
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
struct __wait_queue;
typedef struct __wait_queue wait_queue_t;
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t *wait , unsigned int mode , int sync , void *key ) ;
   struct list_head task_list ;
};
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
typedef struct __wait_queue_head wait_queue_head_t;
struct __anonstruct_nodemask_t_34 {
   unsigned long bits[(((unsigned long )(1 << 9) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
typedef struct __anonstruct_nodemask_t_34 nodemask_t;
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct mutex *lock ;
   void *magic ;
};
struct rw_semaphore;
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
struct file;
struct device;
struct pm_message {
   int event ;
};
typedef struct pm_message pm_message_t;
struct pm_ops {
   int (*prepare)(struct device *dev ) ;
   void (*complete)(struct device *dev ) ;
   int (*suspend)(struct device *dev ) ;
   int (*resume)(struct device *dev ) ;
   int (*freeze)(struct device *dev ) ;
   int (*thaw)(struct device *dev ) ;
   int (*poweroff)(struct device *dev ) ;
   int (*restore)(struct device *dev ) ;
};
struct pm_ext_ops {
   struct pm_ops base ;
   int (*suspend_noirq)(struct device *dev ) ;
   int (*resume_noirq)(struct device *dev ) ;
   int (*freeze_noirq)(struct device *dev ) ;
   int (*thaw_noirq)(struct device *dev ) ;
   int (*poweroff_noirq)(struct device *dev ) ;
   int (*restore_noirq)(struct device *dev ) ;
};
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
};
struct __anonstruct_mm_context_t_82 {
   void *ldt ;
   rwlock_t ldtlock ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
typedef struct __anonstruct_mm_context_t_82 mm_context_t;
struct pci_bus;
struct vm_area_struct;
struct key;
typedef __u64 Elf64_Addr;
typedef __u16 Elf64_Half;
typedef __u32 Elf64_Word;
typedef __u64 Elf64_Xword;
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
typedef struct elf64_sym Elf64_Sym;
struct kobject;
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct kobject * , struct bin_attribute * , char * , loff_t  ,
                   size_t  ) ;
   ssize_t (*write)(struct kobject * , struct bin_attribute * , char * , loff_t  ,
                    size_t  ) ;
   int (*mmap)(struct kobject * , struct bin_attribute *attr , struct vm_area_struct *vma ) ;
};
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
struct kref {
   atomic_t refcount ;
};
struct kset;
struct kobj_type;
struct sysfs_dirent;
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
};
struct kobj_type {
   void (*release)(struct kobject *kobj ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
struct kobj_uevent_env {
   char *envp[32] ;
   int envp_idx ;
   char buf[2048] ;
   int buflen ;
};
struct kset_uevent_ops {
   int (*filter)(struct kset *kset , struct kobject *kobj ) ;
   char const   *(*name)(struct kset *kset , struct kobject *kobj ) ;
   int (*uevent)(struct kset *kset , struct kobject *kobj , struct kobj_uevent_env *env ) ;
};
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
struct kernel_param;
struct kparam_string;
struct kparam_array;
union __anonunion____missing_field_name_92 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
struct kernel_param {
   char const   *name ;
   unsigned int perm ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   union __anonunion____missing_field_name_92 __annonCompField9 ;
};
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   unsigned int elemsize ;
   void *elem ;
};
struct marker;
typedef void marker_probe_func(void *probe_private , void *call_private , char const   *fmt ,
                               va_list *args );
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  *mdata , void *call_private  , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
} __attribute__((__aligned__(8))) ;
union ktime {
   s64 tv64 ;
};
typedef union ktime ktime_t;
struct tvec_base;
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16] ;
   int start_pid ;
};
struct hrtimer;
enum hrtimer_restart;
struct work_struct;
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *work ) ;
   struct lockdep_map lockdep_map ;
};
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
enum stat_item {
    ALLOC_FASTPATH = 0,
    ALLOC_SLOWPATH = 1,
    FREE_FASTPATH = 2,
    FREE_SLOWPATH = 3,
    FREE_FROZEN = 4,
    FREE_ADD_PARTIAL = 5,
    FREE_REMOVE_PARTIAL = 6,
    ALLOC_FROM_PARTIAL = 7,
    ALLOC_SLAB = 8,
    ALLOC_REFILL = 9,
    FREE_SLAB = 10,
    CPUSLAB_FLUSH = 11,
    DEACTIVATE_FULL = 12,
    DEACTIVATE_EMPTY = 13,
    DEACTIVATE_TO_HEAD = 14,
    DEACTIVATE_TO_TAIL = 15,
    DEACTIVATE_REMOTE_FREES = 16,
    ORDER_FALLBACK = 17,
    NR_SLUB_STAT_ITEMS = 18
} ;
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[NR_SLUB_STAT_ITEMS] ;
};
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   unsigned long min_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
struct kmem_cache_order_objects {
   unsigned long x ;
};
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1 << 9] ;
   struct kmem_cache_cpu *cpu_slab[4096] ;
};
struct __anonstruct_local_t_93 {
   atomic_long_t a ;
};
typedef struct __anonstruct_local_t_93 local_t;
struct mod_arch_specific {

};
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t count ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
};
struct exception_table_entry;
struct module_ref {
   local_t count ;
} __attribute__((__aligned__((1) <<  (7) ))) ;
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
struct module_param_attrs;
struct module_sect_attrs;
struct module_notes_attrs;
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[64UL - sizeof(unsigned long )] ;
   struct module_kobject mkobj ;
   struct module_param_attrs *param_attrs ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry  const  *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   void *unwind_info ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref ref[4096] ;
};
struct device_driver;
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(sizeof(long )))) ;
struct rb_root {
   struct rb_node *rb_node ;
};
struct prio_tree_node;
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
struct address_space;
typedef atomic_long_t mm_counter_t;
struct __anonstruct____missing_field_name_95 {
   u16 inuse ;
   u16 objects ;
};
union __anonunion____missing_field_name_94 {
   atomic_t _mapcount ;
   struct __anonstruct____missing_field_name_95 __annonCompField10 ;
};
struct __anonstruct____missing_field_name_97 {
   unsigned long private ;
   struct address_space *mapping ;
};
union __anonunion____missing_field_name_96 {
   struct __anonstruct____missing_field_name_97 __annonCompField12 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
union __anonunion____missing_field_name_98 {
   unsigned long index ;
   void *freelist ;
};
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion____missing_field_name_94 __annonCompField11 ;
   union __anonunion____missing_field_name_96 __annonCompField13 ;
   union __anonunion____missing_field_name_98 __annonCompField14 ;
   struct list_head lru ;
   unsigned long page_cgroup ;
};
struct __anonstruct_vm_set_100 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
union __anonunion_shared_99 {
   struct __anonstruct_vm_set_100 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
struct anon_vma;
struct vm_operations_struct;
struct mempolicy;
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_99 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
struct kioctx;
struct mmu_notifier_mm;
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file *filp , unsigned long addr , unsigned long len ,
                                      unsigned long pgoff , unsigned long flags ) ;
   void (*unmap_area)(struct mm_struct *mm , unsigned long addr ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[2 * ((2 + 18) + 1)] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   rwlock_t ioctx_list_lock ;
   struct kioctx *ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
struct file_ra_state;
struct user_struct;
struct writeback_control;
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *area ) ;
   void (*close)(struct vm_area_struct *area ) ;
   int (*fault)(struct vm_area_struct *vma , struct vm_fault *vmf ) ;
   int (*page_mkwrite)(struct vm_area_struct *vma , struct page *page ) ;
   int (*access)(struct vm_area_struct *vma , unsigned long addr , void *buf , int len ,
                 int write ) ;
   int (*set_policy)(struct vm_area_struct *vma , struct mempolicy *new ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *vma , unsigned long addr ) ;
   int (*migrate)(struct vm_area_struct *vma , nodemask_t const   *from , nodemask_t const   *to ,
                  unsigned long flags ) ;
};
struct inode;
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head *head ) ;
};
struct nameidata;
struct path;
struct vfsmount;
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
struct dcookie_struct;
union __anonunion_d_u_102 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
struct dentry_operations;
struct super_block;
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_102 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   struct dcookie_struct *d_cookie ;
   int d_mounted ;
   unsigned char d_iname[36] ;
};
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
struct radix_tree_node;
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
struct pid_namespace;
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[PIDTYPE_MAX] ;
   struct rcu_head rcu ;
   struct upid numbers[1] ;
};
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
struct kernel_cap_struct {
   __u32 cap[2] ;
};
typedef struct kernel_cap_struct kernel_cap_t;
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
struct export_operations;
struct iovec;
struct kiocb;
struct pipe_inode_info;
struct poll_table_struct;
struct kstatfs;
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8] ;
};
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
typedef struct fs_qfilestat fs_qfilestat_t;
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
struct v1_mem_dqinfo {

};
struct v2_mem_dqinfo {
   unsigned int dqi_blocks ;
   unsigned int dqi_free_blk ;
   unsigned int dqi_free_entry ;
};
typedef __kernel_uid32_t qid_t;
typedef __u64 qsize_t;
struct mem_dqblk {
   __u32 dqb_bhardlimit ;
   __u32 dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   __u32 dqb_ihardlimit ;
   __u32 dqb_isoftlimit ;
   __u32 dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
struct quota_format_type;
union __anonunion_u_106 {
   struct v1_mem_dqinfo v1_i ;
   struct v2_mem_dqinfo v2_i ;
};
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   union __anonunion_u_106 u ;
};
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *sb , int type ) ;
   int (*read_file_info)(struct super_block *sb , int type ) ;
   int (*write_file_info)(struct super_block *sb , int type ) ;
   int (*free_file_info)(struct super_block *sb , int type ) ;
   int (*read_dqblk)(struct dquot *dquot ) ;
   int (*commit_dqblk)(struct dquot *dquot ) ;
   int (*release_dqblk)(struct dquot *dquot ) ;
};
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , unsigned long  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , unsigned long  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
};
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2] ;
   struct mem_dqinfo info[2] ;
   struct quota_format_ops *ops[2] ;
};
union __anonunion_arg_108 {
   char *buf ;
   void *data ;
};
struct __anonstruct_read_descriptor_t_107 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_108 arg ;
   int error ;
};
typedef struct __anonstruct_read_descriptor_t_107 read_descriptor_t;
struct address_space_operations {
   int (*writepage)(struct page *page , struct writeback_control *wbc ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page *page ) ;
   int (*readpages)(struct file *filp , struct address_space *mapping , struct list_head *pages ,
                    unsigned int nr_pages ) ;
   int (*prepare_write)(struct file * , struct page * , unsigned int  , unsigned int  ) ;
   int (*commit_write)(struct file * , struct page * , unsigned int  , unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space *mapping , loff_t pos ,
                      unsigned int len , unsigned int flags , struct page **pagep ,
                      void **fsdata ) ;
   int (*write_end)(struct file * , struct address_space *mapping , loff_t pos , unsigned int len ,
                    unsigned int copied , struct page *page , void *fsdata ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  *iov , loff_t offset ,
                        unsigned long nr_segs ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
};
struct backing_dev_info;
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
} __attribute__((__aligned__(sizeof(long )))) ;
struct hd_struct;
struct gendisk;
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
};
struct inode_operations;
struct file_operations;
struct file_lock;
struct cdev;
union __anonunion____missing_field_name_109 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
struct dnotify_struct;
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2] ;
   struct list_head i_devices ;
   union __anonunion____missing_field_name_109 __annonCompField15 ;
   int i_cindex ;
   __u32 i_generation ;
   unsigned long i_dnotify_mask ;
   struct dnotify_struct *i_dnotify ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
union __anonunion_f_u_110 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
struct file {
   union __anonunion_f_u_110 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   mode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   unsigned int f_uid ;
   unsigned int f_gid ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   spinlock_t f_ep_lock ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
struct files_struct;
typedef struct files_struct *fl_owner_t;
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
struct nlm_lockowner;
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
struct nfs4_lock_state;
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
struct fasync_struct;
struct __anonstruct_afs_112 {
   struct list_head link ;
   int state ;
};
union __anonunion_fl_u_111 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_112 afs ;
};
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_111 fl_u ;
};
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
struct file_system_type;
struct super_operations;
struct xattr_handler;
struct mtd_info;
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_syncing ;
   int s_need_sync_fs ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32] ;
   void *s_fs_info ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
};
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t id ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int datasync ) ;
   int (*aio_fsync)(struct kiocb * , int datasync ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*dir_notify)(struct file *filp , unsigned long arg ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount *mnt , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode *inode , int mode , loff_t offset , loff_t len ) ;
};
struct seq_file;
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *sb ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block *sb , int wait ) ;
   void (*write_super_lockfs)(struct super_block * ) ;
   void (*unlockfs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
};
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
struct bio;
typedef unsigned char cc_t;
typedef unsigned int speed_t;
typedef unsigned int tcflag_t;
struct ktermios {
   tcflag_t c_iflag ;
   tcflag_t c_oflag ;
   tcflag_t c_cflag ;
   tcflag_t c_lflag ;
   cc_t c_line ;
   cc_t c_cc[19] ;
   speed_t c_ispeed ;
   speed_t c_ospeed ;
};
struct winsize {
   unsigned short ws_row ;
   unsigned short ws_col ;
   unsigned short ws_xpixel ;
   unsigned short ws_ypixel ;
};
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
struct tty_struct;
struct tty_driver;
struct tty_operations {
   int (*open)(struct tty_struct *tty , struct file *filp ) ;
   void (*close)(struct tty_struct *tty , struct file *filp ) ;
   int (*write)(struct tty_struct *tty , unsigned char const   *buf , int count ) ;
   int (*put_char)(struct tty_struct *tty , unsigned char ch ) ;
   void (*flush_chars)(struct tty_struct *tty ) ;
   int (*write_room)(struct tty_struct *tty ) ;
   int (*chars_in_buffer)(struct tty_struct *tty ) ;
   int (*ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd , unsigned long arg ) ;
   long (*compat_ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd ,
                        unsigned long arg ) ;
   void (*set_termios)(struct tty_struct *tty , struct ktermios *old ) ;
   void (*throttle)(struct tty_struct *tty ) ;
   void (*unthrottle)(struct tty_struct *tty ) ;
   void (*stop)(struct tty_struct *tty ) ;
   void (*start)(struct tty_struct *tty ) ;
   void (*hangup)(struct tty_struct *tty ) ;
   int (*break_ctl)(struct tty_struct *tty , int state ) ;
   void (*flush_buffer)(struct tty_struct *tty ) ;
   void (*set_ldisc)(struct tty_struct *tty ) ;
   void (*wait_until_sent)(struct tty_struct *tty , int timeout ) ;
   void (*send_xchar)(struct tty_struct *tty , char ch ) ;
   int (*read_proc)(char *page , char **start , off_t off , int count , int *eof ,
                    void *data ) ;
   int (*tiocmget)(struct tty_struct *tty , struct file *file ) ;
   int (*tiocmset)(struct tty_struct *tty , struct file *file , unsigned int set ,
                   unsigned int clear ) ;
   int (*resize)(struct tty_struct *tty , struct tty_struct *real_tty , struct winsize *ws ) ;
   int (*poll_init)(struct tty_driver *driver , int line , char *options ) ;
   int (*poll_get_char)(struct tty_driver *driver , int line ) ;
   void (*poll_put_char)(struct tty_driver *driver , int line , char ch ) ;
};
struct proc_dir_entry;
struct tty_driver {
   int magic ;
   struct cdev cdev ;
   struct module *owner ;
   char const   *driver_name ;
   char const   *name ;
   int name_base ;
   int major ;
   int minor_start ;
   int minor_num ;
   int num ;
   short type ;
   short subtype ;
   struct ktermios init_termios ;
   int flags ;
   int refcount ;
   struct proc_dir_entry *proc_entry ;
   struct tty_driver *other ;
   struct tty_struct **ttys ;
   struct ktermios **termios ;
   struct ktermios **termios_locked ;
   void *driver_state ;
   struct tty_operations  const  *ops ;
   struct list_head tty_drivers ;
};
struct tty_ldisc_ops {
   int magic ;
   char *name ;
   int num ;
   int flags ;
   int (*open)(struct tty_struct * ) ;
   void (*close)(struct tty_struct * ) ;
   void (*flush_buffer)(struct tty_struct *tty ) ;
   ssize_t (*chars_in_buffer)(struct tty_struct *tty ) ;
   ssize_t (*read)(struct tty_struct *tty , struct file *file , unsigned char *buf ,
                   size_t nr ) ;
   ssize_t (*write)(struct tty_struct *tty , struct file *file , unsigned char const   *buf ,
                    size_t nr ) ;
   int (*ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd , unsigned long arg ) ;
   long (*compat_ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd ,
                        unsigned long arg ) ;
   void (*set_termios)(struct tty_struct *tty , struct ktermios *old ) ;
   unsigned int (*poll)(struct tty_struct * , struct file * , struct poll_table_struct * ) ;
   int (*hangup)(struct tty_struct *tty ) ;
   void (*receive_buf)(struct tty_struct * , unsigned char const   *cp , char *fp ,
                       int count ) ;
   void (*write_wakeup)(struct tty_struct * ) ;
   struct module *owner ;
   int refcount ;
};
struct tty_ldisc {
   struct tty_ldisc_ops *ops ;
   int refcount ;
};
struct tty_buffer {
   struct tty_buffer *next ;
   char *char_buf_ptr ;
   unsigned char *flag_buf_ptr ;
   int used ;
   int size ;
   int commit ;
   int read ;
   unsigned long data[0] ;
};
struct tty_bufhead {
   struct delayed_work work ;
   spinlock_t lock ;
   struct tty_buffer *head ;
   struct tty_buffer *tail ;
   struct tty_buffer *free ;
   int memory_used ;
};
struct signal_struct;
struct tty_port {
   struct tty_struct *tty ;
   int blocked_open ;
   int count ;
   wait_queue_head_t open_wait ;
   wait_queue_head_t close_wait ;
   unsigned long flags ;
   struct mutex mutex ;
   unsigned char *xmit_buf ;
   int close_delay ;
   int closing_wait ;
};
struct tty_struct {
   int magic ;
   struct tty_driver *driver ;
   struct tty_operations  const  *ops ;
   int index ;
   struct tty_ldisc ldisc ;
   struct mutex termios_mutex ;
   spinlock_t ctrl_lock ;
   struct ktermios *termios ;
   struct ktermios *termios_locked ;
   char name[64] ;
   struct pid *pgrp ;
   struct pid *session ;
   unsigned long flags ;
   int count ;
   struct winsize winsize ;
   unsigned char stopped : 1 ;
   unsigned char hw_stopped : 1 ;
   unsigned char flow_stopped : 1 ;
   unsigned char packet : 1 ;
   unsigned char low_latency : 1 ;
   unsigned char warned : 1 ;
   unsigned char ctrl_status ;
   unsigned int receive_room ;
   struct tty_struct *link ;
   struct fasync_struct *fasync ;
   struct tty_bufhead buf ;
   int alt_speed ;
   wait_queue_head_t write_wait ;
   wait_queue_head_t read_wait ;
   struct work_struct hangup_work ;
   void *disc_data ;
   void *driver_data ;
   struct list_head tty_files ;
   unsigned int column ;
   unsigned char lnext : 1 ;
   unsigned char erasing : 1 ;
   unsigned char raw : 1 ;
   unsigned char real_raw : 1 ;
   unsigned char icanon : 1 ;
   unsigned char closing : 1 ;
   unsigned short minimum_to_wake ;
   unsigned long overrun_time ;
   int num_overrun ;
   unsigned long process_char_map[256UL / (8UL * sizeof(unsigned long ))] ;
   char *read_buf ;
   int read_head ;
   int read_tail ;
   int read_cnt ;
   unsigned long read_flags[4096UL / (8UL * sizeof(unsigned long ))] ;
   int canon_data ;
   unsigned long canon_head ;
   unsigned int canon_column ;
   struct mutex atomic_read_lock ;
   struct mutex atomic_write_lock ;
   unsigned char *write_buf ;
   int write_cnt ;
   spinlock_t read_lock ;
   struct work_struct SAK_work ;
   struct tty_port *port ;
};
typedef unsigned long kernel_ulong_t;
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const   *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
struct pci_dev;
struct klist_node;
struct klist {
   spinlock_t k_lock ;
   struct list_head k_list ;
   void (*get)(struct klist_node * ) ;
   void (*put)(struct klist_node * ) ;
};
struct klist_node {
   struct klist *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
   struct completion n_removed ;
};
struct dma_mapping_ops;
struct dev_archdata {
   void *acpi_handle ;
   struct dma_mapping_ops *dma_ops ;
   void *iommu ;
};
struct driver_private;
struct class;
struct class_private;
struct bus_type;
struct bus_type_private;
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type *bus , char *buf ) ;
   ssize_t (*store)(struct bus_type *bus , char const   *buf , size_t count ) ;
};
struct device_attribute;
struct driver_attribute;
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device *dev , struct device_driver *drv ) ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*suspend_late)(struct device *dev , pm_message_t state ) ;
   int (*resume_early)(struct device *dev ) ;
   int (*resume)(struct device *dev ) ;
   struct pm_ext_ops *pm ;
   struct bus_type_private *p ;
};
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct attribute_group **groups ;
   struct pm_ops *pm ;
   struct driver_private *p ;
};
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver *driver , char *buf ) ;
   ssize_t (*store)(struct device_driver *driver , char const   *buf , size_t count ) ;
};
struct class_attribute;
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   void (*class_release)(struct class *class ) ;
   void (*dev_release)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct pm_ops *pm ;
   struct class_private *p ;
};
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *class , char *buf ) ;
   ssize_t (*store)(struct class *class , char const   *buf , size_t count ) ;
};
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   void (*release)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct pm_ops *pm ;
};
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *dev , struct device_attribute *attr , char *buf ) ;
   ssize_t (*store)(struct device *dev , struct device_attribute *attr , char const   *buf ,
                    size_t count ) ;
};
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
struct dma_coherent_mem;
struct device {
   struct klist klist_children ;
   struct klist_node knode_parent ;
   struct klist_node knode_driver ;
   struct klist_node knode_bus ;
   struct device *parent ;
   struct kobject kobj ;
   char bus_id[20] ;
   char const   *init_name ;
   struct device_type *type ;
   unsigned int uevent_suppress : 1 ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct list_head node ;
   struct class *class ;
   dev_t devt ;
   struct attribute_group **groups ;
   void (*release)(struct device *dev ) ;
};
typedef unsigned long cputime_t;
struct sem_undo_list;
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
struct siginfo;
struct __anonstruct_sigset_t_116 {
   unsigned long sig[64 / 64] ;
};
typedef struct __anonstruct_sigset_t_116 sigset_t;
typedef void __signalfn_t(int  );
typedef __signalfn_t *__sighandler_t;
typedef void __restorefn_t(void);
typedef __restorefn_t *__sigrestore_t;
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
struct k_sigaction {
   struct sigaction sa ;
};
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
typedef union sigval sigval_t;
struct __anonstruct__kill_118 {
   pid_t _pid ;
   uid_t _uid ;
};
struct __anonstruct__timer_119 {
   timer_t _tid ;
   int _overrun ;
   char _pad[sizeof(uid_t ) - sizeof(int )] ;
   sigval_t _sigval ;
   int _sys_private ;
};
struct __anonstruct__rt_120 {
   pid_t _pid ;
   uid_t _uid ;
   sigval_t _sigval ;
};
struct __anonstruct__sigchld_121 {
   pid_t _pid ;
   uid_t _uid ;
   int _status ;
   clock_t _utime ;
   clock_t _stime ;
};
struct __anonstruct__sigfault_122 {
   void *_addr ;
};
struct __anonstruct__sigpoll_123 {
   long _band ;
   int _fd ;
};
union __anonunion__sifields_117 {
   int _pad[(128UL - 4UL * sizeof(int )) / sizeof(int )] ;
   struct __anonstruct__kill_118 _kill ;
   struct __anonstruct__timer_119 _timer ;
   struct __anonstruct__rt_120 _rt ;
   struct __anonstruct__sigchld_121 _sigchld ;
   struct __anonstruct__sigfault_122 _sigfault ;
   struct __anonstruct__sigpoll_123 _sigpoll ;
};
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_117 _sifields ;
};
typedef struct siginfo siginfo_t;
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
struct fs_struct {
   atomic_t count ;
   rwlock_t lock ;
   int umask ;
   struct path root ;
   struct path pwd ;
};
struct prop_local_single {
   unsigned long events ;
   int shift ;
   unsigned long period ;
   spinlock_t lock ;
};
struct __anonstruct_seccomp_t_126 {
   int mode ;
};
typedef struct __anonstruct_seccomp_t_126 seccomp_t;
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
struct rt_mutex_waiter;
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
struct hrtimer_clock_base;
struct hrtimer_cpu_base;
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
enum hrtimer_cb_mode {
    HRTIMER_CB_SOFTIRQ = 0,
    HRTIMER_CB_IRQSAFE = 1,
    HRTIMER_CB_IRQSAFE_NO_RESTART = 2,
    HRTIMER_CB_IRQSAFE_NO_SOFTIRQ = 3
} ;
struct hrtimer {
   struct rb_node node ;
   ktime_t expires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   enum hrtimer_cb_mode cb_mode ;
   struct list_head cb_entry ;
   void *start_site ;
   char start_comm[16] ;
   int start_pid ;
};
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t (*get_softirq_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
   int (*reprogram)(struct hrtimer *t , struct hrtimer_clock_base *b , ktime_t n ) ;
};
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2] ;
   struct list_head cb_pending ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
struct latency_record {
   unsigned long backtrace[12] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
struct futex_pi_state;
struct robust_list_head;
struct cfs_rq;
struct task_group;
struct nsproxy;
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
union __anonunion_ki_obj_128 {
   void *user ;
   struct task_struct *tsk ;
};
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_128 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8] ;
};
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct kioctx *next ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
};
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
union __anonunion____missing_field_name_129 {
   pid_t pgrp  __attribute__((__deprecated__)) ;
   pid_t __pgrp ;
};
union __anonunion____missing_field_name_130 {
   pid_t session  __attribute__((__deprecated__)) ;
   pid_t __session ;
};
struct taskstats;
struct tty_audit_buf;
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   struct task_struct *group_exit_task ;
   int notify_count ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   union __anonunion____missing_field_name_129 __annonCompField16 ;
   struct pid *tty_old_pgrp ;
   union __anonunion____missing_field_name_130 __annonCompField17 ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16] ;
   struct list_head cpu_timers[3] ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
};
struct reclaim_state;
struct sched_info {
   unsigned long pcount ;
   unsigned long long cpu_time ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
struct sched_group {
   struct sched_group *next ;
   cpumask_t cpumask ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
};
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   cpumask_t span ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_failed[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_balanced[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_imbalance[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_hot_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyg[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyq[CPU_MAX_IDLE_TYPES] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
};
struct io_context;
struct group_info {
   int ngroups ;
   atomic_t usage ;
   gid_t small_block[32] ;
   int nblocks ;
   gid_t *blocks[0] ;
};
struct audit_context;
struct rq;
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq *rq , struct task_struct *p , int wakeup ) ;
   void (*dequeue_task)(struct rq *rq , struct task_struct *p , int sleep ) ;
   void (*yield_task)(struct rq *rq ) ;
   int (*select_task_rq)(struct task_struct *p , int sync ) ;
   void (*check_preempt_curr)(struct rq *rq , struct task_struct *p ) ;
   struct task_struct *(*pick_next_task)(struct rq *rq ) ;
   void (*put_prev_task)(struct rq *rq , struct task_struct *p ) ;
   unsigned long (*load_balance)(struct rq *this_rq , int this_cpu , struct rq *busiest ,
                                 unsigned long max_load_move , struct sched_domain *sd ,
                                 enum cpu_idle_type idle , int *all_pinned , int *this_best_prio ) ;
   int (*move_one_task)(struct rq *this_rq , int this_cpu , struct rq *busiest , struct sched_domain *sd ,
                        enum cpu_idle_type idle ) ;
   void (*pre_schedule)(struct rq *this_rq , struct task_struct *task ) ;
   void (*post_schedule)(struct rq *this_rq ) ;
   void (*task_wake_up)(struct rq *this_rq , struct task_struct *task ) ;
   void (*set_curr_task)(struct rq *rq ) ;
   void (*task_tick)(struct rq *rq , struct task_struct *p , int queued ) ;
   void (*task_new)(struct rq *rq , struct task_struct *p ) ;
   void (*set_cpus_allowed)(struct task_struct *p , cpumask_t const   *newmask ) ;
   void (*rq_online)(struct rq *rq ) ;
   void (*rq_offline)(struct rq *rq ) ;
   void (*switched_from)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*switched_to)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*prio_changed)(struct rq *this_rq , struct task_struct *task , int oldprio ,
                        int running ) ;
   void (*moved_group)(struct task_struct *p ) ;
};
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
struct rt_rq;
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned int time_slice ;
   unsigned long timeout ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
struct linux_binfmt;
struct css_set;
struct compat_robust_list_head;
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned int did_exec : 1 ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[PIDTYPE_MAX] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   unsigned long long it_sched_expires ;
   struct list_head cpu_timers[3] ;
   uid_t uid ;
   uid_t euid ;
   uid_t suid ;
   uid_t fsuid ;
   gid_t gid ;
   gid_t egid ;
   gid_t sgid ;
   gid_t fsgid ;
   struct group_info *group_info ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_bset ;
   struct user_struct *user ;
   unsigned int securebits ;
   unsigned char jit_keyring ;
   struct key *request_key_auth ;
   struct key *thread_keyring ;
   char comm[16] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_timestamp ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *priv ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   void *security ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48UL] ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32] ;
};
struct fb_fix_screeninfo {
   char id[16] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 reserved[3] ;
};
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 reserved[5] ;
};
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
enum __anonenum_131 {
    FB_BLANK_UNBLANK = 0,
    FB_BLANK_NORMAL = 0 + 1,
    FB_BLANK_VSYNC_SUSPEND = 1 + 1,
    FB_BLANK_HSYNC_SUSPEND = 2 + 1,
    FB_BLANK_POWERDOWN = 3 + 1
} ;
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char const   *data ;
   struct fb_cmap cmap ;
};
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char const   *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
struct backlight_device;
struct fb_info;
struct backlight_ops {
   int (*update_status)(struct backlight_device * ) ;
   int (*get_brightness)(struct backlight_device * ) ;
   int (*check_fb)(struct fb_info * ) ;
};
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
};
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct device dev ;
};
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
struct fb_videomode;
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4] ;
   __u8 monitor[14] ;
   __u8 serial_no[14] ;
   __u8 ascii[14] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *info , void *dst , void *src , unsigned int size ) ;
   void (*readio)(struct fb_info *info , void *dst , void *src , unsigned int size ) ;
};
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*deferred_io)(struct fb_info *info , struct list_head *pagelist ) ;
};
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *info , int user ) ;
   int (*fb_release)(struct fb_info *info , int user ) ;
   ssize_t (*fb_read)(struct fb_info *info , char *buf , size_t count , loff_t *ppos ) ;
   ssize_t (*fb_write)(struct fb_info *info , char const   *buf , size_t count , loff_t *ppos ) ;
   int (*fb_check_var)(struct fb_var_screeninfo *var , struct fb_info *info ) ;
   int (*fb_set_par)(struct fb_info *info ) ;
   int (*fb_setcolreg)(unsigned int regno , unsigned int red , unsigned int green ,
                       unsigned int blue , unsigned int transp , struct fb_info *info ) ;
   int (*fb_setcmap)(struct fb_cmap *cmap , struct fb_info *info ) ;
   int (*fb_blank)(int blank , struct fb_info *info ) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *var , struct fb_info *info ) ;
   void (*fb_fillrect)(struct fb_info *info , struct fb_fillrect  const  *rect ) ;
   void (*fb_copyarea)(struct fb_info *info , struct fb_copyarea  const  *region ) ;
   void (*fb_imageblit)(struct fb_info *info , struct fb_image  const  *image ) ;
   int (*fb_cursor)(struct fb_info *info , struct fb_cursor *cursor ) ;
   void (*fb_rotate)(struct fb_info *info , int angle ) ;
   int (*fb_sync)(struct fb_info *info ) ;
   int (*fb_ioctl)(struct fb_info *info , unsigned int cmd , unsigned long arg ) ;
   int (*fb_compat_ioctl)(struct fb_info *info , unsigned int cmd , unsigned long arg ) ;
   int (*fb_mmap)(struct fb_info *info , struct vm_area_struct *vma ) ;
   void (*fb_save_state)(struct fb_info *info ) ;
   void (*fb_restore_state)(struct fb_info *info ) ;
   void (*fb_get_caps)(struct fb_info *info , struct fb_blit_caps *caps , struct fb_var_screeninfo *var ) ;
};
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 const   *data ;
};
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *info , struct fb_tilemap *map ) ;
   void (*fb_tilecopy)(struct fb_info *info , struct fb_tilearea *area ) ;
   void (*fb_tilefill)(struct fb_info *info , struct fb_tilerect *rect ) ;
   void (*fb_tileblit)(struct fb_info *info , struct fb_tileblit *blit ) ;
   void (*fb_tilecursor)(struct fb_info *info , struct fb_tilecursor *cursor ) ;
   int (*fb_get_tilemax)(struct fb_info *info ) ;
};
struct fb_info {
   int node ;
   int flags ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   char *screen_base ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
};
struct fb_videomode {
   char const   *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
struct hotplug_slot;
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
typedef int pci_power_t;
typedef unsigned int pci_channel_state_t;
enum pci_channel_state {
    pci_channel_io_normal = (pci_channel_state_t )1,
    pci_channel_io_frozen = (pci_channel_state_t )2,
    pci_channel_io_perm_failure = (pci_channel_state_t )3
} ;
typedef unsigned short pci_dev_flags_t;
typedef unsigned short pci_bus_flags_t;
struct pcie_link_state;
struct pci_vpd;
struct pci_driver;
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_type ;
   u8 rom_base_reg ;
   u8 pin ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   int pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[12] ;
   unsigned int transparent : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_added : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int block_ucfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int is_pcie : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[12] ;
   struct bin_attribute *res_attr_wc[12] ;
   struct list_head msi_list ;
   struct pci_vpd *vpd ;
};
struct pci_ops;
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[16] ;
   struct pci_ops *ops ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char secondary ;
   unsigned char subordinate ;
   char name[48] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
struct pci_ops {
   int (*read)(struct pci_bus *bus , unsigned int devfn , int where , int size , u32 *val ) ;
   int (*write)(struct pci_bus *bus , unsigned int devfn , int where , int size ,
                u32 val ) ;
};
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
   unsigned int use_driver_data : 1 ;
};
typedef unsigned int pci_ers_result_t;
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *dev , enum pci_channel_state error ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *dev ) ;
   pci_ers_result_t (*link_reset)(struct pci_dev *dev ) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *dev ) ;
   void (*resume)(struct pci_dev *dev ) ;
};
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id  const  *id_table ;
   int (*probe)(struct pci_dev *dev , struct pci_device_id  const  *id ) ;
   void (*remove)(struct pci_dev *dev ) ;
   int (*suspend)(struct pci_dev *dev , pm_message_t state ) ;
   int (*suspend_late)(struct pci_dev *dev , pm_message_t state ) ;
   int (*resume_early)(struct pci_dev *dev ) ;
   int (*resume)(struct pci_dev *dev ) ;
   void (*shutdown)(struct pci_dev *dev ) ;
   struct pm_ext_ops *pm ;
   struct pci_error_handlers *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
struct dma_mapping_ops {
   int (*mapping_error)(struct device *dev , dma_addr_t dma_addr ) ;
   void *(*alloc_coherent)(struct device *dev , size_t size , dma_addr_t *dma_handle ,
                           gfp_t gfp ) ;
   void (*free_coherent)(struct device *dev , size_t size , void *vaddr , dma_addr_t dma_handle ) ;
   dma_addr_t (*map_single)(struct device *hwdev , phys_addr_t ptr , size_t size ,
                            int direction ) ;
   dma_addr_t (*map_simple)(struct device *hwdev , phys_addr_t ptr , size_t size ,
                            int direction ) ;
   void (*unmap_single)(struct device *dev , dma_addr_t addr , size_t size , int direction ) ;
   void (*sync_single_for_cpu)(struct device *hwdev , dma_addr_t dma_handle , size_t size ,
                               int direction ) ;
   void (*sync_single_for_device)(struct device *hwdev , dma_addr_t dma_handle , size_t size ,
                                  int direction ) ;
   void (*sync_single_range_for_cpu)(struct device *hwdev , dma_addr_t dma_handle ,
                                     unsigned long offset , size_t size , int direction ) ;
   void (*sync_single_range_for_device)(struct device *hwdev , dma_addr_t dma_handle ,
                                        unsigned long offset , size_t size , int direction ) ;
   void (*sync_sg_for_cpu)(struct device *hwdev , struct scatterlist *sg , int nelems ,
                           int direction ) ;
   void (*sync_sg_for_device)(struct device *hwdev , struct scatterlist *sg , int nelems ,
                              int direction ) ;
   int (*map_sg)(struct device *hwdev , struct scatterlist *sg , int nents , int direction ) ;
   void (*unmap_sg)(struct device *hwdev , struct scatterlist *sg , int nents , int direction ) ;
   int (*dma_supported)(struct device *hwdev , u64 mask ) ;
   int is_phys ;
};
struct vgastate {
   void *vgabase ;
   unsigned long membase ;
   __u32 memsize ;
   __u32 flags ;
   __u32 depth ;
   __u32 num_attr ;
   __u32 num_crtc ;
   __u32 num_gfx ;
   __u32 num_seq ;
   void *vidstate ;
};
struct vga_regset {
   u8 regnum ;
   u8 lowbit ;
   u8 highbit ;
};
struct svga_fb_format {
   u32 bits_per_pixel ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   u32 nonstd ;
   u32 type ;
   u32 type_aux ;
   u32 visual ;
   u32 xpanstep ;
   u32 xresstep ;
};
struct svga_timing_regs {
   struct vga_regset  const  *h_total_regs ;
   struct vga_regset  const  *h_display_regs ;
   struct vga_regset  const  *h_blank_start_regs ;
   struct vga_regset  const  *h_blank_end_regs ;
   struct vga_regset  const  *h_sync_start_regs ;
   struct vga_regset  const  *h_sync_end_regs ;
   struct vga_regset  const  *v_total_regs ;
   struct vga_regset  const  *v_display_regs ;
   struct vga_regset  const  *v_blank_start_regs ;
   struct vga_regset  const  *v_blank_end_regs ;
   struct vga_regset  const  *v_sync_start_regs ;
   struct vga_regset  const  *v_sync_end_regs ;
};
struct svga_pll {
   u16 m_min ;
   u16 m_max ;
   u16 n_min ;
   u16 n_max ;
   u16 r_min ;
   u16 r_max ;
   u32 f_vco_min ;
   u32 f_vco_max ;
   u32 f_base ;
};
typedef s32 compat_time_t;
typedef s32 compat_long_t;
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};
typedef u32 compat_uptr_t;
struct compat_robust_list {
   compat_uptr_t next ;
};
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
struct dac_info;
struct arkfb_info {
   int mclk_freq ;
   int mtrr_reg ;
   struct dac_info *dac ;
   struct vgastate state ;
   struct mutex open_lock ;
   unsigned int ref_count ;
   u32 pseudo_palette[16] ;
};
enum __anonenum_135 {
    DAC_PSEUDO8_8 = 0,
    DAC_RGB1555_8 = 1,
    DAC_RGB0565_8 = 2,
    DAC_RGB0888_8 = 3,
    DAC_RGB8888_8 = 4,
    DAC_PSEUDO8_16 = 5,
    DAC_RGB1555_16 = 6,
    DAC_RGB0565_16 = 7,
    DAC_RGB0888_16 = 8,
    DAC_RGB8888_16 = 9,
    DAC_MAX = 10
} ;
struct dac_ops {
   int (*dac_get_mode)(struct dac_info *info ) ;
   int (*dac_set_mode)(struct dac_info *info , int mode ) ;
   int (*dac_get_freq)(struct dac_info *info , int channel ) ;
   int (*dac_set_freq)(struct dac_info *info , int channel , u32 freq ) ;
   void (*dac_release)(struct dac_info *info ) ;
};
struct dac_info {
   struct dac_ops *dacops ;
   void (*dac_read_regs)(void *data , u8 *code , int count ) ;
   void (*dac_write_regs)(void *data , u8 *code , int count ) ;
   void *data ;
};
struct ics5342_info {
   struct dac_info dac ;
   u8 mode ;
};
typedef __u16 __le16;
enum hrtimer_restart;
struct usb_device_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 bcdUSB ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bMaxPacketSize0 ;
   __le16 idVendor ;
   __le16 idProduct ;
   __le16 bcdDevice ;
   __u8 iManufacturer ;
   __u8 iProduct ;
   __u8 iSerialNumber ;
   __u8 bNumConfigurations ;
} __attribute__((__packed__)) ;
struct usb_config_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumInterfaces ;
   __u8 bConfigurationValue ;
   __u8 iConfiguration ;
   __u8 bmAttributes ;
   __u8 bMaxPower ;
} __attribute__((__packed__)) ;
struct usb_interface_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bInterfaceNumber ;
   __u8 bAlternateSetting ;
   __u8 bNumEndpoints ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 iInterface ;
} __attribute__((__packed__)) ;
struct usb_endpoint_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bEndpointAddress ;
   __u8 bmAttributes ;
   __le16 wMaxPacketSize ;
   __u8 bInterval ;
   __u8 bRefresh ;
   __u8 bSynchAddress ;
} __attribute__((__packed__)) ;
struct usb_interface_assoc_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bFirstInterface ;
   __u8 bInterfaceCount ;
   __u8 bFunctionClass ;
   __u8 bFunctionSubClass ;
   __u8 bFunctionProtocol ;
   __u8 iFunction ;
} __attribute__((__packed__)) ;
enum usb_device_speed {
    USB_SPEED_UNKNOWN = 0,
    USB_SPEED_LOW = 1,
    USB_SPEED_FULL = 2,
    USB_SPEED_HIGH = 3,
    USB_SPEED_VARIABLE = 4
} ;
enum usb_device_state {
    USB_STATE_NOTATTACHED = 0,
    USB_STATE_ATTACHED = 1,
    USB_STATE_POWERED = 2,
    USB_STATE_UNAUTHENTICATED = 3,
    USB_STATE_RECONNECTING = 4,
    USB_STATE_DEFAULT = 5,
    USB_STATE_ADDRESS = 6,
    USB_STATE_CONFIGURED = 7,
    USB_STATE_SUSPENDED = 8
} ;
struct usb_device;
struct wusb_dev;
struct ep_device;
struct usb_host_endpoint {
   struct usb_endpoint_descriptor desc ;
   struct list_head urb_list ;
   void *hcpriv ;
   struct ep_device *ep_dev ;
   unsigned char *extra ;
   int extralen ;
   int enabled ;
};
struct usb_host_interface {
   struct usb_interface_descriptor desc ;
   struct usb_host_endpoint *endpoint ;
   char *string ;
   unsigned char *extra ;
   int extralen ;
};
enum usb_interface_condition {
    USB_INTERFACE_UNBOUND = 0,
    USB_INTERFACE_BINDING = 1,
    USB_INTERFACE_BOUND = 2,
    USB_INTERFACE_UNBINDING = 3
} ;
struct usb_interface {
   struct usb_host_interface *altsetting ;
   struct usb_host_interface *cur_altsetting ;
   unsigned int num_altsetting ;
   struct usb_interface_assoc_descriptor *intf_assoc ;
   int minor ;
   enum usb_interface_condition condition ;
   unsigned int is_active : 1 ;
   unsigned int sysfs_files_created : 1 ;
   unsigned int needs_remote_wakeup : 1 ;
   unsigned int needs_altsetting0 : 1 ;
   unsigned int needs_binding : 1 ;
   struct device dev ;
   struct device *usb_dev ;
   int pm_usage_cnt ;
};
struct usb_interface_cache {
   unsigned int num_altsetting ;
   struct kref ref ;
   struct usb_host_interface altsetting[0] ;
};
struct usb_host_config {
   struct usb_config_descriptor desc ;
   char *string ;
   struct usb_interface_assoc_descriptor *intf_assoc[32 / 2] ;
   struct usb_interface *interface[32] ;
   struct usb_interface_cache *intf_cache[32] ;
   unsigned char *extra ;
   int extralen ;
};
struct usb_devmap {
   unsigned long devicemap[128UL / (8UL * sizeof(unsigned long ))] ;
};
struct mon_bus;
struct usb_bus {
   struct device *controller ;
   int busnum ;
   char const   *bus_name ;
   u8 uses_dma ;
   u8 otg_port ;
   unsigned int is_b_host : 1 ;
   unsigned int b_hnp_enable : 1 ;
   int devnum_next ;
   struct usb_devmap devmap ;
   struct usb_device *root_hub ;
   struct list_head bus_list ;
   int bandwidth_allocated ;
   int bandwidth_int_reqs ;
   int bandwidth_isoc_reqs ;
   struct dentry *usbfs_dentry ;
   struct device *dev ;
   struct mon_bus *mon_bus ;
   int monitored ;
};
struct usb_tt;
struct usb_device {
   int devnum ;
   char devpath[16] ;
   enum usb_device_state state ;
   enum usb_device_speed speed ;
   struct usb_tt *tt ;
   int ttport ;
   unsigned int toggle[2] ;
   struct usb_device *parent ;
   struct usb_bus *bus ;
   struct usb_host_endpoint ep0 ;
   struct device dev ;
   struct usb_device_descriptor descriptor ;
   struct usb_host_config *config ;
   struct usb_host_config *actconfig ;
   struct usb_host_endpoint *ep_in[16] ;
   struct usb_host_endpoint *ep_out[16] ;
   char **rawdescriptors ;
   unsigned short bus_mA ;
   u8 portnum ;
   u8 level ;
   unsigned int can_submit : 1 ;
   unsigned int discon_suspended : 1 ;
   unsigned int persist_enabled : 1 ;
   unsigned int have_langid : 1 ;
   unsigned int authorized : 1 ;
   unsigned int authenticated : 1 ;
   unsigned int wusb : 1 ;
   int string_langid ;
   char *product ;
   char *manufacturer ;
   char *serial ;
   struct list_head filelist ;
   struct device *usb_classdev ;
   struct dentry *usbfs_dentry ;
   int maxchild ;
   struct usb_device *children[31] ;
   int pm_usage_cnt ;
   u32 quirks ;
   atomic_t urbnum ;
   unsigned long active_duration ;
   struct delayed_work autosuspend ;
   struct mutex pm_mutex ;
   unsigned long last_busy ;
   int autosuspend_delay ;
   unsigned long connect_time ;
   unsigned int auto_pm : 1 ;
   unsigned int do_remote_wakeup : 1 ;
   unsigned int reset_resume : 1 ;
   unsigned int autosuspend_disabled : 1 ;
   unsigned int autoresume_disabled : 1 ;
   unsigned int skip_sys_resume : 1 ;
   struct wusb_dev *wusb_dev ;
};
struct usb_iso_packet_descriptor {
   unsigned int offset ;
   unsigned int length ;
   unsigned int actual_length ;
   int status ;
};
struct urb;
struct usb_anchor {
   struct list_head urb_list ;
   wait_queue_head_t wait ;
   spinlock_t lock ;
};
struct urb {
   struct kref kref ;
   void *hcpriv ;
   atomic_t use_count ;
   u8 reject ;
   int unlinked ;
   struct list_head urb_list ;
   struct list_head anchor_list ;
   struct usb_anchor *anchor ;
   struct usb_device *dev ;
   struct usb_host_endpoint *ep ;
   unsigned int pipe ;
   int status ;
   unsigned int transfer_flags ;
   void *transfer_buffer ;
   dma_addr_t transfer_dma ;
   int transfer_buffer_length ;
   int actual_length ;
   unsigned char *setup_packet ;
   dma_addr_t setup_dma ;
   int start_frame ;
   int number_of_packets ;
   int interval ;
   int error_count ;
   void *context ;
   void (*complete)(struct urb * ) ;
   struct usb_iso_packet_descriptor iso_frame_desc[0] ;
};
extern int ( /* format attribute */  printk)(char const   *fmt  , ...) ;
extern void *memset(void *s , int c , size_t n ) ;
extern char *strcpy(char *dest , char const   *src ) ;
extern struct pv_cpu_ops pv_cpu_ops ;
__inline static void slow_down_io(void) 
{ 


  {
  (*(pv_cpu_ops.io_delay))();
  return;
}
}
extern void __mutex_init(struct mutex *lock , char const   *name , struct lock_class_key *key ) ;
extern void mutex_lock_nested(struct mutex *lock , unsigned int subclass ) ;
extern void mutex_unlock(struct mutex *lock ) ;
extern int param_set_int(char const   *val , struct kernel_param *kp ) ;
extern int param_get_int(char *buffer , struct kernel_param *kp ) ;
extern int param_set_charp(char const   *val , struct kernel_param *kp ) ;
extern int param_get_charp(char *buffer , struct kernel_param *kp ) ;
extern void kfree(void const   * ) ;
extern void *__kmalloc(size_t size , gfp_t flags ) ;
__inline static void *( __attribute__((__always_inline__)) kmalloc)(size_t size ,
                                                                    gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
  tmp___2 = __kmalloc(size, flags);
  return (tmp___2);
}
}
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
  tmp = kmalloc(size, flags | 32768U);
  return (tmp);
}
}
int init_module(void) ;
void cleanup_module(void) ;
extern struct module __this_module ;
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 


  {
  return (dev->bus_id);
}
}
__inline static void *dev_get_drvdata(struct device *dev ) 
{ 


  {
  return (dev->driver_data);
}
}
__inline static void dev_set_drvdata(struct device *dev , void *data ) 
{ 


  {
  dev->driver_data = data;
  return;
}
}
extern char const   *dev_driver_string(struct device  const  *dev ) ;
__inline static unsigned char readb(void const volatile   *addr ) 
{ 
  unsigned char ret ;

  {
  __asm__  volatile   ("mov"
                       "b"
                       " %1,%0": "=q" (ret): "m" (*((unsigned char volatile   *)addr)): "memory");
  return (ret);
}
}
__inline static void writeb(unsigned char val , void volatile   *addr ) 
{ 


  {
  __asm__  volatile   ("mov"
                       "b"
                       " %0,%1": : "q" (val), "m" (*((unsigned char volatile   *)addr)): "memory");
  return;
}
}
__inline static void writew(unsigned short val , void volatile   *addr ) 
{ 


  {
  __asm__  volatile   ("mov"
                       "w"
                       " %0,%1": : "r" (val), "m" (*((unsigned short volatile   *)addr)): "memory");
  return;
}
}
__inline static void __writeb(unsigned char val , void volatile   *addr ) 
{ 


  {
  __asm__  volatile   ("mov"
                       "b"
                       " %0,%1": : "q" (val), "m" (*((unsigned char volatile   *)addr)));
  return;
}
}
__inline static void __writel(unsigned int val , void volatile   *addr ) 
{ 


  {
  __asm__  volatile   ("mov"
                       "l"
                       " %0,%1": : "r" (val), "m" (*((unsigned int volatile   *)addr)));
  return;
}
}
__inline static unsigned char inb_p(unsigned short port ) 
{ 
  unsigned char _v ;

  {
  __asm__  volatile   ("in"
                       "b"
                       " %"
                       "w"
                       "1,%"
                       ""
                       "0": "=a" (_v): "Nd" (port));
  slow_down_io();
  return (_v);
}
}
__inline static void outb(unsigned char value , unsigned short port ) 
{ 


  {
  __asm__  volatile   ("out"
                       "b"
                       " %"
                       "b"
                       "0,%"
                       "w"
                       "1": : "a" (value), "Nd" (port));
  return;
}
}
__inline static void outb_p(unsigned char value , unsigned short port ) 
{ 


  {
  __asm__  volatile   ("out"
                       "b"
                       " %"
                       "b"
                       "0,%"
                       "w"
                       "1": : "a" (value), "Nd" (port));
  slow_down_io();
  return;
}
}
__inline static void outw(unsigned short value , unsigned short port ) 
{ 


  {
  __asm__  volatile   ("out"
                       "w"
                       " %"
                       "w"
                       "0,%"
                       "w"
                       "1": : "a" (value), "Nd" (port));
  return;
}
}
extern void *pci_iomap(struct pci_dev *dev , int bar , unsigned long max ) ;
extern void pci_iounmap(struct pci_dev *dev , void * ) ;
extern void memset_io(void volatile   *a , int b , size_t c ) ;
extern void cfb_fillrect(struct fb_info *info , struct fb_fillrect  const  *rect ) ;
extern void cfb_copyarea(struct fb_info *info , struct fb_copyarea  const  *area ) ;
extern void cfb_imageblit(struct fb_info *info , struct fb_image  const  *image ) ;
extern int register_framebuffer(struct fb_info *fb_info ) ;
extern int unregister_framebuffer(struct fb_info *fb_info ) ;
extern void fb_set_suspend(struct fb_info *info , int state ) ;
extern struct fb_info *framebuffer_alloc(size_t size , struct device *dev ) ;
extern void framebuffer_release(struct fb_info *info ) ;
extern int fb_alloc_cmap(struct fb_cmap *cmap , int len , int transp ) ;
extern void fb_dealloc_cmap(struct fb_cmap *cmap ) ;
extern int fb_find_mode(struct fb_var_screeninfo *var , struct fb_info *info , char const   *mode_option ,
                        struct fb_videomode  const  *db , unsigned int dbsize , struct fb_videomode  const  *default_mode ,
                        unsigned int default_bpp ) ;
extern int pci_bus_read_config_word(struct pci_bus *bus , unsigned int devfn , int where ,
                                    u16 *val ) ;
__inline static int pci_read_config_word(struct pci_dev *dev , int where , u16 *val ) 
{ 
  int tmp ;

  {
  tmp = pci_bus_read_config_word(dev->bus, dev->devfn, where, val);
  return (tmp);
}
}
extern int ( __attribute__((__warn_unused_result__)) pci_enable_device)(struct pci_dev *dev ) ;
extern void pci_disable_device(struct pci_dev *dev ) ;
extern void pci_set_master(struct pci_dev *dev ) ;
extern int pci_save_state(struct pci_dev *dev ) ;
extern int pci_restore_state(struct pci_dev *dev ) ;
extern int pci_set_power_state(struct pci_dev *dev , pci_power_t state ) ;
extern pci_power_t pci_choose_state(struct pci_dev *dev , pm_message_t state ) ;
extern int ( __attribute__((__warn_unused_result__)) pci_request_regions)(struct pci_dev * ,
                                                                          char const   * ) ;
extern void pci_release_regions(struct pci_dev * ) ;
extern int ( __attribute__((__warn_unused_result__)) __pci_register_driver)(struct pci_driver * ,
                                                                            struct module * ,
                                                                            char const   *mod_name ) ;
extern void pci_unregister_driver(struct pci_driver *dev ) ;
__inline static void *pci_get_drvdata(struct pci_dev *pdev ) 
{ 
  void *tmp ;

  {
  tmp = dev_get_drvdata(& pdev->dev);
  return (tmp);
}
}
__inline static void pci_set_drvdata(struct pci_dev *pdev , void *data ) 
{ 


  {
  dev_set_drvdata(& pdev->dev, data);
  return;
}
}
__inline static char const   *pci_name(struct pci_dev *pdev ) 
{ 
  char const   *tmp ;

  {
  tmp = dev_name(& pdev->dev);
  return (tmp);
}
}
extern int save_vga(struct vgastate *state ) ;
extern int restore_vga(struct vgastate *state ) ;
__inline static unsigned char vga_io_r(unsigned short port ) 
{ 
  unsigned char tmp ;

  {
  tmp = inb_p(port);
  return (tmp);
}
}
__inline static void vga_io_w(unsigned short port , unsigned char val ) 
{ 


  {
  outb_p(val, port);
  return;
}
}
__inline static void vga_io_w_fast(unsigned short port , unsigned char reg , unsigned char val ) 
{ 


  {
  outw(((int )val << 8) | (int )reg, port);
  return;
}
}
__inline static unsigned char vga_mm_r(void *regbase , unsigned short port ) 
{ 
  unsigned char tmp ;

  {
  tmp = readb(regbase + (int )port);
  return (tmp);
}
}
__inline static void vga_mm_w(void *regbase , unsigned short port , unsigned char val ) 
{ 


  {
  writeb(val, regbase + (int )port);
  return;
}
}
__inline static void vga_mm_w_fast(void *regbase , unsigned short port , unsigned char reg ,
                                   unsigned char val ) 
{ 


  {
  writew(((int )val << 8) | (int )reg, regbase + (int )port);
  return;
}
}
__inline static unsigned char vga_r(void *regbase , unsigned short port ) 
{ 
  unsigned char tmp ;
  unsigned char tmp___0 ;

  {
  if (regbase) {
    tmp = vga_mm_r(regbase, port);
    return (tmp);
  } else {
    tmp___0 = vga_io_r(port);
    return (tmp___0);
  }
}
}
__inline static void vga_w(void *regbase , unsigned short port , unsigned char val ) 
{ 


  {
  if (regbase) {
    vga_mm_w(regbase, port, val);
  } else {
    vga_io_w(port, val);
  }
  return;
}
}
__inline static void vga_w_fast(void *regbase , unsigned short port , unsigned char reg ,
                                unsigned char val ) 
{ 


  {
  if (regbase) {
    vga_mm_w_fast(regbase, port, reg, val);
  } else {
    vga_io_w_fast(port, reg, val);
  }
  return;
}
}
__inline static unsigned char vga_rcrt(void *regbase , unsigned char reg ) 
{ 
  unsigned char tmp ;

  {
  vga_w(regbase, 980, reg);
  tmp = vga_r(regbase, 981);
  return (tmp);
}
}
__inline static void vga_wcrt(void *regbase , unsigned char reg , unsigned char val ) 
{ 


  {
  vga_w_fast(regbase, 980, reg, val);
  return;
}
}
__inline static unsigned char vga_rseq(void *regbase , unsigned char reg ) 
{ 
  unsigned char tmp ;

  {
  vga_w(regbase, 964, reg);
  tmp = vga_r(regbase, 965);
  return (tmp);
}
}
__inline static void vga_wseq(void *regbase , unsigned char reg , unsigned char val ) 
{ 


  {
  vga_w_fast(regbase, 964, reg, val);
  return;
}
}
__inline static void vga_wgfx(void *regbase , unsigned char reg , unsigned char val ) 
{ 


  {
  vga_w_fast(regbase, 974, reg, val);
  return;
}
}
__inline static void svga_wseq_mask(u8 index , u8 data , u8 mask ) 
{ 
  unsigned char tmp ;

  {
  tmp = vga_rseq((void *)0, index);
  vga_wseq((void *)0, index, ((int )data & (int )mask) | ((int )tmp & ~ ((int )mask)));
  return;
}
}
__inline static void svga_wcrt_mask(u8 index , u8 data , u8 mask ) 
{ 
  unsigned char tmp ;

  {
  tmp = vga_rcrt((void *)0, index);
  vga_wcrt((void *)0, index, ((int )data & (int )mask) | ((int )tmp & ~ ((int )mask)));
  return;
}
}
__inline static int svga_primary_device(struct pci_dev *dev ) 
{ 
  u16 flags ;

  {
  pci_read_config_word(dev, 4, & flags);
  return ((int )flags & 1);
}
}
extern void svga_wcrt_multi(struct vga_regset  const  *regset , u32 value ) ;
extern void svga_set_default_gfx_regs(void) ;
extern void svga_set_default_atc_regs(void) ;
extern void svga_set_default_seq_regs(void) ;
extern void svga_set_default_crt_regs(void) ;
extern void svga_set_textmode_vga_regs(void) ;
extern void svga_tilecopy(struct fb_info *info , struct fb_tilearea *area ) ;
extern void svga_tilefill(struct fb_info *info , struct fb_tilerect *rect ) ;
extern void svga_tileblit(struct fb_info *info , struct fb_tileblit *blit ) ;
extern void svga_tilecursor(struct fb_info *info , struct fb_tilecursor *cursor ) ;
extern int svga_get_tilemax(struct fb_info *info ) ;
extern void svga_get_caps(struct fb_info *info , struct fb_blit_caps *caps , struct fb_var_screeninfo *var ) ;
extern int svga_compute_pll(struct svga_pll  const  *pll , u32 f_wanted , u16 *m ,
                            u16 *n , u16 *r , int node ) ;
extern int svga_check_timings(struct svga_timing_regs  const  *tm , struct fb_var_screeninfo *var ,
                              int node ) ;
extern void svga_set_timings(struct svga_timing_regs  const  *tm , struct fb_var_screeninfo *var ,
                             u32 hmul , u32 hdiv , u32 vmul , u32 vdiv , u32 hborder ,
                             int node ) ;
extern int svga_match_format(struct svga_fb_format  const  *frm , struct fb_var_screeninfo *var ,
                             struct fb_fix_screeninfo *fix ) ;
extern void acquire_console_sem(void) ;
extern void release_console_sem(void) ;
extern int mtrr_add(unsigned long base , unsigned long size , unsigned int type ,
                    bool increment ) ;
extern int mtrr_del(int reg , unsigned long base , unsigned long size ) ;
static struct svga_fb_format  const  arkfb_formats[9]  = 
  {      {0, {0, 6, 0}, {0, 6, 0}, {0, 6, 0}, {0, 0, 0}, 0, 3, 9, 3, 8, 8}, 
        {4, {0, 6, 0}, {0, 6, 0}, {0, 6, 0}, {0, 0, 0}, 0, 0, 0, 3, 8, 16}, 
        {4, {0, 6, 0}, {0, 6, 0}, {0, 6, 0}, {0, 0, 0}, 1, 2, 1, 3, 8, 16}, 
        {8, {0, 6, 0}, {0, 6, 0}, {0, 6, 0}, {0, 0, 0}, 0, 0, 0, 3, 8, 8}, 
        {16, {10, 5, 0}, {5, 5, 0}, {0, 5, 0}, {0, 0, 0}, 0, 0, 0, 2, 4, 4}, 
        {16, {11, 5, 0}, {5, 6, 0}, {0, 5, 0}, {0, 0, 0}, 0, 0, 0, 2, 4, 4}, 
        {24, {16, 8, 0}, {8, 8, 0}, {0, 8, 0}, {0, 0, 0}, 0, 0, 0, 2, 8, 8}, 
        {32, {16, 8, 0}, {8, 8, 0}, {0, 8, 0}, {0, 0, 0}, 0, 0, 0, 2, 2, 2}, 
        {65535, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 0, 0, 0, 0, 0, 0}};
static struct vga_regset  const  ark_h_total_regs[3]  = {      {0, 0, 7}, 
        {65, 7, 7}, 
        {255, 0, 0}};
static struct vga_regset  const  ark_h_display_regs[3]  = {      {1, 0, 7}, 
        {65, 6, 6}, 
        {255, 0, 0}};
static struct vga_regset  const  ark_h_blank_start_regs[3]  = {      {2, 0, 7}, 
        {65, 5, 5}, 
        {255, 0, 0}};
static struct vga_regset  const  ark_h_blank_end_regs[3]  = {      {3, 0, 4}, 
        {5, 7, 7}, 
        {255, 0, 0}};
static struct vga_regset  const  ark_h_sync_start_regs[3]  = {      {4, 0, 7}, 
        {65, 4, 4}, 
        {255, 0, 0}};
static struct vga_regset  const  ark_h_sync_end_regs[2]  = {      {5, 0, 4}, 
        {255, 0, 0}};
static struct vga_regset  const  ark_v_total_regs[5]  = {      {6, 0, 7}, 
        {7, 0, 0}, 
        {7, 5, 5}, 
        {64, 7, 7}, 
        {255, 0, 0}};
static struct vga_regset  const  ark_v_display_regs[5]  = {      {18, 0, 7}, 
        {7, 1, 1}, 
        {7, 6, 6}, 
        {64, 6, 6}, 
        {255, 0, 0}};
static struct vga_regset  const  ark_v_blank_start_regs[5]  = {      {21, 0, 7}, 
        {7, 3, 3}, 
        {9, 5, 5}, 
        {64, 5, 5}, 
        {255, 0, 0}};
static struct vga_regset  const  ark_v_blank_end_regs[2]  = {      {22, 0, 7}, 
        {255, 0, 0}};
static struct vga_regset  const  ark_v_sync_start_regs[5]  = {      {16, 0, 7}, 
        {7, 2, 2}, 
        {7, 7, 7}, 
        {64, 4, 4}, 
        {255, 0, 0}};
static struct vga_regset  const  ark_v_sync_end_regs[2]  = {      {17, 0, 3}, 
        {255, 0, 0}};
static struct vga_regset  const  ark_line_compare_regs[4]  = {      {24, 0, 7}, 
        {7, 4, 4}, 
        {9, 6, 6}, 
        {255, 0, 0}};
static struct vga_regset  const  ark_start_address_regs[4]  = {      {13, 0, 7}, 
        {12, 0, 7}, 
        {64, 0, 2}, 
        {255, 0, 0}};
static struct vga_regset  const  ark_offset_regs[3]  = {      {19, 0, 7}, 
        {65, 3, 3}, 
        {255, 0, 0}};
static struct svga_timing_regs  const  ark_timing_regs  = 
     {ark_h_total_regs, ark_h_display_regs, ark_h_blank_start_regs, ark_h_blank_end_regs,
    ark_h_sync_start_regs, ark_h_sync_end_regs, ark_v_total_regs, ark_v_display_regs,
    ark_v_blank_start_regs, ark_v_blank_end_regs, ark_v_sync_start_regs, ark_v_sync_end_regs};
static char *mode_option  __attribute__((__section__(".devinit.data")))  =    "640x480-8@60";
static int mtrr  =    1;
static char const   __mod_author110[56]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
  {      'a',      'u',      't',      'h', 
        'o',      'r',      '=',      '(', 
        'c',      ')',      ' ',      '2', 
        '0',      '0',      '7',      ' ', 
        'O',      'n',      'd',      'r', 
        'e',      'j',      ' ',      'Z', 
        'a',      'j',      'i',      'c', 
        'e',      'k',      ' ',      '<', 
        's',      'a',      'n',      't', 
        'i',      'a',      'g',      'o', 
        '@',      'c',      'r',      'f', 
        'r',      'e',      'e',      'n', 
        'e',      't',      '.',      'o', 
        'r',      'g',      '>',      '\000'};
static char const   __mod_license111[12]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
  {      'l',      'i',      'c',      'e', 
        'n',      's',      'e',      '=', 
        'G',      'P',      'L',      '\000'};
static char const   __mod_description112[40]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
  {      'd',      'e',      's',      'c', 
        'r',      'i',      'p',      't', 
        'i',      'o',      'n',      '=', 
        'f',      'b',      'd',      'e', 
        'v',      ' ',      'd',      'r', 
        'i',      'v',      'e',      'r', 
        ' ',      'f',      'o',      'r', 
        ' ',      'A',      'R',      'K', 
        ' ',      '2',      '0',      '0', 
        '0',      'P',      'V',      '\000'};
static char const   __param_str_mode_option[12]  = 
  {      'm',      'o',      'd',      'e', 
        '_',      'o',      'p',      't', 
        'i',      'o',      'n',      '\000'};
static struct kernel_param  const  __param_mode_option  __attribute__((__used__, __unused__,
__section__("__param"), __aligned__(sizeof(void *))))  =    {__param_str_mode_option, 292, & param_set_charp, & param_get_charp, {& mode_option}};
static char const   __mod_mode_optiontype114[27]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
  {      'p',      'a',      'r',      'm', 
        't',      'y',      'p',      'e', 
        '=',      'm',      'o',      'd', 
        'e',      '_',      'o',      'p', 
        't',      'i',      'o',      'n', 
        ':',      'c',      'h',      'a', 
        'r',      'p',      '\000'};
static char const   __mod_mode_option115[58]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
  {      'p',      'a',      'r',      'm', 
        '=',      'm',      'o',      'd', 
        'e',      '_',      'o',      'p', 
        't',      'i',      'o',      'n', 
        ':',      'D',      'e',      'f', 
        'a',      'u',      'l',      't', 
        ' ',      'v',      'i',      'd', 
        'e',      'o',      ' ',      'm', 
        'o',      'd',      'e',      ' ', 
        '(',      '\'',      '6',      '4', 
        '0',      'x',      '4',      '8', 
        '0',      '-',      '8',      '@', 
        '6',      '0',      '\'',      ',', 
        ' ',      'e',      't',      'c', 
        ')',      '\000'};
static char const   __param_str_mode[5]  = {      'm',      'o',      'd',      'e', 
        '\000'};
static struct kernel_param  const  __param_mode  __attribute__((__used__, __unused__,
__section__("__param"), __aligned__(sizeof(void *))))  =    {__param_str_mode, 292, & param_set_charp, & param_get_charp, {& mode_option}};
static char const   __mod_modetype116[20]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
  {      'p',      'a',      'r',      'm', 
        't',      'y',      'p',      'e', 
        '=',      'm',      'o',      'd', 
        'e',      ':',      'c',      'h', 
        'a',      'r',      'p',      '\000'};
static char const   __mod_mode117[64]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
  {      'p',      'a',      'r',      'm', 
        '=',      'm',      'o',      'd', 
        'e',      ':',      'D',      'e', 
        'f',      'a',      'u',      'l', 
        't',      ' ',      'v',      'i', 
        'd',      'e',      'o',      ' ', 
        'm',      'o',      'd',      'e', 
        ' ',      '(',      '\'',      '6', 
        '4',      '0',      'x',      '4', 
        '8',      '0',      '-',      '8', 
        '@',      '6',      '0',      '\'', 
        ',',      ' ',      'e',      't', 
        'c',      ')',      ' ',      '(', 
        'd',      'e',      'p',      'r', 
        'e',      'c',      'a',      't', 
        'e',      'd',      ')',      '\000'};
static char const   __param_str_mtrr[5]  = {      'm',      't',      'r',      'r', 
        '\000'};
static struct kernel_param  const  __param_mtrr  __attribute__((__used__, __unused__,
__section__("__param"), __aligned__(sizeof(void *))))  =    {__param_str_mtrr, 292, & param_set_int, & param_get_int, {& mtrr}};
static char const   __mod_mtrrtype120[18]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
  {      'p',      'a',      'r',      'm', 
        't',      'y',      'p',      'e', 
        '=',      'm',      't',      'r', 
        'r',      ':',      'i',      'n', 
        't',      '\000'};
static char const   __mod_mtrr121[76]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
  {      'p',      'a',      'r',      'm', 
        '=',      'm',      't',      'r', 
        'r',      ':',      'E',      'n', 
        'a',      'b',      'l',      'e', 
        ' ',      'w',      'r',      'i', 
        't',      'e',      '-',      'c', 
        'o',      'm',      'b',      'i', 
        'n',      'i',      'n',      'g', 
        ' ',      'w',      'i',      't', 
        'h',      ' ',      'M',      'T', 
        'R',      'R',      ' ',      '(', 
        '1',      '=',      'e',      'n', 
        'a',      'b',      'l',      'e', 
        ',',      ' ',      '0',      '=', 
        'd',      'i',      's',      'a', 
        'b',      'l',      'e',      ',', 
        ' ',      'd',      'e',      'f', 
        'a',      'u',      'l',      't', 
        '=',      '1',      ')',      '\000'};
static int threshold  =    4;
static char const   __param_str_threshold[10]  = 
  {      't',      'h',      'r',      'e', 
        's',      'h',      'o',      'l', 
        'd',      '\000'};
static struct kernel_param  const  __param_threshold  __attribute__((__used__, __unused__,
__section__("__param"), __aligned__(sizeof(void *))))  =    {__param_str_threshold, 420, & param_set_int, & param_get_int, {& threshold}};
static char const   __mod_thresholdtype126[23]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
  {      'p',      'a',      'r',      'm', 
        't',      'y',      'p',      'e', 
        '=',      't',      'h',      'r', 
        'e',      's',      'h',      'o', 
        'l',      'd',      ':',      'i', 
        'n',      't',      '\000'};
static char const   __mod_threshold127[30]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
  {      'p',      'a',      'r',      'm', 
        '=',      't',      'h',      'r', 
        'e',      's',      'h',      'o', 
        'l',      'd',      ':',      'F', 
        'I',      'F',      'O',      ' ', 
        't',      'h',      'r',      'e', 
        's',      'h',      'o',      'l', 
        'd',      '\000'};
static void arkfb_settile(struct fb_info *info , struct fb_tilemap *map ) 
{ 
  u8 const   *font ;
  u8 *fb ;
  int i ;
  int c ;

  {
  font = map->data;
  fb = (u8 *)info->screen_base;
  if (((map->width != (__u32 )8 || map->height != (__u32 )16) || map->depth != (__u32 )1) || map->length != (__u32 )256) {
    printk("<3>fb%d: unsupported font parameters: width %d, height %d, depth %d, length %d\n",
           info->node, map->width, map->height, map->depth, map->length);
    return;
  } else {

  }
  fb = fb + 2;
  c = 0;
  while (1) {
    if ((__u32 )c < map->length) {

    } else {
      break;
    }
    i = 0;
    while (1) {
      if ((__u32 )i < map->height) {

      } else {
        break;
      }
      __writeb(*(font + i), fb + i * 4);
      __writeb(*(font + i), fb + (i * 4 + 128 * 8));
      i = i + 1;
    }
    fb = fb + 128;
    if (c % 8 == 7) {
      fb = fb + 128 * 8;
    } else {

    }
    font = font + map->height;
    c = c + 1;
  }
  return;
}
}
static struct fb_tile_ops arkfb_tile_ops  =    {& arkfb_settile, & svga_tilecopy, & svga_tilefill, & svga_tileblit, & svga_tilecursor,
    & svga_get_tilemax};
__inline static u32 expand_color(u32 c ) 
{ 


  {
  return (((((c & 1U) | ((c & 2U) << 7)) | ((c & 4U) << 14)) | ((c & 8U) << 21)) * 255U);
}
}
static void arkfb_iplan_imageblit(struct fb_info *info , struct fb_image  const  *image ) 
{ 
  u32 fg ;
  u32 tmp ;
  u32 bg ;
  u32 tmp___0 ;
  u8 const   *src1 ;
  u8 const   *src ;
  u8 *dst1 ;
  u32 *dst ;
  u32 val ;
  int x ;
  int y ;
  u8 const   *tmp___1 ;
  u32 *tmp___2 ;

  {
  tmp = expand_color(image->fg_color);
  fg = tmp;
  tmp___0 = expand_color(image->bg_color);
  bg = tmp___0;
  src1 = image->data;
  dst1 = (info->screen_base + image->dy * (__u32 const   )info->fix.line_length) + (image->dx / (__u32 const   )8) * (__u32 const   )4;
  y = 0;
  while (1) {
    if ((__u32 const   )y < image->height) {

    } else {
      break;
    }
    src = src1;
    dst = (u32 *)dst1;
    x = 0;
    while (1) {
      if ((__u32 const   )x < image->width) {

      } else {
        break;
      }
      tmp___1 = src;
      src = src + 1;
      val = (int const   )*tmp___1 * (int const   )16843009;
      val = (val & fg) | (~ val & bg);
      tmp___2 = dst;
      dst = dst + 1;
      __writel(val, tmp___2);
      x = x + 8;
    }
    src1 = src1 + image->width / (__u32 const   )8;
    dst1 = dst1 + info->fix.line_length;
    y = y + 1;
  }
  return;
}
}
static void arkfb_iplan_fillrect(struct fb_info *info , struct fb_fillrect  const  *rect ) 
{ 
  u32 fg ;
  u32 tmp ;
  u8 *dst1 ;
  u32 *dst ;
  int x ;
  int y ;
  u32 *tmp___0 ;

  {
  tmp = expand_color(rect->color);
  fg = tmp;
  dst1 = (info->screen_base + rect->dy * (__u32 const   )info->fix.line_length) + (rect->dx / (__u32 const   )8) * (__u32 const   )4;
  y = 0;
  while (1) {
    if ((__u32 const   )y < rect->height) {

    } else {
      break;
    }
    dst = (u32 *)dst1;
    x = 0;
    while (1) {
      if ((__u32 const   )x < rect->width) {

      } else {
        break;
      }
      tmp___0 = dst;
      dst = dst + 1;
      __writel(fg, tmp___0);
      x = x + 8;
    }
    dst1 = dst1 + info->fix.line_length;
    y = y + 1;
  }
  return;
}
}
__inline static u32 expand_pixel(u32 c ) 
{ 


  {
  return ((((((((((c & 1U) << 24) | ((c & 2U) << 27)) | ((c & 4U) << 14)) | ((c & 8U) << 17)) | ((c & 16U) << 4)) | ((c & 32U) << 7)) | ((c & 64U) >> 6)) | ((c & 128U) >> 3)) * 15U);
}
}
static void arkfb_cfb4_imageblit(struct fb_info *info , struct fb_image  const  *image ) 
{ 
  u32 fg ;
  u32 bg ;
  u8 const   *src1 ;
  u8 const   *src ;
  u8 *dst1 ;
  u32 *dst ;
  u32 val ;
  int x ;
  int y ;
  u8 const   *tmp ;
  u32 *tmp___0 ;

  {
  fg = image->fg_color * (__u32 const   )286331153;
  bg = image->bg_color * (__u32 const   )286331153;
  src1 = image->data;
  dst1 = (info->screen_base + image->dy * (__u32 const   )info->fix.line_length) + (image->dx / (__u32 const   )8) * (__u32 const   )4;
  y = 0;
  while (1) {
    if ((__u32 const   )y < image->height) {

    } else {
      break;
    }
    src = src1;
    dst = (u32 *)dst1;
    x = 0;
    while (1) {
      if ((__u32 const   )x < image->width) {

      } else {
        break;
      }
      tmp = src;
      src = src + 1;
      val = expand_pixel(*tmp);
      val = (val & fg) | (~ val & bg);
      tmp___0 = dst;
      dst = dst + 1;
      __writel(val, tmp___0);
      x = x + 8;
    }
    src1 = src1 + image->width / (__u32 const   )8;
    dst1 = dst1 + info->fix.line_length;
    y = y + 1;
  }
  return;
}
}
static void arkfb_imageblit(struct fb_info *info , struct fb_image  const  *image ) 
{ 


  {
  if (((info->var.bits_per_pixel == (__u32 )4 && (int const   )image->depth == (int const   )1) && image->width % (unsigned int const   )8 == (unsigned int const   )0) && image->dx % (unsigned int const   )8 == (unsigned int const   )0) {
    if (info->fix.type == (__u32 )2) {
      arkfb_iplan_imageblit(info, image);
    } else {
      arkfb_cfb4_imageblit(info, image);
    }
  } else {
    cfb_imageblit(info, image);
  }
  return;
}
}
static void arkfb_fillrect(struct fb_info *info , struct fb_fillrect  const  *rect ) 
{ 


  {
  if (((info->var.bits_per_pixel == (__u32 )4 && rect->width % (unsigned int const   )8 == (unsigned int const   )0) && rect->dx % (unsigned int const   )8 == (unsigned int const   )0) && info->fix.type == (__u32 )2) {
    arkfb_iplan_fillrect(info, rect);
  } else {
    cfb_fillrect(info, rect);
  }
  return;
}
}
__inline static void dac_write_reg(struct dac_info *info , u8 reg , u8 val ) 
{ 
  u8 code[2] ;

  {
  code[0] = reg;
  code[1] = val;
  (*(info->dac_write_regs))(info->data, code, 1);
  return;
}
}
__inline static void dac_write_regs(struct dac_info *info , u8 *code , int count ) 
{ 


  {
  (*(info->dac_write_regs))(info->data, code, count);
  return;
}
}
__inline static int dac_set_mode(struct dac_info *info , int mode ) 
{ 
  int tmp ;

  {
  tmp = (*((info->dacops)->dac_set_mode))(info, mode);
  return (tmp);
}
}
__inline static int dac_set_freq(struct dac_info *info , int channel , u32 freq ) 
{ 
  int tmp ;

  {
  tmp = (*((info->dacops)->dac_set_freq))(info, channel, freq);
  return (tmp);
}
}
__inline static void dac_release(struct dac_info *info ) 
{ 


  {
  (*((info->dacops)->dac_release))(info);
  return;
}
}
static u8 const   ics5342_mode_table[DAC_MAX]  = 
  {      1,      33,      97,      65, 
        (unsigned char)0,      17,      49,      81, 
        145,      113};
static int ics5342_set_mode(struct dac_info *info , int mode ) 
{ 
  u8 code ;

  {
  if (mode >= DAC_MAX) {
    return (-22);
  } else {

  }
  code = ics5342_mode_table[mode];
  if (! code) {
    return (-22);
  } else {

  }
  dac_write_reg(info, 6, (int )code & 240);
  ((struct ics5342_info *)info)->mode = mode;
  return (0);
}
}
static struct svga_pll  const  ics5342_pll  = 
     {3, 129, 3, 33, 0, 3, 60000, 250000, 14318};
static struct svga_pll  const  ics5342_pll_pd4  = 
     {3, 129, 3, 33, 2, 2, 60000, 335000, 14318};
static int ics5342_set_freq(struct dac_info *info , int channel , u32 freq ) 
{ 
  u16 m ;
  u16 n ;
  u16 r ;
  int rv ;
  int tmp ;
  u8 code[6] ;

  {
  tmp = svga_compute_pll((int )((struct ics5342_info *)info)->mode == DAC_PSEUDO8_16 ? & ics5342_pll_pd4 : & ics5342_pll,
                         freq, & m, & n, & r, 0);
  rv = tmp;
  if (rv < 0) {
    return (-22);
  } else {
    code[0] = 4;
    code[1] = 3;
    code[2] = 5;
    code[3] = (int )m - 2;
    code[4] = 5;
    code[5] = ((int )n - 2) | ((int )r << 5);
    dac_write_regs(info, code, 3);
    return (0);
  }
}
}
static void ics5342_release(struct dac_info *info ) 
{ 


  {
  ics5342_set_mode(info, DAC_PSEUDO8_8);
  kfree(info);
  return;
}
}
static struct dac_ops ics5342_ops  =    {0, & ics5342_set_mode, 0, & ics5342_set_freq, & ics5342_release};
static struct dac_info *ics5342_init(void (*drr)(void *data , u8 *code , int count ) ,
                                     void (*dwr)(void *data , u8 *code , int count ) ,
                                     void *data ) 
{ 
  struct dac_info *info ;
  void *tmp ;

  {
  tmp = kzalloc(sizeof(struct ics5342_info ), (16U | 64U) | 128U);
  info = tmp;
  if (! info) {
    return ((void *)0);
  } else {

  }
  info->dacops = & ics5342_ops;
  info->dac_read_regs = drr;
  info->dac_write_regs = dwr;
  info->data = data;
  ((struct ics5342_info *)info)->mode = DAC_PSEUDO8_8;
  return (info);
}
}
static unsigned short dac_regs[4]  = {      968,      969,      966,      967};
static void ark_dac_read_regs(void *data , u8 *code , int count ) 
{ 
  u8 regval ;
  unsigned char tmp ;

  {
  tmp = vga_rseq((void *)0, 28);
  regval = tmp;
  while (1) {
    if (count != 0) {

    } else {
      break;
    }
    vga_wseq((void *)0, 28, (int )regval | ((int )*(code + 0) & 4) ? 128 : 0);
    *(code + 1) = vga_r((void *)0, dac_regs[(int )*(code + 0) & 3]);
    count = count - 1;
    code = code + 2;
  }
  vga_wseq((void *)0, 28, regval);
  return;
}
}
static void ark_dac_write_regs(void *data , u8 *code , int count ) 
{ 
  u8 regval ;
  unsigned char tmp ;

  {
  tmp = vga_rseq((void *)0, 28);
  regval = tmp;
  while (1) {
    if (count != 0) {

    } else {
      break;
    }
    vga_wseq((void *)0, 28, (int )regval | ((int )*(code + 0) & 4) ? 128 : 0);
    vga_w((void *)0, dac_regs[(int )*(code + 0) & 3], *(code + 1));
    count = count - 1;
    code = code + 2;
  }
  vga_wseq((void *)0, 28, regval);
  return;
}
}
static void ark_set_pixclock(struct fb_info *info , u32 pixclock ) 
{ 
  struct arkfb_info *par ;
  u8 regval ;
  int rv ;
  int tmp ;

  {
  par = info->par;
  tmp = dac_set_freq(par->dac, 0, (u32 )1000000000 / pixclock);
  rv = tmp;
  if (rv < 0) {
    printk("<3>fb%d: cannot set requested pixclock, keeping old value\n", info->node);
    return;
  } else {

  }
  regval = vga_r((void *)0, 972);
  vga_w((void *)0, 962, (int )regval | (4 | 8));
  return;
}
}
static int arkfb_open(struct fb_info *info , int user ) 
{ 
  struct arkfb_info *par ;

  {
  par = info->par;
  mutex_lock_nested(& par->open_lock, 0);
  if (par->ref_count == 0U) {
    memset(& par->state, 0, sizeof(struct vgastate ));
    par->state.flags = (8 | 7) | 16;
    par->state.num_crtc = 96;
    par->state.num_seq = 48;
    save_vga(& par->state);
  } else {

  }
  par->ref_count = par->ref_count + 1U;
  mutex_unlock(& par->open_lock);
  return (0);
}
}
static int arkfb_release(struct fb_info *info , int user ) 
{ 
  struct arkfb_info *par ;

  {
  par = info->par;
  mutex_lock_nested(& par->open_lock, 0);
  if (par->ref_count == 0U) {
    mutex_unlock(& par->open_lock);
    return (-22);
  } else {

  }
  if (par->ref_count == 1U) {
    restore_vga(& par->state);
    dac_set_mode(par->dac, DAC_PSEUDO8_8);
  } else {

  }
  par->ref_count = par->ref_count - 1U;
  mutex_unlock(& par->open_lock);
  return (0);
}
}
static int arkfb_check_var(struct fb_var_screeninfo *var , struct fb_info *info ) 
{ 
  int rv ;
  int mem ;
  int step ;

  {
  rv = svga_match_format(arkfb_formats, var, (void *)0);
  if (rv < 0) {
    printk("<3>fb%d: unsupported mode requested\n", info->node);
    return (rv);
  } else {

  }
  if (var->xres > var->xres_virtual) {
    var->xres_virtual = var->xres;
  } else {

  }
  if (var->yres > var->yres_virtual) {
    var->yres_virtual = var->yres;
  } else {

  }
  step = arkfb_formats[rv].xresstep - (u32 const   )1;
  var->xres_virtual = (var->xres_virtual + (__u32 )step) & (unsigned int )(~ step);
  mem = (var->bits_per_pixel * var->xres_virtual >> 3) * var->yres_virtual;
  if ((unsigned long )mem > info->screen_size) {
    printk("<3>fb%d: not enough framebuffer memory (%d kB requested , %d kB available)\n",
           info->node, mem >> 10, (unsigned int )(info->screen_size >> 10));
    return (-22);
  } else {

  }
  rv = svga_check_timings(& ark_timing_regs, var, info->node);
  if (rv < 0) {
    printk("<3>fb%d: invalid timings requested\n", info->node);
    return (rv);
  } else {

  }
  if (var->vmode & 1U) {
    return (-22);
  } else {

  }
  return (0);
}
}
static int arkfb_set_par(struct fb_info *info ) 
{ 
  struct arkfb_info *par ;
  u32 value ;
  u32 mode ;
  u32 hmul ;
  u32 hdiv ;
  u32 offset_value ;
  u32 screen_size ;
  u32 bpp ;
  u8 regval ;
  int tmp ;

  {
  par = info->par;
  bpp = info->var.bits_per_pixel;
  if (bpp != (u32 )0) {
    info->fix.ypanstep = 1;
    info->fix.line_length = (info->var.xres_virtual * bpp) / (__u32 )8;
    info->flags = info->flags & ~ 131072;
    info->tileops = (void *)0;
    info->pixmap.blit_x = bpp == (u32 )4 ? 1 << (8 - 1) : ~ ((u32 )0);
    info->pixmap.blit_y = ~ ((u32 )0);
    offset_value = (info->var.xres_virtual * bpp) / (__u32 )64;
    screen_size = info->var.yres_virtual * info->fix.line_length;
  } else {
    info->fix.ypanstep = 16;
    info->fix.line_length = 0;
    info->flags = info->flags | 131072;
    info->tileops = & arkfb_tile_ops;
    info->pixmap.blit_x = 1 << (8 - 1);
    info->pixmap.blit_y = 1 << (16 - 1);
    offset_value = info->var.xres_virtual / (__u32 )16;
    screen_size = (info->var.xres_virtual * info->var.yres_virtual) / (__u32 )64;
  }
  info->var.xoffset = 0;
  info->var.yoffset = 0;
  info->var.activate = 0;
  svga_wcrt_mask(17, 0, 128);
  svga_wseq_mask(1, 32, 32);
  svga_wcrt_mask(23, 0, 128);
  svga_set_default_gfx_regs();
  svga_set_default_atc_regs();
  svga_set_default_seq_regs();
  svga_set_default_crt_regs();
  svga_wcrt_multi(ark_line_compare_regs, 4294967295U);
  svga_wcrt_multi(ark_start_address_regs, 0);
  svga_wseq_mask(16, 31, 31);
  svga_wseq_mask(18, 3, 3);
  vga_wseq((void *)0, 19, info->fix.smem_start >> 16);
  vga_wseq((void *)0, 20, info->fix.smem_start >> 24);
  vga_wseq((void *)0, 21, 0);
  vga_wseq((void *)0, 22, 0);
  regval = ((16 | ((threshold & 14) >> 1)) | ((threshold & 1) << 7)) | ((threshold & 16) << 1);
  vga_wseq((void *)0, 24, regval);
  svga_wcrt_multi(ark_offset_regs, offset_value);
  svga_wcrt_mask(64, 8, 8);
  if (info->var.vmode & 2U) {
    svga_wcrt_mask(9, 128, 128);
  } else {
    svga_wcrt_mask(9, 0, 128);
  }
  if (info->var.vmode & 1U) {
    svga_wcrt_mask(68, 4, 4);
  } else {
    svga_wcrt_mask(68, 0, 4);
  }
  hmul = 1;
  hdiv = 1;
  tmp = svga_match_format(arkfb_formats, & info->var, & info->fix);
  mode = tmp;
  switch (mode) {
  case (u32 )0: 
  svga_set_textmode_vga_regs();
  vga_wseq((void *)0, 17, 16);
  svga_wcrt_mask(70, 0, 4);
  dac_set_mode(par->dac, DAC_PSEUDO8_8);
  break;
  case (u32 )1: 
  vga_wgfx((void *)0, 5, 64);
  vga_wseq((void *)0, 17, 16);
  svga_wcrt_mask(70, 0, 4);
  dac_set_mode(par->dac, DAC_PSEUDO8_8);
  break;
  case (u32 )2: 
  vga_wseq((void *)0, 17, 16);
  svga_wcrt_mask(70, 0, 4);
  dac_set_mode(par->dac, DAC_PSEUDO8_8);
  break;
  case (u32 )3: 
  vga_wseq((void *)0, 17, 22);
  if (info->var.pixclock > (__u32 )20000) {
    svga_wcrt_mask(70, 0, 4);
    dac_set_mode(par->dac, DAC_PSEUDO8_8);
  } else {
    svga_wcrt_mask(70, 4, 4);
    dac_set_mode(par->dac, DAC_PSEUDO8_16);
    hdiv = 2;
  }
  break;
  case (u32 )4: 
  vga_wseq((void *)0, 17, 26);
  svga_wcrt_mask(70, 4, 4);
  dac_set_mode(par->dac, DAC_RGB1555_16);
  break;
  case (u32 )5: 
  vga_wseq((void *)0, 17, 26);
  svga_wcrt_mask(70, 4, 4);
  dac_set_mode(par->dac, DAC_RGB0565_16);
  break;
  case (u32 )6: 
  vga_wseq((void *)0, 17, 22);
  svga_wcrt_mask(70, 4, 4);
  dac_set_mode(par->dac, DAC_RGB0888_16);
  hmul = 3;
  hdiv = 2;
  break;
  case (u32 )7: 
  vga_wseq((void *)0, 17, 30);
  svga_wcrt_mask(70, 4, 4);
  dac_set_mode(par->dac, DAC_RGB8888_16);
  hmul = 2;
  break;
  default: 
  printk("<3>fb%d: unsupported mode - bug\n", info->node);
  return (-22);
  }
  ark_set_pixclock(info, (hdiv * info->var.pixclock) / hmul);
  svga_set_timings(& ark_timing_regs, & info->var, hmul, hdiv, info->var.vmode & 2U ? 2 : 1,
                   info->var.vmode & 1U ? 2 : 1, hmul, info->node);
  value = ((info->var.xres + info->var.left_margin) + info->var.right_margin) + info->var.hsync_len;
  value = ((value * hmul) / hdiv) / (u32 )8 - (u32 )5;
  vga_wcrt((void *)0, 66, (value + (u32 )1) / (u32 )2);
  memset_io(info->screen_base, 0, screen_size);
  svga_wcrt_mask(23, 128, 128);
  svga_wseq_mask(1, 0, 32);
  return (0);
}
}
static int arkfb_setcolreg(u_int regno , u_int red , u_int green , u_int blue , u_int transp ,
                           struct fb_info *fb ) 
{ 


  {
  switch (fb->var.bits_per_pixel) {
  case (__u32 )4: 
  case (__u32 )0: 
  if (regno >= (u_int )16) {
    return (-22);
  } else {

  }
  if (fb->var.bits_per_pixel == (__u32 )4 && fb->var.nonstd == (__u32 )0) {
    outb(240, 966);
    outb(regno * (u_int )16, 968);
  } else {
    outb(15, 966);
    outb(regno, 968);
  }
  outb(red >> 10, 969);
  outb(green >> 10, 969);
  outb(blue >> 10, 969);
  break;
  case (__u32 )8: 
  if (regno >= (u_int )256) {
    return (-22);
  } else {

  }
  outb(255, 966);
  outb(regno, 968);
  outb(red >> 10, 969);
  outb(green >> 10, 969);
  outb(blue >> 10, 969);
  break;
  case (__u32 )16: 
  if (regno >= (u_int )16) {
    return (0);
  } else {

  }
  if (fb->var.green.length == (__u32 )5) {
    *((u32 *)fb->pseudo_palette + regno) = (((red & 63488U) >> 1) | ((green & 63488U) >> 6)) | ((blue & 63488U) >> 11);
  } else
  if (fb->var.green.length == (__u32 )6) {
    *((u32 *)fb->pseudo_palette + regno) = ((red & 63488U) | ((green & 64512U) >> 5)) | ((blue & 63488U) >> 11);
  } else {
    return (-22);
  }
  break;
  case (__u32 )32: 
  case (__u32 )24: 
  if (regno >= (u_int )16) {
    return (0);
  } else {

  }
  *((u32 *)fb->pseudo_palette + regno) = (((red & 65280U) << 8) | (green & 65280U)) | ((blue & 65280U) >> 8);
  break;
  default: 
  return (-22);
  }
  return (0);
}
}
static int arkfb_blank(int blank_mode , struct fb_info *info ) 
{ 


  {
  switch (blank_mode) {
  case FB_BLANK_UNBLANK: 
  svga_wseq_mask(1, 0, 32);
  svga_wcrt_mask(23, 128, 128);
  break;
  case FB_BLANK_NORMAL: 
  svga_wseq_mask(1, 32, 32);
  svga_wcrt_mask(23, 128, 128);
  break;
  case FB_BLANK_VSYNC_SUSPEND: 
  case FB_BLANK_HSYNC_SUSPEND: 
  case FB_BLANK_POWERDOWN: 
  svga_wseq_mask(1, 32, 32);
  svga_wcrt_mask(23, 0, 128);
  break;
  }
  return (0);
}
}
static int arkfb_pan_display(struct fb_var_screeninfo *var , struct fb_info *info ) 
{ 
  unsigned int offset ;

  {
  if (var->bits_per_pixel == (__u32 )0) {
    offset = (var->yoffset / (__u32 )16) * (var->xres_virtual / (__u32 )2) + var->xoffset / (__u32 )2;
    offset = offset >> 2;
  } else {
    offset = var->yoffset * info->fix.line_length + (var->xoffset * var->bits_per_pixel) / (__u32 )8;
    offset = offset >> (var->bits_per_pixel == (__u32 )4 ? 2 : 3);
  }
  svga_wcrt_multi(ark_start_address_regs, offset);
  return (0);
}
}
static struct fb_ops arkfb_ops  = 
     {& __this_module, & arkfb_open, & arkfb_release, 0, 0, & arkfb_check_var, & arkfb_set_par,
    & arkfb_setcolreg, 0, & arkfb_blank, & arkfb_pan_display, & arkfb_fillrect, & cfb_copyarea,
    & arkfb_imageblit, 0, 0, 0, 0, 0, 0, 0, 0, & svga_get_caps};
static struct lock_class_key __key___1  ;
static int ark_pci_probe(struct pci_dev *dev , struct pci_device_id  const  *id )  __attribute__((__section__(".devinit.text"))) ;
static int ark_pci_probe(struct pci_dev *dev , struct pci_device_id  const  *id ) 
{ 
  struct fb_info *info ;
  struct arkfb_info *par ;
  int rc ;
  u8 regval ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  void *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;

  {
  tmp___1 = svga_primary_device(dev);
  if (tmp___1) {

  } else {
    tmp = dev_name(& dev->dev);
    tmp___0 = dev_driver_string(& dev->dev);
    printk("<6>%s %s: ignoring secondary device\n", tmp___0, tmp);
    return (-19);
  }
  info = framebuffer_alloc(sizeof(struct arkfb_info ), & dev->dev);
  if (! info) {
    tmp___2 = dev_name(& dev->dev);
    tmp___3 = dev_driver_string(& dev->dev);
    printk("<3>%s %s: cannot allocate memory\n", tmp___3, tmp___2);
    return (-12);
  } else {

  }
  par = info->par;
  while (1) {
    __mutex_init(& par->open_lock, "&par->open_lock", & __key___1);
    break;
  }
  info->flags = 64 | 8192;
  info->fbops = & arkfb_ops;
  rc = pci_enable_device(dev);
  if (rc < 0) {
    tmp___4 = dev_name(info->device);
    tmp___5 = dev_driver_string(info->device);
    printk("<3>%s %s: cannot enable PCI device\n", tmp___5, tmp___4);
    goto err_request_regions;
  } else {

  }
  rc = pci_request_regions(dev, "arkfb");
  if (rc < 0) {
    tmp___6 = dev_name(info->device);
    tmp___7 = dev_driver_string(info->device);
    printk("<3>%s %s: cannot reserve framebuffer region\n", tmp___7, tmp___6);
    goto err_request_regions;
  } else {

  }
  par->dac = ics5342_init(& ark_dac_read_regs, & ark_dac_write_regs, info);
  if (! par->dac) {
    rc = -12;
    tmp___8 = dev_name(info->device);
    tmp___9 = dev_driver_string(info->device);
    printk("<3>%s %s: RAMDAC initialization failed\n", tmp___9, tmp___8);
    goto err_dac;
  } else {

  }
  info->fix.smem_start = dev->resource[0].start;
  info->fix.smem_len = dev->resource[0].start == (resource_size_t )0 && dev->resource[0].end == dev->resource[0].start ? 0 : (dev->resource[0].end - dev->resource[0].start) + (resource_size_t )1;
  tmp___10 = pci_iomap(dev, 0, 0);
  info->screen_base = tmp___10;
  if (! info->screen_base) {
    rc = -12;
    tmp___11 = dev_name(info->device);
    tmp___12 = dev_driver_string(info->device);
    printk("<3>%s %s: iomap for framebuffer failed\n", tmp___12, tmp___11);
    goto err_iomap;
  } else {

  }
  regval = vga_rseq((void *)0, 16);
  info->screen_size = (1 << ((int )regval >> 6)) << 20;
  info->fix.smem_len = info->screen_size;
  strcpy(info->fix.id, "ARK 2000PV");
  info->fix.mmio_start = 0;
  info->fix.mmio_len = 0;
  info->fix.type = 0;
  info->fix.visual = 3;
  info->fix.ypanstep = 0;
  info->fix.accel = 0;
  info->pseudo_palette = (void *)(par->pseudo_palette);
  rc = fb_find_mode(& info->var, info, mode_option, (void *)0, 0, (void *)0, 8);
  if (! (rc == 1 || rc == 2)) {
    rc = -22;
    tmp___13 = dev_name(info->device);
    tmp___14 = dev_driver_string(info->device);
    printk("<3>%s %s: mode %s not found\n", tmp___14, tmp___13, mode_option);
    goto err_alloc_cmap;
  } else {

  }
  rc = fb_alloc_cmap(& info->cmap, 256, 0);
  if (rc < 0) {
    tmp___15 = dev_name(info->device);
    tmp___16 = dev_driver_string(info->device);
    printk("<3>%s %s: cannot allocate colormap\n", tmp___16, tmp___15);
    goto err_alloc_cmap;
  } else {

  }
  rc = register_framebuffer(info);
  if (rc < 0) {
    tmp___17 = dev_name(info->device);
    tmp___18 = dev_driver_string(info->device);
    printk("<3>%s %s: cannot register framebugger\n", tmp___18, tmp___17);
    goto err_reg_fb;
  } else {

  }
  tmp___19 = pci_name(dev);
  printk("<6>fb%d: %s on %s, %d MB RAM\n", info->node, info->fix.id, tmp___19, info->fix.smem_len >> 20);
  pci_set_drvdata(dev, info);
  if (mtrr) {
    par->mtrr_reg = -1;
    par->mtrr_reg = mtrr_add(info->fix.smem_start, info->fix.smem_len, 1, 1);
  } else {

  }
  return (0);
  err_reg_fb: 
  fb_dealloc_cmap(& info->cmap);
  err_alloc_cmap: 
  pci_iounmap(dev, info->screen_base);
  err_iomap: 
  dac_release(par->dac);
  err_dac: 
  pci_release_regions(dev);
  err_request_regions: 
  framebuffer_release(info);
  return (rc);
}
}
static void ark_pci_remove(struct pci_dev *dev )  __attribute__((__section__(".devexit.text"))) ;
static void ark_pci_remove(struct pci_dev *dev ) 
{ 
  struct fb_info *info ;
  void *tmp ;
  struct arkfb_info *par ;

  {
  tmp = pci_get_drvdata(dev);
  info = tmp;
  if (info) {
    par = info->par;
    if (par->mtrr_reg >= 0) {
      mtrr_del(par->mtrr_reg, 0, 0);
      par->mtrr_reg = -1;
    } else {

    }
    dac_release(par->dac);
    unregister_framebuffer(info);
    fb_dealloc_cmap(& info->cmap);
    pci_iounmap(dev, info->screen_base);
    pci_release_regions(dev);
    pci_set_drvdata(dev, (void *)0);
    framebuffer_release(info);
  } else {

  }
  return;
}
}
static int ark_pci_suspend(struct pci_dev *dev , pm_message_t state ) 
{ 
  struct fb_info *info ;
  void *tmp ;
  struct arkfb_info *par ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  pci_power_t tmp___2 ;

  {
  tmp = pci_get_drvdata(dev);
  info = tmp;
  par = info->par;
  tmp___0 = dev_name(info->device);
  tmp___1 = dev_driver_string(info->device);
  printk("<6>%s %s: suspend\n", tmp___1, tmp___0);
  acquire_console_sem();
  mutex_lock_nested(& par->open_lock, 0);
  if (state.event == 1 || par->ref_count == 0U) {
    mutex_unlock(& par->open_lock);
    release_console_sem();
    return (0);
  } else {

  }
  fb_set_suspend(info, 1);
  pci_save_state(dev);
  pci_disable_device(dev);
  tmp___2 = pci_choose_state(dev, state);
  pci_set_power_state(dev, tmp___2);
  mutex_unlock(& par->open_lock);
  release_console_sem();
  return (0);
}
}
static int ark_pci_resume(struct pci_dev *dev ) 
{ 
  struct fb_info *info ;
  void *tmp ;
  struct arkfb_info *par ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;

  {
  tmp = pci_get_drvdata(dev);
  info = tmp;
  par = info->par;
  tmp___0 = dev_name(info->device);
  tmp___1 = dev_driver_string(info->device);
  printk("<6>%s %s: resume\n", tmp___1, tmp___0);
  acquire_console_sem();
  mutex_lock_nested(& par->open_lock, 0);
  if (par->ref_count == 0U) {
    goto fail;
  } else {

  }
  pci_set_power_state(dev, 0);
  pci_restore_state(dev);
  tmp___2 = pci_enable_device(dev);
  if (tmp___2) {
    goto fail;
  } else {

  }
  pci_set_master(dev);
  arkfb_set_par(info);
  fb_set_suspend(info, 0);
  fail: 
  mutex_unlock(& par->open_lock);
  release_console_sem();
  return (0);
}
}
static struct pci_device_id ark_devices[2]  __attribute__((__section__(".devinit.data")))  = {      {60888,
      41113, ~ 0, ~ 0, 0U, 0U, 0UL}, 
        {0, 0, 0, 0, 0, 0, 0}};
extern struct pci_device_id  const  __mod_pci_device_table  __attribute__((__unused__,
__alias__("ark_devices"))) ;
static struct pci_driver arkfb_pci_driver  = 
     {{0, 0}, "arkfb", ark_devices, & ark_pci_probe, & ark_pci_remove, & ark_pci_suspend,
    0, 0, & ark_pci_resume, 0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {{{0U},
                                                                             0U, 0U,
                                                                             0, {0,
                                                                                 0,
                                                                                 0,
                                                                                 0}},
                                                                            {0, 0},
                                                                            0U}};
static void arkfb_cleanup(void)  __attribute__((__section__(".exit.text"))) ;
static void arkfb_cleanup(void) 
{ 


  {
  pci_unregister_driver(& arkfb_pci_driver);
  return;
}
}
static int arkfb_init(void)  __attribute__((__section__(".init.text"))) ;
static int arkfb_init(void) 
{ 
  int tmp ;

  {
  tmp = __pci_register_driver(& arkfb_pci_driver, & __this_module, "arkfb");
  return (tmp);
}
}
int init_module(void) 
{ 
  int tmp ;

  {
  tmp = arkfb_init();
  return (tmp);
}
}
void cleanup_module(void) 
{ 


  {
  arkfb_cleanup();
  return;
}
}
void ldv_check_final_state(void) ;
extern void ldv_check_return_value(int res ) ;
extern void ldv_check_return_value_probe(int res ) ;
extern void ldv_initialize(void) ;
extern void ldv_handler_precall(void) ;
extern int nondet_int(void) ;
int LDV_IN_INTERRUPT  ;
static int res_ark_pci_probe_29  ;
int main(void) 
{ 
  struct fb_info *var_group1 ;
  struct fb_tilemap *var_group2 ;
  struct dac_info *var_group3 ;
  int var_ics5342_set_mode_15_p1 ;
  int var_ics5342_set_freq_16_p1 ;
  u32 var_ics5342_set_freq_16_p2 ;
  int var_arkfb_open_22_p1 ;
  int var_arkfb_release_23_p1 ;
  struct fb_var_screeninfo *var_group4 ;
  u_int var_arkfb_setcolreg_26_p0 ;
  u_int var_arkfb_setcolreg_26_p1 ;
  u_int var_arkfb_setcolreg_26_p2 ;
  u_int var_arkfb_setcolreg_26_p3 ;
  u_int var_arkfb_setcolreg_26_p4 ;
  struct fb_info *var_arkfb_setcolreg_26_p5 ;
  int var_arkfb_blank_27_p0 ;
  struct fb_fillrect  const  *var_arkfb_fillrect_7_p1 ;
  struct fb_image  const  *var_arkfb_imageblit_6_p1 ;
  struct pci_dev *var_group5 ;
  struct pci_device_id  const  *var_ark_pci_probe_29_p1 ;
  struct pci_dev *var_group6 ;
  pm_message_t var_ark_pci_suspend_31_p1 ;
  int tmp ;
  int ldv_s_arkfb_pci_driver_pci_driver ;
  int tmp___0 ;
  int tmp___1 ;

  {
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  ldv_handler_precall();
  tmp = arkfb_init();
  if (tmp) {
    goto ldv_final;
  } else {

  }
  ldv_s_arkfb_pci_driver_pci_driver = 0;
  while (1) {
    tmp___1 = nondet_int();
    if (tmp___1 || ! (ldv_s_arkfb_pci_driver_pci_driver == 0)) {

    } else {
      break;
    }
    tmp___0 = nondet_int();
    switch (tmp___0) {
    case 0: 
    ldv_handler_precall();
    arkfb_settile(var_group1, var_group2);
    break;
    case 1: 
    ldv_handler_precall();
    ics5342_set_mode(var_group3, var_ics5342_set_mode_15_p1);
    break;
    case 2: 
    ldv_handler_precall();
    ics5342_set_freq(var_group3, var_ics5342_set_freq_16_p1, var_ics5342_set_freq_16_p2);
    break;
    case 3: 
    ldv_handler_precall();
    ics5342_release(var_group3);
    break;
    case 4: 
    ldv_handler_precall();
    arkfb_open(var_group1, var_arkfb_open_22_p1);
    break;
    case 5: 
    ldv_handler_precall();
    arkfb_release(var_group1, var_arkfb_release_23_p1);
    break;
    case 6: 
    ldv_handler_precall();
    arkfb_check_var(var_group4, var_group1);
    break;
    case 7: 
    ldv_handler_precall();
    arkfb_set_par(var_group1);
    break;
    case 8: 
    ldv_handler_precall();
    arkfb_setcolreg(var_arkfb_setcolreg_26_p0, var_arkfb_setcolreg_26_p1, var_arkfb_setcolreg_26_p2,
                    var_arkfb_setcolreg_26_p3, var_arkfb_setcolreg_26_p4, var_arkfb_setcolreg_26_p5);
    break;
    case 9: 
    ldv_handler_precall();
    arkfb_blank(var_arkfb_blank_27_p0, var_group1);
    break;
    case 10: 
    ldv_handler_precall();
    arkfb_pan_display(var_group4, var_group1);
    break;
    case 11: 
    ldv_handler_precall();
    arkfb_fillrect(var_group1, var_arkfb_fillrect_7_p1);
    break;
    case 12: 
    ldv_handler_precall();
    arkfb_imageblit(var_group1, var_arkfb_imageblit_6_p1);
    break;
    case 13: 
    if (ldv_s_arkfb_pci_driver_pci_driver == 0) {
      res_ark_pci_probe_29 = ark_pci_probe(var_group5, var_ark_pci_probe_29_p1);
      ldv_check_return_value(res_ark_pci_probe_29);
      ldv_check_return_value_probe(res_ark_pci_probe_29);
      if (res_ark_pci_probe_29) {
        goto ldv_module_exit;
      } else {

      }
      ldv_s_arkfb_pci_driver_pci_driver = ldv_s_arkfb_pci_driver_pci_driver + 1;
    } else {

    }
    break;
    case 14: 
    if (ldv_s_arkfb_pci_driver_pci_driver == 1) {
      ldv_handler_precall();
      ark_pci_remove(var_group5);
      ldv_s_arkfb_pci_driver_pci_driver = 0;
    } else {

    }
    break;
    case 15: 
    ldv_handler_precall();
    ark_pci_suspend(var_group6, var_ark_pci_suspend_31_p1);
    break;
    case 16: 
    ldv_handler_precall();
    ark_pci_resume(var_group6);
    break;
    default: 
    break;
    }
  }
  ldv_module_exit: 
  ldv_handler_precall();
  arkfb_cleanup();
  ldv_final: 
  ldv_check_final_state();
  return 0;
}
}
long ldv__builtin_expect(long exp , long c ) ;
struct urb *usb_alloc_urb(int iso_packets , gfp_t mem_flags ) ;
void usb_free_urb(struct urb *urb ) ;
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: __VERIFIER_error();
}
}
__inline static void ldv_stop(void) 
{ 


  {
  LDV_STOP: 
  goto LDV_STOP;
}
}
extern void *ldv_undef_ptr(void) ;
long ldv__builtin_expect(long exp , long c ) 
{ 


  {
  return (exp);
}
}
int ldv_urb_state  =    0;
int ldv_coherent_state  =    0;
void *usb_alloc_coherent(struct usb_device *dev , size_t size , gfp_t mem_flags ,
                         dma_addr_t *dma ) 
{ 
  void *arbitrary_memory ;
  void *tmp ;

  {
  while (1) {
    tmp = ldv_undef_ptr();
    arbitrary_memory = tmp;
    if (! arbitrary_memory) {
      return ((void *)0);
    } else {

    }
    ldv_coherent_state = ldv_coherent_state + 1;
    return (arbitrary_memory);
    break;
  }
  return ((void *)0);
}
}
void usb_free_coherent(struct usb_device *dev , size_t size , void *addr , dma_addr_t dma ) 
{ 


  {
  while (1) {
    if ((unsigned long )addr != (unsigned long )((void *)0)) {

    } else {
      ldv_stop();
    }
    if (addr) {
      if (ldv_coherent_state >= 1) {

      } else {
        ldv_error();
      }
      ldv_coherent_state = ldv_coherent_state - 1;
    } else {

    }
    break;
  }
  return;
}
}
struct urb *usb_alloc_urb(int iso_packets , gfp_t mem_flags ) 
{ 
  void *arbitrary_memory ;
  void *tmp ;

  {
  while (1) {
    tmp = ldv_undef_ptr();
    arbitrary_memory = tmp;
    if (! arbitrary_memory) {
      return ((void *)0);
    } else {

    }
    ldv_urb_state = ldv_urb_state + 1;
    return (arbitrary_memory);
    break;
  }
  return ((struct urb *)0);
}
}
void usb_free_urb(struct urb *urb ) 
{ 


  {
  while (1) {
    if ((unsigned long )urb != (unsigned long )((struct urb *)0)) {

    } else {
      ldv_stop();
    }
    if (urb) {
      if (ldv_urb_state >= 1) {

      } else {
        ldv_error();
      }
      ldv_urb_state = ldv_urb_state - 1;
    } else {

    }
    break;
  }
  return;
}
}
void ldv_check_final_state(void) 
{ 


  {
  if (ldv_urb_state == 0) {

  } else {
    ldv_error();
  }
  if (ldv_coherent_state == 0) {

  } else {
    ldv_error();
  }
  return;
}
}
