extern void __VERIFIER_error() __attribute__ ((__noreturn__));

/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

typedef __builtin_va_list __gnuc_va_list[1U];
typedef __gnuc_va_list va_list[1U];
struct __anonstruct_ldv_809_2 {
   unsigned long correct ;
   unsigned long incorrect ;
};
struct __anonstruct_ldv_813_3 {
   unsigned long miss ;
   unsigned long hit ;
};
union __anonunion_ldv_814_1 {
   struct __anonstruct_ldv_809_2 ldv_809 ;
   struct __anonstruct_ldv_813_3 ldv_813 ;
};
struct ftrace_branch_data {
   char const   *func ;
   char const   *file ;
   unsigned int line ;
   union __anonunion_ldv_814_1 ldv_814 ;
};
typedef unsigned int __kernel_mode_t;
typedef long __kernel_off_t;
typedef int __kernel_pid_t;
typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;
typedef unsigned long __kernel_size_t;
typedef long __kernel_ssize_t;
typedef long __kernel_time_t;
typedef long __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef long long __kernel_loff_t;
typedef __kernel_uid_t __kernel_uid32_t;
typedef __kernel_gid_t __kernel_gid32_t;
typedef signed char __s8;
typedef unsigned char __u8;
typedef short __s16;
typedef unsigned short __u16;
typedef int __s32;
typedef unsigned int __u32;
typedef long long __s64;
typedef unsigned long long __u64;
typedef signed char s8;
typedef unsigned char u8;
typedef unsigned short u16;
typedef unsigned int u32;
typedef long long s64;
typedef unsigned long long u64;
typedef unsigned short umode_t;
typedef u64 dma_addr_t;
typedef __u32 __kernel_dev_t;
typedef __kernel_dev_t dev_t;
typedef __kernel_mode_t mode_t;
typedef __kernel_off_t off_t;
typedef __kernel_pid_t pid_t;
typedef __kernel_timer_t timer_t;
typedef __kernel_clockid_t clockid_t;
typedef __kernel_uid32_t uid_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_loff_t loff_t;
typedef __kernel_size_t size_t;
typedef __kernel_ssize_t ssize_t;
typedef __kernel_time_t time_t;
typedef __kernel_clock_t clock_t;
typedef __s32 int32_t;
typedef __u32 uint32_t;
typedef unsigned long sector_t;
typedef unsigned long blkcnt_t;
typedef __u16 __le16;
typedef __u32 __le32;
typedef unsigned int gfp_t;
typedef unsigned int fmode_t;
struct __anonstruct_atomic_t_6 {
   int volatile   counter ;
};
typedef struct __anonstruct_atomic_t_6 atomic_t;
struct __anonstruct_atomic64_t_7 {
   long volatile   counter ;
};
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
struct module;
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
struct completion;
struct pt_regs;
struct pid;
struct task_struct;
struct mm_struct;
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
union __anonunion_ldv_1804_8 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_1804_8 ldv_1804 ;
};
typedef unsigned long pgdval_t;
typedef unsigned long pgprotval_t;
struct page;
struct __anonstruct_pgd_t_11 {
   pgdval_t pgd ;
};
typedef struct __anonstruct_pgd_t_11 pgd_t;
struct __anonstruct_pgprot_t_12 {
   pgprotval_t pgprot ;
};
typedef struct __anonstruct_pgprot_t_12 pgprot_t;
struct __anonstruct_ldv_1969_16 {
   unsigned int a ;
   unsigned int b ;
};
struct __anonstruct_ldv_1984_17 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
union __anonunion_ldv_1985_15 {
   struct __anonstruct_ldv_1969_16 ldv_1969 ;
   struct __anonstruct_ldv_1984_17 ldv_1984 ;
};
struct desc_struct {
   union __anonunion_ldv_1985_15 ldv_1985 ;
};
struct cpumask {
   unsigned long bits[64U] ;
};
typedef struct cpumask cpumask_t;
struct thread_struct;
struct raw_spinlock;
struct ds_context;
struct bts_tracer;
struct exec_domain;
struct map_segment;
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
struct __anonstruct_ldv_6335_22 {
   u64 rip ;
   u64 rdp ;
};
struct __anonstruct_ldv_6341_23 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
union __anonunion_ldv_6342_21 {
   struct __anonstruct_ldv_6335_22 ldv_6335 ;
   struct __anonstruct_ldv_6341_23 ldv_6341 ;
};
union __anonunion_ldv_6351_24 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_6342_21 ldv_6342 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_6351_24 ldv_6351 ;
};
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
};
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
struct kmem_cache;
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long ip ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   struct ds_context *ds_ctx ;
   unsigned int bts_ovfl_signal ;
};
struct __anonstruct_mm_segment_t_25 {
   unsigned long seg ;
};
typedef struct __anonstruct_mm_segment_t_25 mm_segment_t;
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
struct hlist_node;
struct hlist_head {
   struct hlist_node *first ;
};
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
struct timespec;
struct compat_timespec;
struct __anonstruct_ldv_6830_27 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
struct __anonstruct_futex_28 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
};
struct __anonstruct_nanosleep_29 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
struct pollfd;
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
union __anonunion_ldv_6852_26 {
   struct __anonstruct_ldv_6830_27 ldv_6830 ;
   struct __anonstruct_futex_28 futex ;
   struct __anonstruct_nanosleep_29 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_6852_26 ldv_6852 ;
};
struct ftrace_ret_stack {
   unsigned long ret ;
   unsigned long func ;
   unsigned long long calltime ;
};
typedef atomic64_t atomic_long_t;
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
};
struct raw_spinlock {
   unsigned int slock ;
};
typedef struct raw_spinlock raw_spinlock_t;
struct __anonstruct_raw_rwlock_t_31 {
   unsigned int lock ;
};
typedef struct __anonstruct_raw_rwlock_t_31 raw_rwlock_t;
struct lockdep_map;
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
struct lockdep_subclass_key {
   char __one_byte ;
};
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[9U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
};
struct __anonstruct_spinlock_t_32 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
typedef struct __anonstruct_spinlock_t_32 spinlock_t;
struct __anonstruct_rwlock_t_33 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
typedef struct __anonstruct_rwlock_t_33 rwlock_t;
struct timespec {
   time_t tv_sec ;
   long tv_nsec ;
};
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
struct __wait_queue;
typedef struct __wait_queue wait_queue_t;
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
typedef struct __wait_queue_head wait_queue_head_t;
struct __anonstruct_nodemask_t_35 {
   unsigned long bits[8U] ;
};
typedef struct __anonstruct_nodemask_t_35 nodemask_t;
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct mutex *lock ;
   void *magic ;
};
struct rw_semaphore;
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
struct file;
struct device;
struct pm_message {
   int event ;
};
typedef struct pm_message pm_message_t;
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
};
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
};
struct __anonstruct_mm_context_t_83 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
typedef struct __anonstruct_mm_context_t_83 mm_context_t;
struct vm_area_struct;
struct key;
typedef __u64 Elf64_Addr;
typedef __u16 Elf64_Half;
typedef __u32 Elf64_Word;
typedef __u64 Elf64_Xword;
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
typedef struct elf64_sym Elf64_Sym;
struct kobject;
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
struct sysfs_dirent;
struct kref {
   atomic_t refcount ;
};
struct kset;
struct kobj_type;
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
};
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
struct kset_uevent_ops {
   int (*filter)(struct kset * , struct kobject * ) ;
   char const   *(*name)(struct kset * , struct kobject * ) ;
   int (*uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
struct marker;
typedef void marker_probe_func(void * , void * , char const   * , va_list * );
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  * , void *  , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
   char const   *tp_name ;
   void *tp_cb ;
};
union ktime {
   s64 tv64 ;
};
typedef union ktime ktime_t;
struct tvec_base;
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
};
struct hrtimer;
enum hrtimer_restart;
struct work_struct;
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[18U] ;
};
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   unsigned long min_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
struct kmem_cache_order_objects {
   unsigned long x ;
};
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[512U] ;
   struct kmem_cache_cpu *cpu_slab[4096U] ;
};
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
struct tracepoint;
struct tracepoint {
   char const   *name ;
   int state ;
   void **funcs ;
};
struct mod_arch_specific {

};
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
struct module_param_attrs;
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
struct exception_table_entry;
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
struct module_sect_attrs;
struct module_notes_attrs;
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   char *refptr ;
};
struct device_driver;
struct nameidata;
struct path;
struct vfsmount;
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
struct inode;
union __anonunion_d_u_95 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
struct dentry_operations;
struct super_block;
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_95 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32U] ;
};
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
struct radix_tree_node;
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
struct prio_tree_node;
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
struct pid_namespace;
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
typedef struct kernel_cap_struct kernel_cap_t;
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
struct export_operations;
struct iovec;
struct kiocb;
struct pipe_inode_info;
struct poll_table_struct;
struct kstatfs;
struct cred;
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
typedef struct fs_qfilestat fs_qfilestat_t;
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
struct dquot;
typedef __kernel_uid32_t qid_t;
typedef long long qsize_t;
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
struct quota_format_type;
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , qsize_t  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , qsize_t  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
};
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops *ops[2U] ;
};
struct address_space;
struct writeback_control;
union __anonunion_arg_98 {
   char *buf ;
   void *data ;
};
struct __anonstruct_read_descriptor_t_97 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_98 arg ;
   int error ;
};
typedef struct __anonstruct_read_descriptor_t_97 read_descriptor_t;
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
};
struct backing_dev_info;
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
struct hd_struct;
struct gendisk;
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
struct inode_operations;
struct file_operations;
struct file_lock;
struct cdev;
union __anonunion_ldv_13495_99 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
struct dnotify_struct;
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_13495_99 ldv_13495 ;
   int i_cindex ;
   __u32 i_generation ;
   unsigned long i_dnotify_mask ;
   struct dnotify_struct *i_dnotify ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
union __anonunion_f_u_100 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
struct file {
   union __anonunion_f_u_100 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   spinlock_t f_ep_lock ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
struct files_struct;
typedef struct files_struct *fl_owner_t;
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
struct nlm_lockowner;
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
struct nfs4_lock_state;
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
struct fasync_struct;
struct __anonstruct_afs_102 {
   struct list_head link ;
   int state ;
};
union __anonunion_fl_u_101 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_102 afs ;
};
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_101 fl_u ;
};
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
struct file_system_type;
struct super_operations;
struct xattr_handler;
struct mtd_info;
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_need_sync_fs ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
   struct list_head s_async_list ;
};
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
struct seq_file;
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
struct bio;
typedef unsigned char cc_t;
typedef unsigned int speed_t;
typedef unsigned int tcflag_t;
struct ktermios {
   tcflag_t c_iflag ;
   tcflag_t c_oflag ;
   tcflag_t c_cflag ;
   tcflag_t c_lflag ;
   cc_t c_line ;
   cc_t c_cc[19U] ;
   speed_t c_ispeed ;
   speed_t c_ospeed ;
};
struct winsize {
   unsigned short ws_row ;
   unsigned short ws_col ;
   unsigned short ws_xpixel ;
   unsigned short ws_ypixel ;
};
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
struct termiox {
   __u16 x_hflag ;
   __u16 x_cflag ;
   __u16 x_rflag[5U] ;
   __u16 x_sflag ;
};
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
struct tty_struct;
struct tty_driver;
struct tty_operations {
   struct tty_struct *(*lookup)(struct tty_driver * , struct inode * , int  ) ;
   int (*install)(struct tty_driver * , struct tty_struct * ) ;
   void (*remove)(struct tty_driver * , struct tty_struct * ) ;
   int (*open)(struct tty_struct * , struct file * ) ;
   void (*close)(struct tty_struct * , struct file * ) ;
   void (*shutdown)(struct tty_struct * ) ;
   int (*write)(struct tty_struct * , unsigned char const   * , int  ) ;
   int (*put_char)(struct tty_struct * , unsigned char  ) ;
   void (*flush_chars)(struct tty_struct * ) ;
   int (*write_room)(struct tty_struct * ) ;
   int (*chars_in_buffer)(struct tty_struct * ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   void (*throttle)(struct tty_struct * ) ;
   void (*unthrottle)(struct tty_struct * ) ;
   void (*stop)(struct tty_struct * ) ;
   void (*start)(struct tty_struct * ) ;
   void (*hangup)(struct tty_struct * ) ;
   int (*break_ctl)(struct tty_struct * , int  ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   void (*set_ldisc)(struct tty_struct * ) ;
   void (*wait_until_sent)(struct tty_struct * , int  ) ;
   void (*send_xchar)(struct tty_struct * , char  ) ;
   int (*read_proc)(char * , char ** , off_t  , int  , int * , void * ) ;
   int (*tiocmget)(struct tty_struct * , struct file * ) ;
   int (*tiocmset)(struct tty_struct * , struct file * , unsigned int  , unsigned int  ) ;
   int (*resize)(struct tty_struct * , struct winsize * ) ;
   int (*set_termiox)(struct tty_struct * , struct termiox * ) ;
   int (*poll_init)(struct tty_driver * , int  , char * ) ;
   int (*poll_get_char)(struct tty_driver * , int  ) ;
   void (*poll_put_char)(struct tty_driver * , int  , char  ) ;
};
struct proc_dir_entry;
struct tty_driver {
   int magic ;
   struct kref kref ;
   struct cdev cdev ;
   struct module *owner ;
   char const   *driver_name ;
   char const   *name ;
   int name_base ;
   int major ;
   int minor_start ;
   int minor_num ;
   int num ;
   short type ;
   short subtype ;
   struct ktermios init_termios ;
   int flags ;
   struct proc_dir_entry *proc_entry ;
   struct tty_driver *other ;
   struct tty_struct **ttys ;
   struct ktermios **termios ;
   struct ktermios **termios_locked ;
   void *driver_state ;
   struct tty_operations  const  *ops ;
   struct list_head tty_drivers ;
};
struct tty_ldisc_ops {
   int magic ;
   char *name ;
   int num ;
   int flags ;
   int (*open)(struct tty_struct * ) ;
   void (*close)(struct tty_struct * ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   ssize_t (*chars_in_buffer)(struct tty_struct * ) ;
   ssize_t (*read)(struct tty_struct * , struct file * , unsigned char * , size_t  ) ;
   ssize_t (*write)(struct tty_struct * , struct file * , unsigned char const   * ,
                    size_t  ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   unsigned int (*poll)(struct tty_struct * , struct file * , struct poll_table_struct * ) ;
   int (*hangup)(struct tty_struct * ) ;
   void (*receive_buf)(struct tty_struct * , unsigned char const   * , char * , int  ) ;
   void (*write_wakeup)(struct tty_struct * ) ;
   struct module *owner ;
   int refcount ;
};
struct tty_ldisc {
   struct tty_ldisc_ops *ops ;
   int refcount ;
};
struct tty_buffer {
   struct tty_buffer *next ;
   char *char_buf_ptr ;
   unsigned char *flag_buf_ptr ;
   int used ;
   int size ;
   int commit ;
   int read ;
   unsigned long data[0U] ;
};
struct tty_bufhead {
   struct delayed_work work ;
   spinlock_t lock ;
   struct tty_buffer *head ;
   struct tty_buffer *tail ;
   struct tty_buffer *free ;
   int memory_used ;
};
struct signal_struct;
struct tty_port;
struct tty_port_operations {
   int (*carrier_raised)(struct tty_port * ) ;
   void (*raise_dtr_rts)(struct tty_port * ) ;
};
struct tty_port {
   struct tty_struct *tty ;
   struct tty_port_operations  const  *ops ;
   spinlock_t lock ;
   int blocked_open ;
   int count ;
   wait_queue_head_t open_wait ;
   wait_queue_head_t close_wait ;
   unsigned long flags ;
   struct mutex mutex ;
   unsigned char *xmit_buf ;
   int close_delay ;
   int closing_wait ;
};
struct tty_struct {
   int magic ;
   struct kref kref ;
   struct tty_driver *driver ;
   struct tty_operations  const  *ops ;
   int index ;
   struct tty_ldisc ldisc ;
   struct mutex termios_mutex ;
   spinlock_t ctrl_lock ;
   struct ktermios *termios ;
   struct ktermios *termios_locked ;
   struct termiox *termiox ;
   char name[64U] ;
   struct pid *pgrp ;
   struct pid *session ;
   unsigned long flags ;
   int count ;
   struct winsize winsize ;
   unsigned char stopped : 1 ;
   unsigned char hw_stopped : 1 ;
   unsigned char flow_stopped : 1 ;
   unsigned char packet : 1 ;
   unsigned char low_latency : 1 ;
   unsigned char warned : 1 ;
   unsigned char ctrl_status ;
   unsigned int receive_room ;
   struct tty_struct *link ;
   struct fasync_struct *fasync ;
   struct tty_bufhead buf ;
   int alt_speed ;
   wait_queue_head_t write_wait ;
   wait_queue_head_t read_wait ;
   struct work_struct hangup_work ;
   void *disc_data ;
   void *driver_data ;
   struct list_head tty_files ;
   unsigned int column ;
   unsigned char lnext : 1 ;
   unsigned char erasing : 1 ;
   unsigned char raw : 1 ;
   unsigned char real_raw : 1 ;
   unsigned char icanon : 1 ;
   unsigned char closing : 1 ;
   unsigned char echo_overrun : 1 ;
   unsigned short minimum_to_wake ;
   unsigned long overrun_time ;
   int num_overrun ;
   unsigned long process_char_map[4U] ;
   char *read_buf ;
   int read_head ;
   int read_tail ;
   int read_cnt ;
   unsigned long read_flags[64U] ;
   unsigned char *echo_buf ;
   unsigned int echo_pos ;
   unsigned int echo_cnt ;
   int canon_data ;
   unsigned long canon_head ;
   unsigned int canon_column ;
   struct mutex atomic_read_lock ;
   struct mutex atomic_write_lock ;
   struct mutex output_lock ;
   struct mutex echo_lock ;
   unsigned char *write_buf ;
   int write_cnt ;
   spinlock_t read_lock ;
   struct work_struct SAK_work ;
   struct tty_port *port ;
};
struct class;
typedef unsigned long kernel_ulong_t;
struct usb_device_id {
   __u16 match_flags ;
   __u16 idVendor ;
   __u16 idProduct ;
   __u16 bcdDevice_lo ;
   __u16 bcdDevice_hi ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   kernel_ulong_t driver_info ;
};
struct usb_device_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 bcdUSB ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bMaxPacketSize0 ;
   __le16 idVendor ;
   __le16 idProduct ;
   __le16 bcdDevice ;
   __u8 iManufacturer ;
   __u8 iProduct ;
   __u8 iSerialNumber ;
   __u8 bNumConfigurations ;
};
struct usb_config_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumInterfaces ;
   __u8 bConfigurationValue ;
   __u8 iConfiguration ;
   __u8 bmAttributes ;
   __u8 bMaxPower ;
};
struct usb_interface_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bInterfaceNumber ;
   __u8 bAlternateSetting ;
   __u8 bNumEndpoints ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 iInterface ;
};
struct usb_endpoint_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bEndpointAddress ;
   __u8 bmAttributes ;
   __le16 wMaxPacketSize ;
   __u8 bInterval ;
   __u8 bRefresh ;
   __u8 bSynchAddress ;
};
struct usb_interface_assoc_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bFirstInterface ;
   __u8 bInterfaceCount ;
   __u8 bFunctionClass ;
   __u8 bFunctionSubClass ;
   __u8 bFunctionProtocol ;
   __u8 iFunction ;
};
enum usb_device_speed {
    USB_SPEED_UNKNOWN = 0,
    USB_SPEED_LOW = 1,
    USB_SPEED_FULL = 2,
    USB_SPEED_HIGH = 3,
    USB_SPEED_VARIABLE = 4
} ;
enum usb_device_state {
    USB_STATE_NOTATTACHED = 0,
    USB_STATE_ATTACHED = 1,
    USB_STATE_POWERED = 2,
    USB_STATE_RECONNECTING = 3,
    USB_STATE_UNAUTHENTICATED = 4,
    USB_STATE_DEFAULT = 5,
    USB_STATE_ADDRESS = 6,
    USB_STATE_CONFIGURED = 7,
    USB_STATE_SUSPENDED = 8
} ;
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
struct rb_root {
   struct rb_node *rb_node ;
};
typedef atomic_long_t mm_counter_t;
struct __anonstruct_ldv_16922_105 {
   u16 inuse ;
   u16 objects ;
};
union __anonunion_ldv_16923_104 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_16922_105 ldv_16922 ;
};
struct __anonstruct_ldv_16928_107 {
   unsigned long private ;
   struct address_space *mapping ;
};
union __anonunion_ldv_16932_106 {
   struct __anonstruct_ldv_16928_107 ldv_16928 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
union __anonunion_ldv_16936_108 {
   unsigned long index ;
   void *freelist ;
};
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_16923_104 ldv_16923 ;
   union __anonunion_ldv_16932_106 ldv_16932 ;
   union __anonunion_ldv_16936_108 ldv_16936 ;
   struct list_head lru ;
};
struct __anonstruct_vm_set_110 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
union __anonunion_shared_109 {
   struct __anonstruct_vm_set_110 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
struct anon_vma;
struct vm_operations_struct;
struct mempolicy;
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_109 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
struct mmu_notifier_mm;
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
typedef unsigned long cputime_t;
struct sem_undo_list;
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
struct siginfo;
struct __anonstruct_sigset_t_111 {
   unsigned long sig[1U] ;
};
typedef struct __anonstruct_sigset_t_111 sigset_t;
typedef void __signalfn_t(int  );
typedef __signalfn_t *__sighandler_t;
typedef void __restorefn_t(void);
typedef __restorefn_t *__sigrestore_t;
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
struct k_sigaction {
   struct sigaction sa ;
};
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
typedef union sigval sigval_t;
struct __anonstruct__kill_113 {
   pid_t _pid ;
   uid_t _uid ;
};
struct __anonstruct__timer_114 {
   timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
struct __anonstruct__rt_115 {
   pid_t _pid ;
   uid_t _uid ;
   sigval_t _sigval ;
};
struct __anonstruct__sigchld_116 {
   pid_t _pid ;
   uid_t _uid ;
   int _status ;
   clock_t _utime ;
   clock_t _stime ;
};
struct __anonstruct__sigfault_117 {
   void *_addr ;
};
struct __anonstruct__sigpoll_118 {
   long _band ;
   int _fd ;
};
union __anonunion__sifields_112 {
   int _pad[28U] ;
   struct __anonstruct__kill_113 _kill ;
   struct __anonstruct__timer_114 _timer ;
   struct __anonstruct__rt_115 _rt ;
   struct __anonstruct__sigchld_116 _sigchld ;
   struct __anonstruct__sigfault_117 _sigfault ;
   struct __anonstruct__sigpoll_118 _sigpoll ;
};
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_112 _sifields ;
};
typedef struct siginfo siginfo_t;
struct user_struct;
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
struct fs_struct {
   atomic_t count ;
   rwlock_t lock ;
   int umask ;
   struct path root ;
   struct path pwd ;
};
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
struct __anonstruct_seccomp_t_121 {
   int mode ;
};
typedef struct __anonstruct_seccomp_t_121 seccomp_t;
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
struct rt_mutex_waiter;
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
struct hrtimer_clock_base;
struct hrtimer_cpu_base;
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   struct list_head cb_entry ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
struct nsproxy;
typedef int32_t key_serial_t;
typedef uint32_t key_perm_t;
struct key_type;
struct keyring_list;
struct key_user;
union __anonunion_type_data_122 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
};
union __anonunion_payload_123 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   time_t expiry ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_122 type_data ;
   union __anonunion_payload_123 payload ;
};
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
struct cred {
   atomic_t usage ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
struct futex_pi_state;
struct robust_list_head;
struct cfs_rq;
struct task_group;
struct user_namespace;
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
struct kioctx;
union __anonunion_ki_obj_124 {
   void *user ;
   struct task_struct *tsk ;
};
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_124 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
union __anonunion_ldv_19382_125 {
   pid_t pgrp ;
   pid_t __pgrp ;
};
union __anonunion_ldv_19387_126 {
   pid_t session ;
   pid_t __session ;
};
struct taskstats;
struct tty_audit_buf;
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   union __anonunion_ldv_19382_125 ldv_19382 ;
   struct pid *tty_old_pgrp ;
   union __anonunion_ldv_19387_126 ldv_19387 ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
};
struct reclaim_state;
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
struct sched_group {
   struct sched_group *next ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
   unsigned long cpumask[] ;
};
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[3U] ;
   unsigned int lb_failed[3U] ;
   unsigned int lb_balanced[3U] ;
   unsigned int lb_imbalance[3U] ;
   unsigned int lb_gained[3U] ;
   unsigned int lb_hot_gained[3U] ;
   unsigned int lb_nobusyg[3U] ;
   unsigned int lb_nobusyq[3U] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
   unsigned long span[] ;
};
struct io_context;
struct audit_context;
struct rq;
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  ) ;
   unsigned long (*load_balance)(struct rq * , int  , struct rq * , unsigned long  ,
                                 struct sched_domain * , enum cpu_idle_type  , int * ,
                                 int * ) ;
   int (*move_one_task)(struct rq * , int  , struct rq * , struct sched_domain * ,
                        enum cpu_idle_type  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_wake_up)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_new)(struct rq * , struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*moved_group)(struct task_struct * ) ;
};
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
struct rt_rq;
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
struct linux_binfmt;
struct css_set;
struct compat_robust_list_head;
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct bts_tracer *bts ;
   void *bts_buffer ;
   size_t bts_size ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_exec_mutex ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_timestamp ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
};
struct klist_node;
struct klist {
   spinlock_t k_lock ;
   struct list_head k_list ;
   void (*get)(struct klist_node * ) ;
   void (*put)(struct klist_node * ) ;
};
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
struct dma_mapping_ops;
struct dev_archdata {
   void *acpi_handle ;
   struct dma_mapping_ops *dma_ops ;
   void *iommu ;
};
struct driver_private;
struct class_private;
struct bus_type;
struct bus_type_private;
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
struct device_attribute;
struct driver_attribute;
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*suspend_late)(struct device * , pm_message_t  ) ;
   int (*resume_early)(struct device * ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops *pm ;
   struct bus_type_private *p ;
};
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group **groups ;
   struct dev_pm_ops *pm ;
   struct driver_private *p ;
};
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
struct class_attribute;
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops *pm ;
   struct class_private *p ;
};
struct device_type;
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , char * ) ;
   ssize_t (*store)(struct class * , char const   * , size_t  ) ;
};
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops *pm ;
};
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
struct dma_coherent_mem;
struct device {
   struct klist klist_children ;
   struct klist_node knode_parent ;
   struct klist_node knode_driver ;
   struct klist_node knode_bus ;
   struct device *parent ;
   struct kobject kobj ;
   char bus_id[20U] ;
   unsigned char uevent_suppress : 1 ;
   char const   *init_name ;
   struct device_type *type ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device * ) ;
};
struct usb_device;
struct usb_driver;
struct wusb_dev;
struct ep_device;
struct usb_host_endpoint {
   struct usb_endpoint_descriptor desc ;
   struct list_head urb_list ;
   void *hcpriv ;
   struct ep_device *ep_dev ;
   unsigned char *extra ;
   int extralen ;
   int enabled ;
};
struct usb_host_interface {
   struct usb_interface_descriptor desc ;
   struct usb_host_endpoint *endpoint ;
   char *string ;
   unsigned char *extra ;
   int extralen ;
};
enum usb_interface_condition {
    USB_INTERFACE_UNBOUND = 0,
    USB_INTERFACE_BINDING = 1,
    USB_INTERFACE_BOUND = 2,
    USB_INTERFACE_UNBINDING = 3
} ;
struct usb_interface {
   struct usb_host_interface *altsetting ;
   struct usb_host_interface *cur_altsetting ;
   unsigned int num_altsetting ;
   struct usb_interface_assoc_descriptor *intf_assoc ;
   int minor ;
   enum usb_interface_condition condition ;
   unsigned char is_active : 1 ;
   unsigned char sysfs_files_created : 1 ;
   unsigned char ep_devs_created : 1 ;
   unsigned char unregistering : 1 ;
   unsigned char needs_remote_wakeup : 1 ;
   unsigned char needs_altsetting0 : 1 ;
   unsigned char needs_binding : 1 ;
   unsigned char reset_running : 1 ;
   struct device dev ;
   struct device *usb_dev ;
   int pm_usage_cnt ;
   struct work_struct reset_ws ;
};
struct usb_interface_cache {
   unsigned int num_altsetting ;
   struct kref ref ;
   struct usb_host_interface altsetting[0U] ;
};
struct usb_host_config {
   struct usb_config_descriptor desc ;
   char *string ;
   struct usb_interface_assoc_descriptor *intf_assoc[16U] ;
   struct usb_interface *interface[32U] ;
   struct usb_interface_cache *intf_cache[32U] ;
   unsigned char *extra ;
   int extralen ;
};
struct usb_devmap {
   unsigned long devicemap[2U] ;
};
struct mon_bus;
struct usb_bus {
   struct device *controller ;
   int busnum ;
   char const   *bus_name ;
   u8 uses_dma ;
   u8 otg_port ;
   unsigned char is_b_host : 1 ;
   unsigned char b_hnp_enable : 1 ;
   int devnum_next ;
   struct usb_devmap devmap ;
   struct usb_device *root_hub ;
   struct list_head bus_list ;
   int bandwidth_allocated ;
   int bandwidth_int_reqs ;
   int bandwidth_isoc_reqs ;
   struct dentry *usbfs_dentry ;
   struct device *dev ;
   struct mon_bus *mon_bus ;
   int monitored ;
};
struct usb_tt;
struct usb_device {
   int devnum ;
   char devpath[16U] ;
   enum usb_device_state state ;
   enum usb_device_speed speed ;
   struct usb_tt *tt ;
   int ttport ;
   unsigned int toggle[2U] ;
   struct usb_device *parent ;
   struct usb_bus *bus ;
   struct usb_host_endpoint ep0 ;
   struct device dev ;
   struct usb_device_descriptor descriptor ;
   struct usb_host_config *config ;
   struct usb_host_config *actconfig ;
   struct usb_host_endpoint *ep_in[16U] ;
   struct usb_host_endpoint *ep_out[16U] ;
   char **rawdescriptors ;
   unsigned short bus_mA ;
   u8 portnum ;
   u8 level ;
   unsigned char can_submit : 1 ;
   unsigned char discon_suspended : 1 ;
   unsigned char persist_enabled : 1 ;
   unsigned char have_langid : 1 ;
   unsigned char authorized : 1 ;
   unsigned char authenticated : 1 ;
   unsigned char wusb : 1 ;
   int string_langid ;
   char *product ;
   char *manufacturer ;
   char *serial ;
   struct list_head filelist ;
   struct device *usb_classdev ;
   struct dentry *usbfs_dentry ;
   int maxchild ;
   struct usb_device *children[31U] ;
   int pm_usage_cnt ;
   u32 quirks ;
   atomic_t urbnum ;
   unsigned long active_duration ;
   struct delayed_work autosuspend ;
   struct work_struct autoresume ;
   struct mutex pm_mutex ;
   unsigned long last_busy ;
   int autosuspend_delay ;
   unsigned long connect_time ;
   unsigned char auto_pm : 1 ;
   unsigned char do_remote_wakeup : 1 ;
   unsigned char reset_resume : 1 ;
   unsigned char autosuspend_disabled : 1 ;
   unsigned char autoresume_disabled : 1 ;
   unsigned char skip_sys_resume : 1 ;
   struct wusb_dev *wusb_dev ;
};
struct usb_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
struct usbdrv_wrap {
   struct device_driver driver ;
   int for_devices ;
};
struct usb_driver {
   char const   *name ;
   int (*probe)(struct usb_interface * , struct usb_device_id  const  * ) ;
   void (*disconnect)(struct usb_interface * ) ;
   int (*ioctl)(struct usb_interface * , unsigned int  , void * ) ;
   int (*suspend)(struct usb_interface * , pm_message_t  ) ;
   int (*resume)(struct usb_interface * ) ;
   int (*reset_resume)(struct usb_interface * ) ;
   int (*pre_reset)(struct usb_interface * ) ;
   int (*post_reset)(struct usb_interface * ) ;
   struct usb_device_id  const  *id_table ;
   struct usb_dynids dynids ;
   struct usbdrv_wrap drvwrap ;
   unsigned char no_dynamic_id : 1 ;
   unsigned char supports_autosuspend : 1 ;
   unsigned char soft_unbind : 1 ;
};
struct usb_iso_packet_descriptor {
   unsigned int offset ;
   unsigned int length ;
   unsigned int actual_length ;
   int status ;
};
struct urb;
struct usb_anchor {
   struct list_head urb_list ;
   wait_queue_head_t wait ;
   spinlock_t lock ;
   unsigned char poisoned : 1 ;
};
struct urb {
   struct kref kref ;
   void *hcpriv ;
   atomic_t use_count ;
   atomic_t reject ;
   int unlinked ;
   struct list_head urb_list ;
   struct list_head anchor_list ;
   struct usb_anchor *anchor ;
   struct usb_device *dev ;
   struct usb_host_endpoint *ep ;
   unsigned int pipe ;
   int status ;
   unsigned int transfer_flags ;
   void *transfer_buffer ;
   dma_addr_t transfer_dma ;
   u32 transfer_buffer_length ;
   u32 actual_length ;
   unsigned char *setup_packet ;
   dma_addr_t setup_dma ;
   int start_frame ;
   int number_of_packets ;
   int interval ;
   int error_count ;
   void *context ;
   void (*complete)(struct urb * ) ;
   struct usb_iso_packet_descriptor iso_frame_desc[0U] ;
};
struct usb_serial;
struct usb_serial_port {
   struct usb_serial *serial ;
   struct tty_port port ;
   spinlock_t lock ;
   struct mutex mutex ;
   unsigned char number ;
   unsigned char *interrupt_in_buffer ;
   struct urb *interrupt_in_urb ;
   __u8 interrupt_in_endpointAddress ;
   unsigned char *interrupt_out_buffer ;
   int interrupt_out_size ;
   struct urb *interrupt_out_urb ;
   __u8 interrupt_out_endpointAddress ;
   unsigned char *bulk_in_buffer ;
   int bulk_in_size ;
   struct urb *read_urb ;
   __u8 bulk_in_endpointAddress ;
   unsigned char *bulk_out_buffer ;
   int bulk_out_size ;
   struct urb *write_urb ;
   int write_urb_busy ;
   __u8 bulk_out_endpointAddress ;
   wait_queue_head_t write_wait ;
   struct work_struct work ;
   char throttled ;
   char throttle_req ;
   char console ;
   struct device dev ;
};
struct usb_serial_driver;
struct usb_serial {
   struct usb_device *dev ;
   struct usb_serial_driver *type ;
   struct usb_interface *interface ;
   unsigned char disconnected : 1 ;
   unsigned char suspending : 1 ;
   unsigned char minor ;
   unsigned char num_ports ;
   unsigned char num_port_pointers ;
   char num_interrupt_in ;
   char num_interrupt_out ;
   char num_bulk_in ;
   char num_bulk_out ;
   struct usb_serial_port *port[8U] ;
   struct kref kref ;
   struct mutex disc_mutex ;
   void *private ;
};
struct usb_serial_driver {
   char const   *description ;
   struct usb_device_id  const  *id_table ;
   char num_ports ;
   struct list_head driver_list ;
   struct device_driver driver ;
   struct usb_driver *usb_driver ;
   struct usb_dynids dynids ;
   int (*probe)(struct usb_serial * , struct usb_device_id  const  * ) ;
   int (*attach)(struct usb_serial * ) ;
   int (*calc_num_ports)(struct usb_serial * ) ;
   void (*shutdown)(struct usb_serial * ) ;
   int (*port_probe)(struct usb_serial_port * ) ;
   int (*port_remove)(struct usb_serial_port * ) ;
   int (*suspend)(struct usb_serial * , pm_message_t  ) ;
   int (*resume)(struct usb_serial * ) ;
   int (*open)(struct tty_struct * , struct usb_serial_port * , struct file * ) ;
   void (*close)(struct tty_struct * , struct usb_serial_port * , struct file * ) ;
   int (*write)(struct tty_struct * , struct usb_serial_port * , unsigned char const   * ,
                int  ) ;
   int (*write_room)(struct tty_struct * ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct usb_serial_port * , struct ktermios * ) ;
   void (*break_ctl)(struct tty_struct * , int  ) ;
   int (*chars_in_buffer)(struct tty_struct * ) ;
   void (*throttle)(struct tty_struct * ) ;
   void (*unthrottle)(struct tty_struct * ) ;
   int (*tiocmget)(struct tty_struct * , struct file * ) ;
   int (*tiocmset)(struct tty_struct * , struct file * , unsigned int  , unsigned int  ) ;
   void (*read_int_callback)(struct urb * ) ;
   void (*write_int_callback)(struct urb * ) ;
   void (*read_bulk_callback)(struct urb * ) ;
   void (*write_bulk_callback)(struct urb * ) ;
};
enum __anonenum_102 {
    LDV_SPIN_UNLOCKED = 0,
    LDV_SPIN_LOCKED = 1
} ;
extern int printk(char const   *  , ...) ;
extern void mutex_lock_nested(struct mutex * , unsigned int  ) ;
extern void mutex_unlock(struct mutex * ) ;
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
unsigned long ldv___get_free_pages_2(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) ;
extern void kfree(void const   * ) ;
extern void *kmem_cache_alloc(struct kmem_cache * , gfp_t  ) ;
void *ldv_kmem_cache_alloc_4(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
void *ldv_kmem_cache_alloc_8(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
extern void *__kmalloc(size_t  , gfp_t  ) ;
__inline static void *ldv_kmalloc_3(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
  tmp___2 = __kmalloc(size, flags);
  return (tmp___2);
}
}
__inline static void *kmalloc(size_t size , gfp_t flags ) ;
__inline static void *ldv_kcalloc_6(size_t n , size_t size , gfp_t flags ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  void *tmp ;

  {
  ______f.func = "ldv_kcalloc_6";
  ______f.file = "include/linux/slab.h";
  ______f.line = 213U;
  ______f.ldv_814.ldv_809.correct = 0UL;
  ______f.ldv_814.ldv_809.incorrect = 0UL;
  ______r = size != 0UL && 0xffffffffffffffffUL / size < n;
  if (______r != 0) {
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r != 0) {
    return (0);
  } else {

  }
  tmp = __kmalloc(n * size, flags | 32768U);
  return (tmp);
}
}
__inline static void *kcalloc(size_t n , size_t size , gfp_t flags ) ;
extern struct module __this_module ;
void ldv_check_alloc_flags(gfp_t flags ) ;
extern speed_t tty_get_baud_rate(struct tty_struct * ) ;
extern speed_t tty_termios_baud_rate(struct ktermios * ) ;
extern void tty_encode_baud_rate(struct tty_struct * , speed_t  , speed_t  ) ;
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 


  {
  return ((char const   *)(& dev->bus_id));
}
}
extern char const   *dev_driver_string(struct device  const  * ) ;
extern int usb_reset_device(struct usb_device * ) ;
extern int usb_register_driver(struct usb_driver * , struct module * , char const   * ) ;
__inline static int usb_register(struct usb_driver *driver ) 
{ 
  int tmp ;

  {
  tmp = usb_register_driver(driver, & __this_module, "cp210x");
  return (tmp);
}
}
extern void usb_deregister(struct usb_driver * ) ;
__inline static void usb_fill_bulk_urb(struct urb *urb , struct usb_device *dev ,
                                       unsigned int pipe , void *transfer_buffer ,
                                       int buffer_length , void (*complete_fn)(struct urb * ) ,
                                       void *context ) 
{ 


  {
  urb->dev = dev;
  urb->pipe = pipe;
  urb->transfer_buffer = transfer_buffer;
  urb->transfer_buffer_length = (u32 )buffer_length;
  urb->complete = complete_fn;
  urb->context = context;
  return;
}
}
extern int usb_submit_urb(struct urb * , gfp_t  ) ;
int ldv_usb_submit_urb_11(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
extern void usb_kill_urb(struct urb * ) ;
extern int usb_control_msg(struct usb_device * , unsigned int  , __u8  , __u8  , __u16  ,
                           __u16  , void * , __u16  , int  ) ;
__inline static unsigned int __create_pipe(struct usb_device *dev , unsigned int endpoint ) 
{ 


  {
  return ((unsigned int )(dev->devnum << 8) | (endpoint << 15));
}
}
extern int usb_serial_register(struct usb_serial_driver * ) ;
extern void usb_serial_deregister(struct usb_serial_driver * ) ;
extern int usb_serial_probe(struct usb_interface * , struct usb_device_id  const  * ) ;
extern void usb_serial_disconnect(struct usb_interface * ) ;
static int cp2101_open(struct tty_struct *tty , struct usb_serial_port *port , struct file *filp ) ;
static void cp2101_cleanup(struct usb_serial_port *port ) ;
static void cp2101_close(struct tty_struct *tty , struct usb_serial_port *port , struct file *filp ) ;
static void cp2101_get_termios(struct tty_struct *tty ) ;
static void cp2101_set_termios(struct tty_struct *tty , struct usb_serial_port *port ,
                               struct ktermios *old_termios ) ;
static int cp2101_tiocmget(struct tty_struct *tty , struct file *file ) ;
static int cp2101_tiocmset(struct tty_struct *tty , struct file *file , unsigned int set ,
                           unsigned int clear ) ;
static void cp2101_break_ctl(struct tty_struct *tty , int break_state ) ;
static int cp2101_startup(struct usb_serial *serial ) ;
static void cp2101_shutdown(struct usb_serial *serial ) ;
static int debug  ;
static struct usb_device_id id_table[47U]  = 
  {      {3U, 1137U, 1642U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      1161U, 57344U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      2278U, 21761U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4047U, 4099U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4047U, 4100U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4047U, 4102U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4262U, 43558U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4267U, 4293U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4277U, 44144U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 32778U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 32827U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 32851U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 32852U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 32870U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 32890U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 32970U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 32989U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 33014U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 33045U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 33085U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 33098U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 33099U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 33118U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 33183U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 33190U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 33196U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 33224U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 33250U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 33255U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 33304U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 33323U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 33387U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 33427U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 33601U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 33704U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 60000U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 60001U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 61441U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 61442U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 61443U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4292U, 61444U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      4293U, 60001U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      5037U, 39321U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      5738U, 771U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      5846U, 1U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      6383U, 57359U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}};
struct usb_device_id  const  __mod_usb_device_table  ;
static struct usb_driver cp2101_driver  = 
     {"cp2101", & usb_serial_probe, & usb_serial_disconnect, 0, 0, 0, 0, 0, 0, (struct usb_device_id  const  *)(& id_table),
    {{{0U}, 0U, 0U, 0, {0, 0, 0, 0, 0UL}}, {0, 0}}, {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                      0, 0}, 0}, 1U, (unsigned char)0,
    (unsigned char)0};
static struct usb_serial_driver cp2101_device  = 
     {0, (struct usb_device_id  const  *)(& id_table), 1, {0, 0}, {"cp2101", 0, & __this_module,
                                                                 0, 0, 0, 0, 0, 0,
                                                                 0, 0, 0}, & cp2101_driver,
    {{{0U}, 0U, 0U, 0, {0, 0, 0, 0, 0UL}}, {0, 0}}, 0, & cp2101_startup, 0, & cp2101_shutdown,
    0, 0, 0, 0, & cp2101_open, & cp2101_close, 0, 0, 0, & cp2101_set_termios, & cp2101_break_ctl,
    0, 0, 0, & cp2101_tiocmget, & cp2101_tiocmset, 0, 0, 0, 0};
static int cp2101_get_config(struct usb_serial_port *port , u8 request , unsigned int *data ,
                             int size ) 
{ 
  struct usb_serial *serial ;
  __le32 *buf ;
  int result ;
  int i ;
  int length ;
  void *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  unsigned int tmp___2 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;

  {
  serial = port->serial;
  length = (((size - 1) | 3) + 1) / 4;
  tmp = kcalloc((size_t )length, 4UL, 208U);
  buf = (__le32 *)tmp;
  ______f.func = "cp2101_get_config";
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f.line = 219U;
  ______f.ldv_814.ldv_809.correct = 0UL;
  ______f.ldv_814.ldv_809.incorrect = 0UL;
  ______r = (unsigned long )buf == (unsigned long )((__le32 *)0);
  if (______r != 0) {
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r != 0) {
    tmp___0 = dev_name((struct device  const  *)(& port->dev));
    tmp___1 = dev_driver_string((struct device  const  *)(& port->dev));
    printk("<3>%s %s: %s - out of memory.\n", tmp___1, tmp___0, "cp2101_get_config");
    return (-12);
  } else {

  }
  request = (u8 )((int )request + 1);
  tmp___2 = __create_pipe(serial->dev, 0U);
  result = usb_control_msg(serial->dev, tmp___2 | 2147483776U, (int )request, 193,
                           0, 0, (void *)buf, (int )((__u16 )size), 300);
  i = 0;
  goto ldv_22728;
  ldv_22727: 
  *(data + (unsigned long )i) = *(buf + (unsigned long )i);
  i = i + 1;
  ldv_22728: ;
  if (i < length) {
    goto ldv_22727;
  } else {

  }
  kfree((void const   *)buf);
  ______f___1.func = "cp2101_get_config";
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___1.line = 238U;
  ______f___1.ldv_814.ldv_809.correct = 0UL;
  ______f___1.ldv_814.ldv_809.incorrect = 0UL;
  ______r___1 = result != size;
  if (______r___1 != 0) {
    ______f___1.ldv_814.ldv_813.hit = ______f___1.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___1.ldv_814.ldv_813.miss = ______f___1.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___1 != 0) {
    ______f___0.func = "cp2101_get_config";
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
    ______f___0.line = 241U;
    ______f___0.ldv_814.ldv_809.correct = 0UL;
    ______f___0.ldv_814.ldv_809.incorrect = 0UL;
    ______r___0 = debug != 0;
    if (______r___0 != 0) {
      ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
    } else {
      ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
    }
    if (______r___0 != 0) {
      printk("<7>%s: %s - Unable to send config request, request=0x%x size=%d result=%d\n\n",
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
             "cp2101_get_config", (int )request, size, result);
    } else {

    }
    return (-71);
  } else {

  }
  return (0);
}
}
static int cp2101_set_config(struct usb_serial_port *port , u8 request , unsigned int *data ,
                             int size ) 
{ 
  struct usb_serial *serial ;
  __le32 *buf ;
  int result ;
  int i ;
  int length ;
  void *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  unsigned int tmp___4 ;

  {
  serial = port->serial;
  length = (((size - 1) | 3) + 1) / 4;
  tmp = kmalloc((unsigned long )length * 4UL, 208U);
  buf = (__le32 *)tmp;
  ______f.func = "cp2101_set_config";
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f.line = 265U;
  ______f.ldv_814.ldv_809.correct = 0UL;
  ______f.ldv_814.ldv_809.incorrect = 0UL;
  ______r = (unsigned long )buf == (unsigned long )((__le32 *)0);
  if (______r != 0) {
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r != 0) {
    tmp___0 = dev_name((struct device  const  *)(& port->dev));
    tmp___1 = dev_driver_string((struct device  const  *)(& port->dev));
    printk("<3>%s %s: %s - out of memory.\n", tmp___1, tmp___0, "cp2101_set_config");
    return (-12);
  } else {

  }
  i = 0;
  goto ldv_22752;
  ldv_22751: 
  *(buf + (unsigned long )i) = *(data + (unsigned long )i);
  i = i + 1;
  ldv_22752: ;
  if (i < length) {
    goto ldv_22751;
  } else {

  }
  ______f___0.func = "cp2101_set_config";
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___0.line = 275U;
  ______f___0.ldv_814.ldv_809.correct = 0UL;
  ______f___0.ldv_814.ldv_809.incorrect = 0UL;
  ______r___0 = size > 2;
  if (______r___0 != 0) {
    ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___0 != 0) {
    tmp___2 = __create_pipe(serial->dev, 0U);
    result = usb_control_msg(serial->dev, tmp___2 | 2147483648U, (int )request, 65,
                             0, 0, (void *)buf, (int )((__u16 )size), 300);
  } else {
    tmp___3 = __create_pipe(serial->dev, 0U);
    result = usb_control_msg(serial->dev, tmp___3 | 2147483648U, (int )request, 65,
                             (int )((__u16 )*data), 0, 0, 0, 300);
  }
  kfree((void const   *)buf);
  ______f___2.func = "cp2101_set_config";
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___2.line = 289U;
  ______f___2.ldv_814.ldv_809.correct = 0UL;
  ______f___2.ldv_814.ldv_809.incorrect = 0UL;
  ______r___2 = (size > 2 && result != size) || result < 0;
  if (______r___2 != 0) {
    ______f___2.ldv_814.ldv_813.hit = ______f___2.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___2.ldv_814.ldv_813.miss = ______f___2.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___2 != 0) {
    ______f___1.func = "cp2101_set_config";
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
    ______f___1.line = 292U;
    ______f___1.ldv_814.ldv_809.correct = 0UL;
    ______f___1.ldv_814.ldv_809.incorrect = 0UL;
    ______r___1 = debug != 0;
    if (______r___1 != 0) {
      ______f___1.ldv_814.ldv_813.hit = ______f___1.ldv_814.ldv_813.hit + 1UL;
    } else {
      ______f___1.ldv_814.ldv_813.miss = ______f___1.ldv_814.ldv_813.miss + 1UL;
    }
    if (______r___1 != 0) {
      printk("<7>%s: %s - Unable to send request, request=0x%x size=%d result=%d\n\n",
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
             "cp2101_set_config", (int )request, size, result);
    } else {

    }
    return (-71);
  } else {

  }
  tmp___4 = __create_pipe(serial->dev, 0U);
  result = usb_control_msg(serial->dev, tmp___4 | 2147483648U, (int )request, 65,
                           (int )((__u16 )*data), 0, 0, 0, 300);
  return (0);
}
}
__inline static int cp2101_set_config_single(struct usb_serial_port *port , u8 request ,
                                             unsigned int data ) 
{ 
  int tmp ;

  {
  tmp = cp2101_set_config(port, (int )request, & data, 2);
  return (tmp);
}
}
static unsigned int cp2101_quantise_baudrate(unsigned int baud ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  int ______r___11 ;
  struct ftrace_branch_data ______f___11 ;
  int ______r___12 ;
  struct ftrace_branch_data ______f___12 ;
  int ______r___13 ;
  struct ftrace_branch_data ______f___13 ;
  int ______r___14 ;
  struct ftrace_branch_data ______f___14 ;
  int ______r___15 ;
  struct ftrace_branch_data ______f___15 ;
  int ______r___16 ;
  struct ftrace_branch_data ______f___16 ;
  int ______r___17 ;
  struct ftrace_branch_data ______f___17 ;
  int ______r___18 ;
  struct ftrace_branch_data ______f___18 ;
  int ______r___19 ;
  struct ftrace_branch_data ______f___19 ;
  int ______r___20 ;
  struct ftrace_branch_data ______f___20 ;
  int ______r___21 ;
  struct ftrace_branch_data ______f___21 ;
  int ______r___22 ;
  struct ftrace_branch_data ______f___22 ;
  int ______r___23 ;
  struct ftrace_branch_data ______f___23 ;
  int ______r___24 ;
  struct ftrace_branch_data ______f___24 ;
  int ______r___25 ;
  struct ftrace_branch_data ______f___25 ;
  int ______r___26 ;
  struct ftrace_branch_data ______f___26 ;
  int ______r___27 ;
  struct ftrace_branch_data ______f___27 ;
  int ______r___28 ;
  struct ftrace_branch_data ______f___28 ;
  int ______r___29 ;
  struct ftrace_branch_data ______f___29 ;
  int ______r___30 ;
  struct ftrace_branch_data ______f___30 ;

  {
  ______f___30.func = "cp2101_quantise_baudrate";
  ______f___30.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___30.line = 320U;
  ______f___30.ldv_814.ldv_809.correct = 0UL;
  ______f___30.ldv_814.ldv_809.incorrect = 0UL;
  ______r___30 = baud <= 56U;
  if (______r___30 != 0) {
    ______f___30.ldv_814.ldv_813.hit = ______f___30.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___30.ldv_814.ldv_813.miss = ______f___30.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___30 != 0) {
    baud = 0U;
  } else {
    ______f___29.func = "cp2101_quantise_baudrate";
    ______f___29.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
    ______f___29.line = 321U;
    ______f___29.ldv_814.ldv_809.correct = 0UL;
    ______f___29.ldv_814.ldv_809.incorrect = 0UL;
    ______r___29 = baud <= 300U;
    if (______r___29 != 0) {
      ______f___29.ldv_814.ldv_813.hit = ______f___29.ldv_814.ldv_813.hit + 1UL;
    } else {
      ______f___29.ldv_814.ldv_813.miss = ______f___29.ldv_814.ldv_813.miss + 1UL;
    }
    if (______r___29 != 0) {
      baud = 300U;
    } else {
      ______f___28.func = "cp2101_quantise_baudrate";
      ______f___28.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
      ______f___28.line = 322U;
      ______f___28.ldv_814.ldv_809.correct = 0UL;
      ______f___28.ldv_814.ldv_809.incorrect = 0UL;
      ______r___28 = baud <= 600U;
      if (______r___28 != 0) {
        ______f___28.ldv_814.ldv_813.hit = ______f___28.ldv_814.ldv_813.hit + 1UL;
      } else {
        ______f___28.ldv_814.ldv_813.miss = ______f___28.ldv_814.ldv_813.miss + 1UL;
      }
      if (______r___28 != 0) {
        baud = 600U;
      } else {
        ______f___27.func = "cp2101_quantise_baudrate";
        ______f___27.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
        ______f___27.line = 323U;
        ______f___27.ldv_814.ldv_809.correct = 0UL;
        ______f___27.ldv_814.ldv_809.incorrect = 0UL;
        ______r___27 = baud <= 1200U;
        if (______r___27 != 0) {
          ______f___27.ldv_814.ldv_813.hit = ______f___27.ldv_814.ldv_813.hit + 1UL;
        } else {
          ______f___27.ldv_814.ldv_813.miss = ______f___27.ldv_814.ldv_813.miss + 1UL;
        }
        if (______r___27 != 0) {
          baud = 1200U;
        } else {
          ______f___26.func = "cp2101_quantise_baudrate";
          ______f___26.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
          ______f___26.line = 324U;
          ______f___26.ldv_814.ldv_809.correct = 0UL;
          ______f___26.ldv_814.ldv_809.incorrect = 0UL;
          ______r___26 = baud <= 1800U;
          if (______r___26 != 0) {
            ______f___26.ldv_814.ldv_813.hit = ______f___26.ldv_814.ldv_813.hit + 1UL;
          } else {
            ______f___26.ldv_814.ldv_813.miss = ______f___26.ldv_814.ldv_813.miss + 1UL;
          }
          if (______r___26 != 0) {
            baud = 1800U;
          } else {
            ______f___25.func = "cp2101_quantise_baudrate";
            ______f___25.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
            ______f___25.line = 325U;
            ______f___25.ldv_814.ldv_809.correct = 0UL;
            ______f___25.ldv_814.ldv_809.incorrect = 0UL;
            ______r___25 = baud <= 2400U;
            if (______r___25 != 0) {
              ______f___25.ldv_814.ldv_813.hit = ______f___25.ldv_814.ldv_813.hit + 1UL;
            } else {
              ______f___25.ldv_814.ldv_813.miss = ______f___25.ldv_814.ldv_813.miss + 1UL;
            }
            if (______r___25 != 0) {
              baud = 2400U;
            } else {
              ______f___24.func = "cp2101_quantise_baudrate";
              ______f___24.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
              ______f___24.line = 326U;
              ______f___24.ldv_814.ldv_809.correct = 0UL;
              ______f___24.ldv_814.ldv_809.incorrect = 0UL;
              ______r___24 = baud <= 4000U;
              if (______r___24 != 0) {
                ______f___24.ldv_814.ldv_813.hit = ______f___24.ldv_814.ldv_813.hit + 1UL;
              } else {
                ______f___24.ldv_814.ldv_813.miss = ______f___24.ldv_814.ldv_813.miss + 1UL;
              }
              if (______r___24 != 0) {
                baud = 4000U;
              } else {
                ______f___23.func = "cp2101_quantise_baudrate";
                ______f___23.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                ______f___23.line = 327U;
                ______f___23.ldv_814.ldv_809.correct = 0UL;
                ______f___23.ldv_814.ldv_809.incorrect = 0UL;
                ______r___23 = baud <= 4803U;
                if (______r___23 != 0) {
                  ______f___23.ldv_814.ldv_813.hit = ______f___23.ldv_814.ldv_813.hit + 1UL;
                } else {
                  ______f___23.ldv_814.ldv_813.miss = ______f___23.ldv_814.ldv_813.miss + 1UL;
                }
                if (______r___23 != 0) {
                  baud = 4800U;
                } else {
                  ______f___22.func = "cp2101_quantise_baudrate";
                  ______f___22.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                  ______f___22.line = 328U;
                  ______f___22.ldv_814.ldv_809.correct = 0UL;
                  ______f___22.ldv_814.ldv_809.incorrect = 0UL;
                  ______r___22 = baud <= 7207U;
                  if (______r___22 != 0) {
                    ______f___22.ldv_814.ldv_813.hit = ______f___22.ldv_814.ldv_813.hit + 1UL;
                  } else {
                    ______f___22.ldv_814.ldv_813.miss = ______f___22.ldv_814.ldv_813.miss + 1UL;
                  }
                  if (______r___22 != 0) {
                    baud = 7200U;
                  } else {
                    ______f___21.func = "cp2101_quantise_baudrate";
                    ______f___21.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                    ______f___21.line = 329U;
                    ______f___21.ldv_814.ldv_809.correct = 0UL;
                    ______f___21.ldv_814.ldv_809.incorrect = 0UL;
                    ______r___21 = baud <= 9612U;
                    if (______r___21 != 0) {
                      ______f___21.ldv_814.ldv_813.hit = ______f___21.ldv_814.ldv_813.hit + 1UL;
                    } else {
                      ______f___21.ldv_814.ldv_813.miss = ______f___21.ldv_814.ldv_813.miss + 1UL;
                    }
                    if (______r___21 != 0) {
                      baud = 9600U;
                    } else {
                      ______f___20.func = "cp2101_quantise_baudrate";
                      ______f___20.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                      ______f___20.line = 330U;
                      ______f___20.ldv_814.ldv_809.correct = 0UL;
                      ______f___20.ldv_814.ldv_809.incorrect = 0UL;
                      ______r___20 = baud <= 14428U;
                      if (______r___20 != 0) {
                        ______f___20.ldv_814.ldv_813.hit = ______f___20.ldv_814.ldv_813.hit + 1UL;
                      } else {
                        ______f___20.ldv_814.ldv_813.miss = ______f___20.ldv_814.ldv_813.miss + 1UL;
                      }
                      if (______r___20 != 0) {
                        baud = 14400U;
                      } else {
                        ______f___19.func = "cp2101_quantise_baudrate";
                        ______f___19.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                        ______f___19.line = 331U;
                        ______f___19.ldv_814.ldv_809.correct = 0UL;
                        ______f___19.ldv_814.ldv_809.incorrect = 0UL;
                        ______r___19 = baud <= 16062U;
                        if (______r___19 != 0) {
                          ______f___19.ldv_814.ldv_813.hit = ______f___19.ldv_814.ldv_813.hit + 1UL;
                        } else {
                          ______f___19.ldv_814.ldv_813.miss = ______f___19.ldv_814.ldv_813.miss + 1UL;
                        }
                        if (______r___19 != 0) {
                          baud = 16000U;
                        } else {
                          ______f___18.func = "cp2101_quantise_baudrate";
                          ______f___18.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                          ______f___18.line = 332U;
                          ______f___18.ldv_814.ldv_809.correct = 0UL;
                          ______f___18.ldv_814.ldv_809.incorrect = 0UL;
                          ______r___18 = baud <= 19250U;
                          if (______r___18 != 0) {
                            ______f___18.ldv_814.ldv_813.hit = ______f___18.ldv_814.ldv_813.hit + 1UL;
                          } else {
                            ______f___18.ldv_814.ldv_813.miss = ______f___18.ldv_814.ldv_813.miss + 1UL;
                          }
                          if (______r___18 != 0) {
                            baud = 19200U;
                          } else {
                            ______f___17.func = "cp2101_quantise_baudrate";
                            ______f___17.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                            ______f___17.line = 333U;
                            ______f___17.ldv_814.ldv_809.correct = 0UL;
                            ______f___17.ldv_814.ldv_809.incorrect = 0UL;
                            ______r___17 = baud <= 28912U;
                            if (______r___17 != 0) {
                              ______f___17.ldv_814.ldv_813.hit = ______f___17.ldv_814.ldv_813.hit + 1UL;
                            } else {
                              ______f___17.ldv_814.ldv_813.miss = ______f___17.ldv_814.ldv_813.miss + 1UL;
                            }
                            if (______r___17 != 0) {
                              baud = 28800U;
                            } else {
                              ______f___16.func = "cp2101_quantise_baudrate";
                              ______f___16.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                              ______f___16.line = 334U;
                              ______f___16.ldv_814.ldv_809.correct = 0UL;
                              ______f___16.ldv_814.ldv_809.incorrect = 0UL;
                              ______r___16 = baud <= 38601U;
                              if (______r___16 != 0) {
                                ______f___16.ldv_814.ldv_813.hit = ______f___16.ldv_814.ldv_813.hit + 1UL;
                              } else {
                                ______f___16.ldv_814.ldv_813.miss = ______f___16.ldv_814.ldv_813.miss + 1UL;
                              }
                              if (______r___16 != 0) {
                                baud = 38400U;
                              } else {
                                ______f___15.func = "cp2101_quantise_baudrate";
                                ______f___15.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                                ______f___15.line = 335U;
                                ______f___15.ldv_814.ldv_809.correct = 0UL;
                                ______f___15.ldv_814.ldv_809.incorrect = 0UL;
                                ______r___15 = baud <= 51558U;
                                if (______r___15 != 0) {
                                  ______f___15.ldv_814.ldv_813.hit = ______f___15.ldv_814.ldv_813.hit + 1UL;
                                } else {
                                  ______f___15.ldv_814.ldv_813.miss = ______f___15.ldv_814.ldv_813.miss + 1UL;
                                }
                                if (______r___15 != 0) {
                                  baud = 51200U;
                                } else {
                                  ______f___14.func = "cp2101_quantise_baudrate";
                                  ______f___14.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                                  ______f___14.line = 336U;
                                  ______f___14.ldv_814.ldv_809.correct = 0UL;
                                  ______f___14.ldv_814.ldv_809.incorrect = 0UL;
                                  ______r___14 = baud <= 56280U;
                                  if (______r___14 != 0) {
                                    ______f___14.ldv_814.ldv_813.hit = ______f___14.ldv_814.ldv_813.hit + 1UL;
                                  } else {
                                    ______f___14.ldv_814.ldv_813.miss = ______f___14.ldv_814.ldv_813.miss + 1UL;
                                  }
                                  if (______r___14 != 0) {
                                    baud = 56000U;
                                  } else {
                                    ______f___13.func = "cp2101_quantise_baudrate";
                                    ______f___13.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                                    ______f___13.line = 337U;
                                    ______f___13.ldv_814.ldv_809.correct = 0UL;
                                    ______f___13.ldv_814.ldv_809.incorrect = 0UL;
                                    ______r___13 = baud <= 58053U;
                                    if (______r___13 != 0) {
                                      ______f___13.ldv_814.ldv_813.hit = ______f___13.ldv_814.ldv_813.hit + 1UL;
                                    } else {
                                      ______f___13.ldv_814.ldv_813.miss = ______f___13.ldv_814.ldv_813.miss + 1UL;
                                    }
                                    if (______r___13 != 0) {
                                      baud = 57600U;
                                    } else {
                                      ______f___12.func = "cp2101_quantise_baudrate";
                                      ______f___12.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                                      ______f___12.line = 338U;
                                      ______f___12.ldv_814.ldv_809.correct = 0UL;
                                      ______f___12.ldv_814.ldv_809.incorrect = 0UL;
                                      ______r___12 = baud <= 64111U;
                                      if (______r___12 != 0) {
                                        ______f___12.ldv_814.ldv_813.hit = ______f___12.ldv_814.ldv_813.hit + 1UL;
                                      } else {
                                        ______f___12.ldv_814.ldv_813.miss = ______f___12.ldv_814.ldv_813.miss + 1UL;
                                      }
                                      if (______r___12 != 0) {
                                        baud = 64000U;
                                      } else {
                                        ______f___11.func = "cp2101_quantise_baudrate";
                                        ______f___11.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                                        ______f___11.line = 339U;
                                        ______f___11.ldv_814.ldv_809.correct = 0UL;
                                        ______f___11.ldv_814.ldv_809.incorrect = 0UL;
                                        ______r___11 = baud <= 77608U;
                                        if (______r___11 != 0) {
                                          ______f___11.ldv_814.ldv_813.hit = ______f___11.ldv_814.ldv_813.hit + 1UL;
                                        } else {
                                          ______f___11.ldv_814.ldv_813.miss = ______f___11.ldv_814.ldv_813.miss + 1UL;
                                        }
                                        if (______r___11 != 0) {
                                          baud = 76800U;
                                        } else {
                                          ______f___10.func = "cp2101_quantise_baudrate";
                                          ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                                          ______f___10.line = 340U;
                                          ______f___10.ldv_814.ldv_809.correct = 0UL;
                                          ______f___10.ldv_814.ldv_809.incorrect = 0UL;
                                          ______r___10 = baud <= 117028U;
                                          if (______r___10 != 0) {
                                            ______f___10.ldv_814.ldv_813.hit = ______f___10.ldv_814.ldv_813.hit + 1UL;
                                          } else {
                                            ______f___10.ldv_814.ldv_813.miss = ______f___10.ldv_814.ldv_813.miss + 1UL;
                                          }
                                          if (______r___10 != 0) {
                                            baud = 115200U;
                                          } else {
                                            ______f___9.func = "cp2101_quantise_baudrate";
                                            ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                                            ______f___9.line = 341U;
                                            ______f___9.ldv_814.ldv_809.correct = 0UL;
                                            ______f___9.ldv_814.ldv_809.incorrect = 0UL;
                                            ______r___9 = baud <= 129347U;
                                            if (______r___9 != 0) {
                                              ______f___9.ldv_814.ldv_813.hit = ______f___9.ldv_814.ldv_813.hit + 1UL;
                                            } else {
                                              ______f___9.ldv_814.ldv_813.miss = ______f___9.ldv_814.ldv_813.miss + 1UL;
                                            }
                                            if (______r___9 != 0) {
                                              baud = 128000U;
                                            } else {
                                              ______f___8.func = "cp2101_quantise_baudrate";
                                              ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                                              ______f___8.line = 342U;
                                              ______f___8.ldv_814.ldv_809.correct = 0UL;
                                              ______f___8.ldv_814.ldv_809.incorrect = 0UL;
                                              ______r___8 = baud <= 156868U;
                                              if (______r___8 != 0) {
                                                ______f___8.ldv_814.ldv_813.hit = ______f___8.ldv_814.ldv_813.hit + 1UL;
                                              } else {
                                                ______f___8.ldv_814.ldv_813.miss = ______f___8.ldv_814.ldv_813.miss + 1UL;
                                              }
                                              if (______r___8 != 0) {
                                                baud = 153600U;
                                              } else {
                                                ______f___7.func = "cp2101_quantise_baudrate";
                                                ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                                                ______f___7.line = 343U;
                                                ______f___7.ldv_814.ldv_809.correct = 0UL;
                                                ______f___7.ldv_814.ldv_809.incorrect = 0UL;
                                                ______r___7 = baud <= 237832U;
                                                if (______r___7 != 0) {
                                                  ______f___7.ldv_814.ldv_813.hit = ______f___7.ldv_814.ldv_813.hit + 1UL;
                                                } else {
                                                  ______f___7.ldv_814.ldv_813.miss = ______f___7.ldv_814.ldv_813.miss + 1UL;
                                                }
                                                if (______r___7 != 0) {
                                                  baud = 230400U;
                                                } else {
                                                  ______f___6.func = "cp2101_quantise_baudrate";
                                                  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                                                  ______f___6.line = 344U;
                                                  ______f___6.ldv_814.ldv_809.correct = 0UL;
                                                  ______f___6.ldv_814.ldv_809.incorrect = 0UL;
                                                  ______r___6 = baud <= 254234U;
                                                  if (______r___6 != 0) {
                                                    ______f___6.ldv_814.ldv_813.hit = ______f___6.ldv_814.ldv_813.hit + 1UL;
                                                  } else {
                                                    ______f___6.ldv_814.ldv_813.miss = ______f___6.ldv_814.ldv_813.miss + 1UL;
                                                  }
                                                  if (______r___6 != 0) {
                                                    baud = 250000U;
                                                  } else {
                                                    ______f___5.func = "cp2101_quantise_baudrate";
                                                    ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                                                    ______f___5.line = 345U;
                                                    ______f___5.ldv_814.ldv_809.correct = 0UL;
                                                    ______f___5.ldv_814.ldv_809.incorrect = 0UL;
                                                    ______r___5 = baud <= 273066U;
                                                    if (______r___5 != 0) {
                                                      ______f___5.ldv_814.ldv_813.hit = ______f___5.ldv_814.ldv_813.hit + 1UL;
                                                    } else {
                                                      ______f___5.ldv_814.ldv_813.miss = ______f___5.ldv_814.ldv_813.miss + 1UL;
                                                    }
                                                    if (______r___5 != 0) {
                                                      baud = 256000U;
                                                    } else {
                                                      ______f___4.func = "cp2101_quantise_baudrate";
                                                      ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                                                      ______f___4.line = 346U;
                                                      ______f___4.ldv_814.ldv_809.correct = 0UL;
                                                      ______f___4.ldv_814.ldv_809.incorrect = 0UL;
                                                      ______r___4 = baud <= 491520U;
                                                      if (______r___4 != 0) {
                                                        ______f___4.ldv_814.ldv_813.hit = ______f___4.ldv_814.ldv_813.hit + 1UL;
                                                      } else {
                                                        ______f___4.ldv_814.ldv_813.miss = ______f___4.ldv_814.ldv_813.miss + 1UL;
                                                      }
                                                      if (______r___4 != 0) {
                                                        baud = 460800U;
                                                      } else {
                                                        ______f___3.func = "cp2101_quantise_baudrate";
                                                        ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                                                        ______f___3.line = 347U;
                                                        ______f___3.ldv_814.ldv_809.correct = 0UL;
                                                        ______f___3.ldv_814.ldv_809.incorrect = 0UL;
                                                        ______r___3 = baud <= 567138U;
                                                        if (______r___3 != 0) {
                                                          ______f___3.ldv_814.ldv_813.hit = ______f___3.ldv_814.ldv_813.hit + 1UL;
                                                        } else {
                                                          ______f___3.ldv_814.ldv_813.miss = ______f___3.ldv_814.ldv_813.miss + 1UL;
                                                        }
                                                        if (______r___3 != 0) {
                                                          baud = 500000U;
                                                        } else {
                                                          ______f___2.func = "cp2101_quantise_baudrate";
                                                          ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                                                          ______f___2.line = 348U;
                                                          ______f___2.ldv_814.ldv_809.correct = 0UL;
                                                          ______f___2.ldv_814.ldv_809.incorrect = 0UL;
                                                          ______r___2 = baud <= 670254U;
                                                          if (______r___2 != 0) {
                                                            ______f___2.ldv_814.ldv_813.hit = ______f___2.ldv_814.ldv_813.hit + 1UL;
                                                          } else {
                                                            ______f___2.ldv_814.ldv_813.miss = ______f___2.ldv_814.ldv_813.miss + 1UL;
                                                          }
                                                          if (______r___2 != 0) {
                                                            baud = 576000U;
                                                          } else {
                                                            ______f___1.func = "cp2101_quantise_baudrate";
                                                            ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                                                            ______f___1.line = 349U;
                                                            ______f___1.ldv_814.ldv_809.correct = 0UL;
                                                            ______f___1.ldv_814.ldv_809.incorrect = 0UL;
                                                            ______r___1 = baud <= 1053257U;
                                                            if (______r___1 != 0) {
                                                              ______f___1.ldv_814.ldv_813.hit = ______f___1.ldv_814.ldv_813.hit + 1UL;
                                                            } else {
                                                              ______f___1.ldv_814.ldv_813.miss = ______f___1.ldv_814.ldv_813.miss + 1UL;
                                                            }
                                                            if (______r___1 != 0) {
                                                              baud = 921600U;
                                                            } else {
                                                              ______f___0.func = "cp2101_quantise_baudrate";
                                                              ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                                                              ______f___0.line = 350U;
                                                              ______f___0.ldv_814.ldv_809.correct = 0UL;
                                                              ______f___0.ldv_814.ldv_809.incorrect = 0UL;
                                                              ______r___0 = baud <= 1474560U;
                                                              if (______r___0 != 0) {
                                                                ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
                                                              } else {
                                                                ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
                                                              }
                                                              if (______r___0 != 0) {
                                                                baud = 1228800U;
                                                              } else {
                                                                ______f.func = "cp2101_quantise_baudrate";
                                                                ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
                                                                ______f.line = 351U;
                                                                ______f.ldv_814.ldv_809.correct = 0UL;
                                                                ______f.ldv_814.ldv_809.incorrect = 0UL;
                                                                ______r = baud <= 2457600U;
                                                                if (______r != 0) {
                                                                  ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
                                                                } else {
                                                                  ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
                                                                }
                                                                if (______r != 0) {
                                                                  baud = 1843200U;
                                                                } else {
                                                                  baud = 3686400U;
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return (baud);
}
}
static int cp2101_open(struct tty_struct *tty , struct usb_serial_port *port , struct file *filp ) 
{ 
  struct usb_serial *serial ;
  int result ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp___1 ;
  unsigned int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;

  {
  serial = port->serial;
  ______f.func = "cp2101_open";
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f.line = 362U;
  ______f.ldv_814.ldv_809.correct = 0UL;
  ______f.ldv_814.ldv_809.incorrect = 0UL;
  ______r = debug != 0;
  if (______r != 0) {
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r != 0) {
    printk("<7>%s: %s - port %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_open", (int )port->number);
  } else {

  }
  ______f___0.func = "cp2101_open";
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___0.line = 364U;
  ______f___0.ldv_814.ldv_809.correct = 0UL;
  ______f___0.ldv_814.ldv_809.incorrect = 0UL;
  tmp___1 = cp2101_set_config_single(port, 0, 1U);
  ______r___0 = tmp___1 != 0;
  if (______r___0 != 0) {
    ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___0 != 0) {
    tmp = dev_name((struct device  const  *)(& port->dev));
    tmp___0 = dev_driver_string((struct device  const  *)(& port->dev));
    printk("<3>%s %s: %s - Unable to enable UART\n", tmp___0, tmp, "cp2101_open");
    return (-71);
  } else {

  }
  tmp___2 = __create_pipe(serial->dev, (unsigned int )port->bulk_in_endpointAddress);
  usb_fill_bulk_urb(port->read_urb, serial->dev, tmp___2 | 3221225600U, (port->read_urb)->transfer_buffer,
                    (int )(port->read_urb)->transfer_buffer_length, (serial->type)->read_bulk_callback,
                    (void *)port);
  result = ldv_usb_submit_urb_11(port->read_urb, 208U);
  ______f___1.func = "cp2101_open";
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___1.line = 379U;
  ______f___1.ldv_814.ldv_809.correct = 0UL;
  ______f___1.ldv_814.ldv_809.incorrect = 0UL;
  ______r___1 = result != 0;
  if (______r___1 != 0) {
    ______f___1.ldv_814.ldv_813.hit = ______f___1.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___1.ldv_814.ldv_813.miss = ______f___1.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___1 != 0) {
    tmp___3 = dev_name((struct device  const  *)(& port->dev));
    tmp___4 = dev_driver_string((struct device  const  *)(& port->dev));
    printk("<3>%s %s: %s - failed resubmitting read urb, error %d\n", tmp___4, tmp___3,
           "cp2101_open", result);
    return (result);
  } else {

  }
  cp2101_get_termios(tty);
  cp2101_tiocmset(tty, 0, 6U, 0U);
  return (0);
}
}
static void cp2101_cleanup(struct usb_serial_port *port ) 
{ 
  struct usb_serial *serial ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;

  {
  serial = port->serial;
  ______f.func = "cp2101_cleanup";
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f.line = 398U;
  ______f.ldv_814.ldv_809.correct = 0UL;
  ______f.ldv_814.ldv_809.incorrect = 0UL;
  ______r = debug != 0;
  if (______r != 0) {
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r != 0) {
    printk("<7>%s: %s - port %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_cleanup", (int )port->number);
  } else {

  }
  ______f___2.func = "cp2101_cleanup";
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___2.line = 400U;
  ______f___2.ldv_814.ldv_809.correct = 0UL;
  ______f___2.ldv_814.ldv_809.incorrect = 0UL;
  ______r___2 = (unsigned long )serial->dev != (unsigned long )((struct usb_device *)0);
  if (______r___2 != 0) {
    ______f___2.ldv_814.ldv_813.hit = ______f___2.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___2.ldv_814.ldv_813.miss = ______f___2.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___2 != 0) {
    ______f___0.func = "cp2101_cleanup";
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
    ______f___0.line = 402U;
    ______f___0.ldv_814.ldv_809.correct = 0UL;
    ______f___0.ldv_814.ldv_809.incorrect = 0UL;
    ______r___0 = (int )((signed char )serial->num_bulk_out) != 0;
    if (______r___0 != 0) {
      ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
    } else {
      ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
    }
    if (______r___0 != 0) {
      usb_kill_urb(port->write_urb);
    } else {

    }
    ______f___1.func = "cp2101_cleanup";
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
    ______f___1.line = 404U;
    ______f___1.ldv_814.ldv_809.correct = 0UL;
    ______f___1.ldv_814.ldv_809.incorrect = 0UL;
    ______r___1 = (int )((signed char )serial->num_bulk_in) != 0;
    if (______r___1 != 0) {
      ______f___1.ldv_814.ldv_813.hit = ______f___1.ldv_814.ldv_813.hit + 1UL;
    } else {
      ______f___1.ldv_814.ldv_813.miss = ______f___1.ldv_814.ldv_813.miss + 1UL;
    }
    if (______r___1 != 0) {
      usb_kill_urb(port->read_urb);
    } else {

    }
  } else {

  }
  return;
}
}
static void cp2101_close(struct tty_struct *tty , struct usb_serial_port *port , struct file *filp ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;

  {
  ______f.func = "cp2101_close";
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f.line = 412U;
  ______f.ldv_814.ldv_809.correct = 0UL;
  ______f.ldv_814.ldv_809.incorrect = 0UL;
  ______r = debug != 0;
  if (______r != 0) {
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r != 0) {
    printk("<7>%s: %s - port %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_close", (int )port->number);
  } else {

  }
  ______f___0.func = "cp2101_close";
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___0.line = 415U;
  ______f___0.ldv_814.ldv_809.correct = 0UL;
  ______f___0.ldv_814.ldv_809.incorrect = 0UL;
  ______r___0 = debug != 0;
  if (______r___0 != 0) {
    ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___0 != 0) {
    printk("<7>%s: %s - shutting down urbs\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_close");
  } else {

  }
  usb_kill_urb(port->write_urb);
  usb_kill_urb(port->read_urb);
  mutex_lock_nested(& (port->serial)->disc_mutex, 0U);
  ______f___1.func = "cp2101_close";
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___1.line = 420U;
  ______f___1.ldv_814.ldv_809.correct = 0UL;
  ______f___1.ldv_814.ldv_809.incorrect = 0UL;
  ______r___1 = (unsigned int )*((unsigned char *)port->serial + 24UL) == 0U;
  if (______r___1 != 0) {
    ______f___1.ldv_814.ldv_813.hit = ______f___1.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___1.ldv_814.ldv_813.miss = ______f___1.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___1 != 0) {
    cp2101_set_config_single(port, 0, 0U);
  } else {

  }
  mutex_unlock(& (port->serial)->disc_mutex);
  return;
}
}
static void cp2101_get_termios(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  unsigned int cflag ;
  unsigned int modem_ctl[4U] ;
  unsigned int baud ;
  unsigned int bits ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  int ______r___11 ;
  struct ftrace_branch_data ______f___11 ;
  int ______r___12 ;
  struct ftrace_branch_data ______f___12 ;
  int ______r___13 ;
  struct ftrace_branch_data ______f___13 ;
  int ______r___14 ;
  struct ftrace_branch_data ______f___14 ;
  int ______r___15 ;
  struct ftrace_branch_data ______f___15 ;
  int ______r___16 ;
  struct ftrace_branch_data ______f___16 ;
  int ______r___17 ;
  struct ftrace_branch_data ______f___17 ;
  int ______r___18 ;
  struct ftrace_branch_data ______f___18 ;
  int ______r___19 ;
  struct ftrace_branch_data ______f___19 ;
  int ______r___20 ;
  struct ftrace_branch_data ______f___20 ;

  {
  port = (struct usb_serial_port *)tty->driver_data;
  ______f.func = "cp2101_get_termios";
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f.line = 438U;
  ______f.ldv_814.ldv_809.correct = 0UL;
  ______f.ldv_814.ldv_809.incorrect = 0UL;
  ______r = debug != 0;
  if (______r != 0) {
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r != 0) {
    printk("<7>%s: %s - port %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_get_termios", (int )port->number);
  } else {

  }
  cp2101_get_config(port, 1, & baud, 2);
  ______f___0.func = "cp2101_get_termios";
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___0.line = 442U;
  ______f___0.ldv_814.ldv_809.correct = 0UL;
  ______f___0.ldv_814.ldv_809.incorrect = 0UL;
  ______r___0 = baud != 0U;
  if (______r___0 != 0) {
    ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___0 != 0) {
    baud = cp2101_quantise_baudrate((baud / 2U + 3686400U) / baud);
  } else {

  }
  ______f___1.func = "cp2101_get_termios";
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___1.line = 445U;
  ______f___1.ldv_814.ldv_809.correct = 0UL;
  ______f___1.ldv_814.ldv_809.incorrect = 0UL;
  ______r___1 = debug != 0;
  if (______r___1 != 0) {
    ______f___1.ldv_814.ldv_813.hit = ______f___1.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___1.ldv_814.ldv_813.miss = ______f___1.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___1 != 0) {
    printk("<7>%s: %s - baud rate = %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_get_termios", baud);
  } else {

  }
  tty_encode_baud_rate(tty, baud, baud);
  cflag = (tty->termios)->c_cflag;
  cp2101_get_config(port, 3, & bits, 2);
  cflag = cflag & 4294967247U;
  switch (bits & 3840U) {
  case 1280U: 
  ______f___2.func = "cp2101_get_termios";
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___2.line = 454U;
  ______f___2.ldv_814.ldv_809.correct = 0UL;
  ______f___2.ldv_814.ldv_809.incorrect = 0UL;
  ______r___2 = debug != 0;
  if (______r___2 != 0) {
    ______f___2.ldv_814.ldv_813.hit = ______f___2.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___2.ldv_814.ldv_813.miss = ______f___2.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___2 != 0) {
    printk("<7>%s: %s - data bits = 5\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_get_termios");
  } else {

  }
  cflag = cflag;
  goto ldv_22939;
  case 1536U: 
  ______f___3.func = "cp2101_get_termios";
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___3.line = 458U;
  ______f___3.ldv_814.ldv_809.correct = 0UL;
  ______f___3.ldv_814.ldv_809.incorrect = 0UL;
  ______r___3 = debug != 0;
  if (______r___3 != 0) {
    ______f___3.ldv_814.ldv_813.hit = ______f___3.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___3.ldv_814.ldv_813.miss = ______f___3.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___3 != 0) {
    printk("<7>%s: %s - data bits = 6\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_get_termios");
  } else {

  }
  cflag = cflag | 16U;
  goto ldv_22939;
  case 1792U: 
  ______f___4.func = "cp2101_get_termios";
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___4.line = 462U;
  ______f___4.ldv_814.ldv_809.correct = 0UL;
  ______f___4.ldv_814.ldv_809.incorrect = 0UL;
  ______r___4 = debug != 0;
  if (______r___4 != 0) {
    ______f___4.ldv_814.ldv_813.hit = ______f___4.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___4.ldv_814.ldv_813.miss = ______f___4.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___4 != 0) {
    printk("<7>%s: %s - data bits = 7\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_get_termios");
  } else {

  }
  cflag = cflag | 32U;
  goto ldv_22939;
  case 2048U: 
  ______f___5.func = "cp2101_get_termios";
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___5.line = 466U;
  ______f___5.ldv_814.ldv_809.correct = 0UL;
  ______f___5.ldv_814.ldv_809.incorrect = 0UL;
  ______r___5 = debug != 0;
  if (______r___5 != 0) {
    ______f___5.ldv_814.ldv_813.hit = ______f___5.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___5.ldv_814.ldv_813.miss = ______f___5.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___5 != 0) {
    printk("<7>%s: %s - data bits = 8\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_get_termios");
  } else {

  }
  cflag = cflag | 48U;
  goto ldv_22939;
  case 2304U: 
  ______f___6.func = "cp2101_get_termios";
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___6.line = 471U;
  ______f___6.ldv_814.ldv_809.correct = 0UL;
  ______f___6.ldv_814.ldv_809.incorrect = 0UL;
  ______r___6 = debug != 0;
  if (______r___6 != 0) {
    ______f___6.ldv_814.ldv_813.hit = ______f___6.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___6.ldv_814.ldv_813.miss = ______f___6.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___6 != 0) {
    printk("<7>%s: %s - data bits = 9 (not supported, using 8 data bits)\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_get_termios");
  } else {

  }
  cflag = cflag | 48U;
  bits = bits & 4294963455U;
  bits = bits | 2048U;
  cp2101_set_config(port, 3, & bits, 2);
  goto ldv_22939;
  default: 
  ______f___7.func = "cp2101_get_termios";
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___7.line = 478U;
  ______f___7.ldv_814.ldv_809.correct = 0UL;
  ______f___7.ldv_814.ldv_809.incorrect = 0UL;
  ______r___7 = debug != 0;
  if (______r___7 != 0) {
    ______f___7.ldv_814.ldv_813.hit = ______f___7.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___7.ldv_814.ldv_813.miss = ______f___7.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___7 != 0) {
    printk("<7>%s: %s - Unknown number of data bits, using 8\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_get_termios");
  } else {

  }
  cflag = cflag | 48U;
  bits = bits & 4294963455U;
  bits = bits | 2048U;
  cp2101_set_config(port, 3, & bits, 2);
  goto ldv_22939;
  }
  ldv_22939: ;
  switch (bits & 240U) {
  case 0U: 
  ______f___8.func = "cp2101_get_termios";
  ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___8.line = 488U;
  ______f___8.ldv_814.ldv_809.correct = 0UL;
  ______f___8.ldv_814.ldv_809.incorrect = 0UL;
  ______r___8 = debug != 0;
  if (______r___8 != 0) {
    ______f___8.ldv_814.ldv_813.hit = ______f___8.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___8.ldv_814.ldv_813.miss = ______f___8.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___8 != 0) {
    printk("<7>%s: %s - parity = NONE\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_get_termios");
  } else {

  }
  cflag = cflag & 4294967039U;
  goto ldv_22964;
  case 16U: 
  ______f___9.func = "cp2101_get_termios";
  ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___9.line = 492U;
  ______f___9.ldv_814.ldv_809.correct = 0UL;
  ______f___9.ldv_814.ldv_809.incorrect = 0UL;
  ______r___9 = debug != 0;
  if (______r___9 != 0) {
    ______f___9.ldv_814.ldv_813.hit = ______f___9.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___9.ldv_814.ldv_813.miss = ______f___9.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___9 != 0) {
    printk("<7>%s: %s - parity = ODD\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_get_termios");
  } else {

  }
  cflag = cflag | 768U;
  goto ldv_22964;
  case 32U: 
  ______f___10.func = "cp2101_get_termios";
  ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___10.line = 496U;
  ______f___10.ldv_814.ldv_809.correct = 0UL;
  ______f___10.ldv_814.ldv_809.incorrect = 0UL;
  ______r___10 = debug != 0;
  if (______r___10 != 0) {
    ______f___10.ldv_814.ldv_813.hit = ______f___10.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___10.ldv_814.ldv_813.miss = ______f___10.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___10 != 0) {
    printk("<7>%s: %s - parity = EVEN\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_get_termios");
  } else {

  }
  cflag = cflag & 4294966783U;
  cflag = cflag | 256U;
  goto ldv_22964;
  case 48U: 
  ______f___11.func = "cp2101_get_termios";
  ______f___11.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___11.line = 502U;
  ______f___11.ldv_814.ldv_809.correct = 0UL;
  ______f___11.ldv_814.ldv_809.incorrect = 0UL;
  ______r___11 = debug != 0;
  if (______r___11 != 0) {
    ______f___11.ldv_814.ldv_813.hit = ______f___11.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___11.ldv_814.ldv_813.miss = ______f___11.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___11 != 0) {
    printk("<7>%s: %s - parity = MARK (not supported, disabling parity)\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_get_termios");
  } else {

  }
  cflag = cflag & 4294967039U;
  bits = bits & 4294967055U;
  cp2101_set_config(port, 3, & bits, 2);
  goto ldv_22964;
  case 64U: 
  ______f___12.func = "cp2101_get_termios";
  ______f___12.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___12.line = 509U;
  ______f___12.ldv_814.ldv_809.correct = 0UL;
  ______f___12.ldv_814.ldv_809.incorrect = 0UL;
  ______r___12 = debug != 0;
  if (______r___12 != 0) {
    ______f___12.ldv_814.ldv_813.hit = ______f___12.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___12.ldv_814.ldv_813.miss = ______f___12.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___12 != 0) {
    printk("<7>%s: %s - parity = SPACE (not supported, disabling parity)\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_get_termios");
  } else {

  }
  cflag = cflag & 4294967039U;
  bits = bits & 4294967055U;
  cp2101_set_config(port, 3, & bits, 2);
  goto ldv_22964;
  default: 
  ______f___13.func = "cp2101_get_termios";
  ______f___13.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___13.line = 515U;
  ______f___13.ldv_814.ldv_809.correct = 0UL;
  ______f___13.ldv_814.ldv_809.incorrect = 0UL;
  ______r___13 = debug != 0;
  if (______r___13 != 0) {
    ______f___13.ldv_814.ldv_813.hit = ______f___13.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___13.ldv_814.ldv_813.miss = ______f___13.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___13 != 0) {
    printk("<7>%s: %s - Unknown parity mode, disabling parity\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_get_termios");
  } else {

  }
  cflag = cflag & 4294967039U;
  bits = bits & 4294967055U;
  cp2101_set_config(port, 3, & bits, 2);
  goto ldv_22964;
  }
  ldv_22964: 
  cflag = cflag & 4294967231U;
  switch (bits & 15U) {
  case 0U: 
  ______f___14.func = "cp2101_get_termios";
  ______f___14.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___14.line = 525U;
  ______f___14.ldv_814.ldv_809.correct = 0UL;
  ______f___14.ldv_814.ldv_809.incorrect = 0UL;
  ______r___14 = debug != 0;
  if (______r___14 != 0) {
    ______f___14.ldv_814.ldv_813.hit = ______f___14.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___14.ldv_814.ldv_813.miss = ______f___14.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___14 != 0) {
    printk("<7>%s: %s - stop bits = 1\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_get_termios");
  } else {

  }
  goto ldv_22989;
  case 1U: 
  ______f___15.func = "cp2101_get_termios";
  ______f___15.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___15.line = 529U;
  ______f___15.ldv_814.ldv_809.correct = 0UL;
  ______f___15.ldv_814.ldv_809.incorrect = 0UL;
  ______r___15 = debug != 0;
  if (______r___15 != 0) {
    ______f___15.ldv_814.ldv_813.hit = ______f___15.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___15.ldv_814.ldv_813.miss = ______f___15.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___15 != 0) {
    printk("<7>%s: %s - stop bits = 1.5 (not supported, using 1 stop bit)\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_get_termios");
  } else {

  }
  bits = bits & 4294967280U;
  cp2101_set_config(port, 3, & bits, 2);
  goto ldv_22989;
  case 2U: 
  ______f___16.func = "cp2101_get_termios";
  ______f___16.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___16.line = 534U;
  ______f___16.ldv_814.ldv_809.correct = 0UL;
  ______f___16.ldv_814.ldv_809.incorrect = 0UL;
  ______r___16 = debug != 0;
  if (______r___16 != 0) {
    ______f___16.ldv_814.ldv_813.hit = ______f___16.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___16.ldv_814.ldv_813.miss = ______f___16.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___16 != 0) {
    printk("<7>%s: %s - stop bits = 2\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_get_termios");
  } else {

  }
  cflag = cflag | 64U;
  goto ldv_22989;
  default: 
  ______f___17.func = "cp2101_get_termios";
  ______f___17.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___17.line = 539U;
  ______f___17.ldv_814.ldv_809.correct = 0UL;
  ______f___17.ldv_814.ldv_809.incorrect = 0UL;
  ______r___17 = debug != 0;
  if (______r___17 != 0) {
    ______f___17.ldv_814.ldv_813.hit = ______f___17.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___17.ldv_814.ldv_813.miss = ______f___17.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___17 != 0) {
    printk("<7>%s: %s - Unknown number of stop bits, using 1 stop bit\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_get_termios");
  } else {

  }
  bits = bits & 4294967280U;
  cp2101_set_config(port, 3, & bits, 2);
  goto ldv_22989;
  }
  ldv_22989: 
  cp2101_get_config(port, 19, (unsigned int *)(& modem_ctl), 16);
  ______f___20.func = "cp2101_get_termios";
  ______f___20.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___20.line = 546U;
  ______f___20.ldv_814.ldv_809.correct = 0UL;
  ______f___20.ldv_814.ldv_809.incorrect = 0UL;
  ______r___20 = (modem_ctl[0] & 8U) != 0U;
  if (______r___20 != 0) {
    ______f___20.ldv_814.ldv_813.hit = ______f___20.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___20.ldv_814.ldv_813.miss = ______f___20.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___20 != 0) {
    ______f___18.func = "cp2101_get_termios";
    ______f___18.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
    ______f___18.line = 547U;
    ______f___18.ldv_814.ldv_809.correct = 0UL;
    ______f___18.ldv_814.ldv_809.incorrect = 0UL;
    ______r___18 = debug != 0;
    if (______r___18 != 0) {
      ______f___18.ldv_814.ldv_813.hit = ______f___18.ldv_814.ldv_813.hit + 1UL;
    } else {
      ______f___18.ldv_814.ldv_813.miss = ______f___18.ldv_814.ldv_813.miss + 1UL;
    }
    if (______r___18 != 0) {
      printk("<7>%s: %s - flow control = CRTSCTS\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
             "cp2101_get_termios");
    } else {

    }
    cflag = cflag | 2147483648U;
  } else {
    ______f___19.func = "cp2101_get_termios";
    ______f___19.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
    ______f___19.line = 550U;
    ______f___19.ldv_814.ldv_809.correct = 0UL;
    ______f___19.ldv_814.ldv_809.incorrect = 0UL;
    ______r___19 = debug != 0;
    if (______r___19 != 0) {
      ______f___19.ldv_814.ldv_813.hit = ______f___19.ldv_814.ldv_813.hit + 1UL;
    } else {
      ______f___19.ldv_814.ldv_813.miss = ______f___19.ldv_814.ldv_813.miss + 1UL;
    }
    if (______r___19 != 0) {
      printk("<7>%s: %s - flow control = NONE\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
             "cp2101_get_termios");
    } else {

    }
    cflag = cflag & 2147483647U;
  }
  (tty->termios)->c_cflag = cflag;
  return;
}
}
static void cp2101_set_termios(struct tty_struct *tty , struct usb_serial_port *port ,
                               struct ktermios *old_termios ) 
{ 
  unsigned int cflag ;
  unsigned int old_cflag ;
  unsigned int baud ;
  unsigned int bits ;
  unsigned int modem_ctl[4U] ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  speed_t tmp ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int tmp___0 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  speed_t tmp___1 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  int ______r___11 ;
  struct ftrace_branch_data ______f___11 ;
  int tmp___2 ;
  int ______r___12 ;
  struct ftrace_branch_data ______f___12 ;
  int ______r___13 ;
  struct ftrace_branch_data ______f___13 ;
  int ______r___14 ;
  struct ftrace_branch_data ______f___14 ;
  int ______r___15 ;
  struct ftrace_branch_data ______f___15 ;
  int ______r___16 ;
  struct ftrace_branch_data ______f___16 ;
  int ______r___17 ;
  struct ftrace_branch_data ______f___17 ;
  int ______r___18 ;
  struct ftrace_branch_data ______f___18 ;
  int tmp___3 ;
  int ______r___19 ;
  struct ftrace_branch_data ______f___19 ;
  int ______r___20 ;
  struct ftrace_branch_data ______f___20 ;
  int ______r___21 ;
  struct ftrace_branch_data ______f___21 ;
  int ______r___22 ;
  struct ftrace_branch_data ______f___22 ;
  int ______r___23 ;
  struct ftrace_branch_data ______f___23 ;
  int ______r___24 ;
  struct ftrace_branch_data ______f___24 ;
  int tmp___4 ;
  int ______r___25 ;
  struct ftrace_branch_data ______f___25 ;
  int ______r___26 ;
  struct ftrace_branch_data ______f___26 ;
  int ______r___27 ;
  struct ftrace_branch_data ______f___27 ;
  int ______r___28 ;
  struct ftrace_branch_data ______f___28 ;
  int ______r___29 ;
  struct ftrace_branch_data ______f___29 ;
  int ______r___30 ;
  struct ftrace_branch_data ______f___30 ;
  int ______r___31 ;
  struct ftrace_branch_data ______f___31 ;

  {
  baud = 0U;
  ______f.func = "cp2101_set_termios";
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f.line = 564U;
  ______f.ldv_814.ldv_809.correct = 0UL;
  ______f.ldv_814.ldv_809.incorrect = 0UL;
  ______r = debug != 0;
  if (______r != 0) {
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r != 0) {
    printk("<7>%s: %s - port %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_set_termios", (int )port->number);
  } else {

  }
  ______f___0.func = "cp2101_set_termios";
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___0.line = 566U;
  ______f___0.ldv_814.ldv_809.correct = 0UL;
  ______f___0.ldv_814.ldv_809.incorrect = 0UL;
  ______r___0 = (unsigned long )tty == (unsigned long )((struct tty_struct *)0);
  if (______r___0 != 0) {
    ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___0 != 0) {
    return;
  } else {

  }
  (tty->termios)->c_cflag = (tty->termios)->c_cflag & 3221225471U;
  cflag = (tty->termios)->c_cflag;
  old_cflag = old_termios->c_cflag;
  tmp = tty_get_baud_rate(tty);
  baud = cp2101_quantise_baudrate(tmp);
  ______f___4.func = "cp2101_set_termios";
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___4.line = 575U;
  ______f___4.ldv_814.ldv_809.correct = 0UL;
  ______f___4.ldv_814.ldv_809.incorrect = 0UL;
  tmp___1 = tty_termios_baud_rate(old_termios);
  ______r___4 = tmp___1 != baud && baud != 0U;
  if (______r___4 != 0) {
    ______f___4.ldv_814.ldv_813.hit = ______f___4.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___4.ldv_814.ldv_813.miss = ______f___4.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___4 != 0) {
    ______f___1.func = "cp2101_set_termios";
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
    ______f___1.line = 577U;
    ______f___1.ldv_814.ldv_809.correct = 0UL;
    ______f___1.ldv_814.ldv_809.incorrect = 0UL;
    ______r___1 = debug != 0;
    if (______r___1 != 0) {
      ______f___1.ldv_814.ldv_813.hit = ______f___1.ldv_814.ldv_813.hit + 1UL;
    } else {
      ______f___1.ldv_814.ldv_813.miss = ______f___1.ldv_814.ldv_813.miss + 1UL;
    }
    if (______r___1 != 0) {
      printk("<7>%s: %s - Setting baud rate to %d baud\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
             "cp2101_set_termios", baud);
    } else {

    }
    ______f___3.func = "cp2101_set_termios";
    ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
    ______f___3.line = 579U;
    ______f___3.ldv_814.ldv_809.correct = 0UL;
    ______f___3.ldv_814.ldv_809.incorrect = 0UL;
    tmp___0 = cp2101_set_config_single(port, 1, (baud / 2U + 3686400U) / baud);
    ______r___3 = tmp___0 != 0;
    if (______r___3 != 0) {
      ______f___3.ldv_814.ldv_813.hit = ______f___3.ldv_814.ldv_813.hit + 1UL;
    } else {
      ______f___3.ldv_814.ldv_813.miss = ______f___3.ldv_814.ldv_813.miss + 1UL;
    }
    if (______r___3 != 0) {
      ______f___2.func = "cp2101_set_termios";
      ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
      ______f___2.line = 580U;
      ______f___2.ldv_814.ldv_809.correct = 0UL;
      ______f___2.ldv_814.ldv_809.incorrect = 0UL;
      ______r___2 = debug != 0;
      if (______r___2 != 0) {
        ______f___2.ldv_814.ldv_813.hit = ______f___2.ldv_814.ldv_813.hit + 1UL;
      } else {
        ______f___2.ldv_814.ldv_813.miss = ______f___2.ldv_814.ldv_813.miss + 1UL;
      }
      if (______r___2 != 0) {
        printk("<7>%s: Baud rate requested not supported by device\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared");
      } else {

      }
      baud = tty_termios_baud_rate(old_termios);
    } else {

    }
  } else {

  }
  tty_encode_baud_rate(tty, baud, baud);
  ______f___12.func = "cp2101_set_termios";
  ______f___12.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___12.line = 588U;
  ______f___12.ldv_814.ldv_809.correct = 0UL;
  ______f___12.ldv_814.ldv_809.incorrect = 0UL;
  ______r___12 = ((cflag ^ old_cflag) & 48U) != 0U;
  if (______r___12 != 0) {
    ______f___12.ldv_814.ldv_813.hit = ______f___12.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___12.ldv_814.ldv_813.miss = ______f___12.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___12 != 0) {
    cp2101_get_config(port, 3, & bits, 2);
    bits = bits & 4294963455U;
    switch (cflag & 48U) {
    case 0U: 
    bits = bits | 1280U;
    ______f___5.func = "cp2101_set_termios";
    ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
    ______f___5.line = 594U;
    ______f___5.ldv_814.ldv_809.correct = 0UL;
    ______f___5.ldv_814.ldv_809.incorrect = 0UL;
    ______r___5 = debug != 0;
    if (______r___5 != 0) {
      ______f___5.ldv_814.ldv_813.hit = ______f___5.ldv_814.ldv_813.hit + 1UL;
    } else {
      ______f___5.ldv_814.ldv_813.miss = ______f___5.ldv_814.ldv_813.miss + 1UL;
    }
    if (______r___5 != 0) {
      printk("<7>%s: %s - data bits = 5\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
             "cp2101_set_termios");
    } else {

    }
    goto ldv_23047;
    case 16U: 
    bits = bits | 1536U;
    ______f___6.func = "cp2101_set_termios";
    ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
    ______f___6.line = 598U;
    ______f___6.ldv_814.ldv_809.correct = 0UL;
    ______f___6.ldv_814.ldv_809.incorrect = 0UL;
    ______r___6 = debug != 0;
    if (______r___6 != 0) {
      ______f___6.ldv_814.ldv_813.hit = ______f___6.ldv_814.ldv_813.hit + 1UL;
    } else {
      ______f___6.ldv_814.ldv_813.miss = ______f___6.ldv_814.ldv_813.miss + 1UL;
    }
    if (______r___6 != 0) {
      printk("<7>%s: %s - data bits = 6\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
             "cp2101_set_termios");
    } else {

    }
    goto ldv_23047;
    case 32U: 
    bits = bits | 1792U;
    ______f___7.func = "cp2101_set_termios";
    ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
    ______f___7.line = 602U;
    ______f___7.ldv_814.ldv_809.correct = 0UL;
    ______f___7.ldv_814.ldv_809.incorrect = 0UL;
    ______r___7 = debug != 0;
    if (______r___7 != 0) {
      ______f___7.ldv_814.ldv_813.hit = ______f___7.ldv_814.ldv_813.hit + 1UL;
    } else {
      ______f___7.ldv_814.ldv_813.miss = ______f___7.ldv_814.ldv_813.miss + 1UL;
    }
    if (______r___7 != 0) {
      printk("<7>%s: %s - data bits = 7\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
             "cp2101_set_termios");
    } else {

    }
    goto ldv_23047;
    case 48U: 
    bits = bits | 2048U;
    ______f___8.func = "cp2101_set_termios";
    ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
    ______f___8.line = 606U;
    ______f___8.ldv_814.ldv_809.correct = 0UL;
    ______f___8.ldv_814.ldv_809.incorrect = 0UL;
    ______r___8 = debug != 0;
    if (______r___8 != 0) {
      ______f___8.ldv_814.ldv_813.hit = ______f___8.ldv_814.ldv_813.hit + 1UL;
    } else {
      ______f___8.ldv_814.ldv_813.miss = ______f___8.ldv_814.ldv_813.miss + 1UL;
    }
    if (______r___8 != 0) {
      printk("<7>%s: %s - data bits = 8\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
             "cp2101_set_termios");
    } else {

    }
    goto ldv_23047;
    default: 
    ______f___9.func = "cp2101_set_termios";
    ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
    ______f___9.line = 615U;
    ______f___9.ldv_814.ldv_809.correct = 0UL;
    ______f___9.ldv_814.ldv_809.incorrect = 0UL;
    ______r___9 = debug != 0;
    if (______r___9 != 0) {
      ______f___9.ldv_814.ldv_813.hit = ______f___9.ldv_814.ldv_813.hit + 1UL;
    } else {
      ______f___9.ldv_814.ldv_813.miss = ______f___9.ldv_814.ldv_813.miss + 1UL;
    }
    if (______r___9 != 0) {
      printk("<7>%s: cp2101 driver does not support the number of bits requested, using 8 bit mode\n\n",
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared");
    } else {

    }
    bits = bits | 2048U;
    goto ldv_23047;
    }
    ldv_23047: 
    ______f___11.func = "cp2101_set_termios";
    ______f___11.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
    ______f___11.line = 619U;
    ______f___11.ldv_814.ldv_809.correct = 0UL;
    ______f___11.ldv_814.ldv_809.incorrect = 0UL;
    tmp___2 = cp2101_set_config(port, 3, & bits, 2);
    ______r___11 = tmp___2 != 0;
    if (______r___11 != 0) {
      ______f___11.ldv_814.ldv_813.hit = ______f___11.ldv_814.ldv_813.hit + 1UL;
    } else {
      ______f___11.ldv_814.ldv_813.miss = ______f___11.ldv_814.ldv_813.miss + 1UL;
    }
    if (______r___11 != 0) {
      ______f___10.func = "cp2101_set_termios";
      ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
      ______f___10.line = 621U;
      ______f___10.ldv_814.ldv_809.correct = 0UL;
      ______f___10.ldv_814.ldv_809.incorrect = 0UL;
      ______r___10 = debug != 0;
      if (______r___10 != 0) {
        ______f___10.ldv_814.ldv_813.hit = ______f___10.ldv_814.ldv_813.hit + 1UL;
      } else {
        ______f___10.ldv_814.ldv_813.miss = ______f___10.ldv_814.ldv_813.miss + 1UL;
      }
      if (______r___10 != 0) {
        printk("<7>%s: Number of data bits requested not supported by device\n\n",
               (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared");
      } else {

      }
    } else {

    }
  } else {

  }
  ______f___19.func = "cp2101_set_termios";
  ______f___19.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___19.line = 624U;
  ______f___19.ldv_814.ldv_809.correct = 0UL;
  ______f___19.ldv_814.ldv_809.incorrect = 0UL;
  ______r___19 = ((cflag ^ old_cflag) & 768U) != 0U;
  if (______r___19 != 0) {
    ______f___19.ldv_814.ldv_813.hit = ______f___19.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___19.ldv_814.ldv_813.miss = ______f___19.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___19 != 0) {
    cp2101_get_config(port, 3, & bits, 2);
    bits = bits & 4294967055U;
    ______f___16.func = "cp2101_set_termios";
    ______f___16.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
    ______f___16.line = 627U;
    ______f___16.ldv_814.ldv_809.correct = 0UL;
    ______f___16.ldv_814.ldv_809.incorrect = 0UL;
    ______r___16 = (cflag & 256U) != 0U;
    if (______r___16 != 0) {
      ______f___16.ldv_814.ldv_813.hit = ______f___16.ldv_814.ldv_813.hit + 1UL;
    } else {
      ______f___16.ldv_814.ldv_813.miss = ______f___16.ldv_814.ldv_813.miss + 1UL;
    }
    if (______r___16 != 0) {
      ______f___15.func = "cp2101_set_termios";
      ______f___15.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
      ______f___15.line = 628U;
      ______f___15.ldv_814.ldv_809.correct = 0UL;
      ______f___15.ldv_814.ldv_809.incorrect = 0UL;
      ______r___15 = (cflag & 512U) != 0U;
      if (______r___15 != 0) {
        ______f___15.ldv_814.ldv_813.hit = ______f___15.ldv_814.ldv_813.hit + 1UL;
      } else {
        ______f___15.ldv_814.ldv_813.miss = ______f___15.ldv_814.ldv_813.miss + 1UL;
      }
      if (______r___15 != 0) {
        bits = bits | 16U;
        ______f___13.func = "cp2101_set_termios";
        ______f___13.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
        ______f___13.line = 630U;
        ______f___13.ldv_814.ldv_809.correct = 0UL;
        ______f___13.ldv_814.ldv_809.incorrect = 0UL;
        ______r___13 = debug != 0;
        if (______r___13 != 0) {
          ______f___13.ldv_814.ldv_813.hit = ______f___13.ldv_814.ldv_813.hit + 1UL;
        } else {
          ______f___13.ldv_814.ldv_813.miss = ______f___13.ldv_814.ldv_813.miss + 1UL;
        }
        if (______r___13 != 0) {
          printk("<7>%s: %s - parity = ODD\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
                 "cp2101_set_termios");
        } else {

        }
      } else {
        bits = bits | 32U;
        ______f___14.func = "cp2101_set_termios";
        ______f___14.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
        ______f___14.line = 633U;
        ______f___14.ldv_814.ldv_809.correct = 0UL;
        ______f___14.ldv_814.ldv_809.incorrect = 0UL;
        ______r___14 = debug != 0;
        if (______r___14 != 0) {
          ______f___14.ldv_814.ldv_813.hit = ______f___14.ldv_814.ldv_813.hit + 1UL;
        } else {
          ______f___14.ldv_814.ldv_813.miss = ______f___14.ldv_814.ldv_813.miss + 1UL;
        }
        if (______r___14 != 0) {
          printk("<7>%s: %s - parity = EVEN\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
                 "cp2101_set_termios");
        } else {

        }
      }
    } else {

    }
    ______f___18.func = "cp2101_set_termios";
    ______f___18.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
    ______f___18.line = 636U;
    ______f___18.ldv_814.ldv_809.correct = 0UL;
    ______f___18.ldv_814.ldv_809.incorrect = 0UL;
    tmp___3 = cp2101_set_config(port, 3, & bits, 2);
    ______r___18 = tmp___3 != 0;
    if (______r___18 != 0) {
      ______f___18.ldv_814.ldv_813.hit = ______f___18.ldv_814.ldv_813.hit + 1UL;
    } else {
      ______f___18.ldv_814.ldv_813.miss = ______f___18.ldv_814.ldv_813.miss + 1UL;
    }
    if (______r___18 != 0) {
      ______f___17.func = "cp2101_set_termios";
      ______f___17.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
      ______f___17.line = 638U;
      ______f___17.ldv_814.ldv_809.correct = 0UL;
      ______f___17.ldv_814.ldv_809.incorrect = 0UL;
      ______r___17 = debug != 0;
      if (______r___17 != 0) {
        ______f___17.ldv_814.ldv_813.hit = ______f___17.ldv_814.ldv_813.hit + 1UL;
      } else {
        ______f___17.ldv_814.ldv_813.miss = ______f___17.ldv_814.ldv_813.miss + 1UL;
      }
      if (______r___17 != 0) {
        printk("<7>%s: Parity mode not supported by device\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared");
      } else {

      }
    } else {

    }
  } else {

  }
  ______f___25.func = "cp2101_set_termios";
  ______f___25.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___25.line = 641U;
  ______f___25.ldv_814.ldv_809.correct = 0UL;
  ______f___25.ldv_814.ldv_809.incorrect = 0UL;
  ______r___25 = ((cflag ^ old_cflag) & 64U) != 0U;
  if (______r___25 != 0) {
    ______f___25.ldv_814.ldv_813.hit = ______f___25.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___25.ldv_814.ldv_813.miss = ______f___25.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___25 != 0) {
    cp2101_get_config(port, 3, & bits, 2);
    bits = bits & 4294967280U;
    ______f___22.func = "cp2101_set_termios";
    ______f___22.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
    ______f___22.line = 644U;
    ______f___22.ldv_814.ldv_809.correct = 0UL;
    ______f___22.ldv_814.ldv_809.incorrect = 0UL;
    ______r___22 = (cflag & 64U) != 0U;
    if (______r___22 != 0) {
      ______f___22.ldv_814.ldv_813.hit = ______f___22.ldv_814.ldv_813.hit + 1UL;
    } else {
      ______f___22.ldv_814.ldv_813.miss = ______f___22.ldv_814.ldv_813.miss + 1UL;
    }
    if (______r___22 != 0) {
      bits = bits | 2U;
      ______f___20.func = "cp2101_set_termios";
      ______f___20.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
      ______f___20.line = 646U;
      ______f___20.ldv_814.ldv_809.correct = 0UL;
      ______f___20.ldv_814.ldv_809.incorrect = 0UL;
      ______r___20 = debug != 0;
      if (______r___20 != 0) {
        ______f___20.ldv_814.ldv_813.hit = ______f___20.ldv_814.ldv_813.hit + 1UL;
      } else {
        ______f___20.ldv_814.ldv_813.miss = ______f___20.ldv_814.ldv_813.miss + 1UL;
      }
      if (______r___20 != 0) {
        printk("<7>%s: %s - stop bits = 2\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
               "cp2101_set_termios");
      } else {

      }
    } else {
      bits = bits;
      ______f___21.func = "cp2101_set_termios";
      ______f___21.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
      ______f___21.line = 649U;
      ______f___21.ldv_814.ldv_809.correct = 0UL;
      ______f___21.ldv_814.ldv_809.incorrect = 0UL;
      ______r___21 = debug != 0;
      if (______r___21 != 0) {
        ______f___21.ldv_814.ldv_813.hit = ______f___21.ldv_814.ldv_813.hit + 1UL;
      } else {
        ______f___21.ldv_814.ldv_813.miss = ______f___21.ldv_814.ldv_813.miss + 1UL;
      }
      if (______r___21 != 0) {
        printk("<7>%s: %s - stop bits = 1\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
               "cp2101_set_termios");
      } else {

      }
    }
    ______f___24.func = "cp2101_set_termios";
    ______f___24.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
    ______f___24.line = 651U;
    ______f___24.ldv_814.ldv_809.correct = 0UL;
    ______f___24.ldv_814.ldv_809.incorrect = 0UL;
    tmp___4 = cp2101_set_config(port, 3, & bits, 2);
    ______r___24 = tmp___4 != 0;
    if (______r___24 != 0) {
      ______f___24.ldv_814.ldv_813.hit = ______f___24.ldv_814.ldv_813.hit + 1UL;
    } else {
      ______f___24.ldv_814.ldv_813.miss = ______f___24.ldv_814.ldv_813.miss + 1UL;
    }
    if (______r___24 != 0) {
      ______f___23.func = "cp2101_set_termios";
      ______f___23.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
      ______f___23.line = 653U;
      ______f___23.ldv_814.ldv_809.correct = 0UL;
      ______f___23.ldv_814.ldv_809.incorrect = 0UL;
      ______r___23 = debug != 0;
      if (______r___23 != 0) {
        ______f___23.ldv_814.ldv_813.hit = ______f___23.ldv_814.ldv_813.hit + 1UL;
      } else {
        ______f___23.ldv_814.ldv_813.miss = ______f___23.ldv_814.ldv_813.miss + 1UL;
      }
      if (______r___23 != 0) {
        printk("<7>%s: Number of stop bits requested not supported by device\n\n",
               (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared");
      } else {

      }
    } else {

    }
  } else {

  }
  ______f___31.func = "cp2101_set_termios";
  ______f___31.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___31.line = 656U;
  ______f___31.ldv_814.ldv_809.correct = 0UL;
  ______f___31.ldv_814.ldv_809.incorrect = 0UL;
  ______r___31 = (int )(cflag ^ old_cflag) < 0;
  if (______r___31 != 0) {
    ______f___31.ldv_814.ldv_813.hit = ______f___31.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___31.ldv_814.ldv_813.miss = ______f___31.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___31 != 0) {
    cp2101_get_config(port, 19, (unsigned int *)(& modem_ctl), 16);
    ______f___26.func = "cp2101_set_termios";
    ______f___26.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
    ______f___26.line = 660U;
    ______f___26.ldv_814.ldv_809.correct = 0UL;
    ______f___26.ldv_814.ldv_809.incorrect = 0UL;
    ______r___26 = debug != 0;
    if (______r___26 != 0) {
      ______f___26.ldv_814.ldv_813.hit = ______f___26.ldv_814.ldv_813.hit + 1UL;
    } else {
      ______f___26.ldv_814.ldv_813.miss = ______f___26.ldv_814.ldv_813.miss + 1UL;
    }
    if (______r___26 != 0) {
      printk("<7>%s: %s - read modem controls = 0x%.4x 0x%.4x 0x%.4x 0x%.4x\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
             "cp2101_set_termios", modem_ctl[0], modem_ctl[1], modem_ctl[2], modem_ctl[3]);
    } else {

    }
    ______f___29.func = "cp2101_set_termios";
    ______f___29.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
    ______f___29.line = 662U;
    ______f___29.ldv_814.ldv_809.correct = 0UL;
    ______f___29.ldv_814.ldv_809.incorrect = 0UL;
    ______r___29 = (int )cflag < 0;
    if (______r___29 != 0) {
      ______f___29.ldv_814.ldv_813.hit = ______f___29.ldv_814.ldv_813.hit + 1UL;
    } else {
      ______f___29.ldv_814.ldv_813.miss = ______f___29.ldv_814.ldv_813.miss + 1UL;
    }
    if (______r___29 != 0) {
      modem_ctl[0] = modem_ctl[0] & 4294967172U;
      modem_ctl[0] = modem_ctl[0] | 9U;
      modem_ctl[1] = 128U;
      ______f___27.func = "cp2101_set_termios";
      ______f___27.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
      ______f___27.line = 666U;
      ______f___27.ldv_814.ldv_809.correct = 0UL;
      ______f___27.ldv_814.ldv_809.incorrect = 0UL;
      ______r___27 = debug != 0;
      if (______r___27 != 0) {
        ______f___27.ldv_814.ldv_813.hit = ______f___27.ldv_814.ldv_813.hit + 1UL;
      } else {
        ______f___27.ldv_814.ldv_813.miss = ______f___27.ldv_814.ldv_813.miss + 1UL;
      }
      if (______r___27 != 0) {
        printk("<7>%s: %s - flow control = CRTSCTS\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
               "cp2101_set_termios");
      } else {

      }
    } else {
      modem_ctl[0] = modem_ctl[0] & 4294967172U;
      modem_ctl[0] = modem_ctl[0] | 1U;
      modem_ctl[1] = modem_ctl[1] | 64U;
      ______f___28.func = "cp2101_set_termios";
      ______f___28.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
      ______f___28.line = 671U;
      ______f___28.ldv_814.ldv_809.correct = 0UL;
      ______f___28.ldv_814.ldv_809.incorrect = 0UL;
      ______r___28 = debug != 0;
      if (______r___28 != 0) {
        ______f___28.ldv_814.ldv_813.hit = ______f___28.ldv_814.ldv_813.hit + 1UL;
      } else {
        ______f___28.ldv_814.ldv_813.miss = ______f___28.ldv_814.ldv_813.miss + 1UL;
      }
      if (______r___28 != 0) {
        printk("<7>%s: %s - flow control = NONE\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
               "cp2101_set_termios");
      } else {

      }
    }
    ______f___30.func = "cp2101_set_termios";
    ______f___30.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
    ______f___30.line = 676U;
    ______f___30.ldv_814.ldv_809.correct = 0UL;
    ______f___30.ldv_814.ldv_809.incorrect = 0UL;
    ______r___30 = debug != 0;
    if (______r___30 != 0) {
      ______f___30.ldv_814.ldv_813.hit = ______f___30.ldv_814.ldv_813.hit + 1UL;
    } else {
      ______f___30.ldv_814.ldv_813.miss = ______f___30.ldv_814.ldv_813.miss + 1UL;
    }
    if (______r___30 != 0) {
      printk("<7>%s: %s - write modem controls = 0x%.4x 0x%.4x 0x%.4x 0x%.4x\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
             "cp2101_set_termios", modem_ctl[0], modem_ctl[1], modem_ctl[2], modem_ctl[3]);
    } else {

    }
    cp2101_set_config(port, 19, (unsigned int *)(& modem_ctl), 16);
  } else {

  }
  return;
}
}
static int cp2101_tiocmset(struct tty_struct *tty , struct file *file , unsigned int set ,
                           unsigned int clear ) 
{ 
  struct usb_serial_port *port ;
  unsigned int control ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int tmp ;

  {
  port = (struct usb_serial_port *)tty->driver_data;
  control = 0U;
  ______f.func = "cp2101_tiocmset";
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f.line = 688U;
  ______f.ldv_814.ldv_809.correct = 0UL;
  ______f.ldv_814.ldv_809.incorrect = 0UL;
  ______r = debug != 0;
  if (______r != 0) {
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r != 0) {
    printk("<7>%s: %s - port %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_tiocmset", (int )port->number);
  } else {

  }
  ______f___0.func = "cp2101_tiocmset";
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___0.line = 690U;
  ______f___0.ldv_814.ldv_809.correct = 0UL;
  ______f___0.ldv_814.ldv_809.incorrect = 0UL;
  ______r___0 = (set & 4U) != 0U;
  if (______r___0 != 0) {
    ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___0 != 0) {
    control = control | 2U;
    control = control | 512U;
  } else {

  }
  ______f___1.func = "cp2101_tiocmset";
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___1.line = 694U;
  ______f___1.ldv_814.ldv_809.correct = 0UL;
  ______f___1.ldv_814.ldv_809.incorrect = 0UL;
  ______r___1 = (set & 2U) != 0U;
  if (______r___1 != 0) {
    ______f___1.ldv_814.ldv_813.hit = ______f___1.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___1.ldv_814.ldv_813.miss = ______f___1.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___1 != 0) {
    control = control | 1U;
    control = control | 256U;
  } else {

  }
  ______f___2.func = "cp2101_tiocmset";
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___2.line = 698U;
  ______f___2.ldv_814.ldv_809.correct = 0UL;
  ______f___2.ldv_814.ldv_809.incorrect = 0UL;
  ______r___2 = (clear & 4U) != 0U;
  if (______r___2 != 0) {
    ______f___2.ldv_814.ldv_813.hit = ______f___2.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___2.ldv_814.ldv_813.miss = ______f___2.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___2 != 0) {
    control = control & 4294967293U;
    control = control | 512U;
  } else {

  }
  ______f___3.func = "cp2101_tiocmset";
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___3.line = 702U;
  ______f___3.ldv_814.ldv_809.correct = 0UL;
  ______f___3.ldv_814.ldv_809.incorrect = 0UL;
  ______r___3 = (clear & 2U) != 0U;
  if (______r___3 != 0) {
    ______f___3.ldv_814.ldv_813.hit = ______f___3.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___3.ldv_814.ldv_813.miss = ______f___3.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___3 != 0) {
    control = control & 4294967294U;
    control = control | 256U;
  } else {

  }
  ______f___4.func = "cp2101_tiocmset";
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___4.line = 707U;
  ______f___4.ldv_814.ldv_809.correct = 0UL;
  ______f___4.ldv_814.ldv_809.incorrect = 0UL;
  ______r___4 = debug != 0;
  if (______r___4 != 0) {
    ______f___4.ldv_814.ldv_813.hit = ______f___4.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___4.ldv_814.ldv_813.miss = ______f___4.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___4 != 0) {
    printk("<7>%s: %s - control = 0x%.4x\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_tiocmset", control);
  } else {

  }
  tmp = cp2101_set_config(port, 7, & control, 2);
  return (tmp);
}
}
static int cp2101_tiocmget(struct tty_struct *tty , struct file *file ) 
{ 
  struct usb_serial_port *port ;
  unsigned int control ;
  int result ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
  port = (struct usb_serial_port *)tty->driver_data;
  ______f.func = "cp2101_tiocmget";
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f.line = 719U;
  ______f.ldv_814.ldv_809.correct = 0UL;
  ______f.ldv_814.ldv_809.incorrect = 0UL;
  ______r = debug != 0;
  if (______r != 0) {
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r != 0) {
    printk("<7>%s: %s - port %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_tiocmget", (int )port->number);
  } else {

  }
  cp2101_get_config(port, 7, & control, 1);
  result = ((((((int )control & 1 ? 2 : 0) | ((control & 2U) != 0U ? 4 : 0)) | ((control & 16U) != 0U ? 32 : 0)) | ((control & 32U) != 0U ? 256 : 0)) | ((control & 64U) != 0U ? 128 : 0)) | ((control & 128U) != 0U ? 64 : 0);
  ______f___0.func = "cp2101_tiocmget";
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___0.line = 730U;
  ______f___0.ldv_814.ldv_809.correct = 0UL;
  ______f___0.ldv_814.ldv_809.incorrect = 0UL;
  ______r___0 = debug != 0;
  if (______r___0 != 0) {
    ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___0 != 0) {
    printk("<7>%s: %s - control = 0x%.2x\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_tiocmget", control);
  } else {

  }
  return (result);
}
}
static void cp2101_break_ctl(struct tty_struct *tty , int break_state ) 
{ 
  struct usb_serial_port *port ;
  unsigned int state ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;

  {
  port = (struct usb_serial_port *)tty->driver_data;
  ______f.func = "cp2101_break_ctl";
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f.line = 740U;
  ______f.ldv_814.ldv_809.correct = 0UL;
  ______f.ldv_814.ldv_809.incorrect = 0UL;
  ______r = debug != 0;
  if (______r != 0) {
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r != 0) {
    printk("<7>%s: %s - port %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_break_ctl", (int )port->number);
  } else {

  }
  ______f___0.func = "cp2101_break_ctl";
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___0.line = 741U;
  ______f___0.ldv_814.ldv_809.correct = 0UL;
  ______f___0.ldv_814.ldv_809.incorrect = 0UL;
  ______r___0 = break_state == 0;
  if (______r___0 != 0) {
    ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___0 != 0) {
    state = 1U;
  } else {
    state = 0U;
  }
  ______f___1.func = "cp2101_break_ctl";
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___1.line = 746U;
  ______f___1.ldv_814.ldv_809.correct = 0UL;
  ______f___1.ldv_814.ldv_809.incorrect = 0UL;
  ______r___1 = debug != 0;
  if (______r___1 != 0) {
    ______f___1.ldv_814.ldv_813.hit = ______f___1.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___1.ldv_814.ldv_813.miss = ______f___1.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___1 != 0) {
    printk("<7>%s: %s - turning break %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_break_ctl", state == 1U ? (char *)"off" : (char *)"on");
  } else {

  }
  cp2101_set_config(port, 5, & state, 2);
  return;
}
}
static int cp2101_startup(struct usb_serial *serial ) 
{ 


  {
  usb_reset_device(serial->dev);
  return (0);
}
}
static void cp2101_shutdown(struct usb_serial *serial ) 
{ 
  int i ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
  ______f.func = "cp2101_shutdown";
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f.line = 761U;
  ______f.ldv_814.ldv_809.correct = 0UL;
  ______f.ldv_814.ldv_809.incorrect = 0UL;
  ______r = debug != 0;
  if (______r != 0) {
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r != 0) {
    printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared",
           "cp2101_shutdown");
  } else {

  }
  i = 0;
  goto ldv_23196;
  ldv_23195: 
  cp2101_cleanup(serial->port[i]);
  i = i + 1;
  ldv_23196: ;
  if ((int )serial->num_ports > i) {
    goto ldv_23195;
  } else {

  }

  return;
}
}
static int cp2101_init(void) 
{ 
  int retval ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
  retval = usb_serial_register(& cp2101_device);
  ______f.func = "cp2101_init";
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f.line = 773U;
  ______f.ldv_814.ldv_809.correct = 0UL;
  ______f.ldv_814.ldv_809.incorrect = 0UL;
  ______r = retval != 0;
  if (______r != 0) {
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r != 0) {
    return (retval);
  } else {

  }
  retval = usb_register(& cp2101_driver);
  ______f___0.func = "cp2101_init";
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___0.line = 777U;
  ______f___0.ldv_814.ldv_809.correct = 0UL;
  ______f___0.ldv_814.ldv_809.incorrect = 0UL;
  ______r___0 = retval != 0;
  if (______r___0 != 0) {
    ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___0 != 0) {
    usb_serial_deregister(& cp2101_device);
    return (retval);
  } else {

  }
  printk("<6>cp210x: v0.08:Silicon Labs CP2101/CP2102 RS232 serial adaptor driver\n");
  return (0);
}
}
static void cp2101_exit(void) 
{ 


  {
  usb_deregister(& cp2101_driver);
  usb_serial_deregister(& cp2101_device);
  return;
}
}
extern void ldv_check_final_state(void) ;
extern void ldv_check_return_value(int  ) ;
extern void ldv_initialize(void) ;
extern void ldv_handler_precall(void) ;
extern int nondet_int(void) ;
int LDV_IN_INTERRUPT  ;
int main(void) 
{ 
  struct tty_struct *var_group1 ;
  struct usb_serial_port *var_group2 ;
  struct file *var_cp2101_open_4_p2 ;
  int res_cp2101_open_4 ;
  struct file *var_cp2101_close_6_p2 ;
  int var_cp2101_break_ctl_11_p1 ;
  struct ktermios *var_cp2101_set_termios_8_p2 ;
  struct file *var_group3 ;
  unsigned int var_cp2101_tiocmset_9_p2 ;
  unsigned int var_cp2101_tiocmset_9_p3 ;
  struct usb_serial *var_group4 ;
  int ldv_s_cp2101_device_usb_serial_driver ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int tmp___0 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int tmp___1 ;

  {
  ldv_s_cp2101_device_usb_serial_driver = 0;
  LDV_IN_INTERRUPT = 1;
  ldv_initialize();
  ldv_handler_precall();
  ______f.func = "main";
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f.line = 1279U;
  ______f.ldv_814.ldv_809.correct = 0UL;
  ______f.ldv_814.ldv_809.incorrect = 0UL;
  tmp = cp2101_init();
  ______r = tmp != 0;
  if (______r != 0) {
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r != 0) {
    goto ldv_final;
  } else {

  }
  goto ldv_23287;
  ldv_23286: 
  tmp___0 = nondet_int();
  switch (tmp___0) {
  case 0: 
  ______f___1.func = "main";
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___1.line = 1294U;
  ______f___1.ldv_814.ldv_809.correct = 0UL;
  ______f___1.ldv_814.ldv_809.incorrect = 0UL;
  ______r___1 = ldv_s_cp2101_device_usb_serial_driver == 0;
  if (______r___1 != 0) {
    ______f___1.ldv_814.ldv_813.hit = ______f___1.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___1.ldv_814.ldv_813.miss = ______f___1.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___1 != 0) {
    ldv_handler_precall();
    res_cp2101_open_4 = cp2101_open(var_group1, var_group2, var_cp2101_open_4_p2);
    ldv_check_return_value(res_cp2101_open_4);
    ______f___0.func = "main";
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
    ______f___0.line = 1343U;
    ______f___0.ldv_814.ldv_809.correct = 0UL;
    ______f___0.ldv_814.ldv_809.incorrect = 0UL;
    ______r___0 = res_cp2101_open_4 != 0;
    if (______r___0 != 0) {
      ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
    } else {
      ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
    }
    if (______r___0 != 0) {
      goto ldv_module_exit;
    } else {

    }
    ldv_s_cp2101_device_usb_serial_driver = ldv_s_cp2101_device_usb_serial_driver + 1;
  } else {

  }
  goto ldv_23274;
  case 1: 
  ______f___2.func = "main";
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/cp210x.c.prepared";
  ______f___2.line = 1355U;
  ______f___2.ldv_814.ldv_809.correct = 0UL;
  ______f___2.ldv_814.ldv_809.incorrect = 0UL;
  ______r___2 = ldv_s_cp2101_device_usb_serial_driver == 1;
  if (______r___2 != 0) {
    ______f___2.ldv_814.ldv_813.hit = ______f___2.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___2.ldv_814.ldv_813.miss = ______f___2.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r___2 != 0) {
    ldv_handler_precall();
    cp2101_close(var_group1, var_group2, var_cp2101_close_6_p2);
    ldv_s_cp2101_device_usb_serial_driver = 0;
  } else {

  }
  goto ldv_23274;
  case 2: 
  ldv_handler_precall();
  cp2101_break_ctl(var_group1, var_cp2101_break_ctl_11_p1);
  goto ldv_23274;
  case 3: 
  ldv_handler_precall();
  cp2101_set_termios(var_group1, var_group2, var_cp2101_set_termios_8_p2);
  goto ldv_23274;
  case 4: 
  ldv_handler_precall();
  cp2101_tiocmget(var_group1, var_group3);
  goto ldv_23274;
  case 5: 
  ldv_handler_precall();
  cp2101_tiocmset(var_group1, var_group3, var_cp2101_tiocmset_9_p2, var_cp2101_tiocmset_9_p3);
  goto ldv_23274;
  case 6: 
  ldv_handler_precall();
  cp2101_startup(var_group4);
  goto ldv_23274;
  case 7: 
  ldv_handler_precall();
  cp2101_shutdown(var_group4);
  goto ldv_23274;
  default: ;
  goto ldv_23274;
  }
  ldv_23274: ;
  ldv_23287: 
  tmp___1 = nondet_int();
  if (tmp___1 != 0 || ldv_s_cp2101_device_usb_serial_driver != 0) {
    goto ldv_23286;
  } else {

  }

  ldv_module_exit: 
  ldv_handler_precall();
  cp2101_exit();
  ldv_final: 
  ldv_check_final_state();
  return 0;
}
}
unsigned long ldv___get_free_pages_2(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) 
{ 
  unsigned long tmp ;

  {
  ldv_check_alloc_flags(ldv_func_arg1);
  tmp = __get_free_pages(ldv_func_arg1, ldv_func_arg2);
  return (tmp);
}
}
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 


  {
  ldv_check_alloc_flags(flags);
  ldv_kmalloc_3(size, flags);
  return ((void *)0);
}
}
void *ldv_kmem_cache_alloc_4(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 


  {
  ldv_check_alloc_flags(ldv_func_arg2);
  kmem_cache_alloc(ldv_func_arg1, ldv_func_arg2);
  return ((void *)0);
}
}
__inline static void *kcalloc(size_t n , size_t size , gfp_t flags ) 
{ 


  {
  ldv_check_alloc_flags(flags);
  ldv_kcalloc_6(n, size, flags);
  return ((void *)0);
}
}
void *ldv_kmem_cache_alloc_8(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 


  {
  ldv_check_alloc_flags(ldv_func_arg2);
  kmem_cache_alloc(ldv_func_arg1, ldv_func_arg2);
  return ((void *)0);
}
}
int ldv_usb_submit_urb_11(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  int tmp ;

  {
  ldv_check_alloc_flags(ldv_func_arg2);
  tmp = usb_submit_urb(ldv_func_arg1, ldv_func_arg2);
  return (tmp);
}
}
long ldv__builtin_expect(long exp , long c ) ;
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: __VERIFIER_error();
}
}
extern int ldv_undef_int(void) ;
long ldv__builtin_expect(long exp , long c ) 
{ 


  {
  return (exp);
}
}
int ldv_spin  =    LDV_SPIN_UNLOCKED;
void ldv_check_alloc_flags(gfp_t flags ) 
{ 


  {
  if (ldv_spin == LDV_SPIN_UNLOCKED || flags == 32U) {

  } else {
    ldv_error();
  }
  return;
}
}
extern struct page *ldv_some_page(void) ;
struct page *ldv_check_alloc_flags_and_return_some_page(gfp_t flags ) 
{ 
  struct page *tmp ;

  {
  if (ldv_spin == LDV_SPIN_UNLOCKED || flags == 32U) {

  } else {
    ldv_error();
  }
  tmp = ldv_some_page();
  return (tmp);
}
}
void ldv_check_alloc_nonatomic(void) 
{ 


  {
  if (ldv_spin == LDV_SPIN_UNLOCKED) {

  } else {
    ldv_error();
  }
  return;
}
}
void ldv_spin_lock(void) 
{ 


  {
  ldv_spin = LDV_SPIN_LOCKED;
  return;
}
}
void ldv_spin_unlock(void) 
{ 


  {
  ldv_spin = LDV_SPIN_UNLOCKED;
  return;
}
}
int ldv_spin_trylock(void) ;
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___666  __attribute__((__section__("_ftrace_branch")))  =    {"ldv_spin_trylock",
    "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c",
    71, {{0UL, 0UL}}};
int ldv_spin_trylock(void) 
{ 
  int is_lock ;
  int ______r ;

  {
  is_lock = ldv_undef_int();
  ______r = ! (! is_lock);
  if (______r) {
    ______f___666.ldv_814.ldv_813.hit = ______f___666.ldv_814.ldv_813.hit + 1UL;
  } else {
    ______f___666.ldv_814.ldv_813.miss = ______f___666.ldv_814.ldv_813.miss + 1UL;
  }
  if (______r) {
    return (0);
  } else {
    ldv_spin = LDV_SPIN_LOCKED;
    return (1);
  }
}
}
